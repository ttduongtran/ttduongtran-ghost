'use strict';



;define("ghost-admin/adapters/-json-api", ["exports", "@ember-data/adapter/json-api"], function (_exports, _jsonApi) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _jsonApi.default;
    }
  });
});
;define("ghost-admin/adapters/application", ["exports", "ghost-admin/adapters/embedded-relation-adapter"], function (_exports, _embeddedRelationAdapter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _embeddedRelationAdapter.default.extend({
    shouldBackgroundReloadRecord() {
      return false;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/adapters/base", ["exports", "ember-ajax/mixins/ajax-support", "ember-simple-auth/mixins/data-adapter-mixin", "@ember-data/adapter/rest", "ghost-admin/utils/ghost-paths"], function (_exports, _ajaxSupport, _dataAdapterMixin, _rest, _ghostPaths) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _rest.default.extend(_dataAdapterMixin.default, _ajaxSupport.default, {
    host: window.location.origin,
    namespace: (0, _ghostPaths.default)().apiRoot.slice(1),
    session: Ember.inject.service(),

    shouldBackgroundReloadRecord() {
      return false;
    },

    query(store, type, query) {
      let id;

      if (query.id) {
        id = query.id;
        delete query.id;
      }

      return this.ajax(this.buildURL(type.modelName, id), 'GET', {
        data: query
      });
    },

    buildURL() {
      // Ensure trailing slashes
      let url = this._super(...arguments);

      if (url.slice(-1) !== '/') {
        url += '/';
      }

      return url;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/adapters/email", ["exports", "ghost-admin/adapters/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    retry(model) {
      let url = "".concat(this.buildURL('email', model.get('id')), "retry/");
      return this.ajax(url, 'PUT', {
        data: {}
      }).then(data => {
        this.store.pushPayload(data);
        return model;
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/adapters/embedded-relation-adapter", ["exports", "ghost-admin/adapters/base"], function (_exports, _base) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  // EmbeddedRelationAdapter will augment the query object in calls made to
  // DS.Store#findRecord, findAll, query, and queryRecord with the correct "includes"
  // (?include=relatedType) by introspecting on the provided subclass of the DS.Model.
  // In cases where there is no query object (DS.Model#save, or simple finds) the URL
  // that is built will be augmented with ?include=... where appropriate.
  //
  // Example:
  // If a model has an embedded hasMany relation, the related type will be included:
  // roles: DS.hasMany('role', { embedded: 'always' }) => ?include=roles
  var _default = _base.default.extend({
    find(store, type, id, snapshot) {
      return this.ajax(this.buildIncludeURL(store, type.modelName, id, snapshot, 'find'), 'GET');
    },

    findRecord(store, type, id, snapshot) {
      return this.ajax(this.buildIncludeURL(store, type.modelName, id, snapshot, 'findRecord'), 'GET');
    },

    findAll(store, type, sinceToken) {
      let query, url;

      if (sinceToken) {
        query = {
          since: sinceToken
        };
      }

      url = this.buildIncludeURL(store, type.modelName, null, null, 'findAll');
      return this.ajax(url, 'GET', {
        data: query
      });
    },

    query(store, type, query) {
      return this._super(store, type, this.buildQuery(store, type.modelName, query));
    },

    queryRecord(store, type, query) {
      return this._super(store, type, this.buildQuery(store, type.modelName, query));
    },

    createRecord(store, type, snapshot) {
      return this.saveRecord(store, type, snapshot, {
        method: 'POST'
      }, 'createRecord');
    },

    updateRecord(store, type, snapshot) {
      let options = {
        method: 'PUT',
        id: Ember.get(snapshot, 'id')
      };
      return this.saveRecord(store, type, snapshot, options, 'updateRecord');
    },

    saveRecord(store, type, snapshot, options, requestType) {
      let _options = options || {};

      let url = this.buildIncludeURL(store, type.modelName, _options.id, snapshot, requestType);
      let payload = this.preparePayload(store, type, snapshot);
      return this.ajax(url, _options.method, payload);
    },

    preparePayload(store, type, snapshot) {
      let serializer = store.serializerFor(type.modelName);
      let payload = {};
      serializer.serializeIntoHash(payload, type, snapshot);
      return {
        data: payload
      };
    },

    buildIncludeURL(store, modelName, id, snapshot, requestType, query) {
      let includes = this.getEmbeddedRelations(store, modelName);
      let url = this.buildURL(modelName, id, snapshot, requestType, query);
      let parsedUrl = new URL(url);

      if (includes.length) {
        parsedUrl.searchParams.append('include', includes.map(Ember.String.underscore).join(','));
      }

      return parsedUrl.toString();
    },

    buildQuery(store, modelName, options) {
      let deDupe = {};
      let toInclude = this.getEmbeddedRelations(store, modelName);
      let query = options || {};

      if (toInclude.length) {
        // If this is a find by id, build a query object and attach the includes
        if (typeof options === 'string' || typeof options === 'number') {
          query = {};
          query.id = options;
          query.include = toInclude.map(Ember.String.underscore).join(',');
        } else if (typeof options === 'object' || Ember.isNone(options)) {
          // If this is a find all (no existing query object) build one and attach
          // the includes.
          // If this is a find with an existing query object then merge the includes
          // into the existing object. Existing properties and includes are preserved.
          query = query || {};
          toInclude = toInclude.concat(query.include ? query.include.split(',') : []);
          toInclude.forEach(include => {
            deDupe[include] = true;
          });
          query.include = Object.keys(deDupe).join(',');
        }
      }

      return query;
    },

    getEmbeddedRelations(store, modelName) {
      let model = store.modelFor(modelName);
      let ret = [];
      let embedded = []; // Iterate through the model's relationships and build a list
      // of those that need to be pulled in via "include" from the API

      model.eachRelationship((name, meta) => {
        if (meta.kind === 'hasMany' && Object.prototype.hasOwnProperty.call(meta.options, 'embedded') && meta.options.embedded === 'always') {
          ret.push(name);
          embedded.push([name, meta.type]);
        }
      });
      embedded.forEach(([relName, modelName]) => {
        this.getEmbeddedRelations(store, modelName).forEach(name => {
          ret.push("".concat(relName, ".").concat(name));
        });
      });
      return ret;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/adapters/label", ["exports", "ghost-admin/adapters/application", "ghost-admin/mixins/slug-url"], function (_exports, _application, _slugUrl) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend(_slugUrl.default);

  _exports.default = _default;
});
;define("ghost-admin/adapters/page", ["exports", "ghost-admin/adapters/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    // posts and pages now include everything by default
    buildIncludeURL(store, modelName, id, snapshot, requestType, query) {
      return this.buildURL(modelName, id, snapshot, requestType, query);
    },

    buildQuery(store, modelName, options) {
      return options;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/adapters/post", ["exports", "ghost-admin/adapters/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    // posts and pages now include everything by default
    buildIncludeURL(store, modelName, id, snapshot, requestType, query) {
      let url = this.buildURL(modelName, id, snapshot, requestType, query);
      let parsedUrl = new URL(url);

      if (snapshot && snapshot.adapterOptions && snapshot.adapterOptions.sendEmailWhenPublished) {
        parsedUrl.searchParams.append('send_email_when_published', 'true');
      }

      return parsedUrl.toString();
    },

    buildQuery(store, modelName, options) {
      return options;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/adapters/setting", ["exports", "ghost-admin/adapters/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    updateRecord(store, type, record) {
      let data = {};
      let serializer = store.serializerFor(type.modelName); // remove the fake id that we added onto the model.

      delete record.id; // use the SettingSerializer to transform the model back into
      // an array of settings objects like the API expects

      serializer.serializeIntoHash(data, type, record); // use the ApplicationAdapter's buildURL method but do not
      // pass in an id.

      return this.ajax(this.buildURL(type.modelName), 'PUT', {
        data
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/adapters/tag", ["exports", "ghost-admin/adapters/application", "ghost-admin/mixins/slug-url"], function (_exports, _application, _slugUrl) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend(_slugUrl.default);

  _exports.default = _default;
});
;define("ghost-admin/adapters/theme", ["exports", "ghost-admin/adapters/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    activate(model) {
      let url = "".concat(this.buildURL('theme', model.get('id')), "activate/");
      return this.ajax(url, 'PUT', {
        data: {}
      }).then(data => {
        this.store.pushPayload(data);
        return model;
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/adapters/user", ["exports", "ghost-admin/adapters/application", "ghost-admin/mixins/slug-url"], function (_exports, _application, _slugUrl) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend(_slugUrl.default, {
    queryRecord(store, type, query) {
      if (!query || query.id !== 'me') {
        return this._super(...arguments);
      }

      let url = this.buildURL(type.modelName, 'me', null, 'findRecord');
      return this.ajax(url, 'GET', {
        data: {
          include: 'roles'
        }
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/app", ["exports", "ghost-admin/utils/link-component", "ghost-admin/utils/route", "ember-resolver", "ghost-admin/config/environment", "ember-load-initializers"], function (_exports, _linkComponent, _route, _emberResolver, _environment, _emberLoadInitializers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const App = Ember.Application.extend({
    Resolver: _emberResolver.default,
    modulePrefix: _environment.default.modulePrefix,
    podModulePrefix: _environment.default.podModulePrefix,
    // eslint-disable-next-line
    customEvents: {
      touchstart: null,
      touchmove: null,
      touchend: null,
      touchcancel: null
    }
  }); // TODO: remove once the validations refactor is complete
  // eslint-disable-next-line

  Ember.Debug.registerWarnHandler((message, options, next) => {
    let skip = ['ds.errors.add', 'ds.errors.remove', 'ds.errors.clear'];

    if (skip.includes(options.id)) {
      return;
    }

    next(message, options);
  });
  (0, _emberLoadInitializers.default)(App, _environment.default.modulePrefix);
  var _default = App;
  _exports.default = _default;
});
;define("ghost-admin/authenticators/cookie", ["exports", "ember-simple-auth/authenticators/base"], function (_exports, _base) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.extend({
    ajax: Ember.inject.service(),
    config: Ember.inject.service(),
    feature: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    settings: Ember.inject.service(),
    tour: Ember.inject.service(),
    whatsNew: Ember.inject.service(),
    sessionEndpoint: Ember.computed('ghostPaths.apiRoot', function () {
      return "".concat(this.ghostPaths.apiRoot, "/session");
    }),
    restore: function () {
      return Ember.RSVP.resolve();
    },

    authenticate(identification, password) {
      const data = {
        username: identification,
        password
      };
      const options = {
        data,
        contentType: 'application/json;charset=utf-8',
        // ember-ajax will try and parse the response as JSON if not explicitly set
        dataType: 'text'
      };
      return this.ajax.post(this.sessionEndpoint, options).then(authResult => {
        // TODO: remove duplication with application.afterModel
        let preloadPromises = [this.config.fetchAuthenticated(), this.feature.fetch(), this.settings.fetch(), this.tour.fetchViewed()]; // kick off background update of "whats new"
        // - we don't want to block the router for this
        // - we need the user details to know what the user has seen

        this.whatsNew.fetchLatest.perform();
        return Ember.RSVP.all(preloadPromises).then(() => {
          return authResult;
        });
      });
    },

    invalidate() {
      // if we're invalidating because of a 401 we can end up in an infinite
      // loop if we then try to perform a DELETE /session/ request
      // TODO: find a more elegant way to handle this
      if (this.ajax.skipSessionDeletion) {
        this.ajax.skipSessionDeletion = false;
        return Ember.RSVP.resolve();
      }

      return this.ajax.del(this.sessionEndpoint);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/component-managers/glimmer", ["exports", "@glimmer/component/-private/ember-component-manager"], function (_exports, _emberComponentManager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _emberComponentManager.default;
    }
  });
});
;define("ghost-admin/components/-dynamic-element-alt", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  // avoiding reexport directly here because in some circumstances (ember-engines
  // for example) a simple reexport is transformed to `define.alias`,
  // unfortunately at the moment (ember-source@3.13) there is no _actual_
  // `@ember/component` module to alias so this causes issues
  //
  // tldr; we can replace this with a simple reexport when we can rely on Ember
  // actually providing a `@ember/component` module
  var _default = Ember.Component.extend();

  _exports.default = _default;
});
;define("ghost-admin/components/-dynamic-element", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  // avoiding reexport directly here because in some circumstances (ember-engines
  // for example) a simple reexport is transformed to `define.alias`,
  // unfortunately at the moment (ember-source@3.13) there is no _actual_
  // `@ember/component` module to alias so this causes issues
  //
  // tldr; we can replace this with a simple reexport when we can rely on Ember
  // actually providing a `@ember/component` module
  var _default = Ember.Component.extend();

  _exports.default = _default;
});
;define("ghost-admin/components/-lf-get-outlet-state", ["exports", "liquid-fire/components/-lf-get-outlet-state"], function (_exports, _lfGetOutletState) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _lfGetOutletState.default;
    }
  });
});
;define("ghost-admin/components/aspect-ratio-box", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    ratio: '1/1',
    base: 'height',
    isResizing: true,
    _ratio: 1,

    init() {
      this._super(...arguments);

      this._onResizeHandler = () => {
        Ember.run.debounce(this, this._resize, 200);
      };
    },

    didReceiveAttrs() {
      (true && !(this.ratio.match(/\d+\/\d+/)) && Ember.assert('{{aspect-ratio-box}} requires a `ratio` property in the format `"16/9"`', this.ratio.match(/\d+\/\d+/)));
      this._ratio = this.ratio.split('/').reduce((prev, curr) => prev / curr);
    },

    didInsertElement() {
      this._resize();

      window.addEventListener('resize', this._onResizeHandler);
    },

    willDestroyElement() {
      this._super(...arguments);

      window.removeEventListener('resize', this._onResizeHandler);
    },

    _resize() {
      this.set('isResizing', true);
      Ember.run.schedule('afterRender', this, function () {
        if (this.base === 'height') {
          this.element.style.width = "".concat(this.element.clientHeight * this._ratio, "px");
        } else {
          this.element.style.height = "".concat(this.element.clientWidth * this._ratio, "px");
        }

        this.set('isResizing', false);
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/basic-dropdown-content", ["exports", "ember-basic-dropdown/components/basic-dropdown-content"], function (_exports, _basicDropdownContent) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _basicDropdownContent.default;
    }
  });
});
;define("ghost-admin/components/basic-dropdown-trigger", ["exports", "ember-basic-dropdown/components/basic-dropdown-trigger"], function (_exports, _basicDropdownTrigger) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _basicDropdownTrigger.default;
    }
  });
});
;define("ghost-admin/components/basic-dropdown", ["exports", "ember-basic-dropdown/components/basic-dropdown"], function (_exports, _basicDropdown) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _basicDropdown.default;
    }
  });
});
;define("ghost-admin/components/draggable-object-target", ["exports", "ember-drag-drop/components/draggable-object-target"], function (_exports, _draggableObjectTarget) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _draggableObjectTarget.default;
  _exports.default = _default;
});
;define("ghost-admin/components/draggable-object", ["exports", "ember-drag-drop/components/draggable-object"], function (_exports, _draggableObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _draggableObject.default;
  _exports.default = _default;
});
;define("ghost-admin/components/ember-chart", ["exports", "ember-cli-chart/components/ember-chart"], function (_exports, _emberChart) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _emberChart.default;
  _exports.default = _default;
});
;define("ghost-admin/components/ember-load-remover", ["exports", "ember-load/components/ember-load-remover"], function (_exports, _emberLoadRemover) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _emberLoadRemover.default;
    }
  });
});
;define("ghost-admin/components/gh-activating-list-item", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    active: false,
    classNameBindings: ['active'],
    linkClasses: null,
    tagName: 'li',
    actions: {
      setActive(value) {
        Ember.run.schedule('afterRender', this, function () {
          this.set('active', value);
        });
      }

    },

    click() {
      this.element.querySelector('a').blur();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-alert", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    notifications: Ember.inject.service(),
    classNameBindings: ['typeClass'],
    classNames: ['gh-alert'],
    tagName: 'article',
    typeClass: Ember.computed('message.type', function () {
      let type = this.get('message.type');
      let classes = '';
      let typeMapping;
      typeMapping = {
        success: 'green',
        error: 'red',
        warn: 'blue',
        info: 'blue'
      };

      if (typeMapping[type] !== undefined) {
        classes += "gh-alert-".concat(typeMapping[type]);
      }

      return classes;
    }),
    actions: {
      closeNotification() {
        this.notifications.closeNotification(this.message);
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-alerts", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    notifications: Ember.inject.service(),
    classNames: 'gh-alerts',
    tagName: 'aside',
    messages: Ember.computed.alias('notifications.alerts')
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-app", ["exports", "jquery"], function (_exports, _jquery) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    classNames: ['gh-app'],
    showSettingsMenu: false,

    didReceiveAttrs() {
      this._super(...arguments);

      let showSettingsMenu = this.showSettingsMenu;
      (0, _jquery.default)('body').toggleClass('settings-menu-expanded', showSettingsMenu);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-basic-dropdown", ["exports", "ember-basic-dropdown/components/basic-dropdown", "ember-basic-dropdown/templates/components/basic-dropdown", "@ember-decorators/component"], function (_exports, _basicDropdown, _basicDropdown2, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _class2, _descriptor, _temp;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let GhBasicDropdown = (_dec = (0, _component.layout)(_basicDropdown2.default), _dec(_class = (_class2 = (_temp = class GhBasicDropdown extends _basicDropdown.default {
    constructor(...args) {
      super(...args);

      _initializerDefineProperty(this, "dropdown", _descriptor, this);
    }

    onInit() {
      this.dropdown.on('close', this, this.close);
    }

    willDestroy() {
      this.dropdown.off('close', this, this.close);
      super.willDestroyElement(...arguments);
    }

  }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "dropdown", [Ember.inject.service], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  var _default = GhBasicDropdown;
  _exports.default = _default;
});
;define("ghost-admin/components/gh-billing-iframe", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    config: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    ajax: Ember.inject.service(),
    billingEndpoint: Ember.computed.reads('config.billingUrl'),

    didRender() {
      let iframe = this.element.querySelector('#billing-frame');
      window.addEventListener('message', event => {
        if (event && event.data && event.data.request === 'token') {
          const ghostIdentityUrl = this.get('ghostPaths.url').api('identities');
          this.ajax.request(ghostIdentityUrl).then(response => {
            const token = response && response.identities && response.identities[0] && response.identities[0].token;
            iframe.contentWindow.postMessage({
              request: 'token',
              response: token
            }, '*');
          });
        }
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-blog-url", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    config: Ember.inject.service(),
    tagName: ''
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-canvas-header", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    tagName: '',
    actions: {
      initScrollWatch(element) {
        this._onScroll = Ember.run.bind(this, this.onScroll, element);
        this._scrollContainer = element.closest('.gh-main');

        if (this._scrollContainer) {
          this._scrollContainer.addEventListener('scroll', this._onScroll, {
            passive: true
          });
        }
      },

      clearScrollWatch() {
        if (this._scrollContainer) {
          this._scrollContainer.removeEventListener('scroll', this._onScroll);
        }
      }

    },

    onScroll(element) {
      if (this._isSticky && this._scrollContainer.scrollTop < 10) {
        element.classList.remove('gh-canvas-header--sticky');
        this._isSticky = false;
      } else if (!this._isSticky && this._scrollContainer.scrollTop > 10) {
        element.classList.add('gh-canvas-header--sticky');
        this._isSticky = true;
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-cm-editor", ["exports", "ghost-admin/utils/bound-one-way", "ember-concurrency"], function (_exports, _boundOneWay, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const CmEditorComponent = Ember.Component.extend({
    lazyLoader: Ember.inject.service(),
    classNameBindings: ['isFocused:focus'],
    textareaClass: '',
    isFocused: false,
    // options for the editor
    autofocus: false,
    indentUnit: 4,
    lineNumbers: true,
    lineWrapping: false,
    mode: 'htmlmixed',
    theme: 'xq-light',
    _editor: null,
    // reference to CodeMirror editor
    // Allowed actions
    'focus-in': () => {},
    update: () => {},
    _value: (0, _boundOneWay.default)('value'),

    // make sure a value exists
    didReceiveAttrs() {
      if (this._value === null || undefined) {
        this.set('_value', '');
      }

      if (this.mode !== this._lastMode && this._editor) {
        this._editor.setOption('mode', this.mode);
      }

      this._lastMode = this.mode;
    },

    didInsertElement() {
      this._super(...arguments);

      this.initCodeMirror.perform();
    },

    willDestroyElement() {
      this._super(...arguments); // Ensure the editor exists before trying to destroy it. This fixes
      // an error that occurs if codemirror hasn't finished loading before
      // the component is destroyed.


      if (this._editor) {
        let editor = this._editor.getWrapperElement();

        editor.parentNode.removeChild(editor);
        this._editor = null;
      }
    },

    actions: {
      updateFromTextarea(value) {
        this.update(value);
      }

    },
    initCodeMirror: (0, _emberConcurrency.task)(function* () {
      let loader = this.lazyLoader;
      yield loader.loadScript('codemirror', 'assets/codemirror/codemirror.js');
      Ember.run.scheduleOnce('afterRender', this, this._initCodeMirror);
    }),

    _initCodeMirror() {
      let options = this.getProperties('lineNumbers', 'lineWrapping', 'indentUnit', 'mode', 'theme', 'autofocus');
      Ember.assign(options, {
        value: this._value
      });
      let textarea = this.element.querySelector('textarea');

      if (textarea && textarea === document.activeElement) {
        options.autofocus = true;
      }

      this._editor = new CodeMirror.fromTextArea(textarea, options); // by default CodeMirror will place the cursor at the beginning of the
      // content, it makes more sense for the cursor to be at the end

      if (options.autofocus) {
        this._editor.setCursor(this._editor.lineCount(), 0);
      } // events


      this._setupCodeMirrorEventHandler('focus', this, this._focus);

      this._setupCodeMirrorEventHandler('blur', this, this._blur);

      this._setupCodeMirrorEventHandler('change', this, this._update);
    },

    _setupCodeMirrorEventHandler(event, target, method) {
      let callback = Ember.run.bind(target, method);

      this._editor.on(event, callback);

      this.one('willDestroyElement', this, function () {
        this._editor.off(event, callback);
      });
    },

    _update(codeMirror, changeObj) {
      Ember.run.once(this, this.update, codeMirror.getValue(), codeMirror, changeObj);
    },

    _focus(codeMirror, event) {
      this.set('isFocused', true);
      Ember.run.once(this, this['focus-in'], codeMirror.getValue(), codeMirror, event);
    },

    _blur()
    /* codeMirror, event */
    {
      this.set('isFocused', false);
    }

  });
  var _default = CmEditorComponent;
  _exports.default = _default;
});
;define("ghost-admin/components/gh-content-cover", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    ui: Ember.inject.service(),
    classNames: ['content-cover'],

    click() {
      this.ui.closeMenus();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-contentfilter", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _class, _descriptor, _descriptor2, _descriptor3, _temp;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let GhContentfilterComponent = (_class = (_temp = class GhContentfilterComponent extends _component.default {
    constructor(...args) {
      super(...args);

      _initializerDefineProperty(this, "customViews", _descriptor, this);

      _initializerDefineProperty(this, "router", _descriptor2, this);

      _initializerDefineProperty(this, "session", _descriptor3, this);
    }

    calculateActionsDropdownPosition(trigger, content) {
      let {
        top,
        left,
        width,
        height
      } = trigger.getBoundingClientRect(); // content.firstElementChild is required because we use .dropdown-menu which is absolute positioned

      let {
        width: contentWidth
      } = content.firstElementChild.getBoundingClientRect();
      let style = {
        left: left + width - contentWidth,
        top: top + height + 5
      };
      return {
        style
      };
    }

  }, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "customViews", [Ember.inject.service], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [Ember.inject.service], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "session", [Ember.inject.service], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
  _exports.default = GhContentfilterComponent;
});
;define("ghost-admin/components/gh-custom-view-title", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _class, _descriptor, _descriptor2, _temp;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let GhCustomViewTitleComponent = (_class = (_temp = class GhCustomViewTitleComponent extends _component.default {
    constructor(...args) {
      super(...args);

      _initializerDefineProperty(this, "customViews", _descriptor, this);

      _initializerDefineProperty(this, "router", _descriptor2, this);
    }

  }, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "customViews", [Ember.inject.service], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [Ember.inject.service], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
  _exports.default = GhCustomViewTitleComponent;
});
;define("ghost-admin/components/gh-date-time-picker", ["exports", "moment"], function (_exports, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const DATE_FORMAT = 'YYYY-MM-DD';

  var _default = Ember.Component.extend({
    settings: Ember.inject.service(),
    tagName: '',
    date: '',
    dateFormat: DATE_FORMAT,
    time: '',
    errors: null,
    dateErrorProperty: null,
    timeErrorProperty: null,
    isActive: true,
    _time: '',
    _previousTime: '',
    _minDate: null,
    _maxDate: null,
    _scratchDate: null,
    _scratchDateError: null,

    // actions
    setTypedDateError() {},

    blogTimezone: Ember.computed.reads('settings.activeTimezone'),
    hasError: Ember.computed.or('dateError', 'timeError'),
    dateValue: Ember.computed('_date', '_scratchDate', function () {
      if (this._scratchDate !== null) {
        return this._scratchDate;
      } else {
        return (0, _moment.default)(this._date).format(DATE_FORMAT);
      }
    }),
    timezone: Ember.computed('blogTimezone', function () {
      let blogTimezone = this.blogTimezone;
      return _moment.default.utc().tz(blogTimezone).format('z');
    }),
    dateError: Ember.computed('errors.[]', 'dateErrorProperty', '_scratchDateError', function () {
      if (this._scratchDateError) {
        return this._scratchDateError;
      }

      let errors = this.errors;
      let property = this.dateErrorProperty;

      if (errors && !Ember.isEmpty(errors.errorsFor(property))) {
        return errors.errorsFor(property).get('firstObject').message;
      }

      return '';
    }),
    timeError: Ember.computed('errors.[]', 'timeErrorProperty', function () {
      let errors = this.errors;
      let property = this.timeErrorProperty;

      if (errors && !Ember.isEmpty(errors.errorsFor(property))) {
        return errors.errorsFor(property).get('firstObject').message;
      }

      return '';
    }),

    didReceiveAttrs() {
      let date = this.date;
      let time = this.time;
      let minDate = this.minDate;
      let maxDate = this.maxDate;
      let blogTimezone = this.blogTimezone;

      if (!Ember.isBlank(date)) {
        this.set('_date', (0, _moment.default)(date));
      } else {
        this.set('_date', (0, _moment.default)().tz(blogTimezone));
      } // reset scratch date if the component becomes inactive
      // (eg, PSM is closed, or save type is changed away from scheduled)


      if (!this.isActive && this._lastIsActive) {
        this._resetScratchDate();
      }

      this._lastIsActive = this.isActive; // reset scratch date if date is changed externally

      if ((date && date.valueOf()) !== (this._lastDate && this._lastDate.valueOf())) {
        this._resetScratchDate();
      }

      this._lastDate = this.date;

      if (Ember.isBlank(time)) {
        this.set('_time', (0, _moment.default)(this._date).format('HH:mm'));
      } else {
        this.set('_time', this.time);
      }

      this.set('_previousTime', this._time); // unless min/max date is at midnight moment will diable that day

      if (minDate === 'now') {
        this.set('_minDate', (0, _moment.default)((0, _moment.default)().format(DATE_FORMAT)));
      } else if (!Ember.isBlank(minDate)) {
        this.set('_minDate', (0, _moment.default)((0, _moment.default)(minDate).format(DATE_FORMAT)));
      } else {
        this.set('_minDate', null);
      }

      if (maxDate === 'now') {
        this.set('_maxDate', (0, _moment.default)((0, _moment.default)().format(DATE_FORMAT)));
      } else if (!Ember.isBlank(maxDate)) {
        this.set('_maxDate', (0, _moment.default)((0, _moment.default)(maxDate).format(DATE_FORMAT)));
      } else {
        this.set('_maxDate', null);
      }
    },

    willDestroyElement() {
      this.setTypedDateError(null);
    },

    actions: {
      // if date or time is set and the other property is blank set that too
      // so that we don't get "can't be blank" errors
      setDate(date) {
        if (date !== this._date) {
          this.setDate(date);

          if (Ember.isBlank(this.time)) {
            this.setTime(this._time);
          }
        }
      },

      setTime(time) {
        if (time.match(/^\d:\d\d$/)) {
          time = "0".concat(time);
        }

        if (time !== this._previousTime) {
          this.setTime(time);
          this.set('_previousTime', time);

          if (Ember.isBlank(this.date)) {
            this.setDate(this._date);
          }
        }
      }

    },
    registerTimeInput: Ember._action(function (elem) {
      this._timeInputElem = elem;
    }),
    onDateInput: Ember._action(function (datepicker, event) {
      let skipFocus = true;
      datepicker.actions.close(event, skipFocus);
      this.set('_scratchDate', event.target.value);
    }),
    onDateBlur: Ember._action(function (event) {
      // make sure we're not doing anything just because the calendar dropdown
      // is opened and clicked
      if (event.target.value === (0, _moment.default)(this._date).format('YYYY-MM-DD')) {
        this._resetScratchDate();

        return;
      }

      if (!event.target.value) {
        this._resetScratchDate();
      } else {
        this._setDate(event.target.value);
      }
    }),
    onDateKeydown: Ember._action(function (datepicker, event) {
      if (event.key === 'Escape') {
        this._resetScratchDate();
      }

      if (event.key === 'Enter') {
        this._setDate(event.target.value);

        event.preventDefault();
        event.stopImmediatePropagation();
        datepicker.actions.close();
      } // close the dropdown and manually focus the time input if necessary
      // so that keyboard focus behaves as expected


      if (event.key === 'Tab' && datepicker.isOpen) {
        datepicker.actions.close(); // manual focus is required because the dropdown is rendered in place
        // and the default browser behaviour will move focus to the dropdown
        // which is then removed from the DOM making it look like focus has
        // disappeared. Shift+Tab is fine because the DOM is not changing in
        // that direction

        if (!event.shiftKey && this._timeInputElem) {
          event.preventDefault();

          this._timeInputElem.focus();

          this._timeInputElem.select();
        }
      } // capture a Ctrl/Cmd+S combo to make sure that the model value is updated
      // before the save occurs or we abort the save if the value is invalid


      if (event.key === 's' && (event.ctrlKey || event.metaKey)) {
        let wasValid = this._setDate(event.target.value);

        if (!wasValid) {
          event.stopImmediatePropagation();
          event.preventDefault();
        }
      }
    }),

    // internal methods
    _resetScratchDate() {
      this.set('_scratchDate', null);

      this._setScratchDateError(null);
    },

    _setDate(dateStr) {
      if (!dateStr.match(/^\d\d\d\d-\d\d-\d\d$/)) {
        this._setScratchDateError('Invalid date format, must be YYYY-MM-DD');

        return false;
      }

      let date = (0, _moment.default)(dateStr, DATE_FORMAT);

      if (!date.isValid()) {
        this._setScratchDateError('Invalid date');

        return false;
      }

      this.send('setDate', date.toDate());

      this._resetScratchDate();

      return true;
    },

    _setScratchDateError(error) {
      this.set('_scratchDateError', error);
      this.setTypedDateError(error);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-dropdown-button", ["exports", "ghost-admin/mixins/dropdown-mixin"], function (_exports, _dropdownMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend(_dropdownMixin.default, {
    dropdown: Ember.inject.service(),
    tagName: 'button',
    attributeBindings: ['href', 'role'],
    role: 'button',
    // matches with the dropdown this button toggles
    dropdownName: null,

    // Notify dropdown service this dropdown should be toggled
    click(event) {
      this._super(event);

      this.dropdown.toggleDropdown(this.dropdownName, this);

      if (this.tagName === 'a') {
        return false;
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-dropdown", ["exports", "ghost-admin/mixins/dropdown-mixin"], function (_exports, _dropdownMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend(_dropdownMixin.default, {
    dropdown: Ember.inject.service(),
    classNames: 'dropdown',
    classNameBindings: ['fadeIn:fade-in-scale:fade-out', 'isOpen:open:closed'],
    name: null,
    closeOnClick: false,
    // Helps track the user re-opening the menu while it's fading out.
    closing: false,
    // Helps track whether the dropdown is open or closes, or in a transition to either
    isOpen: false,
    // Managed the toggle between the fade-in and fade-out classes
    fadeIn: Ember.computed('isOpen', 'closing', function () {
      return this.isOpen && !this.closing;
    }),

    didInsertElement() {
      this._super(...arguments);

      let dropdownService = this.dropdown;
      dropdownService.on('close', this, this.close);
      dropdownService.on('toggle', this, this.toggle);
      this._animationEndHandler = Ember.run.bind(this, function (event) {
        if (event.animationName === 'fade-out' && this.closing) {
          this.set('isOpen', false);
          this.set('closing', false);
        }
      });
      this.element.addEventListener('animationend', this._animationEndHandler);
    },

    willDestroyElement() {
      this._super(...arguments);

      let dropdownService = this.dropdown;
      dropdownService.off('close', this, this.close);
      dropdownService.off('toggle', this, this.toggle);
      this.element.removeEventListener('animationend', this._animationEndHandler);
    },

    open() {
      this.set('isOpen', true);
      this.set('closing', false);
      this.set('button.isOpen', true);
    },

    close() {
      this.set('closing', true);

      if (this.button) {
        this.set('button.isOpen', false);
      }
    },

    // Called by the dropdown service when any dropdown button is clicked.
    toggle(options) {
      let isClosing = this.closing;
      let isOpen = this.isOpen;
      let name = this.name;
      let targetDropdownName = options.target;
      let button = this.button;

      if (name === targetDropdownName && (!isOpen || isClosing)) {
        if (!button) {
          button = options.button;
          this.set('button', button);
        }

        this.open();
      } else if (isOpen) {
        this.close();
      }
    },

    click(event) {
      this._super(event);

      if (this.closeOnClick) {
        return this.close();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-editor-post-status", ["exports", "ghost-admin/config/environment", "moment", "ember-concurrency"], function (_exports, _environment, _moment, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    clock: Ember.inject.service(),
    post: null,
    isSaving: false,
    'data-test-editor-post-status': true,
    _isSaving: false,
    countdown: Ember.computed('post.{publishedAtUTC,isScheduled}', 'clock.second', function () {
      let isScheduled = this.get('post.isScheduled');

      let publishTime = this.get('post.publishedAtUTC') || _moment.default.utc();

      let timeUntilPublished = publishTime.diff(_moment.default.utc(), 'minutes', true);
      let isPublishedSoon = timeUntilPublished > 0 && timeUntilPublished < 15; // force a recompute

      this.get('clock.second');

      if (isScheduled && isPublishedSoon) {
        return (0, _moment.default)(publishTime).fromNow();
      } else {
        return false;
      }
    }),

    // isSaving will only be true briefly whilst the post is saving,
    // we want to ensure that the "Saving..." message is shown for at least
    // a few seconds so that it's noticeable
    didReceiveAttrs() {
      if (this.isSaving) {
        this.showSavingMessage.perform();
      }
    },

    showSavingMessage: (0, _emberConcurrency.task)(function* () {
      this.set('_isSaving', true);
      yield (0, _emberConcurrency.timeout)(_environment.default.environment === 'test' ? 0 : 3000);

      if (!this.isDestroyed && !this.isDestroying) {
        this.set('_isSaving', false);
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-editor", ["exports", "ghost-admin/components/gh-image-uploader"], function (_exports, _ghImageUploader) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    ui: Ember.inject.service(),
    classNameBindings: ['isDraggedOver:-drag-over', 'isFullScreen:gh-editor-fullscreen', 'isPreview:gh-editor-preview'],
    // Internal attributes
    droppedFiles: null,
    headerClass: '',
    headerHeight: 0,
    imageExtensions: _ghImageUploader.IMAGE_EXTENSIONS,
    imageMimeTypes: _ghImageUploader.IMAGE_MIME_TYPES,
    isDraggedOver: false,
    isFullScreen: false,
    isSplitScreen: false,
    uploadedImageUrls: null,
    // Private
    _dragCounter: 0,
    _onResizeHandler: null,
    _viewActionsWidth: 190,

    init() {
      this._super(...arguments);

      this._onResizeHandler = evt => {
        Ember.run.debounce(this, this._setHeaderClass, evt, 100);
      };
    },

    didInsertElement() {
      this._super(...arguments);

      window.addEventListener('resize', this._onResizeHandler);

      this._setHeaderClass();
    },

    willDestroyElement() {
      this._super(...arguments);

      window.removeEventListener('resize', this._onResizeHandler);
    },

    actions: {
      toggleFullScreen(isFullScreen) {
        this.set('isFullScreen', isFullScreen);
        this.ui.set('isFullScreen', isFullScreen);
        Ember.run.scheduleOnce('afterRender', this, this._setHeaderClass);
      },

      togglePreview(isPreview) {
        this.set('isPreview', isPreview);
      },

      toggleSplitScreen(isSplitScreen) {
        this.set('isSplitScreen', isSplitScreen);
        Ember.run.scheduleOnce('afterRender', this, this._setHeaderClass);
      },

      uploadImages(fileList, resetInput) {
        // convert FileList to an array so that resetting the input doesn't
        // clear the file references before upload actions can be triggered
        let files = Array.from(fileList);
        this.set('droppedFiles', files);
        resetInput();
      },

      uploadComplete(uploads) {
        this.set('uploadedImageUrls', uploads.mapBy('url'));
        this.set('droppedFiles', null);
      },

      uploadCancelled() {
        this.set('droppedFiles', null);
      }

    },

    _setHeaderClass() {
      let editorTitle = this.element.querySelector('.gh-editor-title, .kg-title-input');
      let smallHeaderClass = 'gh-editor-header-small';
      let newHeaderClass = '';
      this._editorTitleElement = editorTitle;

      if (this.isSplitScreen) {
        this.set('headerClass', smallHeaderClass);
        return;
      }

      if (editorTitle) {
        let boundingRect = editorTitle.getBoundingClientRect();
        let maxRight = window.innerWidth - this._viewActionsWidth;

        if (boundingRect.right >= maxRight) {
          newHeaderClass = smallHeaderClass;
        }
      }

      if (newHeaderClass !== this.headerClass) {
        // grab height of header so that we can pass it as an offset to other
        // editor components
        Ember.run.scheduleOnce('afterRender', this, this._setHeaderHeight);
      }

      this.set('headerClass', newHeaderClass);
    },

    _setHeaderHeight() {
      if (this.headerClass && this._editorTitleElement) {
        let height = this._editorTitleElement.offsetHeight;
        return this.set('headerHeight', height);
      }

      this.set('headerHeight', 0);
    },

    // dragOver is needed so that drop works
    dragOver(event) {
      if (!event.dataTransfer) {
        return;
      } // this is needed to work around inconsistencies with dropping files
      // from Chrome's downloads bar


      if (navigator.userAgent.indexOf('Chrome') > -1) {
        let eA = event.dataTransfer.effectAllowed;
        event.dataTransfer.dropEffect = eA === 'move' || eA === 'linkMove' ? 'move' : 'copy';
      }

      event.preventDefault();
      event.stopPropagation();
    },

    // dragEnter is needed so that the drag class is correctly removed
    dragEnter(event) {
      if (!event.dataTransfer) {
        return;
      }

      event.preventDefault();
      event.stopPropagation(); // the counter technique prevents flickering of the drag class when
      // dragging across child elements

      this._dragCounter += 1;
      this.set('isDraggedOver', true);
    },

    dragLeave(event) {
      event.preventDefault();
      event.stopPropagation();
      this._dragCounter -= 1;

      if (this._dragCounter === 0) {
        this.set('isDraggedOver', false);
      }
    },

    drop(event) {
      event.preventDefault();
      event.stopPropagation();
      this._dragCounter = 0;
      this.set('isDraggedOver', false);

      if (event.dataTransfer.files) {
        this.set('droppedFiles', event.dataTransfer.files);
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-error-message", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /**
   * Renders one random error message when passed a DS.Errors object
   * and a property name. The message will be one of the ones associated with
   * that specific property. If there are no errors associated with the property,
   * nothing will be rendered.
   * @param  {DS.Errors} errors   The DS.Errors object
   * @param  {string} property    The property name
   */
  class GhErrorMessage extends _component.default {
    get message() {
      let {
        property,
        errors
      } = this.args;
      let messages = [];
      let index;

      if (!Ember.isEmpty(errors) && errors.get(property)) {
        errors.get(property).forEach(error => {
          messages.push(error);
        });
        index = Math.floor(Math.random() * messages.length);
        return messages[index].message;
      }

      return '';
    }

  }

  _exports.default = GhErrorMessage;
});
;define("ghost-admin/components/gh-feature-flag", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const FeatureFlagComponent = Ember.Component.extend({
    feature: Ember.inject.service(),
    tagName: 'label',
    classNames: 'checkbox',
    attributeBindings: ['for', 'disabled'],
    disabled: Ember.computed('_disabled', function () {
      if (this._disabled) {
        return true;
      }

      return false;
    }),
    value: Ember.computed('_flagValue', {
      get() {
        return this._flagValue;
      },

      set(key, value) {
        return this.set("feature.".concat(this.flag), value);
      }

    }),
    for: Ember.computed('flag', function () {
      return "labs-".concat(this.flag);
    }),
    name: Ember.computed('flag', function () {
      return "labs[".concat(this.flag, "]");
    }),

    init() {
      this._super(...arguments);

      Ember.defineProperty(this, '_flagValue', Ember.computed.readOnly("feature.".concat(this.flag)), function () {
        return this.get("feature.".concat(this.flag));
      });
    }

  });
  var _default = FeatureFlagComponent;
  _exports.default = _default;
});
;define("ghost-admin/components/gh-file-input", ["exports", "emberx-file-input/components/x-file-input"], function (_exports, _xFileInput) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  // TODO: remove this override and use {{x-file-input}} directly once we've
  // upgraded to emberx-file-input@1.2.0
  var _default = _xFileInput.default.extend({
    change(e) {
      let action = this.action;
      let files = this.files(e);

      if (files.length && action) {
        action(files, this.resetInput.bind(this));
      }
    },

    /**
    * Gets files from event object.
    *
    * @method
    * @private
    * @param {$.Event || Event}
    */
    files(e) {
      return (e.originalEvent || e).testingFiles || e.target.files;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-file-upload", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    _file: null,
    acceptEncoding: null,
    uploadButtonText: 'Text',
    uploadButtonDisabled: true,
    shouldResetForm: true,

    // closure actions
    onUpload() {},

    onAdd() {},

    actions: {
      upload() {
        if (!this.uploadButtonDisabled && this._file) {
          this.onUpload(this._file);
        } // Prevent double post by disabling the button.


        this.set('uploadButtonDisabled', true); // Reset form

        if (this.shouldResetForm) {
          this.element.closest('form').reset();
        }
      }

    },

    change(event) {
      this.set('uploadButtonDisabled', false);
      this.onAdd();
      this._file = event.target.files[0];
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-file-uploader", ["exports", "ghost-admin/services/ajax"], function (_exports, _ajax) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const DEFAULTS = {
    accept: ['text/csv'],
    extensions: ['csv']
  };

  var _default = Ember.Component.extend({
    ajax: Ember.inject.service(),
    eventBus: Ember.inject.service(),
    notifications: Ember.inject.service(),
    tagName: 'section',
    classNames: ['gh-image-uploader'],
    classNameBindings: ['dragClass'],
    labelText: 'Select or drag-and-drop a file',
    url: null,
    paramName: 'file',
    accept: null,
    extensions: null,
    validate: null,
    file: null,
    response: null,
    dragClass: null,
    failureMessage: null,
    uploadPercentage: 0,
    // Allowed actions
    fileSelected: () => {},
    uploadStarted: () => {},
    uploadFinished: () => {},
    uploadSuccess: () => {},
    uploadFailed: () => {},
    formData: Ember.computed('file', function () {
      let paramName = this.paramName;
      let file = this.file;
      let formData = new FormData();
      formData.append(paramName, file);
      return formData;
    }),
    progressStyle: Ember.computed('uploadPercentage', function () {
      let percentage = this.uploadPercentage;
      let width = '';

      if (percentage > 0) {
        width = "".concat(percentage, "%");
      } else {
        width = '0';
      }

      return Ember.String.htmlSafe("width: ".concat(width));
    }),

    // we can optionally listen to a named event bus channel so that the upload
    // process can be triggered externally
    init() {
      this._super(...arguments);

      let listenTo = this.listenTo;
      this.accept = this.accept || DEFAULTS.accept;
      this.extensions = this.extensions || DEFAULTS.extensions;

      this._uploadEventHandler = function (file) {
        if (file) {
          this.set('file', file);
        }

        this.send('upload');
      };

      if (listenTo) {
        this.eventBus.subscribe("".concat(listenTo, ":upload"), this, this._uploadEventHandler);
      }
    },

    didReceiveAttrs() {
      this._super(...arguments);

      let accept = this.accept;
      let extensions = this.extensions;
      this._accept = !Ember.isBlank(accept) && !Ember.isArray(accept) ? accept.split(',') : accept;
      this._extensions = !Ember.isBlank(extensions) && !Ember.isArray(extensions) ? extensions.split(',') : extensions;
    },

    willDestroyElement() {
      let listenTo = this.listenTo;

      this._super(...arguments);

      if (listenTo) {
        this.eventBus.unsubscribe("".concat(listenTo, ":upload"), this, this._uploadEventHandler);
      }
    },

    actions: {
      fileSelected(fileList, resetInput) {
        let [file] = Array.from(fileList);

        let validationResult = this._validate(file);

        this.set('file', file);
        this.fileSelected(file);

        if (validationResult === true) {
          Ember.run.schedule('actions', this, function () {
            this.generateRequest();

            if (resetInput) {
              resetInput();
            }
          });
        } else {
          this._uploadFailed(validationResult);

          if (resetInput) {
            resetInput();
          }
        }
      },

      upload() {
        if (this.file) {
          this.generateRequest();
        }
      },

      reset() {
        this.set('file', null);
        this.set('uploadPercentage', 0);
        this.set('failureMessage', null);
      }

    },

    dragOver(event) {
      if (!event.dataTransfer) {
        return;
      } // this is needed to work around inconsistencies with dropping files
      // from Chrome's downloads bar


      if (navigator.userAgent.indexOf('Chrome') > -1) {
        let eA = event.dataTransfer.effectAllowed;
        event.dataTransfer.dropEffect = eA === 'move' || eA === 'linkMove' ? 'move' : 'copy';
      }

      event.stopPropagation();
      event.preventDefault();
      this.set('dragClass', '-drag-over');
    },

    dragLeave(event) {
      event.preventDefault();
      this.set('dragClass', null);
    },

    drop(event) {
      event.preventDefault();
      this.set('dragClass', null);

      if (event.dataTransfer.files) {
        this.send('fileSelected', event.dataTransfer.files);
      }
    },

    generateRequest() {
      let ajax = this.ajax;
      let formData = this.formData;
      let url = this.url;
      this.uploadStarted();
      ajax.post(url, {
        data: formData,
        processData: false,
        contentType: false,
        dataType: 'text',
        xhr: () => {
          let xhr = new window.XMLHttpRequest();
          xhr.upload.addEventListener('progress', event => {
            this._uploadProgress(event);
          }, false);
          return xhr;
        }
      }).then(response => {
        this._uploadSuccess(JSON.parse(response));
      }).catch(error => {
        this._uploadFailed(error);
      }).finally(() => {
        this.uploadFinished();
      });
    },

    _uploadProgress(event) {
      if (event.lengthComputable) {
        Ember.run(() => {
          let percentage = Math.round(event.loaded / event.total * 100);
          this.set('uploadPercentage', percentage);
        });
      }
    },

    _uploadSuccess(response) {
      this.uploadSuccess(response);
      this.send('reset');
    },

    _uploadFailed(error) {
      let message;

      if ((0, _ajax.isVersionMismatchError)(error)) {
        this.notifications.showAPIError(error);
      }

      if ((0, _ajax.isUnsupportedMediaTypeError)(error)) {
        message = 'The file type you uploaded is not supported.';
      } else if ((0, _ajax.isRequestEntityTooLargeError)(error)) {
        message = 'The file you uploaded was larger than the maximum file size your server allows.';
      } else if (error.payload && error.payload.errors && !Ember.isBlank(error.payload.errors[0].message)) {
        message = Ember.String.htmlSafe(error.payload.errors[0].message);
      } else {
        message = 'Something went wrong :(';
      }

      this.set('failureMessage', message);
      this.uploadFailed(error);
    },

    _validate(file) {
      if (this.validate) {
        return this.validate(file);
      } else {
        return this._defaultValidator(file);
      }
    },

    _defaultValidator(file) {
      let [, extension] = /(?:\.([^.]+))?$/.exec(file.name);
      let extensions = this._extensions;

      if (!extension || extensions.indexOf(extension.toLowerCase()) === -1) {
        return new _ajax.UnsupportedMediaTypeError();
      }

      return true;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-form-group", ["exports", "ghost-admin/components/gh-validation-status-container"], function (_exports, _ghValidationStatusContainer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _ghValidationStatusContainer.default.extend({
    classNames: 'form-group'
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-fullscreen-modal", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const FullScreenModalComponent = Ember.Component.extend({
    dropdown: Ember.inject.service(),
    model: null,
    modifier: null,
    modalPath: Ember.computed('modal', function () {
      return "modal-".concat(this.modal || 'unknown');
    }),
    modalClasses: Ember.computed('modifiers', function () {
      let modalClass = 'fullscreen-modal';
      let modifiers = (this.modifier || '').split(' ');
      let modalClasses = Ember.A([modalClass]);
      modifiers.forEach(modifier => {
        if (!Ember.isBlank(modifier)) {
          let className = "".concat(modalClass, "-").concat(modifier);
          modalClasses.push(className);
        }
      });
      return modalClasses.join(' ');
    }),

    didInsertElement() {
      Ember.run.schedule('afterRender', this, function () {
        this.dropdown.closeDropdowns();
      });
    },

    actions: {
      close() {
        return this.close();
      },

      confirm() {
        return this.confirm();
      },

      clickOverlay() {
        this.send('close');
      }

    },
    // Allowed actions
    close: () => Ember.RSVP.resolve(),
    confirm: () => Ember.RSVP.resolve()
  });
  var _default = FullScreenModalComponent;
  _exports.default = _default;
});
;define("ghost-admin/components/gh-image-uploader-with-preview", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    allowUnsplash: false,
    actions: {
      update() {
        let action = this.update;

        if (action) {
          action(...arguments);
        }
      },

      uploadStarted() {
        let action = this.uploadStarted;

        if (action) {
          action(...arguments);
        }
      },

      uploadFinished() {
        let action = this.uploadFinished;

        if (action) {
          action(...arguments);
        }
      },

      remove() {
        let action = this.remove;

        if (action) {
          action();
        }
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-image-uploader", ["exports", "ghost-admin/utils/ghost-paths", "ghost-admin/services/ajax"], function (_exports, _ghostPaths, _ajax) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.IMAGE_PARAMS = _exports.IMAGE_EXTENSIONS = _exports.IMAGE_MIME_TYPES = void 0;
  const IMAGE_MIME_TYPES = 'image/gif,image/jpg,image/jpeg,image/png,image/svg+xml';
  _exports.IMAGE_MIME_TYPES = IMAGE_MIME_TYPES;
  const IMAGE_EXTENSIONS = ['gif', 'jpg', 'jpeg', 'png', 'svg'];
  _exports.IMAGE_EXTENSIONS = IMAGE_EXTENSIONS;
  const IMAGE_PARAMS = {
    purpose: 'image'
  };
  _exports.IMAGE_PARAMS = IMAGE_PARAMS;

  var _default = Ember.Component.extend({
    ajax: Ember.inject.service(),
    config: Ember.inject.service(),
    notifications: Ember.inject.service(),
    settings: Ember.inject.service(),
    tagName: 'section',
    classNames: ['gh-image-uploader'],
    classNameBindings: ['dragClass'],
    image: null,
    text: '',
    altText: '',
    saveButton: true,
    accept: '',
    extensions: null,
    uploadUrl: null,
    paramName: 'file',
    paramsHash: null,
    resourceName: 'images',
    validate: null,
    allowUnsplash: false,
    dragClass: null,
    failureMessage: null,
    file: null,
    url: null,
    uploadPercentage: 0,
    _defaultAccept: IMAGE_MIME_TYPES,
    _defaultExtensions: IMAGE_EXTENSIONS,
    _defaultUploadUrl: '/images/upload/',
    _defaultParamsHash: IMAGE_PARAMS,
    _showUnsplash: false,
    // Allowed actions
    fileSelected: () => {},
    update: () => {},
    uploadStarted: () => {},
    uploadFinished: () => {},
    uploadSuccess: () => {},
    uploadFailed: () => {},
    // TODO: this wouldn't be necessary if the server could accept direct
    // file uploads
    formData: Ember.computed('file', function () {
      let file = this.file;
      let formData = new FormData();
      formData.append(this.paramName, file);
      Object.keys(this.paramsHash || {}).forEach(key => {
        formData.append(key, this.paramsHash[key]);
      });
      return formData;
    }),
    description: Ember.computed('text', 'altText', function () {
      let altText = this.altText;
      return this.text || (altText ? "Upload image of \"".concat(altText, "\"") : 'Upload an image');
    }),
    progressStyle: Ember.computed('uploadPercentage', function () {
      let percentage = this.uploadPercentage;
      let width = '';

      if (percentage > 0) {
        width = "".concat(percentage, "%");
      } else {
        width = '0';
      }

      return Ember.String.htmlSafe("width: ".concat(width));
    }),

    init() {
      this._super(...arguments);

      if (!this.accept) {
        this.set('accept', this._defaultAccept);
      }

      if (!this.extensions) {
        this.set('extensions', this._defaultExtensions);
      }

      if (!this.uploadUrl) {
        this.set('uploadUrl', this._defaultUploadUrl);
      }

      if (!this.paramsHash) {
        this.set('paramsHash', this._defaultParamsHash);
      }
    },

    didReceiveAttrs() {
      let image = this.image;
      this.set('url', image);
    },

    actions: {
      fileSelected(fileList, resetInput) {
        // can't use array destructuring here as FileList is not a strict
        // array and fails in Safari
        let file = fileList[0];

        let validationResult = this._validate(file);

        this.set('file', file);
        this.fileSelected(file);

        if (validationResult === true) {
          Ember.run.schedule('actions', this, function () {
            this.generateRequest();

            if (resetInput) {
              resetInput();
            }
          });
        } else {
          this._uploadFailed(validationResult);

          if (resetInput) {
            resetInput();
          }
        }
      },

      addUnsplashPhoto({
        src
      }) {
        this.set('url', src);
        this.send('saveUrl');
      },

      reset() {
        this.set('file', null);
        this.set('uploadPercentage', 0);
      },

      saveUrl() {
        let url = this.url;
        this.update(url);
      }

    },

    dragOver(event) {
      if (!event.dataTransfer) {
        return;
      } // this is needed to work around inconsistencies with dropping files
      // from Chrome's downloads bar


      if (navigator.userAgent.indexOf('Chrome') > -1) {
        let eA = event.dataTransfer.effectAllowed;
        event.dataTransfer.dropEffect = eA === 'move' || eA === 'linkMove' ? 'move' : 'copy';
      }

      event.stopPropagation();
      event.preventDefault();
      this.set('dragClass', '-drag-over');
    },

    dragLeave(event) {
      event.preventDefault();
      this.set('dragClass', null);
    },

    drop(event) {
      event.preventDefault();
      this.set('dragClass', null);

      if (event.dataTransfer.files) {
        this.send('fileSelected', event.dataTransfer.files);
      }
    },

    _uploadProgress(event) {
      if (event.lengthComputable) {
        Ember.run(() => {
          let percentage = Math.round(event.loaded / event.total * 100);
          this.set('uploadPercentage', percentage);
        });
      }
    },

    _uploadSuccess(response) {
      let uploadResponse;
      let responseUrl;

      try {
        uploadResponse = JSON.parse(response);
      } catch (e) {
        if (!(e instanceof SyntaxError)) {
          throw e;
        }
      }

      if (uploadResponse) {
        let resource = Ember.get(uploadResponse, this.resourceName);

        if (resource && Ember.isArray(resource) && resource[0]) {
          responseUrl = Ember.get(resource[0], 'url');
        }
      }

      this.set('url', responseUrl);
      this.send('saveUrl');
      this.send('reset');
      this.uploadSuccess(responseUrl);
    },

    _uploadFailed(error) {
      let message;

      if ((0, _ajax.isVersionMismatchError)(error)) {
        this.notifications.showAPIError(error);
      }

      if ((0, _ajax.isUnsupportedMediaTypeError)(error)) {
        let validExtensions = this.extensions.join(', .').toUpperCase();
        validExtensions = ".".concat(validExtensions);
        message = "The image type you uploaded is not supported. Please use ".concat(validExtensions);
      } else if ((0, _ajax.isRequestEntityTooLargeError)(error)) {
        message = 'The image you uploaded was larger than the maximum file size your server allows.';
      } else if (error.payload.errors && !Ember.isBlank(error.payload.errors[0].message)) {
        message = error.payload.errors[0].message;
      } else {
        message = 'Something went wrong :(';
      }

      this.set('failureMessage', message);
      this.uploadFailed(error);
    },

    generateRequest() {
      let ajax = this.ajax;
      let formData = this.formData;
      let uploadUrl = this.uploadUrl; // CASE: we want to upload an icon and we have to POST it to a different endpoint, expecially for icons

      let url = "".concat((0, _ghostPaths.default)().apiRoot).concat(uploadUrl);
      this.uploadStarted();
      ajax.post(url, {
        data: formData,
        processData: false,
        contentType: false,
        dataType: 'text',
        xhr: () => {
          let xhr = new window.XMLHttpRequest();
          xhr.upload.addEventListener('progress', event => {
            this._uploadProgress(event);
          }, false);
          return xhr;
        }
      }).then(response => {
        this._uploadSuccess(response);
      }).catch(error => {
        this._uploadFailed(error);
      }).finally(() => {
        this.uploadFinished();
      });
    },

    _validate(file) {
      if (this.validate) {
        return this.validate(file);
      } else {
        return this._defaultValidator(file);
      }
    },

    _defaultValidator(file) {
      let extensions = this.extensions;
      let [, extension] = /(?:\.([^.]+))?$/.exec(file.name);

      if (!Ember.isArray(extensions)) {
        extensions = extensions.split(',');
      }

      if (!extension || extensions.indexOf(extension.toLowerCase()) === -1) {
        return new _ajax.UnsupportedMediaTypeError();
      }

      return true;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-infinity-loader", ["exports", "ember-infinity/components/infinity-loader", "ghost-admin/templates/components/infinity-loader"], function (_exports, _infinityLoader, _infinityLoader2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _infinityLoader.default.extend({
    layout: _infinityLoader2.default
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-koenig-editor", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    // public attrs
    classNames: ['gh-koenig-editor', 'relative', 'w-100', 'vh-100', 'overflow-x-hidden', 'overflow-y-auto', 'z-0'],
    title: '',
    titlePlaceholder: '',
    body: null,
    bodyPlaceholder: '',
    bodyAutofocus: false,
    // internal properties
    _title: null,
    _editor: null,
    _mousedownY: 0,

    // closure actions
    onTitleChange() {},

    onTitleBlur() {},

    onBodyChange() {},

    onEditorCreated() {},

    onWordCountChange() {},

    actions: {
      focusTitle() {
        this._title.focus();
      },

      // triggered when a mousedown is registered on .gh-koenig-editor-pane
      trackMousedown(event) {
        this._mousedownY = event.clientY;
      },

      // triggered when a mouseup is registered on .gh-koenig-editor-pane
      focusEditor(event) {
        if (event.target.classList.contains('gh-koenig-editor-pane')) {
          let editorCanvas = this._editor.element;
          let {
            bottom
          } = editorCanvas.getBoundingClientRect(); // if a mousedown and subsequent mouseup occurs below the editor
          // canvas, focus the editor and put the cursor at the end of the
          // document

          if (this._mousedownY > bottom && event.clientY > bottom) {
            let {
              post
            } = this._editor;
            let range = post.toRange();
            let {
              tailSection
            } = range;
            event.preventDefault();

            this._editor.focus(); // we should always have a visible cursor when focusing
            // at the bottom so create an empty paragraph if last
            // section is a card


            if (tailSection.isCardSection) {
              this._editor.run(postEditor => {
                let newSection = postEditor.builder.createMarkupSection('p');
                postEditor.insertSectionAtEnd(newSection);
                tailSection = newSection;
              });
            }

            this._editor.selectRange(tailSection.tailPosition()); // ensure we're scrolled to the bottom


            this.element.scrollTop = this.element.scrollHeight;
          }
        }
      },

      /* title related actions -------------------------------------------- */
      onTitleCreated(titleElement) {
        this._title = titleElement;
      },

      onTitleChange(newTitle) {
        this.onTitleChange(newTitle);
      },

      onTitleFocusOut() {
        this.onTitleBlur();
      },

      onTitleKeydown(event) {
        let value = event.target.value;
        let selectionStart = event.target.selectionStart; // enter will always focus the editor
        // down arrow will only focus the editor when the cursor is at the
        // end of the input to preserve the default OS behaviour

        if (event.key === 'Enter' || event.key === 'Tab' || (event.key === 'ArrowDown' || event.key === 'ArrowRight') && (!value || selectionStart === value.length)) {
          event.preventDefault(); // on Enter we also want to create a blank para if necessary

          if (event.key === 'Enter') {
            this._addParaAtTop();
          }

          this._editor.focus();
        }
      },

      /* body related actions --------------------------------------------- */
      onEditorCreated(koenig) {
        this._setupEditor(koenig);

        this.onEditorCreated(koenig);
      },

      onBodyChange(newMobiledoc) {
        this.onBodyChange(newMobiledoc);
      }

    },

    /* public methods ------------------------------------------------------- */

    /* internal methods ----------------------------------------------------- */
    _setupEditor(koenig) {
      let component = this;
      this._koenig = koenig;
      this._editor = koenig.editor; // focus the title when pressing SHIFT+TAB

      this._editor.registerKeyCommand({
        str: 'SHIFT+TAB',

        run() {
          component.send('focusTitle');
          return true;
        }

      });
    },

    _addParaAtTop() {
      if (!this._editor) {
        return;
      }

      let editor = this._editor;
      let section = editor.post.toRange().head.section; // create a blank paragraph at the top of the editor unless it's already
      // a blank paragraph

      if (section.isListItem || !section.isBlank || section.text !== '') {
        editor.run(postEditor => {
          let {
            builder
          } = postEditor;
          let newPara = builder.createMarkupSection('p');
          let sections = section.isListItem ? section.parent.parent.sections : section.parent.sections;
          postEditor.insertSectionBefore(sections, newPara, section);
        });
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-link-to-custom-views-index", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _class, _descriptor, _descriptor2, _temp;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let GhCustomViewsIndexLinkComponent = (_class = (_temp = class GhCustomViewsIndexLinkComponent extends _component.default {
    constructor(...args) {
      super(...args);

      _initializerDefineProperty(this, "customViews", _descriptor, this);

      _initializerDefineProperty(this, "router", _descriptor2, this);

      _defineProperty(this, "_forceReset", false);

      _defineProperty(this, "_lastIsActive", false);
    }

    watchRouterEvents() {
      this.router.on('routeWillChange', this.handleRouteWillChange);
    }

    unwatchRouterEvents() {
      this.router.off('routeWillChange', this.handleRouteWillChange);
    } // the top-level custom nav link will reset the filter if you're currently
    // viewing the associated screen. However, the filter will be remembered by
    // Ember automatically if you leave the screen and come back. This causes
    // odd behaviour in the nav if you were on a custom view, go to another
    // screen, then click back on the top-level nav link as you'll jump from
    // the top-level nav to the custom view.
    //
    // to get around this we keep track of the transitions so that we can force
    // the link to be a "reset" link any time navigation occurs from a custom
    // view to an unassociated screen


    handleRouteWillChange({
      from,
      to
    }) {
      let normalizedToRoute = to && to.name.replace(/_loading$/, '');

      if (from && from.name === this.args.route && normalizedToRoute !== this.args.route) {
        if (this.customViews.activeView && this.customViews.activeView.route === this.args.route) {
          this._forceReset = true;
        }
      }

      if (normalizedToRoute === this.args.route) {
        this._forceReset = false;
      }
    }

    get isActive() {
      if (this.router.currentRouteName.match(/_loading$/)) {
        return this._lastIsActive;
      }

      let currentRouteName = this.router.currentRouteName.replace(/_loading$/, '');
      this._lastIsActive = currentRouteName === this.args.route && !this.customViews.activeView;
      return this._lastIsActive;
    }

    get resetQuery() {
      if (this._forceReset || this.router.currentRouteName === this.args.route) {
        return this.args.query;
      }

      return undefined;
    }

  }, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "customViews", [Ember.inject.service], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "router", [Ember.inject.service], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "watchRouterEvents", [Ember._action], Object.getOwnPropertyDescriptor(_class.prototype, "watchRouterEvents"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "unwatchRouterEvents", [Ember._action], Object.getOwnPropertyDescriptor(_class.prototype, "unwatchRouterEvents"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleRouteWillChange", [Ember._action], Object.getOwnPropertyDescriptor(_class.prototype, "handleRouteWillChange"), _class.prototype)), _class);
  _exports.default = GhCustomViewsIndexLinkComponent;
});
;define("ghost-admin/components/gh-loading-spinner", ["exports", "ember-concurrency"], function (_exports, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    tagName: '',
    showSpinner: false,
    // ms until the loader is displayed,
    // prevents unnecessary flash of spinner
    slowLoadTimeout: 200,

    didInsertElement() {
      this.startSpinnerTimeout.perform();
    },

    startSpinnerTimeout: (0, _emberConcurrency.task)(function* () {
      yield (0, _emberConcurrency.timeout)(this.slowLoadTimeout);
      this.set('showSpinner', true);
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-markdown-editor", ["exports", "ghost-admin/mixins/shortcuts", "ghost-admin/utils/ctrl-or-cmd", "ghost-admin/utils/format-markdown"], function (_exports, _shortcuts, _ctrlOrCmd, _formatMarkdown) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend(_shortcuts.default, {
    config: Ember.inject.service(),
    notifications: Ember.inject.service(),
    settings: Ember.inject.service(),
    classNames: ['gh-markdown-editor'],
    classNameBindings: ['_isFullScreen:gh-markdown-editor-full-screen', '_isSplitScreen:gh-markdown-editor-side-by-side'],
    // Public attributes
    autofocus: false,
    imageMimeTypes: null,
    isFullScreen: false,
    markdown: null,
    options: null,
    placeholder: '',
    showMarkdownHelp: false,
    uploadedImageUrls: null,
    enableSideBySide: true,
    enablePreview: true,
    enableHemingway: true,
    shortcuts: null,
    // Private
    _editor: null,
    _editorFocused: false,
    _isFullScreen: false,
    _isSplitScreen: false,
    _isHemingwayMode: false,
    _isUploading: false,
    _showUnsplash: false,
    _uploadedImageUrls: null,

    // Closure actions
    onChange() {},

    onFullScreenToggle() {},

    onImageFilesSelected() {},

    onPreviewToggle() {},

    onSplitScreenToggle() {},

    simpleMDEOptions: Ember.computed('options', function () {
      let options = this.options || {};
      let defaultOptions = {
        // use our Showdown config with sanitization for previews
        previewRender(markdown) {
          return (0, _formatMarkdown.default)(markdown);
        },

        // Ghost-specific SimpleMDE toolbar config - allows us to create a
        // bridge between SimpleMDE buttons and Ember actions
        toolbar: ['bold', 'italic', 'heading', '|', 'quote', 'unordered-list', 'ordered-list', '|', 'link', {
          name: 'image',
          action: () => {
            this._openImageFileDialog();
          },
          className: 'fa fa-picture-o',
          title: 'Upload Image(s)'
        }, '|', {
          name: 'preview',
          action: () => {
            this._togglePreview();
          },
          className: 'fa fa-eye no-disable',
          title: 'Render Preview (Ctrl-Alt-R)',
          useCtrlOnMac: true
        }, {
          name: 'side-by-side',
          action: () => {
            this.send('toggleSplitScreen');
          },
          className: 'fa fa-columns no-disable no-mobile',
          title: 'Side-by-side Preview (Ctrl-Alt-P)',
          useCtrlOnMac: true
        }, '|', {
          name: 'spellcheck',
          action: () => {
            this._toggleSpellcheck();
          },
          className: 'fa fa-check',
          title: 'Spellcheck (Ctrl-Alt-S)',
          useCtrlOnMac: true
        }, {
          name: 'hemingway',
          action: () => {
            this._toggleHemingway();
          },
          className: 'fa fa-h-square',
          title: 'Hemingway Mode (Ctrl-Alt-H)',
          useCtrlOnMac: true
        }, {
          name: 'guide',
          action: () => {
            this.send('toggleMarkdownHelp');
          },
          className: 'fa fa-question-circle',
          title: 'Markdown Guide'
        }],
        // disable shortcuts for side-by-side and fullscreen because they
        // trigger interal SimpleMDE methods that will result in broken
        // layouts
        shortcuts: {
          toggleFullScreen: null,
          togglePreview: null,
          toggleSideBySide: null,
          drawImage: null
        },
        // only include the number of words in the status bar
        status: ['words']
      };
      let toolbar = defaultOptions.toolbar;

      if (!this.enableSideBySide) {
        let sideBySide = toolbar.findBy('name', 'side-by-side');
        let index = toolbar.indexOf(sideBySide);
        toolbar.splice(index, 1);
      }

      if (!this.enablePreview) {
        let preview = toolbar.findBy('name', 'preview');
        let index = toolbar.indexOf(preview);
        toolbar.splice(index, 1);
      }

      if (!this.enableHemingway) {
        let hemingway = toolbar.findBy('name', 'hemingway');
        let index = toolbar.indexOf(hemingway);
        toolbar.splice(index, 1);
      }

      if (this.get('settings.unsplash.isActive')) {
        let image = toolbar.findBy('name', 'image');
        let index = toolbar.indexOf(image) + 1;
        toolbar.splice(index, 0, {
          name: 'unsplash',
          action: () => {
            this.send('toggleUnsplash');
          },
          className: 'fa fa-camera',
          title: 'Add Image from Unsplash'
        });
      }

      let lastItem = null;
      toolbar.forEach((item, index) => {
        if (item === '|' && item === lastItem) {
          toolbar[index] = null;
        }

        lastItem = item;
      });
      defaultOptions.toolbar = toolbar.filter(Boolean);
      return Ember.assign(defaultOptions, options);
    }),

    init() {
      this._super(...arguments);

      let shortcuts = {};
      shortcuts["".concat(_ctrlOrCmd.default, "+shift+i")] = {
        action: 'openImageFileDialog'
      };
      shortcuts['ctrl+alt+s'] = {
        action: 'toggleSpellcheck'
      };

      if (this.enablePreview) {
        shortcuts['ctrl+alt+r'] = {
          action: 'togglePreview'
        };
      }

      if (this.enableSideBySide) {
        shortcuts['ctrl+alt+p'] = {
          action: 'toggleSplitScreen'
        };
      }

      if (this.enableHemingway) {
        shortcuts['ctrl+alt+h'] = {
          action: 'toggleHemingway'
        };
      }

      this.shortcuts = shortcuts;
    },

    // extract markdown content from single markdown card
    didReceiveAttrs() {
      this._super(...arguments);

      let uploadedImageUrls = this.uploadedImageUrls;

      if (!Ember.isEmpty(uploadedImageUrls) && uploadedImageUrls !== this._uploadedImageUrls) {
        this._uploadedImageUrls = uploadedImageUrls; // must be done afterRender to avoid double modify of mobiledoc in a single render

        Ember.run.scheduleOnce('afterRender', this, this._insertImages, uploadedImageUrls);
      } // focus the editor when the markdown value changes, this is necessary
      // because both the autofocus and markdown values can change without a
      // re-render, eg. navigating from edit->new


      if (this.autofocus && this._editor && this.markdown !== this._editor.value()) {
        this.send('focusEditor');
      } // use internal values to avoid updating bound values


      if (!Ember.isEmpty(this.isFullScreen)) {
        this.set('_isFullScreen', this.isFullScreen);
      }

      if (!Ember.isEmpty(this.isSplitScreen)) {
        this.set('_isSplitScreen', this.isSplitScreen);
      }

      this._updateButtonState();
    },

    didInsertElement() {
      this._super(...arguments);

      this.registerShortcuts(); // HACK: iOS will scroll the body up when activating the keyboard, this
      // causes problems in the CodeMirror based editor because iOS doesn't
      // scroll the cursor and other measurement elements which results in
      // rather unfriendly behaviour with text appearing in seemingly random
      // places and an inability to select things properly
      //
      // To get around this we use a raf loop that constantly makes sure the
      // body scrollTop is 0 when the editor is on screen

      let iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);

      if (iOS) {
        this._preventBodyScroll();
      }
    },

    willDestroyElement() {
      if (this._isSplitScreen) {
        this._disconnectSplitPreview();
      }

      this.removeShortcuts();

      this._super(...arguments);

      if (this._preventBodyScrollId) {
        window.cancelAnimationFrame(this._preventBodyScrollId);
      }
    },

    actions: {
      // trigger external update, any mobiledoc updates are handled there
      updateMarkdown(markdown) {
        this.onChange(markdown);
      },

      // store a reference to the simplemde editor so that we can handle
      // focusing and image uploads
      setEditor(editor) {
        this._editor = editor; // disable CodeMirror's drag/drop handling as we want to handle that
        // in the parent gh-editor component

        this._editor.codemirror.setOption('dragDrop', false); // default to spellchecker being off


        this._editor.codemirror.setOption('mode', 'gfm'); // add non-breaking space as a special char
        // eslint-disable-next-line no-control-regex


        this._editor.codemirror.setOption('specialChars', /[\u0000-\u001f\u007f-\u009f\u00ad\u061c\u200b-\u200f\u2028\u2029\ufeff\xa0]/g);

        this._updateButtonState();
      },

      // used by the title input when the TAB or ENTER keys are pressed
      focusEditor(position = 'bottom') {
        this._editor.codemirror.focus();

        if (position === 'bottom') {
          this._editor.codemirror.execCommand('goDocEnd');
        } else if (position === 'top') {
          this._editor.codemirror.execCommand('goDocStart');
        }

        return false;
      },

      // HACK FIXME (PLEASE):
      // - clicking toolbar buttons will cause the editor to lose focus
      // - this is painful because we often want to know if the editor has focus
      //   so that we can insert images and so on in the correct place
      // - the blur event will always fire before the button action is triggered 😞
      // - to work around this we track focus state manually and set it to false
      //   after an arbitrary period that's long enough to allow the button action
      //   to trigger first
      // - this _may_ well have unknown issues due to browser differences,
      //   variations in performance, moon cycles, sun spots, or cosmic rays
      // - here be 🐲
      // - (please let it work 🙏)
      updateFocusState(focused) {
        if (focused) {
          this._editorFocused = true;
        } else {
          Ember.run.later(this, function () {
            this._editorFocused = false;
          }, 100);
        }
      },

      openImageFileDialog() {
        let captureSelection = this._editor.codemirror.hasFocus();

        this._openImageFileDialog({
          captureSelection
        });
      },

      toggleUnsplash() {
        if (this._showUnsplash) {
          return this.toggleProperty('_showUnsplash');
        } // capture current selection before it's lost by clicking toolbar btn


        if (this._editorFocused) {
          this._imageInsertSelection = {
            anchor: this._editor.codemirror.getCursor('anchor'),
            head: this._editor.codemirror.getCursor('head')
          };
        }

        this.toggleProperty('_showUnsplash');
      },

      insertUnsplashPhoto({
        src,
        alt,
        caption
      }) {
        let image = {
          alt,
          url: src,
          credit: "<small>".concat(caption, "</small>")
        };

        this._insertImages([image]);
      },

      togglePreview() {
        this._togglePreview();
      },

      toggleFullScreen() {
        let isFullScreen = !this._isFullScreen;
        this.set('_isFullScreen', isFullScreen);

        this._updateButtonState();

        this.onFullScreenToggle(isFullScreen); // leave split screen when exiting full screen mode

        if (!isFullScreen && this._isSplitScreen) {
          this.send('toggleSplitScreen');
        }
      },

      toggleSplitScreen() {
        let isSplitScreen = !this._isSplitScreen;
        let previewButton = this._editor.toolbarElements.preview;
        this.set('_isSplitScreen', isSplitScreen);

        this._updateButtonState(); // set up the preview rendering and scroll sync
        // afterRender is needed so that necessary components have been
        // added/removed and editor pane length has settled


        if (isSplitScreen) {
          // disable the normal SimpleMDE preview if it's active
          if (this._editor.isPreviewActive()) {
            let preview = this._editor.toolbar.find(button => button.name === 'preview');

            preview.action(this._editor);
          }

          if (previewButton) {
            previewButton.classList.add('disabled');
          }

          Ember.run.scheduleOnce('afterRender', this, this._connectSplitPreview);
        } else {
          if (previewButton) {
            previewButton.classList.remove('disabled');
          }

          Ember.run.scheduleOnce('afterRender', this, this._disconnectSplitPreview);
        }

        this.onSplitScreenToggle(isSplitScreen); // go fullscreen when entering split screen mode

        this.send('toggleFullScreen');
      },

      toggleSpellcheck() {
        this._toggleSpellcheck();
      },

      toggleHemingway() {
        this._toggleHemingway();
      },

      toggleMarkdownHelp() {
        this.toggleProperty('showMarkdownHelp');
      }

    },

    _preventBodyScroll() {
      this._preventBodyScrollId = window.requestAnimationFrame(() => {
        let body = document.querySelector('body'); // only scroll the editor if the editor is active so that we don't
        // clobber scroll-to-input behaviour in the PSM

        if (document.activeElement.closest('.CodeMirror')) {
          if (body.scrollTop !== 0) {
            let editor = document.querySelector('.gh-markdown-editor'); // scroll the editor by the same amount the body has been scrolled,
            // this should keep the cursor on screen when opening the keyboard

            editor.scrollTop += body.scrollTop;
            body.scrollTop = 0;
          }
        }

        this._preventBodyScroll();
      });
    },

    _insertImages(urls) {
      let cm = this._editor.codemirror; // loop through urls and generate image markdown

      let images = urls.map(url => {
        // plain url string, so extract filename from path
        if (Ember.typeOf(url) === 'string') {
          let filename = url.split('/').pop();
          let alt = filename; // if we have a normal filename.ext, set alt to filename -ext

          if (filename.lastIndexOf('.') > 0) {
            alt = filename.slice(0, filename.lastIndexOf('.'));
          }

          return "![".concat(alt, "](").concat(url, ")"); // full url object, use attrs we're given
        } else {
          let image = "![".concat(url.alt, "](").concat(url.url, ")");

          if (url.credit) {
            image += "\n".concat(url.credit);
          }

          return image;
        }
      });
      let text = images.join('\n\n'); // clicking the image toolbar button will lose the selection so we use
      // the captured selection to re-select here

      if (this._imageInsertSelection) {
        // we want to focus but not re-position
        this.send('focusEditor', null); // re-select and clear the captured selection so drag/drop still
        // inserts at the correct place

        cm.setSelection(this._imageInsertSelection.anchor, this._imageInsertSelection.head);
        this._imageInsertSelection = null;
      } // focus editor and place cursor at end if not already focused


      if (!cm.hasFocus()) {
        this.send('focusEditor');
        text = "\n\n".concat(text, "\n\n");
      } // insert at cursor or replace selection then position cursor at end
      // of inserted text


      cm.replaceSelection(text, 'end');
    },

    // mark the split-pane/full-screen/spellcheck buttons active when they're active
    _updateButtonState() {
      if (this._editor) {
        let sideBySideButton = this._editor.toolbarElements['side-by-side'];
        let spellcheckButton = this._editor.toolbarElements.spellcheck;
        let hemingwayButton = this._editor.toolbarElements.hemingway;

        if (sideBySideButton) {
          if (this._isSplitScreen) {
            sideBySideButton.classList.add('active');
          } else {
            sideBySideButton.classList.remove('active');
          }
        }

        if (spellcheckButton) {
          if (this._editor.codemirror.getOption('mode') === 'spell-checker') {
            spellcheckButton.classList.add('active');
          } else {
            spellcheckButton.classList.remove('active');
          }
        }

        if (hemingwayButton) {
          if (this._isHemingwayMode) {
            hemingwayButton.classList.add('active');
          } else {
            hemingwayButton.classList.remove('active');
          }
        }
      }
    },

    // set up the preview auto-update and scroll sync
    _connectSplitPreview() {
      let cm = this._editor.codemirror;
      let editor = this._editor;
      let editorPane = this.element.querySelector('.gh-markdown-editor-pane');
      let previewPane = this.element.querySelector('.gh-markdown-editor-preview');
      let previewContent = this.element.querySelector('.gh-markdown-editor-preview-content');
      this._editorPane = editorPane;
      this._previewPane = previewPane;
      this._previewContent = previewContent; // from SimpleMDE -------

      let sideBySideRenderingFunction = function () {
        previewContent.innerHTML = editor.options.previewRender(editor.value(), previewContent);
      };

      cm.sideBySideRenderingFunction = sideBySideRenderingFunction;
      sideBySideRenderingFunction();
      cm.on('update', cm.sideBySideRenderingFunction); // Refresh to fix selection being off (#309)

      cm.refresh(); // ----------------------

      this._onEditorPaneScroll = this._scrollHandler.bind(this);
      editorPane.addEventListener('scroll', this._onEditorPaneScroll, false);

      this._scrollSync();
    },

    _scrollHandler() {
      if (!this._scrollSyncTicking) {
        requestAnimationFrame(this._scrollSync.bind(this));
      }

      this._scrollSyncTicking = true;
    },

    _scrollSync() {
      let editorPane = this._editorPane;
      let previewPane = this._previewPane;
      let height = editorPane.scrollHeight - editorPane.clientHeight;
      let ratio = parseFloat(editorPane.scrollTop) / height;
      let move = (previewPane.scrollHeight - previewPane.clientHeight) * ratio;
      previewPane.scrollTop = move;
      this._scrollSyncTicking = false;
    },

    _disconnectSplitPreview() {
      let cm = this._editor.codemirror;
      cm.off('update', cm.sideBySideRenderingFunction);
      cm.refresh();

      this._editorPane.removeEventListener('scroll', this._onEditorPaneScroll, false);

      delete this._previewPane;
      delete this._previewPaneContent;
      delete this._onEditorPaneScroll;
    },

    _openImageFileDialog({
      captureSelection = true
    } = {}) {
      if (captureSelection) {
        // capture the current selection before it's lost by clicking the
        // file input button
        this._imageInsertSelection = {
          anchor: this._editor.codemirror.getCursor('anchor'),
          head: this._editor.codemirror.getCursor('head')
        };
      } // trigger the dialog via gh-file-input, when a file is selected it will
      // trigger the onImageFilesSelected closure action


      this.element.querySelector('input[type="file"]').click();
    },

    // wrap SimpleMDE's built-in preview toggle so that we can trigger a closure
    // action that can apply our own classes higher up in the DOM
    _togglePreview() {
      this.onPreviewToggle(!this._editor.isPreviewActive());

      this._editor.togglePreview();
    },

    _toggleSpellcheck() {
      let cm = this._editor.codemirror;

      if (cm.getOption('mode') === 'spell-checker') {
        cm.setOption('mode', 'gfm');
      } else {
        cm.setOption('mode', 'spell-checker');
      }

      this._updateButtonState();
    },

    _toggleHemingway() {
      let cm = this._editor.codemirror;
      let extraKeys = cm.getOption('extraKeys');
      let notificationText = '';
      this._isHemingwayMode = !this._isHemingwayMode;

      if (this._isHemingwayMode) {
        notificationText = '<span class="gh-notification-title">Hemingway Mode On:</span> Write now; edit later. Backspace disabled.';

        extraKeys.Backspace = function () {};
      } else {
        notificationText = '<span class="gh-notification-title">Hemingway Mode Off:</span> Normal editing restored.';
        delete extraKeys.Backspace;
      }

      cm.setOption('extraKeys', extraKeys);

      this._updateButtonState();

      cm.focus();
      this.notifications.showNotification(Ember.String.htmlSafe(notificationText), {
        key: 'editor.hemingwaymode'
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-member-avatar", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const stringToHslColor = function (str, saturation, lightness) {
    var hash = 0;

    for (var i = 0; i < str.length; i++) {
      hash = str.charCodeAt(i) + ((hash << 5) - hash);
    }

    var h = hash % 360;
    return 'hsl(' + h + ', ' + saturation + '%, ' + lightness + '%)';
  };

  class GhMemberAvatarComponent extends _component.default {
    get memberName() {
      let {
        member
      } = this.args;
      return member.name || member.email || 'NM';
    }

    get backgroundStyle() {
      let color = stringToHslColor(this.memberName, 55, 55);
      return Ember.String.htmlSafe("background-color: ".concat(color));
    }

    get initials() {
      if (this.memberName === 'NM') {
        return 'NM';
      }

      let names = this.memberName.split(' ');
      let intials = names.length > 1 ? [names[0][0], names[names.length - 1][0]] : [names[0][0]];
      return intials.join('').toUpperCase();
    }

  }

  _exports.default = GhMemberAvatarComponent;
});
;define("ghost-admin/components/gh-member-label-input", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    store: Ember.inject.service(),
    // public attrs
    member: null,
    labelName: '',
    // internal attrs
    _availableLabels: null,
    selectedLabels: Ember.computed.reads('member.labels'),
    availableLabels: Ember.computed.sort('_availableLabels.[]', function (labelA, labelB) {
      // ignorePunctuation means the # in label names is ignored
      return labelA.name.localeCompare(labelB.name, undefined, {
        ignorePunctuation: true
      });
    }),
    availableLabelNames: Ember.computed('availableLabels.@each.name', function () {
      return this.availableLabels.map(label => label.name.toLowerCase());
    }),

    init() {
      this._super(...arguments); // perform a background query to fetch all users and set `availableLabels`
      // to a live-query that will be immediately populated with what's in the
      // store and be updated when the above query returns


      this.store.query('label', {
        limit: 'all'
      });
      this.set('_availableLabels', this.store.peekAll('label'));
    },

    actions: {
      matchLabels(labelName, term) {
        return labelName.toLowerCase() === term.trim().toLowerCase();
      },

      hideCreateOptionOnMatchingLabel(term) {
        return !this.availableLabelNames.includes(term.toLowerCase());
      },

      updateLabels(newLabels) {
        let currentLabels = this.get('member.labels'); // destroy new+unsaved labels that are no longer selected

        currentLabels.forEach(function (label) {
          if (!newLabels.includes(label) && label.get('isNew')) {
            label.destroyRecord();
          }
        }); // update labels

        return this.set('member.labels', newLabels);
      },

      createLabel(labelName) {
        let currentLabels = this.get('member.labels');
        let currentLabelNames = currentLabels.map(label => label.get('name').toLowerCase());
        let labelToAdd;
        labelName = labelName.trim(); // abort if label is already selected

        if (currentLabelNames.includes(labelName.toLowerCase())) {
          return;
        } // find existing label if there is one


        labelToAdd = this._findLabelByName(labelName); // create new label if no match

        if (!labelToAdd) {
          labelToAdd = this.store.createRecord('label', {
            name: labelName
          });
        } // push label onto member relationship


        return currentLabels.pushObject(labelToAdd);
      }

    },

    // methods
    _findLabelByName(name) {
      let withMatchingName = function (label) {
        return label.name.toLowerCase() === name.toLowerCase();
      };

      return this.availableLabels.find(withMatchingName);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-member-settings-form", ["exports", "moment"], function (_exports, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    settings: Ember.inject.service(),
    feature: Ember.inject.service(),
    config: Ember.inject.service(),
    mediaQueries: Ember.inject.service(),
    // Allowed actions
    setProperty: () => {},
    hasMultipleSubscriptions: Ember.computed.gt('member.stripe', 1),
    canShowStripeInfo: Ember.computed('member.isNew', 'settings.membersSubscriptionSettings', function () {
      let membersSubscriptionSettings = this.settings.parseSubscriptionSettings(this.get('settings.membersSubscriptionSettings'));
      let stripeEnabled = membersSubscriptionSettings && !!membersSubscriptionSettings.paymentProcessors[0].config.secret_token && !!membersSubscriptionSettings.paymentProcessors[0].config.public_token;

      if (this.member.isNew || !stripeEnabled) {
        return false;
      } else {
        return true;
      }
    }),
    subscriptions: Ember.computed('member.stripe', function () {
      let subscriptions = this.member.get('stripe');

      if (subscriptions && subscriptions.length > 0) {
        return subscriptions.map(subscription => {
          return {
            id: subscription.id,
            customer: subscription.customer,
            name: subscription.name || '',
            email: subscription.email || '',
            status: subscription.status,
            startDate: subscription.start_date ? (0, _moment.default)(subscription.start_date).format('MMM DD YYYY') : '-',
            plan: subscription.plan,
            amount: parseInt(subscription.plan.amount) ? subscription.plan.amount / 100 : 0,
            cancelAtPeriodEnd: subscription.cancel_at_period_end,
            validUntil: subscription.current_period_end ? (0, _moment.default)(subscription.current_period_end).format('MMM DD YYYY') : '-'
          };
        }).reverse();
      }

      return null;
    }),
    actions: {
      setProperty(property, value) {
        this.setProperty(property, value);
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-members-chart", ["exports", "moment"], function (_exports, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    feature: Ember.inject.service(),
    members: null,
    range: '30',
    selectedRange: Ember.computed('range', function () {
      const availableRange = this.get('availableRange');
      return availableRange.findBy('days', this.get('range'));
    }),
    availableRange: Ember.computed(function () {
      return [{
        name: '30 days',
        days: '30'
      }, {
        name: '90 days',
        days: '90'
      }, {
        name: '365 days',
        days: '365'
      }, {
        name: 'All time',
        days: 'all-time'
      }];
    }),
    subData: Ember.computed('members.@each', 'range', 'feature.nightShift', function () {
      let isNightShiftEnabled = this.feature.nightShift;
      let {
        members,
        range
      } = this;
      let rangeInDays, rangeStartDate, rangeEndDate;

      if (range === 'last-year') {
        rangeStartDate = (0, _moment.default)().startOf('year').subtract(1, 'year');
        rangeEndDate = (0, _moment.default)().endOf('year').subtract(1, 'year').subtract(1, 'day');
        rangeInDays = rangeEndDate.diff(rangeStartDate, 'days');
      } else if (range === 'all-time') {
        let firstMemberCreatedDate = members.length ? members.lastObject.get('createdAtUTC') : (0, _moment.default)().subtract(365, 'days');
        rangeStartDate = (0, _moment.default)(firstMemberCreatedDate);
        rangeEndDate = (0, _moment.default)();
        rangeInDays = rangeEndDate.diff(rangeStartDate, 'days');

        if (rangeInDays < 5) {
          rangeStartDate = (0, _moment.default)().subtract(6, 'days');
          rangeInDays = rangeEndDate.diff(rangeStartDate, 'days');
        }

        let step = this.getTicksForRange(rangeInDays);
        rangeInDays = Math.ceil(rangeInDays / step) * step;
        rangeStartDate = (0, _moment.default)().subtract(rangeInDays, 'days');
      } else {
        rangeInDays = parseInt(range);
        rangeStartDate = (0, _moment.default)().subtract(rangeInDays, 'days');
        rangeEndDate = (0, _moment.default)();
      }

      let totalSubs = members.length || 0;
      let totalSubsLastMonth = members.filter(member => {
        let isValid = (0, _moment.default)(member.createdAtUTC).isSameOrAfter(rangeStartDate, 'day');
        return isValid;
      }).length;
      let totalSubsToday = members.filter(member => {
        let isValid = (0, _moment.default)(member.createdAtUTC).isSame((0, _moment.default)(), 'day');
        return isValid;
      }).length;
      return {
        startDateLabel: (0, _moment.default)(rangeStartDate).format('MMM DD, YYYY'),
        chartData: this.getChartData(members, (0, _moment.default)(rangeStartDate), (0, _moment.default)(rangeEndDate), isNightShiftEnabled),
        totalSubs: totalSubs,
        totalSubsToday: totalSubsToday,
        totalSubsInRange: totalSubsLastMonth
      };
    }),

    init() {
      this._super(...arguments);

      this.setChartJSDefaults();
    },

    actions: {
      changeDateRange(range) {
        this.set('range', Ember.get(range, 'days'));
      }

    },

    setChartJSDefaults() {
      let isNightShiftEnabled = this.feature.nightShift;
      Chart.defaults.LineWithLine = Chart.defaults.line;
      Chart.controllers.LineWithLine = Chart.controllers.line.extend({
        draw: function (ease) {
          Chart.controllers.line.prototype.draw.call(this, ease);

          if (this.chart.tooltip._active && this.chart.tooltip._active.length) {
            var activePoint = this.chart.tooltip._active[0],
                ctx = this.chart.ctx,
                x = activePoint.tooltipPosition().x,
                topY = this.chart.scales['y-axis-0'].top,
                bottomY = this.chart.scales['y-axis-0'].bottom; // draw line

            ctx.save();
            ctx.beginPath();
            ctx.moveTo(x, topY);
            ctx.lineTo(x, bottomY);
            ctx.lineWidth = 1;
            ctx.strokeStyle = isNightShiftEnabled ? 'rgba(62, 176, 239, 0.65)' : 'rgba(62, 176, 239, 0.8)';
            ctx.stroke();
            ctx.restore();
          }
        }
      });
    },

    getTicksForRange(rangeInDays) {
      if (rangeInDays <= 30) {
        return 6;
      } else if (rangeInDays <= 90) {
        return 18;
      } else {
        return 24;
      }
    },

    getChartData(members, startDate, endDate, isNightShiftEnabled) {
      this.setChartJSDefaults();
      let dateFormat = 'MMM DD, YYYY';
      let monthData = [];
      let dateLabel = [];
      let rangeInDays = endDate.diff(startDate, 'days');

      for (var m = (0, _moment.default)(startDate); m.isSameOrBefore(endDate, 'day'); m.add(1, 'days')) {
        dateLabel.push(m.format(dateFormat));
        let membersTillDate = members.filter(member => {
          let isValid = (0, _moment.default)(member.createdAtUTC).isSameOrBefore(m, 'day');
          return isValid;
        }).length;
        monthData.push(membersTillDate);
      }

      let maxTicksAllowed = this.getTicksForRange(rangeInDays);
      return {
        data: {
          labels: dateLabel,
          datasets: [{
            label: 'Total members',
            cubicInterpolationMode: 'monotone',
            data: monthData,
            fill: false,
            backgroundColor: 'rgba(62,176,239,.9)',
            pointRadius: 0,
            pointHitRadius: 10,
            borderColor: 'rgba(62,176,239,.9)',
            borderJoinStyle: 'round'
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          layout: {
            padding: {
              top: 5,
              // Needed otherwise the top dot is cut
              right: 10,
              bottom: 5,
              left: 10
            }
          },
          title: {
            display: false
          },
          tooltips: {
            intersect: false,
            mode: 'index',
            displayColors: false,
            backgroundColor: '#343f44',
            xPadding: 7,
            yPadding: 7,
            cornerRadius: 5,
            caretSize: 7,
            caretPadding: 5,
            bodyFontSize: 13,
            titleFontStyle: 'normal',
            titleFontColor: 'rgba(255, 255, 255, 0.7)',
            titleMarginBottom: 4
          },
          hover: {
            mode: 'index',
            intersect: false,
            animationDuration: 120
          },
          legend: {
            display: false
          },
          scales: {
            xAxes: [{
              labelString: 'Date',
              gridLines: {
                drawTicks: false,
                color: isNightShiftEnabled ? '#333F44' : '#E5EFF5',
                zeroLineColor: isNightShiftEnabled ? '#333F44' : '#E5EFF5'
              },
              ticks: {
                display: false,
                maxRotation: 0,
                minRotation: 0,
                padding: 6,
                autoSkip: false,
                maxTicksLimit: 10,
                callback: function (value, index, values) {
                  let step = (values.length - 1) / maxTicksAllowed;
                  let steps = [];

                  for (let i = 0; i < maxTicksAllowed; i++) {
                    steps.push(Math.round(i * step));
                  }

                  if (index === 0) {
                    return value;
                  }

                  if (index === values.length - 1) {
                    return 'Today';
                  }

                  if (steps.includes(index)) {
                    return '';
                  }
                }
              }
            }],
            yAxes: [{
              gridLines: {
                drawTicks: false,
                display: false,
                drawBorder: false
              },
              ticks: {
                display: false,
                beginAtZero: true
              }
            }]
          }
        }
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-members-contentfilter", ["exports", "@glimmer/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _class, _descriptor, _temp;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  let GhMembersContentfilterComponent = (_class = (_temp = class GhMembersContentfilterComponent extends _component.default {
    constructor(...args) {
      super(...args);

      _initializerDefineProperty(this, "session", _descriptor, this);
    }

  }, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "session", [Ember.inject.service], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class);
  _exports.default = GhMembersContentfilterComponent;
});
;define("ghost-admin/components/gh-members-lab-setting", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const US = {
    flag: '🇺🇸',
    name: 'US',
    baseUrl: 'https://api.mailgun.net/v3'
  };
  const EU = {
    flag: '🇪🇺',
    name: 'EU',
    baseUrl: 'https://api.eu.mailgun.net/v3'
  };
  const CURRENCIES = [{
    label: 'USD - US Dollar',
    value: 'usd'
  }, {
    label: 'AUD - Australian Dollar',
    value: 'aud'
  }, {
    label: 'CAD - Canadian Dollar',
    value: 'cad'
  }, {
    label: 'EUR - Euro',
    value: 'eur'
  }, {
    label: 'GBP - British Pound',
    value: 'gbp'
  }];

  var _default = Ember.Component.extend({
    feature: Ember.inject.service(),
    config: Ember.inject.service(),
    mediaQueries: Ember.inject.service(),
    currencies: null,

    // passed in actions
    setMembersSubscriptionSettings() {},

    defaultContentVisibility: Ember.computed.reads('settings.defaultContentVisibility'),
    selectedCurrency: Ember.computed('subscriptionSettings.stripeConfig.plans.monthly.currency', function () {
      return CURRENCIES.findBy('value', this.get('subscriptionSettings.stripeConfig.plans.monthly.currency'));
    }),
    mailgunRegion: Ember.computed('settings.bulkEmailSettings.baseUrl', function () {
      if (!this.settings.get('bulkEmailSettings.baseUrl')) {
        return US;
      }

      return [US, EU].find(region => {
        return region.baseUrl === this.settings.get('bulkEmailSettings.baseUrl');
      });
    }),
    blogDomain: Ember.computed('config.blogDomain', function () {
      let domain = this.config.blogDomain || '';
      const host = domain.replace('https://', '').replace('http://', '').split('/');
      return host && host[0] || '';
    }),
    subscriptionSettings: Ember.computed('settings.membersSubscriptionSettings', function () {
      let subscriptionSettings = this.settings.parseSubscriptionSettings(this.get('settings.membersSubscriptionSettings'));
      let stripeProcessor = subscriptionSettings.paymentProcessors.find(proc => {
        return proc.adapter === 'stripe';
      });
      let monthlyPlan = stripeProcessor.config.plans.find(plan => plan.interval === 'month');
      let yearlyPlan = stripeProcessor.config.plans.find(plan => plan.interval === 'year' && plan.name !== 'Complimentary'); // NOTE: need to be careful about division by zero if we introduce zero decimal currencies
      //       ref.: https://stripe.com/docs/currencies#zero-decimal

      monthlyPlan.amount = parseInt(monthlyPlan.amount) ? monthlyPlan.amount / 100 : 0;
      yearlyPlan.amount = parseInt(yearlyPlan.amount) ? yearlyPlan.amount / 100 : 0;
      stripeProcessor.config.plans = {
        monthly: monthlyPlan,
        yearly: yearlyPlan
      };
      subscriptionSettings.stripeConfig = stripeProcessor.config;
      subscriptionSettings.allowSelfSignup = !!subscriptionSettings.allowSelfSignup;
      subscriptionSettings.fromAddress = subscriptionSettings.fromAddress || '';
      return subscriptionSettings;
    }),
    bulkEmailSettings: Ember.computed('settings.bulkEmailSettings', function () {
      let bulkEmailSettings = this.get('settings.bulkEmailSettings') || {};
      const {
        apiKey = '',
        baseUrl = US.baseUrl,
        domain = ''
      } = bulkEmailSettings;
      return {
        apiKey,
        baseUrl,
        domain
      };
    }),
    hasBulkEmailConfig: Ember.computed('settings.bulkEmailSettings', function () {
      let bulkEmailSettings = this.get('settings.bulkEmailSettings');
      return !!bulkEmailSettings.isConfig;
    }),

    init() {
      this._super(...arguments);

      this.set('mailgunRegions', [US, EU]);
      this.set('currencies', CURRENCIES);
    },

    actions: {
      setDefaultContentVisibility(value) {
        this.setDefaultContentVisibility(value);
      },

      setBulkEmailSettings(key, event) {
        let bulkEmailSettings = this.get('settings.bulkEmailSettings') || {};
        bulkEmailSettings[key] = event.target.value;

        if (!bulkEmailSettings.baseUrl) {
          Ember.set(bulkEmailSettings, 'baseUrl', US.baseUrl);
        }

        this.setBulkEmailSettings(bulkEmailSettings);
      },

      setBulkEmailRegion(region) {
        let bulkEmailSettings = this.get('settings.bulkEmailSettings') || {};
        Ember.set(bulkEmailSettings, 'baseUrl', region.baseUrl);
        this.setBulkEmailSettings(bulkEmailSettings);
      },

      setSubscriptionSettings(key, event) {
        let subscriptionSettings = this.settings.parseSubscriptionSettings(this.get('settings.membersSubscriptionSettings'));
        let stripeProcessor = subscriptionSettings.paymentProcessors.find(proc => {
          return proc.adapter === 'stripe';
        });
        let stripeConfig = stripeProcessor.config;
        stripeConfig.product = {
          name: this.settings.get('title')
        };

        if (key === 'secret_token' || key === 'public_token') {
          stripeConfig[key] = event.target.value;
        }

        if (key === 'month' || key === 'year') {
          stripeConfig.plans = stripeConfig.plans.map(plan => {
            if (key === plan.interval && plan.name !== 'Complimentary') {
              plan.amount = parseInt(event.target.value) ? event.target.value * 100 : 0;
            }

            return plan;
          });
        }

        if (key === 'allowSelfSignup') {
          subscriptionSettings.allowSelfSignup = !subscriptionSettings.allowSelfSignup;
        }

        if (key === 'fromAddress') {
          subscriptionSettings.fromAddress = event.target.value;
        }

        if (key === 'currency') {
          stripeProcessor.config.plans.forEach(plan => {
            if (plan.name !== 'Complimentary') {
              plan.currency = event.value;
            }
          }); // NOTE: need to keep Complimentary plans with all available currencies so they don't conflict
          //       when applied to members with existing subscriptions in different currencies (ref. https://stripe.com/docs/billing/customer#currency)

          let currentCurrencyComplimentary = stripeProcessor.config.plans.filter(plan => plan.currency === event.value && plan.name === 'Complimentary');

          if (!currentCurrencyComplimentary.length) {
            let complimentary = {
              name: 'Complimentary',
              currency: event.value,
              interval: 'year',
              amount: '0'
            };
            stripeProcessor.config.plans.push(complimentary);
          }

          stripeProcessor.config.currency = event.value;
        }

        this.setMembersSubscriptionSettings(subscriptionSettings);
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-members-list-item", ["exports", "@glimmer/component", "moment"], function (_exports, _component, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  class GhMembersListItemComponent extends _component.default {
    get memberSince() {
      return (0, _moment.default)(this.args.member.createdAtUTC).from((0, _moment.default)());
    }

  }

  _exports.default = GhMembersListItemComponent;
});
;define("ghost-admin/components/gh-members-no-members", ["exports", "ember-concurrency"], function (_exports, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    session: Ember.inject.service(),
    store: Ember.inject.service(),
    notifications: Ember.inject.service(),
    actions: {
      addYourself() {
        return this.add.perform();
      }

    },
    add: (0, _emberConcurrency.task)(function* () {
      const member = this.store.createRecord('member', {
        email: this.get('session.user.email'),
        name: this.get('session.user.name')
      });

      try {
        // NOTE: has to be before member.save() is performed otherwise component is
        //       destroyed before notification is shown
        this.notifications.showNotification('Member added'.htmlSafe(), {
          description: 'You\'ve successfully added yourself as a member.'
        });
        return yield member.save();
      } catch (error) {
        if (error) {
          this.notifications.showAPIError(error, {
            key: 'member.save'
          });
        }
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-mobile-nav-bar", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    ui: Ember.inject.service(),
    tagName: 'nav',
    classNames: ['gh-mobile-nav-bar']
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-nav-menu", ["exports", "ghost-admin/mixins/shortcuts", "ember-basic-dropdown/utils/calculate-position", "ghost-admin/utils/ctrl-or-cmd"], function (_exports, _shortcuts, _calculatePosition, _ctrlOrCmd) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend(_shortcuts.default, {
    config: Ember.inject.service(),
    customViews: Ember.inject.service(),
    feature: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    navigation: Ember.inject.service(),
    router: Ember.inject.service(),
    session: Ember.inject.service(),
    ui: Ember.inject.service(),
    whatsNew: Ember.inject.service(),
    tagName: 'nav',
    classNames: ['gh-nav'],
    iconStyle: '',
    showSearchModal: false,
    shortcuts: null,
    isIntegrationRoute: Ember.computed.match('router.currentRouteName', /^settings\.integration/),
    isSettingsRoute: Ember.computed.match('router.currentRouteName', /^settings/),
    // HACK: {{link-to}} should be doing this automatically but there appears to
    // be a bug in Ember that's preventing it from working immediately after login
    isOnSite: Ember.computed.equal('router.currentRouteName', 'site'),
    showMenuExtension: Ember.computed.and('config.clientExtensions.menu', 'session.user.isOwner'),
    showDropdownExtension: Ember.computed.and('config.clientExtensions.dropdown', 'session.user.isOwner'),
    showScriptExtension: Ember.computed.and('config.clientExtensions.script', 'session.user.isOwner'),
    showBilling: Ember.computed.reads('config.billingUrl'),

    init() {
      this._super(...arguments);

      let shortcuts = {};
      shortcuts["".concat(_ctrlOrCmd.default, "+k")] = {
        action: 'toggleSearchModal'
      };
      this.shortcuts = shortcuts;
    },

    // the menu has a rendering issue (#8307) when the the world is reloaded
    // during an import which we have worked around by not binding the icon
    // style directly. However we still need to keep track of changing icons
    // so that we can refresh when a new icon is uploaded
    didReceiveAttrs() {
      this._setIconStyle();
    },

    didInsertElement() {
      this._super(...arguments);

      this.registerShortcuts();
    },

    willDestroyElement() {
      this.removeShortcuts();

      this._super(...arguments);
    },

    actions: {
      transitionToOrRefreshSite() {
        let {
          currentRouteName
        } = this.router;

        if (currentRouteName === 'site') {
          Ember.getOwner(this).lookup("route:".concat(currentRouteName)).refresh();
        } else {
          this.router.transitionTo('site');
        }
      },

      toggleSearchModal() {
        this.toggleProperty('showSearchModal');
      }

    },

    // equivalent to "left: auto; right: -20px"
    userDropdownPosition(trigger, dropdown) {
      let {
        horizontalPosition,
        verticalPosition,
        style
      } = (0, _calculatePosition.default)(...arguments);
      let {
        width: dropdownWidth
      } = dropdown.firstElementChild.getBoundingClientRect();
      style.right += dropdownWidth - 20;
      style['z-index'] = 1100;
      return {
        horizontalPosition,
        verticalPosition,
        style
      };
    },

    _setIconStyle() {
      let icon = this.icon;

      if (icon === this._icon) {
        return;
      }

      this._icon = icon;

      if (icon && icon.match(/^https?:\/\//i)) {
        this.set('iconStyle', Ember.String.htmlSafe("background-image: url(".concat(icon, ")")));
        return;
      }

      let subdirRegExp = new RegExp("^".concat(this.get('ghostPaths.subdir')));
      let blogIcon = icon ? icon : 'favicon.ico';
      let iconUrl;
      blogIcon = blogIcon.replace(subdirRegExp, '');
      iconUrl = this.get('ghostPaths.url').join(this.get('config.blogUrl'), blogIcon).replace(/\/$/, '');
      iconUrl += "?t=".concat(new Date().valueOf());
      this.set('iconStyle', Ember.String.htmlSafe("background-image: url(".concat(iconUrl, ")")));
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-navitem-url-input", ["exports", "validator"], function (_exports, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // URI is attached to the window global as part of the
  // google-caja html-css-sanitizer-bundle
  const {
    URI
  } = window;

  let joinUrlParts = function (url, path) {
    if (path[0] !== '/' && url.slice(-1) !== '/') {
      path = "/".concat(path);
    } else if (path[0] === '/' && url.slice(-1) === '/') {
      path = path.slice(1);
    }

    return url + path;
  };

  let isRelative = function (url) {
    // "protocol://", "//example.com", "scheme:", "#anchor", & invalid paths
    // should all be treated as absolute
    return !url.match(/\s/) && !_validator.default.isURL(url) && !url.match(/^(\/\/|#|[a-zA-Z0-9-]+:)/);
  };

  var _default = Ember.TextField.extend({
    classNames: 'gh-input',

    // Allowed actions
    update() {},

    clearErrors() {},

    isBaseUrl: Ember.computed('baseUrl', 'value', function () {
      return this.baseUrl === this.value;
    }),

    didReceiveAttrs() {
      this._super(...arguments); // value coming is likely to be relative but we always want to show
      // absolute urls in the input fields


      this.set('value', this._makeAbsoluteUrl(this.url));
    },

    focusIn(event) {
      this.set('hasFocus', true);

      if (this.isBaseUrl) {
        // position the cursor at the end of the input
        Ember.run.next(function (el) {
          let {
            length
          } = el.value;
          el.setSelectionRange(length, length);
        }, event.target);
      }
    },

    keyDown(event) {
      // delete the "placeholder" value all at once
      if (this.isBaseUrl && (event.keyCode === 8 || event.keyCode === 46)) {
        this.set('value', '');
        event.preventDefault();
      } // CMD-S


      if (event.keyCode === 83 && event.metaKey) {
        this.notifyUrlChanged();
      }
    },

    keyPress(event) {
      this.clearErrors(); // enter key

      if (event.keyCode === 13) {
        this.notifyUrlChanged();
      }

      return true;
    },

    focusOut() {
      this.set('hasFocus', false);
      this.notifyUrlChanged();
    },

    notifyUrlChanged() {
      let url = this.value.trim();
      let urlURI = URI.parse(url);
      let baseUrl = this.baseUrl;
      let baseURI = URI.parse(baseUrl);

      function getHost(uri) {
        let host = uri.getDomain();

        if (uri.getPort()) {
          host = "".concat(host, ":").concat(uri.getPort());
        }

        return host;
      }

      let urlHost = getHost(urlURI);
      let baseHost = getHost(baseURI); // ensure value property is trimmed

      this.set('value', url); // if we have an email address, add the mailto:

      if (_validator.default.isEmail(url)) {
        url = this.update("mailto:".concat(url));
        this.set('value', url);
        return;
      } // get our baseUrl relativity checks in order


      let isAnchorLink = url.match(/^#/);
      let isRelativeToBasePath = urlURI.getPath() && urlURI.getPath().indexOf(baseURI.getPath()) === 0; // if our path is only missing a trailing / mark it as relative

      if ("".concat(urlURI.getPath(), "/") === baseURI.getPath()) {
        isRelativeToBasePath = true;
      }

      let isOnSameHost = urlHost === baseHost || !urlHost && isRelativeToBasePath; // if relative to baseUrl, remove the base url before sending to action

      if (!isAnchorLink && isOnSameHost && isRelativeToBasePath) {
        url = url.replace(/^[a-zA-Z0-9-]+:/, '');
        url = url.replace(/^\/\//, '');
        url = url.replace(baseHost, '');
        url = url.replace(baseURI.getPath(), ''); // handle case where url path is same as baseUrl path but missing trailing slash

        if (urlURI.getPath().slice(-1) !== '/') {
          url = url.replace(baseURI.getPath().slice(0, -1), '');
        }

        if (url !== '' || !this.isNew) {
          if (!url.match(/^\//)) {
            url = "/".concat(url);
          }

          if (!url.match(/\/$/) && !url.match(/[.#?]/)) {
            url = "".concat(url, "/");
          }
        }
      } // we update with the relative URL but then transform it back to absolute
      // for the input value. This avoids problems where the underlying relative
      // value hasn't changed even though the input value has


      if (url.match(/^(\/\/|#|[a-zA-Z0-9-]+:)/) || _validator.default.isURL(url) || _validator.default.isURL("".concat(baseHost).concat(url))) {
        url = this.update(url);
        this.set('value', this._makeAbsoluteUrl(url));
      }
    },

    _makeAbsoluteUrl(url) {
      if (isRelative(url)) {
        url = joinUrlParts(this.baseUrl, url);
      }

      return url;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-navitem", ["exports", "ghost-admin/mixins/validation-state"], function (_exports, _validationState) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend(_validationState.default, {
    classNames: 'gh-blognav-item',
    classNameBindings: ['errorClass', 'navItem.isNew::gh-blognav-item--sortable'],
    new: false,

    // closure actions
    addItem() {},

    deleteItem() {},

    updateUrl() {},

    updateLabel() {},

    errors: Ember.computed.readOnly('navItem.errors'),
    errorClass: Ember.computed('hasError', function () {
      return this.hasError ? 'gh-blognav-item--error' : '';
    }),
    actions: {
      addItem(item) {
        this.addItem(item);
      },

      deleteItem(item) {
        this.deleteItem(item);
      },

      updateUrl(value) {
        return this.updateUrl(value, this.navItem);
      },

      updateLabel(value) {
        return this.updateLabel(value, this.navItem);
      },

      clearLabelErrors() {
        this.get('navItem.errors').remove('label');
      },

      clearUrlErrors() {
        this.get('navItem.errors').remove('url');
      }

    },

    keyPress(event) {
      // enter key
      if (event.keyCode === 13 && this.get('navItem.isNew')) {
        event.preventDefault();
        Ember.run.scheduleOnce('actions', this, this.send, 'addItem', this.navItem);
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-notification", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    notifications: Ember.inject.service(),
    tagName: 'article',
    classNames: ['gh-notification', 'gh-notification-passive'],
    classNameBindings: ['typeClass'],
    message: null,
    typeClass: Ember.computed('message.type', function () {
      let type = this.get('message.type');
      let classes = '';
      let typeMapping;
      typeMapping = {
        error: 'red',
        warn: 'yellow'
      };

      if (typeMapping[type] !== undefined) {
        classes += "gh-notification-".concat(typeMapping[type]);
      }

      return classes;
    }),

    didInsertElement() {
      this._super(...arguments);

      this._animationEndHandler = Ember.run.bind(this, function () {
        if (event.animationName === 'fade-out') {
          this.notifications.closeNotification(this.message);
        }
      });
      this.element.addEventListener('animationend', this._animationEndHandler);
    },

    willDestroyElement() {
      this._super(...arguments);

      this.element.removeEventListener('animationend', this._animationEndHandler);
    },

    actions: {
      closeNotification() {
        this.notifications.closeNotification(this.message);
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-notifications", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    notifications: Ember.inject.service(),
    tagName: 'aside',
    classNames: 'gh-notifications',
    messages: Ember.computed.alias('notifications.notifications')
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-post-settings-menu", ["exports", "ghost-admin/mixins/settings-menu-component", "ghost-admin/utils/bound-one-way", "ghost-admin/utils/format-markdown", "moment", "ember-concurrency"], function (_exports, _settingsMenuComponent, _boundOneWay, _formatMarkdown, _moment, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const PSM_ANIMATION_LENGTH = 400;

  var _default = Ember.Component.extend(_settingsMenuComponent.default, {
    feature: Ember.inject.service(),
    store: Ember.inject.service(),
    config: Ember.inject.service(),
    ajax: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    slugGenerator: Ember.inject.service(),
    session: Ember.inject.service(),
    settings: Ember.inject.service(),
    ui: Ember.inject.service(),
    post: null,
    _showSettingsMenu: false,
    _showThrobbers: false,
    canonicalUrlScratch: Ember.computed.alias('post.canonicalUrlScratch'),
    customExcerptScratch: Ember.computed.alias('post.customExcerptScratch'),
    codeinjectionFootScratch: Ember.computed.alias('post.codeinjectionFootScratch'),
    codeinjectionHeadScratch: Ember.computed.alias('post.codeinjectionHeadScratch'),
    metaDescriptionScratch: Ember.computed.alias('post.metaDescriptionScratch'),
    metaTitleScratch: Ember.computed.alias('post.metaTitleScratch'),
    ogDescriptionScratch: Ember.computed.alias('post.ogDescriptionScratch'),
    ogTitleScratch: Ember.computed.alias('post.ogTitleScratch'),
    twitterDescriptionScratch: Ember.computed.alias('post.twitterDescriptionScratch'),
    twitterTitleScratch: Ember.computed.alias('post.twitterTitleScratch'),
    slugValue: (0, _boundOneWay.default)('post.slug'),
    facebookDescription: Ember.computed.or('ogDescriptionScratch', 'customExcerptScratch', 'seoDescription'),
    facebookImage: Ember.computed.or('post.ogImage', 'post.featureImage'),
    facebookTitle: Ember.computed.or('ogTitleScratch', 'seoTitle'),
    twitterDescription: Ember.computed.or('twitterDescriptionScratch', 'customExcerptScratch', 'seoDescription'),
    twitterImage: Ember.computed.or('post.twitterImage', 'post.featureImage'),
    twitterTitle: Ember.computed.or('twitterTitleScratch', 'seoTitle'),
    showVisibilityInput: Ember.computed.or('session.user.isOwner', 'session.user.isAdmin', 'session.user.isEditor'),
    seoTitle: Ember.computed('metaTitleScratch', 'post.titleScratch', function () {
      return this.metaTitleScratch || this.post.titleScratch || '(Untitled)';
    }),
    seoDescription: Ember.computed('post.scratch', 'metaDescriptionScratch', function () {
      let metaDescription = this.metaDescriptionScratch || '';
      let mobiledoc = this.get('post.scratch');
      let [markdownCard] = mobiledoc && mobiledoc.cards || [];
      let markdown = markdownCard && markdownCard[1] && markdownCard[1].markdown;
      let placeholder;

      if (metaDescription) {
        placeholder = metaDescription;
      } else {
        let div = document.createElement('div');
        div.innerHTML = (0, _formatMarkdown.default)(markdown, false); // Strip HTML

        placeholder = div.textContent; // Replace new lines and trim

        placeholder = placeholder.replace(/\n+/g, ' ').trim();
      }

      return placeholder;
    }),
    seoURL: Ember.computed('post.{slug,canonicalUrl}', 'config.blogUrl', function () {
      let blogUrl = this.get('config.blogUrl');
      let seoSlug = this.post.slug || '';
      let canonicalUrl = this.post.canonicalUrl || '';

      if (canonicalUrl) {
        if (canonicalUrl.match(/^\//)) {
          return "".concat(blogUrl).concat(canonicalUrl);
        } else {
          return canonicalUrl;
        }
      } else {
        let seoURL = "".concat(blogUrl, "/").concat(seoSlug); // only append a slash to the URL if the slug exists

        if (seoSlug) {
          seoURL += '/';
        }

        return seoURL;
      }
    }),

    didReceiveAttrs() {
      this._super(...arguments); // HACK: ugly method of working around the CSS animations so that we
      // can add throbbers only when the animation has finished
      // TODO: use liquid-fire to handle PSM slide-in and replace tabs manager
      // with something more ember-like


      if (this.showSettingsMenu && !this._showSettingsMenu) {
        this.showThrobbers.perform();
      } // fired when menu is closed


      if (!this.showSettingsMenu && this._showSettingsMenu) {
        let post = this.post;
        let errors = post.get('errors'); // reset the publish date if it has an error

        if (errors.has('publishedAtBlogDate') || errors.has('publishedAtBlogTime')) {
          post.set('publishedAtBlogTZ', post.get('publishedAtUTC'));
          post.validate({
            attribute: 'publishedAtBlog'
          });
        } // remove throbbers


        this.set('_showThrobbers', false);
      }

      this._showSettingsMenu = this.showSettingsMenu;
    },

    actions: {
      showSubview(subview) {
        this._super(...arguments);

        this.set('subview', subview); // Chrome appears to have an animation bug that cancels the slide
        // transition unless there's a delay between the animation starting
        // and the throbbers being removed

        Ember.run.later(this, function () {
          this.set('_showThrobbers', false);
        }, 50);
      },

      closeSubview() {
        this._super(...arguments);

        this.set('subview', null);
        this.showThrobbers.perform();
      },

      discardEnter() {
        return false;
      },

      toggleFeatured() {
        this.toggleProperty('post.featured'); // If this is a new post.  Don't save the post.  Defer the save
        // to the user pressing the save button

        if (this.get('post.isNew')) {
          return;
        }

        this.savePost.perform().catch(error => {
          this.showError(error);
          this.post.rollbackAttributes();
        });
      },

      /**
       * triggered by user manually changing slug
       */
      updateSlug(newSlug) {
        return this.updateSlug.perform(newSlug).catch(error => {
          this.showError(error);
          this.post.rollbackAttributes();
        });
      },

      setPublishedAtBlogDate(date) {
        let post = this.post;
        let dateString = (0, _moment.default)(date).format('YYYY-MM-DD');
        post.get('errors').remove('publishedAtBlogDate');

        if (post.get('isNew') || date === post.get('publishedAtBlogDate')) {
          post.validate({
            property: 'publishedAtBlog'
          });
        } else {
          post.set('publishedAtBlogDate', dateString);
          return this.savePost.perform();
        }
      },

      setPublishedAtBlogTime(time) {
        let post = this.post;
        post.get('errors').remove('publishedAtBlogDate');

        if (post.get('isNew') || time === post.get('publishedAtBlogTime')) {
          post.validate({
            property: 'publishedAtBlog'
          });
        } else {
          post.set('publishedAtBlogTime', time);
          return this.savePost.perform();
        }
      },

      setCustomExcerpt(excerpt) {
        let post = this.post;
        let currentExcerpt = post.get('customExcerpt');

        if (excerpt === currentExcerpt) {
          return;
        }

        post.set('customExcerpt', excerpt);
        return post.validate({
          property: 'customExcerpt'
        }).then(() => this.savePost.perform());
      },

      setHeaderInjection(code) {
        let post = this.post;
        let currentCode = post.get('codeinjectionHead');

        if (code === currentCode) {
          return;
        }

        post.set('codeinjectionHead', code);
        return post.validate({
          property: 'codeinjectionHead'
        }).then(() => this.savePost.perform());
      },

      setFooterInjection(code) {
        let post = this.post;
        let currentCode = post.get('codeinjectionFoot');

        if (code === currentCode) {
          return;
        }

        post.set('codeinjectionFoot', code);
        return post.validate({
          property: 'codeinjectionFoot'
        }).then(() => this.savePost.perform());
      },

      setMetaTitle(metaTitle) {
        // Grab the post and current stored meta title
        let post = this.post;
        let currentTitle = post.get('metaTitle'); // If the title entered matches the stored meta title, do nothing

        if (currentTitle === metaTitle) {
          return;
        } // If the title entered is different, set it as the new meta title


        post.set('metaTitle', metaTitle); // Make sure the meta title is valid and if so, save it into the post

        return post.validate({
          property: 'metaTitle'
        }).then(() => {
          if (post.get('isNew')) {
            return;
          }

          return this.savePost.perform();
        });
      },

      setMetaDescription(metaDescription) {
        // Grab the post and current stored meta description
        let post = this.post;
        let currentDescription = post.get('metaDescription'); // If the title entered matches the stored meta title, do nothing

        if (currentDescription === metaDescription) {
          return;
        } // If the title entered is different, set it as the new meta title


        post.set('metaDescription', metaDescription); // Make sure the meta title is valid and if so, save it into the post

        return post.validate({
          property: 'metaDescription'
        }).then(() => {
          if (post.get('isNew')) {
            return;
          }

          return this.savePost.perform();
        });
      },

      setCanonicalUrl(value) {
        // Grab the post and current stored meta description
        let post = this.post;
        let currentCanonicalUrl = post.canonicalUrl; // If the value entered matches the stored value, do nothing

        if (currentCanonicalUrl === value) {
          return;
        } // If the value supplied is different, set it as the new value


        post.set('canonicalUrl', value); // Make sure the value is valid and if so, save it into the post

        return post.validate({
          property: 'canonicalUrl'
        }).then(() => {
          if (post.get('isNew')) {
            return;
          }

          return this.savePost.perform();
        });
      },

      setOgTitle(ogTitle) {
        // Grab the post and current stored facebook title
        let post = this.post;
        let currentTitle = post.get('ogTitle'); // If the title entered matches the stored facebook title, do nothing

        if (currentTitle === ogTitle) {
          return;
        } // If the title entered is different, set it as the new facebook title


        post.set('ogTitle', ogTitle); // Make sure the facebook title is valid and if so, save it into the post

        return post.validate({
          property: 'ogTitle'
        }).then(() => {
          if (post.get('isNew')) {
            return;
          }

          return this.savePost.perform();
        });
      },

      setOgDescription(ogDescription) {
        // Grab the post and current stored facebook description
        let post = this.post;
        let currentDescription = post.get('ogDescription'); // If the title entered matches the stored facebook description, do nothing

        if (currentDescription === ogDescription) {
          return;
        } // If the description entered is different, set it as the new facebook description


        post.set('ogDescription', ogDescription); // Make sure the facebook description is valid and if so, save it into the post

        return post.validate({
          property: 'ogDescription'
        }).then(() => {
          if (post.get('isNew')) {
            return;
          }

          return this.savePost.perform();
        });
      },

      setTwitterTitle(twitterTitle) {
        // Grab the post and current stored twitter title
        let post = this.post;
        let currentTitle = post.get('twitterTitle'); // If the title entered matches the stored twitter title, do nothing

        if (currentTitle === twitterTitle) {
          return;
        } // If the title entered is different, set it as the new twitter title


        post.set('twitterTitle', twitterTitle); // Make sure the twitter title is valid and if so, save it into the post

        return post.validate({
          property: 'twitterTitle'
        }).then(() => {
          if (post.get('isNew')) {
            return;
          }

          return this.savePost.perform();
        });
      },

      setTwitterDescription(twitterDescription) {
        // Grab the post and current stored twitter description
        let post = this.post;
        let currentDescription = post.get('twitterDescription'); // If the description entered matches the stored twitter description, do nothing

        if (currentDescription === twitterDescription) {
          return;
        } // If the description entered is different, set it as the new twitter description


        post.set('twitterDescription', twitterDescription); // Make sure the twitter description is valid and if so, save it into the post

        return post.validate({
          property: 'twitterDescription'
        }).then(() => {
          if (post.get('isNew')) {
            return;
          }

          return this.savePost.perform();
        });
      },

      setCoverImage(image) {
        this.set('post.featureImage', image);

        if (this.get('post.isNew')) {
          return;
        }

        this.savePost.perform().catch(error => {
          this.showError(error);
          this.post.rollbackAttributes();
        });
      },

      clearCoverImage() {
        this.set('post.featureImage', '');

        if (this.get('post.isNew')) {
          return;
        }

        this.savePost.perform().catch(error => {
          this.showError(error);
          this.post.rollbackAttributes();
        });
      },

      setOgImage(image) {
        this.set('post.ogImage', image);

        if (this.get('post.isNew')) {
          return;
        }

        this.savePost.perform().catch(error => {
          this.showError(error);
          this.post.rollbackAttributes();
        });
      },

      clearOgImage() {
        this.set('post.ogImage', '');

        if (this.get('post.isNew')) {
          return;
        }

        this.savePost.perform().catch(error => {
          this.showError(error);
          this.post.rollbackAttributes();
        });
      },

      setTwitterImage(image) {
        this.set('post.twitterImage', image);

        if (this.get('post.isNew')) {
          return;
        }

        this.savePost.perform().catch(error => {
          this.showError(error);
          this.post.rollbackAttributes();
        });
      },

      clearTwitterImage() {
        this.set('post.twitterImage', '');

        if (this.get('post.isNew')) {
          return;
        }

        this.savePost.perform().catch(error => {
          this.showError(error);
          this.post.rollbackAttributes();
        });
      },

      changeAuthors(newAuthors) {
        let post = this.post; // return if nothing changed

        if (newAuthors.mapBy('id').join() === post.get('authors').mapBy('id').join()) {
          return;
        }

        post.set('authors', newAuthors);
        post.validate({
          property: 'authors'
        }); // if this is a new post (never been saved before), don't try to save it

        if (post.get('isNew')) {
          return;
        }

        this.savePost.perform().catch(error => {
          this.showError(error);
          post.rollbackAttributes();
        });
      },

      deletePost() {
        if (this.deletePost) {
          this.deletePost();
        }
      }

    },
    showThrobbers: (0, _emberConcurrency.task)(function* () {
      yield (0, _emberConcurrency.timeout)(PSM_ANIMATION_LENGTH);
      this.set('_showThrobbers', true);
    }).restartable(),

    showError(error) {
      // TODO: remove null check once ValidationEngine has been removed
      if (error) {
        this.notifications.showAPIError(error);
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-post-settings-menu/email", ["exports", "ghost-admin/errors/email-failed-error", "validator", "ember-concurrency"], function (_exports, _emailFailedError, _validator, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const RETRY_EMAIL_POLL_LENGTH = 1000;
  const RETRY_EMAIL_MAX_POLL_LENGTH = 15 * 1000;

  var _default = Ember.Component.extend({
    ajax: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),
    settings: Ember.inject.service(),
    post: null,
    sendTestEmailError: '',
    savePostTask: null,

    close() {},

    toggleEmailPreviewModal() {},

    emailSubject: Ember.computed.or('emailSubjectScratch', 'post.title'),
    emailSubjectScratch: Ember.computed.alias('post.emailSubjectScratch'),
    testEmailAddress: Ember.computed.oneWay('session.user.email'),
    mailgunError: Ember.computed('settings.memberSubscriptionSettings', function () {
      return !this.settings.get('bulkEmailSettings.isEnabled');
    }),
    actions: {
      setEmailSubject(emailSubject) {
        // Grab the post and current stored email subject
        let post = this.post;
        let currentEmailSubject = post.get('emailSubject'); // If the subject entered matches the stored email subject, do nothing

        if (currentEmailSubject === emailSubject) {
          return;
        } // If the subject entered is different, set it as the new email subject


        post.set('emailSubject', emailSubject); // Make sure the email subject is valid and if so, save it into the post

        return post.validate({
          property: 'emailSubject'
        }).then(() => {
          if (post.get('isNew')) {
            return;
          }

          return this.savePostTask.perform();
        });
      },

      discardEnter() {
        return false;
      }

    },
    toggleEmailPreview: Ember._action(function () {
      this.toggleEmailPreviewModal();
    }),
    sendTestEmail: (0, _emberConcurrency.task)(function* () {
      try {
        const resourceId = this.post.id;
        const testEmail = this.testEmailAddress.trim();

        if (!_validator.default.isEmail(testEmail)) {
          this.set('sendTestEmailError', 'Please enter a valid email');
          return false;
        }

        if (!this.settings.get('bulkEmailSettings.isEnabled')) {
          this.set('sendTestEmailError', 'Please check your Mailgun configuration');
          return false;
        }

        this.set('sendTestEmailError', '');
        const url = this.ghostPaths.url.api('/email_preview/posts', resourceId);
        const data = {
          emails: [testEmail]
        };
        const options = {
          data,
          dataType: 'json'
        };
        return yield this.ajax.post(url, options);
      } catch (error) {
        if (error) {
          this.set('sendTestEmailError', 'Error sending mail, please check your Mailgun configuration');
        }
      }
    }).drop(),
    retryEmail: (0, _emberConcurrency.task)(function* () {
      let {
        email
      } = this.post;

      if (email && email.status === 'failed') {
        // trigger the retry
        yield email.retry(); // poll for success/failure state

        let pollTimeout = 0;

        while (pollTimeout < RETRY_EMAIL_MAX_POLL_LENGTH) {
          yield (0, _emberConcurrency.timeout)(RETRY_EMAIL_POLL_LENGTH);
          yield email.reload();

          if (email.status === 'submitted') {
            break;
          }

          if (email.status === 'failed') {
            throw new _emailFailedError.default(email.error);
          }
        }
      }

      return true;
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-posts-list-item", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    ghostPaths: Ember.inject.service(),
    session: Ember.inject.service(),
    tagName: 'li',
    classNames: ['gh-list-row', 'gh-posts-list-item'],
    post: null,
    isFeatured: Ember.computed.alias('post.featured'),
    isPage: Ember.computed.alias('post.page'),
    isDraft: Ember.computed.equal('post.status', 'draft'),
    isPublished: Ember.computed.equal('post.status', 'published'),
    isScheduled: Ember.computed.equal('post.status', 'scheduled'),
    authorNames: Ember.computed('post.authors.[]', function () {
      let authors = this.get('post.authors');
      return authors.map(author => author.get('name') || author.get('email')).join(', ');
    }),
    primaryTag: Ember.computed('post.authors.[]', function () {
      let primaryTag = this.get('post.tags.firstObject');

      if (primaryTag) {
        return primaryTag.get('name');
      } else {
        return false;
      }
    }),
    subText: Ember.computed('post.{excerpt,customExcerpt,metaDescription}', function () {
      let text = this.get('post.excerpt') || '';
      let customExcerpt = this.get('post.customExcerpt');
      let metaDescription = this.get('post.metaDescription');

      if (!Ember.isBlank(customExcerpt)) {
        text = customExcerpt;
      } else if (!Ember.isBlank(metaDescription)) {
        text = metaDescription;
      }

      if (this.isScheduled) {
        return "".concat(text.slice(0, 35), "...");
      } else {
        return "".concat(text.slice(0, 80), "...");
      }
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-profile-image", ["exports", "jquery", "blueimp-md5", "ember-ajax/request", "validator", "ember-concurrency"], function (_exports, _jquery, _blueimpMd, _request, _validator, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const ANIMATION_TIMEOUT = 1000;
  /**
   * A component to manage a user profile image. By default it just handles picture uploads,
   * but if passed a bound 'email' property it will render the user's gravatar image
   *
   * Example: {{gh-profile-image email=controllerEmailProperty setImage="controllerActionName" debounce=500}}
   *
   * @param  {int}            size              The size of the image to render
   * @param  {String}         email             Reference to a bound email object if gravatar image behavior is desired.
   * @param  {String|action}  setImage          The string name of the action on the controller to be called when an image is added.
   * @param  {int}            debounce          Period to wait after changes to email before attempting to load gravatar
   * @property  {Boolean}     hasUploadedImage  Whether or not the user has uploaded an image (whether or not to show the default image/gravatar image)
   * @property  {String}      defaultImage      String containing the background-image css property of the default user profile image
   * @property  {String}      imageBackground   String containing the background-image css property with the gravatar url
   */

  var _default = Ember.Component.extend({
    config: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    email: '',
    size: 180,
    debounce: 300,
    imageFile: null,
    hasUploadedImage: false,
    _defaultImageUrl: '',

    // closure actions
    setImage() {},

    placeholderStyle: Ember.String.htmlSafe('background-image: url()'),
    avatarStyle: Ember.String.htmlSafe('display: none'),

    init() {
      this._super(...arguments);

      let defaultImage = '/img/user-image.png';
      this._defaultImageUrl = this.get('ghostPaths.assetRoot').replace(/\/$/, '') + defaultImage;

      this._setPlaceholderImage(this._defaultImageUrl);
    },

    didReceiveAttrs() {
      this._super(...arguments);

      if (this.get('config.useGravatar')) {
        this.setGravatar.perform();
      }
    },

    actions: {
      imageSelected(fileList, resetInput) {
        // eslint-disable-next-line
        let imageFile = fileList[0];

        if (imageFile) {
          let reader = new FileReader();
          this.set('imageFile', imageFile);
          this.setImage(imageFile);
          reader.addEventListener('load', () => {
            let dataURL = reader.result;
            this.set('previewDataURL', dataURL);
          }, false);
          reader.readAsDataURL(imageFile);
        }

        resetInput();
      },

      openFileDialog(event) {
        // simulate click to open file dialog
        // using jQuery because IE11 doesn't support MouseEvent
        (0, _jquery.default)(event.target).closest('figure').find('input[type="file"]').click();
      }

    },

    dragOver(event) {
      if (!event.dataTransfer) {
        return;
      } // this is needed to work around inconsistencies with dropping files
      // from Chrome's downloads bar


      if (navigator.userAgent.indexOf('Chrome') > -1) {
        let eA = event.dataTransfer.effectAllowed;
        event.dataTransfer.dropEffect = eA === 'move' || eA === 'linkMove' ? 'move' : 'copy';
      }

      event.stopPropagation();
      event.preventDefault();
    },

    dragLeave(event) {
      event.preventDefault();
    },

    drop(event) {
      event.preventDefault();

      if (event.dataTransfer.files) {
        this.send('imageSelected', event.dataTransfer.files);
      }
    },

    setGravatar: (0, _emberConcurrency.task)(function* () {
      yield (0, _emberConcurrency.timeout)(this.debounce);
      let email = this.email;

      if (_validator.default.isEmail(email || '')) {
        let size = this.size;
        let gravatarUrl = "//www.gravatar.com/avatar/".concat((0, _blueimpMd.default)(email), "?s=").concat(size, "&d=404");

        try {
          // HEAD request is needed otherwise jquery attempts to process
          // binary data as JSON and throws an error
          yield (0, _request.default)(gravatarUrl, {
            type: 'HEAD'
          }); // gravatar exists so switch style and let browser load it

          this._setAvatarImage(gravatarUrl); // wait for fade-in animation to finish before removing placeholder


          yield (0, _emberConcurrency.timeout)(ANIMATION_TIMEOUT);

          this._setPlaceholderImage('');
        } catch (e) {
          // gravatar doesn't exist so make sure we're still showing the placeholder
          this._setPlaceholderImage(this._defaultImageUrl); // then make sure the avatar isn't visible


          this._setAvatarImage('');
        }
      }
    }).restartable(),

    _setPlaceholderImage(url) {
      this.set('placeholderStyle', Ember.String.htmlSafe("background-image: url(".concat(url, ");")));
    },

    _setAvatarImage(url) {
      let display = url ? 'block' : 'none';
      this.set('avatarStyle', Ember.String.htmlSafe("background-image: url(".concat(url, "); display: ").concat(display)));
    },

    queueFile(e, data) {
      let fileName = data.files[0].name;

      if (/\.(gif|jpe?g|png|svg?z)$/i.test(fileName)) {
        let action = this.setImage;

        if (action) {
          action(data);
        }
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-progress-bar", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    tagName: '',
    // Public attributes
    percentage: 0,
    isError: false,
    // Internal attributes
    progressStyle: '',

    didReceiveAttrs() {
      this._super(...arguments);

      let percentage = this.percentage;
      let width = percentage > 0 ? "".concat(percentage, "%") : '0';
      this.set('progressStyle', Ember.String.htmlSafe("width: ".concat(width)));
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-psm-authors-input", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    store: Ember.inject.service(),
    // public attrs
    selectedAuthors: null,
    tagName: '',
    triggerId: '',
    // internal attrs
    availableAuthors: null,

    // closure actions
    updateAuthors() {},

    availableAuthorNames: Ember.computed('availableAuthors.@each.name', function () {
      return this.availableAuthors.map(author => author.get('name').toLowerCase());
    }),

    init() {
      this._super(...arguments); // perform a background query to fetch all users and set `availableAuthors`
      // to a live-query that will be immediately populated with what's in the
      // store and be updated when the above query returns


      this.store.query('user', {
        limit: 'all'
      });
      this.set('availableAuthors', this.store.peekAll('user'));
    },

    actions: {
      updateAuthors(newAuthors) {
        this.updateAuthors(newAuthors);
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-psm-tags-input", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    store: Ember.inject.service(),
    // public attrs
    post: null,
    tagName: '',
    // internal attrs
    _availableTags: null,
    availableTags: Ember.computed.sort('_availableTags.[]', function (tagA, tagB) {
      // ignorePunctuation means the # in internal tag names is ignored
      return tagA.name.localeCompare(tagB.name, undefined, {
        ignorePunctuation: true
      });
    }),
    availableTagNames: Ember.computed('availableTags.@each.name', function () {
      return this.availableTags.map(tag => tag.name.toLowerCase());
    }),

    init() {
      this._super(...arguments); // perform a background query to fetch all users and set `availableTags`
      // to a live-query that will be immediately populated with what's in the
      // store and be updated when the above query returns


      this.store.query('tag', {
        limit: 'all'
      });
      this.set('_availableTags', this.store.peekAll('tag'));
    },

    actions: {
      matchTags(tagName, term) {
        return tagName.toLowerCase() === term.trim().toLowerCase();
      },

      hideCreateOptionOnMatchingTag(term) {
        return !this.availableTagNames.includes(term.toLowerCase());
      },

      updateTags(newTags) {
        let currentTags = this.get('post.tags'); // destroy new+unsaved tags that are no longer selected

        currentTags.forEach(function (tag) {
          if (!newTags.includes(tag) && tag.get('isNew')) {
            tag.destroyRecord();
          }
        }); // update tags

        return this.set('post.tags', newTags);
      },

      createTag(tagName) {
        let currentTags = this.get('post.tags');
        let currentTagNames = currentTags.map(tag => tag.get('name').toLowerCase());
        let tagToAdd;
        tagName = tagName.trim(); // abort if tag is already selected

        if (currentTagNames.includes(tagName.toLowerCase())) {
          return;
        } // find existing tag if there is one


        tagToAdd = this._findTagByName(tagName); // create new tag if no match

        if (!tagToAdd) {
          tagToAdd = this.store.createRecord('tag', {
            name: tagName
          }); // set to public/internal based on the tag name

          tagToAdd.updateVisibility();
        } // push tag onto post relationship


        return currentTags.pushObject(tagToAdd);
      }

    },

    // methods
    _findTagByName(name) {
      let withMatchingName = function (tag) {
        return tag.name.toLowerCase() === name.toLowerCase();
      };

      return this.availableTags.find(withMatchingName);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-psm-template-select", ["exports", "ember-concurrency"], function (_exports, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    store: Ember.inject.service(),
    // public attributes
    tagName: '',
    post: null,
    // internal properties
    activeTheme: null,

    // closure actions
    onTemplateSelect() {},

    // computed properties
    customTemplates: Ember.computed('activeTheme.customTemplates.[]', function () {
      let templates = this.get('activeTheme.customTemplates') || [];
      let defaultTemplate = {
        filename: '',
        name: 'Default'
      };
      return Ember.isEmpty(templates) ? templates : [defaultTemplate, ...templates.sortBy('name')];
    }),
    matchedSlugTemplate: Ember.computed('post.{page,slug}', 'activeTheme.slugTemplates.[]', function () {
      let slug = this.get('post.slug');
      let type = this.post.constructor.modelName;
      let [matchedTemplate] = this.get('activeTheme.slugTemplates').filter(function (template) {
        return template.for.includes(type) && template.slug === slug;
      });
      return matchedTemplate;
    }),
    selectedTemplate: Ember.computed('post.customTemplate', 'customTemplates.[]', function () {
      let templates = this.customTemplates;
      let filename = this.get('post.customTemplate');
      return templates.findBy('filename', filename);
    }),

    // hooks
    didInsertElement() {
      this._super(...arguments);

      this.loadActiveTheme.perform();
    },

    actions: {
      selectTemplate(template) {
        this.onTemplateSelect(template.filename);
      }

    },
    // tasks
    loadActiveTheme: (0, _emberConcurrency.task)(function* () {
      let store = this.store;
      let themes = yield store.peekAll('theme');

      if (Ember.isEmpty(themes)) {
        themes = yield store.findAll('theme');
      }

      let activeTheme = themes.filterBy('active', true).get('firstObject');
      this.set('activeTheme', activeTheme);
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-psm-visibility-input", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const VISIBILITIES = [{
    label: 'Public',
    name: 'public'
  }, {
    label: 'Members only',
    name: 'members'
  }, {
    label: 'Paid-members only',
    name: 'paid'
  }];

  var _default = Ember.Component.extend({
    settings: Ember.inject.service(),
    // public attrs
    post: null,
    selectedVisibility: Ember.computed('post.visibility', function () {
      return this.get('post.visibility') || this.settings.get('defaultContentVisibility');
    }),

    init() {
      this._super(...arguments);

      this.availableVisibilities = VISIBILITIES;
    },

    actions: {
      updateVisibility(newVisibility) {
        this.post.set('visibility', newVisibility);
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-publishmenu-draft", ["exports", "moment"], function (_exports, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    feature: Ember.inject.service(),
    settings: Ember.inject.service(),
    session: Ember.inject.service(),
    post: null,
    saveType: null,
    // used to set minDate in datepicker
    _minDate: null,
    _publishedAtBlogTZ: null,
    'data-test-publishmenu-draft': true,
    showSendEmail: Ember.computed.or('session.user.isOwner', 'session.user.isAdmin', 'session.user.isEditor'),
    disableEmailOption: Ember.computed('memberCount', function () {
      return this.get('session.user.isOwnerOrAdmin') && this.memberCount === 0;
    }),
    canSendEmail: Ember.computed('feature.labs.members', 'post.{displayName,email}', function () {
      let membersEnabled = this.feature.get('labs.members');
      let mailgunIsConfigured = this.get('settings.bulkEmailSettings.isEnabled');
      let isPost = this.post.displayName === 'post';
      let hasSentEmail = !!this.post.email;
      return membersEnabled && mailgunIsConfigured && isPost && !hasSentEmail;
    }),

    didInsertElement() {
      this.post.set('publishedAtBlogTZ', this.get('post.publishedAtUTC'));
      this.send('setSaveType', 'publish');
    },

    actions: {
      setSaveType(type) {
        if (this.saveType !== type) {
          let hasDateError = !Ember.isEmpty(this.get('post.errors').errorsFor('publishedAtBlogDate'));
          let hasTimeError = !Ember.isEmpty(this.get('post.errors').errorsFor('publishedAtBlogTime'));

          let minDate = this._getMinDate();

          this.set('_minDate', minDate);
          this.setSaveType(type); // when publish: switch to now to avoid validation errors
          // when schedule: switch to last valid or new minimum scheduled date

          if (type === 'publish') {
            if (!hasDateError && !hasTimeError) {
              this._publishedAtBlogTZ = this.get('post.publishedAtBlogTZ');
            } else {
              this._publishedAtBlogTZ = this.get('post.publishedAtUTC');
            }

            this.post.set('publishedAtBlogTZ', this.get('post.publishedAtUTC'));
          } else {
            if (!this._publishedAtBlogTZ || (0, _moment.default)(this._publishedAtBlogTZ).isBefore(minDate)) {
              this.post.set('publishedAtBlogTZ', minDate);
            } else {
              this.post.set('publishedAtBlogTZ', this._publishedAtBlogTZ);
            }
          }

          this.post.validate();
        }
      },

      setDate(date) {
        let post = this.post;
        let dateString = (0, _moment.default)(date).format('YYYY-MM-DD');
        post.set('publishedAtBlogDate', dateString);
        return post.validate();
      },

      setTime(time) {
        let post = this.post;
        post.set('publishedAtBlogTime', time);
        return post.validate();
      }

    },

    // API only accepts dates at least 2 mins in the future, default the
    // scheduled date 5 mins in the future to avoid immediate validation errors
    _getMinDate() {
      return _moment.default.utc().add(5, 'minutes');
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-publishmenu-published", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    feature: Ember.inject.service(),
    'data-test-publishmenu-published': true,

    didInsertElement() {
      this.setSaveType('publish');
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-publishmenu-scheduled", ["exports", "moment"], function (_exports, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    clock: Ember.inject.service(),
    session: Ember.inject.service(),
    post: null,
    saveType: null,
    isClosing: null,
    // used to set minDate in datepicker
    _minDate: null,
    'data-test-publishmenu-scheduled': true,
    disableEmailOption: Ember.computed.equal('memberCount', 0),
    showSendEmail: Ember.computed.or('session.user.isOwner', 'session.user.isAdmin', 'session.user.isEditor'),
    timeToPublished: Ember.computed('post.publishedAtUTC', 'clock.second', function () {
      let publishedAtUTC = this.get('post.publishedAtUTC');

      if (!publishedAtUTC) {
        return null;
      }

      this.get('clock.second');
      return publishedAtUTC.toNow(true);
    }),

    didInsertElement() {
      this.set('_minDate', new Date());
      this.setSaveType('schedule');
    },

    actions: {
      setSaveType(type) {
        if (this.saveType !== type) {
          this.set('_minDate', new Date());
          this.setSaveType(type); // when draft switch to now to avoid validation errors
          // when schedule switch back to saved date to avoid unnecessary re-scheduling

          if (type === 'draft') {
            this.post.set('publishedAtBlogTZ', new Date());
          } else {
            this.post.set('publishedAtBlogTZ', this.get('post.publishedAtUTC'));
          }

          this.post.validate();
        }
      },

      setDate(date) {
        let post = this.post;
        let dateString = (0, _moment.default)(date).format('YYYY-MM-DD');
        post.set('publishedAtBlogDate', dateString);
        return post.validate();
      },

      setTime(time) {
        let post = this.post;

        if (!this.isClosing) {
          post.set('publishedAtBlogTime', time);
          return post.validate();
        }
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-publishmenu", ["exports", "ghost-admin/errors/email-failed-error", "ember-concurrency"], function (_exports, _emailFailedError, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const CONFIRM_EMAIL_POLL_LENGTH = 1000;
  const CONFIRM_EMAIL_MAX_POLL_LENGTH = 15 * 1000;

  var _default = Ember.Component.extend({
    clock: Ember.inject.service(),
    backgroundTask: null,
    classNames: 'gh-publishmenu',
    displayState: 'draft',
    post: null,
    postStatus: 'draft',
    runningText: null,
    saveTask: null,
    sendEmailWhenPublished: false,
    typedDateError: null,
    _publishedAtBlogTZ: null,
    _previousStatus: null,
    isClosing: null,

    onClose() {},

    forcePublishedMenu: Ember.computed.reads('post.pastScheduledTime'),
    postState: Ember.computed('post.{isPublished,isScheduled}', 'forcePublishedMenu', function () {
      if (this.forcePublishedMenu || this.get('post.isPublished')) {
        return 'published';
      } else if (this.get('post.isScheduled')) {
        return 'scheduled';
      } else {
        return 'draft';
      }
    }),
    triggerText: Ember.computed('postState', function () {
      let state = this.postState;

      if (state === 'published') {
        return 'Update';
      } else if (state === 'scheduled') {
        return 'Scheduled';
      } else {
        return 'Publish';
      }
    }),
    _runningText: Ember.computed('postState', 'saveType', function () {
      let saveType = this.saveType;
      let postState = this.postState;
      let runningText;

      if (postState === 'draft') {
        runningText = saveType === 'publish' ? 'Publishing' : 'Scheduling';
      }

      if (postState === 'published') {
        runningText = saveType === 'publish' ? 'Updating' : 'Unpublishing';
      }

      if (postState === 'scheduled') {
        runningText = saveType === 'schedule' ? 'Rescheduling' : 'Unscheduling';
      }

      return runningText || 'Publishing';
    }),
    buttonText: Ember.computed('postState', 'saveType', function () {
      let saveType = this.saveType;
      let postState = this.postState;
      let buttonText;

      if (postState === 'draft') {
        buttonText = saveType === 'publish' ? 'Publish' : 'Schedule';
      }

      if (postState === 'published') {
        buttonText = saveType === 'publish' ? 'Update' : 'Unpublish';
      }

      if (postState === 'scheduled') {
        buttonText = saveType === 'schedule' ? 'Reschedule' : 'Unschedule';
      }

      return buttonText || 'Publish';
    }),
    successText: Ember.computed('_previousStatus', 'postState', function () {
      let postState = this.postState;
      let previousStatus = this._previousStatus;
      let buttonText;

      if (previousStatus === 'draft') {
        buttonText = postState === 'published' ? 'Published' : 'Scheduled';
      }

      if (previousStatus === 'published') {
        buttonText = postState === 'draft' ? 'Unpublished' : 'Updated';
      }

      if (previousStatus === 'scheduled') {
        buttonText = postState === 'draft' ? 'Unscheduled' : 'Rescheduled';
      }

      return buttonText;
    }),

    didReceiveAttrs() {
      this._super(...arguments); // update the displayState based on the post status but only after a
      // save has finished to avoid swapping the menu prematurely and triggering
      // calls to `setSaveType` due to the component re-rendering
      // TODO: we should have a better way of dealing with this where we don't
      // rely on the side-effect of component rendering calling setSaveType


      let postStatus = this.postStatus;

      if (postStatus !== this._postStatus) {
        if (this.get('saveTask.isRunning')) {
          this.get('saveTask.last').then(() => {
            this.set('displayState', postStatus);
          });
        } else {
          this.set('displayState', postStatus);
        }
      }

      this._postStatus = this.postStatus;
    },

    actions: {
      setSaveType(saveType) {
        let post = this.post;
        this.set('saveType', saveType);

        if (saveType === 'draft') {
          post.set('statusScratch', 'draft');
        } else if (saveType === 'schedule') {
          post.set('statusScratch', 'scheduled');
        } else if (saveType === 'publish') {
          post.set('statusScratch', 'published');
        }
      },

      open() {
        this._cachePublishedAtBlogTZ();

        this.set('isClosing', false);
        this.get('post.errors').clear();

        if (this.onOpen) {
          this.onOpen();
        }
      },

      close(dropdown, e) {
        // don't close the menu if the datepicker popup or confirm modal is clicked
        if (e) {
          let onDatepicker = !!e.target.closest('.ember-power-datepicker-content');
          let onModal = !!e.target.closest('.fullscreen-modal-container');

          if (onDatepicker || onModal) {
            return false;
          }
        }

        if (!this._skipDropdownCloseCleanup) {
          this._cleanup();
        }

        this._skipDropdownCloseCleanup = false;
        this.onClose();
        this.set('isClosing', true);
        return true;
      }

    },
    // action is required because <GhFullscreenModal> only uses actions
    confirmEmailSend: Ember._action(function () {
      return this._confirmEmailSend.perform();
    }),
    _confirmEmailSend: (0, _emberConcurrency.task)(function* () {
      this.sendEmailConfirmed = true;
      let post = yield this.save.perform(); // simulate a validation error if saving failed so that the confirm
      // modal can react accordingly

      if (!post || post.errors.length) {
        throw null;
      }

      let pollTimeout = 0;

      if (post.email && post.email.status !== 'submitted') {
        while (pollTimeout < CONFIRM_EMAIL_MAX_POLL_LENGTH) {
          yield (0, _emberConcurrency.timeout)(CONFIRM_EMAIL_POLL_LENGTH);
          post = yield post.reload();

          if (post.email.status === 'submitted') {
            break;
          }

          if (post.email.status === 'failed') {
            throw new _emailFailedError.default(post.email.error);
          }
        }
      }

      return post;
    }),
    retryEmailSend: Ember._action(function () {
      return this._retryEmailSend.perform();
    }),
    _retryEmailSend: (0, _emberConcurrency.task)(function* () {
      if (!this.post.email) {
        return;
      }

      let email = yield this.post.email.retry();
      let pollTimeout = 0;

      if (email && email.status !== 'submitted') {
        while (pollTimeout < CONFIRM_EMAIL_POLL_LENGTH) {
          yield (0, _emberConcurrency.timeout)(CONFIRM_EMAIL_POLL_LENGTH);
          email = yield email.reload();

          if (email.status === 'submitted') {
            break;
          }

          if (email.status === 'failed') {
            throw new _emailFailedError.default(email.error);
          }
        }
      }

      return email;
    }),
    openEmailConfirmationModal: Ember._action(function (dropdown) {
      if (dropdown) {
        this._skipDropdownCloseCleanup = true;
        dropdown.actions.close();
      }

      this.set('showEmailConfirmationModal', true);
    }),
    closeEmailConfirmationModal: Ember._action(function () {
      this.set('showEmailConfirmationModal', false);

      this._cleanup();
    }),
    save: (0, _emberConcurrency.task)(function* ({
      dropdown
    } = {}) {
      let {
        post,
        sendEmailWhenPublished,
        sendEmailConfirmed,
        saveType,
        typedDateError
      } = this; // don't allow save if an invalid schedule date is present

      if (typedDateError) {
        return false;
      }

      if (post.status === 'draft' && !post.email && // email sent previously
      sendEmailWhenPublished && !sendEmailConfirmed // set once confirmed so normal save happens
      ) {
          this.openEmailConfirmationModal(dropdown);
          return;
        }

      this.sendEmailConfirmed = false; // runningText needs to be declared before the other states change during the
      // save action.

      this.set('runningText', this._runningText);
      this.set('_previousStatus', this.get('post.status'));
      this.setSaveType(saveType);

      try {
        // validate publishedAtBlog first to avoid an alert for displayed errors
        yield post.validate({
          property: 'publishedAtBlog'
        }); // actual save will show alert for other failed validations

        post = yield this.saveTask.perform({
          sendEmailWhenPublished
        }); // revert the email checkbox to avoid weird inbetween states

        this.set('sendEmailWhenPublished', false);

        this._cachePublishedAtBlogTZ();

        return post;
      } catch (error) {
        // re-throw if we don't have a validation error
        if (error) {
          throw error;
        }
      }
    }),

    _cachePublishedAtBlogTZ() {
      this._publishedAtBlogTZ = this.get('post.publishedAtBlogTZ');
    },

    _cleanup() {
      this.set('showConfirmEmailModal', false);
      this.set('sendEmailWhenPublished', false); // when closing the menu we reset the publishedAtBlogTZ date so that the
      // unsaved changes made to the scheduled date aren't reflected in the PSM

      this.post.set('publishedAtBlogTZ', this._publishedAtBlogTZ);
      this.post.set('statusScratch', null);
      this.post.validate();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-scroll-trigger", ["exports", "ember-in-viewport"], function (_exports, _emberInViewport) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend(_emberInViewport.default, {
    enter() {},

    exit() {},

    registerElement() {},

    didInsertElement() {
      let offset = this.triggerOffset || {}; // if triggerOffset is a number we use it for all dimensions

      if (typeof offset === 'number') {
        offset = {
          top: offset,
          bottom: offset,
          left: offset,
          right: offset
        };
      }

      this.set('viewportSpy', true);
      this.set('viewportTolerance', {
        top: offset.top,
        bottom: offset.bottom,
        left: offset.left,
        right: offset.right
      });

      this._super(...arguments);

      this.registerElement(this.element);
    },

    didEnterViewport() {
      return this.enter();
    },

    didExitViewport() {
      return this.exit();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-search-input-trigger", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    actions: {
      captureMouseDown(e) {
        e.stopPropagation();
      },

      search(term) {
        // open dropdown if not open and term is present
        // close dropdown if open and term is blank
        if (Ember.isBlank(term) === this.select.isOpen) {
          Ember.isBlank(term) ? this.close() : this.open(); // ensure focus isn't lost when dropdown is closed

          if (Ember.isBlank(term)) {
            this._focusInput();
          }
        }

        this.select.actions.search(term);
      },

      focusInput() {
        this._focusInput();
      },

      // hacky workaround to let Escape clear the input if there's text,
      // but still allow it to close the search modal if there's no text
      handleKeydown(e) {
        if (e.key === 'Escape' && e.target.value || e.key === 'Enter') {
          this._previousKeyScope = key.getScope();
          key.setScope('ignore');
        }
      },

      handleKeyup() {
        if (key.getScope() === 'ignore') {
          key.setScope(this._previousKeyScope);
        }
      }

    },

    open() {
      this.select.actions.open();
    },

    close() {
      this.select.actions.close();
    },

    _focusInput() {
      let input = this.element && this.element.querySelector('input');

      if (input) {
        input.focus();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-search-input", ["exports", "ember-concurrency"], function (_exports, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.computedGroup = computedGroup;
  _exports.default = void 0;

  function computedGroup(category) {
    return Ember.computed('content', 'currentSearch', function () {
      if (!this.currentSearch || !this.content) {
        return [];
      }

      return this.content.filter(item => {
        let search = this.currentSearch.toString().toLowerCase();
        return item.category === category && item.title.toString().toLowerCase().indexOf(search) >= 0;
      });
    });
  }

  var _default = Ember.Component.extend({
    ajax: Ember.inject.service(),
    notifications: Ember.inject.service(),
    router: Ember.inject.service(),
    store: Ember.inject.service(),
    content: null,
    contentExpiresAt: false,
    contentExpiry: 30000,
    currentSearch: '',
    selection: null,

    onSelected() {},

    posts: computedGroup('Posts'),
    pages: computedGroup('Pages'),
    users: computedGroup('Users'),
    tags: computedGroup('Tags'),
    groupedContent: Ember.computed('posts', 'pages', 'users', 'tags', function () {
      let groups = [];

      if (!Ember.isEmpty(this.posts)) {
        groups.pushObject({
          groupName: 'Posts',
          options: this.posts
        });
      }

      if (!Ember.isEmpty(this.pages)) {
        groups.pushObject({
          groupName: 'Pages',
          options: this.pages
        });
      }

      if (!Ember.isEmpty(this.users)) {
        groups.pushObject({
          groupName: 'Users',
          options: this.users
        });
      }

      if (!Ember.isEmpty(this.tags)) {
        groups.pushObject({
          groupName: 'Tags',
          options: this.tags
        });
      }

      return groups;
    }),

    init() {
      this._super(...arguments);

      this.content = [];
    },

    didRender() {
      this._super(...arguments); // force the search box to be focused at all times. Fixes disappearing
      // caret when pressing Escape


      let input = this.element.querySelector('input');

      if (input) {
        input.focus();
      }
    },

    actions: {
      openSelected(selected) {
        if (!selected) {
          return;
        }

        this.onSelected(selected);

        if (selected.category === 'Posts') {
          let id = selected.id.replace('post.', '');
          this.router.transitionTo('editor.edit', 'post', id);
        }

        if (selected.category === 'Pages') {
          let id = selected.id.replace('page.', '');
          this.router.transitionTo('editor.edit', 'page', id);
        }

        if (selected.category === 'Users') {
          let id = selected.id.replace('user.', '');
          this.router.transitionTo('staff.user', id);
        }

        if (selected.category === 'Tags') {
          let id = selected.id.replace('tag.', '');
          this.router.transitionTo('tag', id);
        }
      },

      search(term) {
        return this.performSearch.perform(term);
      }

    },
    performSearch: (0, _emberConcurrency.task)(function* (term) {
      if (Ember.isBlank(term)) {
        return [];
      } // start loading immediately in the background


      this.refreshContent.perform(); // debounce searches to 200ms to avoid thrashing CPU

      yield (0, _emberConcurrency.timeout)(200); // wait for any on-going refresh to finish

      if (this.refreshContent.isRunning) {
        yield (0, _emberConcurrency.waitForProperty)(this, 'refreshContent.isIdle');
      } // set dependent CP term and re-calculate CP


      this.set('currentSearch', term);
      return this.groupedContent;
    }).restartable(),
    refreshContent: (0, _emberConcurrency.task)(function* () {
      let promises = [];
      let now = new Date();
      let contentExpiresAt = this.contentExpiresAt;

      if (contentExpiresAt > now) {
        return true;
      }

      this.set('content', []);
      promises.pushObject(this._loadPosts());
      promises.pushObject(this._loadPages());
      promises.pushObject(this._loadUsers());
      promises.pushObject(this._loadTags());

      try {
        yield Ember.RSVP.all(promises);
      } catch (error) {
        // eslint-disable-next-line
        console.error(error);
      }

      let contentExpiry = this.contentExpiry;
      this.set('contentExpiresAt', new Date(now.getTime() + contentExpiry));
    }).drop(),

    _loadPosts() {
      let store = this.store;
      let postsUrl = "".concat(store.adapterFor('post').urlForQuery({}, 'post'), "/");
      let postsQuery = {
        fields: 'id,title,page',
        limit: 'all'
      };
      let content = this.content;
      return this.ajax.request(postsUrl, {
        data: postsQuery
      }).then(posts => {
        content.pushObjects(posts.posts.map(post => ({
          id: "post.".concat(post.id),
          title: post.title,
          category: 'Posts'
        })));
      }).catch(error => {
        this.notifications.showAPIError(error, {
          key: 'search.loadPosts.error'
        });
      });
    },

    _loadPages() {
      let store = this.store;
      let pagesUrl = "".concat(store.adapterFor('page').urlForQuery({}, 'page'), "/");
      let pagesQuery = {
        fields: 'id,title,page',
        limit: 'all'
      };
      let content = this.content;
      return this.ajax.request(pagesUrl, {
        data: pagesQuery
      }).then(pages => {
        content.pushObjects(pages.pages.map(page => ({
          id: "page.".concat(page.id),
          title: page.title,
          category: 'Pages'
        })));
      }).catch(error => {
        this.notifications.showAPIError(error, {
          key: 'search.loadPosts.error'
        });
      });
    },

    _loadUsers() {
      let store = this.store;
      let usersUrl = "".concat(store.adapterFor('user').urlForQuery({}, 'user'), "/");
      let usersQuery = {
        fields: 'name,slug',
        limit: 'all'
      };
      let content = this.content;
      return this.ajax.request(usersUrl, {
        data: usersQuery
      }).then(users => {
        content.pushObjects(users.users.map(user => ({
          id: "user.".concat(user.slug),
          title: user.name,
          category: 'Users'
        })));
      }).catch(error => {
        this.notifications.showAPIError(error, {
          key: 'search.loadUsers.error'
        });
      });
    },

    _loadTags() {
      let store = this.store;
      let tagsUrl = "".concat(store.adapterFor('tag').urlForQuery({}, 'tag'), "/");
      let tagsQuery = {
        fields: 'name,slug',
        limit: 'all'
      };
      let content = this.content;
      return this.ajax.request(tagsUrl, {
        data: tagsQuery
      }).then(tags => {
        content.pushObjects(tags.tags.map(tag => ({
          id: "tag.".concat(tag.slug),
          title: tag.name,
          category: 'Tags'
        })));
      }).catch(error => {
        this.notifications.showAPIError(error, {
          key: 'search.loadTags.error'
        });
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-simplemde", ["exports", "ghost-admin/config/environment", "ember-concurrency"], function (_exports, _environment, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.TextArea.extend({
    lazyLoader: Ember.inject.service(),
    // Public attributes
    autofocus: false,
    options: null,
    value: null,
    placeholder: '',
    // Private
    _editor: null,

    // Closure actions
    onChange() {},

    onEditorInit() {},

    onEditorDestroy() {},

    // default SimpleMDE options, see docs for available config:
    // https://github.com/sparksuite/simplemde-markdown-editor#configuration
    defaultOptions: Ember.computed(function () {
      return {
        autofocus: this.autofocus,
        indentWithTabs: false,
        placeholder: this.placeholder,
        tabSize: 4
      };
    }),

    init() {
      this._super(...arguments);

      if (Ember.isEmpty(this.options)) {
        this.set('options', {});
      }
    },

    // update the editor when the value property changes from the outside
    didReceiveAttrs() {
      this._super(...arguments);

      if (Ember.isEmpty(this._editor)) {
        return;
      } // compare values before forcing a content reset to avoid clobbering
      // the undo behaviour


      if (this.value !== this._editor.value()) {
        let cursor = this._editor.codemirror.getDoc().getCursor();

        this._editor.value(this.value);

        this._editor.codemirror.getDoc().setCursor(cursor);
      }
    },

    // instantiate the editor with the contents of value
    didInsertElement() {
      this._super(...arguments);

      this.initSimpleMDE.perform();
    },

    willDestroyElement() {
      this._editor.toTextArea();

      delete this._editor;

      this._super(...arguments);
    },

    initSimpleMDE: (0, _emberConcurrency.task)(function* () {
      yield this.lazyLoader.loadScript('simplemde', 'assets/simplemde/simplemde.js');
      let editorOptions = Ember.assign({
        element: document.getElementById(this.elementId)
      }, this.defaultOptions, this.options); // disable spellchecker when testing so that the exterally loaded plugin
      // doesn't fail

      if (_environment.default.environment === 'test') {
        editorOptions.spellChecker = false;
      }

      this._editor = new SimpleMDE(editorOptions);

      this._editor.value(this.value || '');

      this._editor.codemirror.on('change', (instance, changeObj) => {
        // avoid a "modified x twice in a single render" error that occurs
        // when the underlying value is completely swapped out
        if (changeObj.origin !== 'setValue') {
          this.onChange(this._editor.value());
        }
      });

      this._editor.codemirror.on('focus', () => {
        this.onFocus();
      });

      this._editor.codemirror.on('blur', () => {
        this.onBlur();
      });

      if (this.autofocus) {
        this._editor.codemirror.execCommand('goDocEnd');
      }

      this.onEditorInit(this._editor);
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-site-iframe", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    config: Ember.inject.service(),
    tagName: '',

    didReceiveAttrs() {
      // reset the src attribute each time the guid changes - allows for
      // a click on the navigation item to reset back to the homepage
      if (this.guid !== this._lastGuid) {
        let iframe = document.querySelector('#site-frame');

        if (iframe) {
          iframe.src = "".concat(this.config.get('blogUrl'), "/");
        }
      }

      this._lastGuid = this.guid;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-skip-link", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    tagName: 'a',
    anchor: '',
    classNames: ['sr-only', 'sr-only-focusable'],
    // Add attributes to component for href
    // href should be set to retain anchor properties
    // such as pointer cursor and text underline
    attributeBindings: ['href'],
    // Used so that upon clicking on the link
    // anchor behaviors or ignored
    href: Ember.String.htmlSafe('javascript:;'),

    click() {
      let el = document.querySelector(this.anchor);

      if (el) {
        // Scrolls to the top of main content or whatever
        // is passed to the anchor attribute
        document.body.scrollTop = el.getBoundingClientRect().top;

        let removeTabindex = function () {
          el.removeAttribute('tabindex');
        }; // This sets focus on the content which was skipped to
        // upon losing focus, the tabindex should be removed
        // so that normal keyboard navigation picks up from focused
        // element


        el.setAttribute('tabindex', -1);
        el.focus();
        el.addEventListener('blur', removeTabindex);
        el.addEventListener('focusout', removeTabindex);
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-tag-settings-form", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const {
    Handlebars
  } = Ember;

  var _default = Ember.Component.extend({
    feature: Ember.inject.service(),
    config: Ember.inject.service(),
    tag: null,
    scratchTag: null,
    // Allowed actions
    setProperty: () => {},
    title: Ember.computed('tag.isNew', function () {
      if (this.get('tag.isNew')) {
        return 'New tag';
      } else {
        return 'Tag settings';
      }
    }),
    seoTitle: Ember.computed('scratchTag.{title,metaTitle}', function () {
      let metaTitle = this.scratchTag.metaTitle || '';
      metaTitle = metaTitle.length > 0 ? metaTitle : this.scratchTag.title;

      if (metaTitle && metaTitle.length > 70) {
        metaTitle = metaTitle.substring(0, 70).trim();
        metaTitle = Handlebars.Utils.escapeExpression(metaTitle);
        metaTitle = Ember.String.htmlSafe("".concat(metaTitle, "&hellip;"));
      }

      return metaTitle;
    }),
    seoURL: Ember.computed('scratchTag.slug', function () {
      let blogUrl = this.get('config.blogUrl');
      let seoSlug = this.scratchTag.slug || '';
      let seoURL = "".concat(blogUrl, "/tag/").concat(seoSlug); // only append a slash to the URL if the slug exists

      if (seoSlug) {
        seoURL += '/';
      }

      if (seoURL.length > 70) {
        seoURL = seoURL.substring(0, 70).trim();
        seoURL = Handlebars.Utils.escapeExpression(seoURL);
        seoURL = Ember.String.htmlSafe("".concat(seoURL, "&hellip;"));
      }

      return seoURL;
    }),
    seoDescription: Ember.computed('scratchTag.{description,metaDescription}', function () {
      let metaDescription = this.scratchTag.metaDescription || '';
      metaDescription = metaDescription.length > 0 ? metaDescription : this.scratchTag.description;

      if (metaDescription && metaDescription.length > 156) {
        metaDescription = metaDescription.substring(0, 156).trim();
        metaDescription = Handlebars.Utils.escapeExpression(metaDescription);
        metaDescription = Ember.String.htmlSafe("".concat(metaDescription, "&hellip;"));
      }

      return metaDescription;
    }),
    actions: {
      setProperty(property, value) {
        this.setProperty(property, value);
      },

      setCoverImage(image) {
        this.setProperty('featureImage', image);
      },

      clearCoverImage() {
        this.setProperty('featureImage', '');
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-tags-list-item", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    router: Ember.inject.service(),
    tagName: 'li',
    classNames: ['gh-list-row', 'gh-tags-list-item'],
    active: false,
    id: Ember.computed.alias('tag.id'),
    slug: Ember.computed.alias('tag.slug'),
    name: Ember.computed.alias('tag.name'),
    isInternal: Ember.computed.alias('tag.isInternal'),
    description: Ember.computed.alias('tag.description'),
    postsCount: Ember.computed.alias('tag.count.posts'),
    postsLabel: Ember.computed('tag.count.posts', function () {
      let noOfPosts = this.postsCount || 0;
      return noOfPosts === 1 ? "".concat(noOfPosts, " post") : "".concat(noOfPosts, " posts");
    }),

    _deleteTag() {
      let tag = this.tag;
      return tag.destroyRecord().then(() => {}, error => {
        this._deleteTagFailure(error);
      });
    },

    _deleteTagFailure(error) {
      this.notifications.showAPIError(error, {
        key: 'tag.delete'
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-task-button", ["exports", "ember-concurrency"], function (_exports, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /**
   * Task Button works exactly like Spin button, but with one major difference:
   *
   * Instead of passing a "submitting" parameter (which is bound to the parent object),
   * you pass an ember-concurrency task. All of the "submitting" behavior is handled automatically.
   *
   * As another bonus, there's no need to handle canceling the promises when something
   * like a controller changes. Because the only task running is handled through this
   * component, all running promises will automatically be cancelled when this
   * component is removed from the DOM
   */
  const GhTaskButton = Ember.Component.extend({
    tagName: 'button',
    classNameBindings: ['isRunning:appear-disabled', 'isIdleClass', 'isRunningClass', 'isSuccessClass', 'isFailureClass'],
    attributeBindings: ['disabled', 'form', 'type', 'tabindex'],
    task: null,
    taskArgs: undefined,
    disabled: false,
    defaultClick: false,
    buttonText: 'Save',
    idleClass: '',
    runningClass: '',
    showSuccess: true,
    // set to false if you want the spinner to show until a transition occurs
    autoReset: false,
    // set to false if you want don't want task button to reset after timeout
    successText: 'Saved',
    successClass: 'gh-btn-green',
    failureText: 'Retry',
    failureClass: 'gh-btn-red',
    // Allowed actions
    action: () => {},
    runningText: Ember.computed.reads('buttonText'),
    // hasRun is needed so that a newly rendered button does not show the last
    // state of the associated task
    hasRun: Ember.computed('task.performCount', function () {
      return this.get('task.performCount') > this._initialPerformCount;
    }),
    isIdleClass: Ember.computed('isIdle', function () {
      return this.isIdle ? this.idleClass : '';
    }),
    isRunning: Ember.computed('task.last.isRunning', 'hasRun', 'showSuccess', function () {
      let isRunning = this.get('task.last.isRunning');

      if (this.hasRun && this.get('task.last.value') && !this.showSuccess) {
        isRunning = true;
      }

      return isRunning;
    }),
    isRunningClass: Ember.computed('isRunning', function () {
      return this.isRunning ? this.runningClass || this.idleClass : '';
    }),
    isSuccess: Ember.computed('hasRun', 'isRunning', 'task.last.value', function () {
      if (!this.hasRun || this.isRunning || !this.showSuccess) {
        return false;
      }

      let value = this.get('task.last.value');
      return !Ember.isBlank(value) && value !== false;
    }),
    isSuccessClass: Ember.computed('isSuccess', function () {
      return this.isSuccess ? this.successClass : '';
    }),
    isFailure: Ember.computed('hasRun', 'isRunning', 'isSuccess', 'task.last.error', function () {
      if (!this.hasRun || this.isRunning || this.isSuccess) {
        return false;
      }

      return this.get('task.last.error') !== undefined;
    }),
    isFailureClass: Ember.computed('isFailure', function () {
      return this.isFailure ? this.failureClass : '';
    }),
    isIdle: Ember.computed('isRunning', 'isSuccess', 'isFailure', function () {
      return !this.isRunning && !this.isSuccess && !this.isFailure;
    }),

    init() {
      this._super(...arguments);

      this._initialPerformCount = this.get('task.performCount');
    },

    click() {
      // let the default click bubble if defaultClick===true - useful when
      // you want to handle a form submit action rather than triggering a
      // task directly
      if (this.defaultClick) {
        if (!this.isRunning) {
          this._restartAnimation.perform();
        }

        return;
      } // do nothing if disabled externally


      if (this.disabled) {
        return false;
      }

      let taskName = this.get('task.name');
      let lastTaskName = this.get('task.last.task.name'); // task-buttons are never disabled whilst running so that clicks when a
      // taskGroup is running don't get dropped BUT that means we need to check
      // here to avoid spamming actions from multiple clicks

      if (this.isRunning && taskName === lastTaskName) {
        return;
      }

      this.action();

      this._handleMainTask.perform();

      this._restartAnimation.perform(); // prevent the click from bubbling and triggering form actions


      return false;
    },

    // mouseDown can be prevented, this is useful for situations where we want
    // to avoid on-blur events triggering before the button click
    mouseDown(event) {
      if (this.disableMouseDown) {
        event.preventDefault();
      }
    },

    // when local validation fails there's no transition from failed->running
    // so we want to restart the retry spinner animation to show something
    // has happened when the button is clicked
    _restartAnimation: (0, _emberConcurrency.task)(function* () {
      let elem = this.element.querySelector('.retry-animated');

      if (elem) {
        elem.classList.remove('retry-animated');
        yield (0, _emberConcurrency.timeout)(10);
        elem.classList.add('retry-animated');
      }
    }),
    _handleMainTask: (0, _emberConcurrency.task)(function* () {
      this._resetButtonState.cancelAll();

      yield this.task.perform(this.taskArgs);
      const isTaskSuccess = this.get('task.last.isSuccessful') && this.get('task.last.value');

      if (this.autoReset && this.showSuccess && isTaskSuccess) {
        this._resetButtonState.perform();
      }
    }),
    _resetButtonState: (0, _emberConcurrency.task)(function* () {
      yield (0, _emberConcurrency.timeout)(2500);

      if (!this.get('task.last.isRunning')) {
        // Reset last task to bring button back to idle state
        yield this.set('task.last', null);
      }
    }).restartable()
  });
  var _default = GhTaskButton;
  _exports.default = _default;
});
;define("ghost-admin/components/gh-text-input", ["exports", "ghost-admin/mixins/text-input"], function (_exports, _textInput) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.TextField.extend(_textInput.default, {
    classNames: 'gh-input'
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-textarea", ["exports", "ghost-admin/mixins/text-input"], function (_exports, _textInput) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.TextArea.extend(_textInput.default, {
    resizeDetector: Ember.inject.service(),
    classNames: 'gh-input',
    autoExpand: false,

    didReceiveAttrs() {
      this._super(...arguments); // trigger auto-expand any time the value changes


      if (this.autoExpand) {
        Ember.run.scheduleOnce('afterRender', this, this._autoExpand);
      }
    },

    willInsertElement() {
      this._super(...arguments); // disable the draggable resize element that browsers add to textareas


      if (this.autoExpand) {
        this.element.style.resize = 'none';
      }
    },

    didInsertElement() {
      this._super(...arguments); // set up resize handler on element insert so that we can autoexpand
      // when the element container changes size


      if (this.autoExpand) {
        Ember.run.scheduleOnce('afterRender', this, this._setupAutoExpand);
      }

      if (this.didCreateTextarea) {
        this.didCreateTextarea(this.element);
      }
    },

    willDestroyElement() {
      this._teardownAutoExpand();

      this._super(...arguments);
    },

    _autoExpand() {
      let el = this.element; // collapse the element first so that we can shrink as well as expand
      // then set the height to match the text height

      if (el) {
        el.style.height = 0;
        el.style.height = "".concat(el.scrollHeight, "px");
      }
    },

    _setupAutoExpand() {
      this._resizeCallback = Ember.run.bind(this, this._onResize);
      this.resizeDetector.setup(this.autoExpand, this._resizeCallback);

      this._autoExpand();
    },

    _onResize() {
      this._autoExpand();
    },

    _teardownAutoExpand() {
      this.resizeDetector.teardown(this.autoExpand, this._resizeCallback);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-theme-error-li", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    tagName: '',
    error: null,
    showDetails: false,
    actions: {
      toggleDetails() {
        this.toggleProperty('showDetails');
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-theme-table", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    themes: null,
    sortedThemes: Ember.computed('themes.@each.active', function () {
      let themes = this.themes.map(t => {
        let theme = {};
        let themePackage = Ember.get(t, 'package');
        theme.model = t;
        theme.name = Ember.get(t, 'name');
        theme.label = themePackage ? "".concat(themePackage.name) : theme.name;
        theme.version = themePackage ? "".concat(themePackage.version) : '1.0';
        theme.package = themePackage;
        theme.active = Ember.get(t, 'active');
        theme.isDeletable = !theme.active;
        return theme;
      });
      let duplicateThemes = [];
      themes.forEach(theme => {
        let duplicateLabels = themes.filterBy('label', theme.label);

        if (duplicateLabels.length > 1) {
          duplicateThemes.pushObject(theme);
        }
      });
      duplicateThemes.forEach(theme => {
        if (theme.name !== 'casper') {
          theme.label = "".concat(theme.label, " (").concat(theme.name, ")");
        }
      }); // "(default)" needs to be added to casper manually as it's always
      // displayed and would mess up the duplicate checking if added earlier

      let casper = themes.findBy('name', 'casper');

      if (casper) {
        casper.label = "".concat(casper.label, " (default)");
        casper.isDefault = true;
        casper.isDeletable = false;
      } // sorting manually because .sortBy('label') has a different sorting
      // algorithm to [...strings].sort()


      return themes.sort((themeA, themeB) => {
        let a = themeA.label.toLowerCase();
        let b = themeB.label.toLowerCase();

        if (a < b) {
          return -1;
        }

        if (a > b) {
          return 1;
        }

        return 0;
      });
    }).readOnly()
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-timezone-select", ["exports", "moment"], function (_exports, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    clock: Ember.inject.service(),
    classNames: ['form-group', 'for-select'],
    activeTimezone: null,
    availableTimezones: null,
    // Allowed actions
    update: () => {},
    availableTimezoneNames: Ember.computed.mapBy('availableTimezones', 'name'),
    hasTimezoneOverride: Ember.computed('activeTimezone', 'availableTimezoneNames', function () {
      let activeTimezone = this.activeTimezone;
      let availableTimezoneNames = this.availableTimezoneNames;
      return !availableTimezoneNames.includes(activeTimezone);
    }),
    selectedTimezone: Ember.computed('activeTimezone', 'availableTimezones', 'hasTimezoneOverride', function () {
      let hasTimezoneOverride = this.hasTimezoneOverride;
      let activeTimezone = this.activeTimezone;
      let availableTimezones = this.availableTimezones;

      if (hasTimezoneOverride) {
        return {
          name: '',
          label: ''
        };
      }

      return availableTimezones.filterBy('name', activeTimezone).get('firstObject');
    }),
    selectableTimezones: Ember.computed('availableTimezones', 'hasTimezoneOverride', function () {
      let hasTimezoneOverride = this.hasTimezoneOverride;
      let availableTimezones = this.availableTimezones;

      if (hasTimezoneOverride) {
        return [{
          name: '',
          label: ''
        }, ...availableTimezones];
      }

      return availableTimezones;
    }),
    localTime: Ember.computed('hasTimezoneOverride', 'activeTimezone', 'selectedTimezone', 'clock.second', function () {
      let hasTimezoneOverride = this.hasTimezoneOverride;
      let timezone = hasTimezoneOverride ? this.activeTimezone : this.get('selectedTimezone.name');
      this.get('clock.second');
      return timezone ? (0, _moment.default)().tz(timezone).format('HH:mm:ss') : (0, _moment.default)().utc().format('HH:mm:ss');
    }),
    actions: {
      setTimezone(timezone) {
        this.update(timezone);
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-token-input", ["exports", "ghost-admin/utils/computed-fallback-if-undefined", "ember-power-select/utils/group-utils", "@ember-decorators/component", "ember-concurrency"], function (_exports, _computedFallbackIfUndefined, _groupUtils, _component, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _temp;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const {
    Handlebars
  } = Ember;
  const BACKSPACE = 8;
  const TAB = 9;
  let GhTokenInput = (_dec = (0, _component.tagName)(''), _dec2 = (0, _computedFallbackIfUndefined.default)(true), _dec3 = (0, _computedFallbackIfUndefined.default)(false), _dec4 = (0, _computedFallbackIfUndefined.default)('name'), _dec5 = (0, _computedFallbackIfUndefined.default)(_groupUtils.defaultMatcher), _dec6 = (0, _computedFallbackIfUndefined.default)('name'), _dec7 = (0, _computedFallbackIfUndefined.default)('gh-token-input/trigger'), _dec8 = (0, _computedFallbackIfUndefined.default)('power-select-vertical-collection-options'), _dec9 = Ember.computed('options.[]', 'selected.[]'), _dec10 = (0, _emberConcurrency.task)(function* () {
    let options = yield this.options;
    let selected = yield this.selected;
    return options.filter(o => !selected.includes(o));
  }), _dec11 = (0, _emberConcurrency.task)(function* (term, select) {
    let newOptions = (yield this.optionsWithoutSelected).toArray();

    if (term.length === 0) {
      return newOptions;
    }

    let searchAction = this.search;

    if (searchAction) {
      let results = yield searchAction(term, select);

      if (results.toArray) {
        results = results.toArray();
      }

      this._addCreateOption(term, results);

      return results;
    }

    newOptions = this._filter(Ember.A(newOptions), term);

    this._addCreateOption(term, newOptions);

    return newOptions;
  }), _dec(_class = (_class2 = (_temp = class GhTokenInput extends Ember.Component {
    constructor(...args) {
      super(...args);

      _initializerDefineProperty(this, "allowCreation", _descriptor, this);

      _initializerDefineProperty(this, "closeOnSelect", _descriptor2, this);

      _initializerDefineProperty(this, "labelField", _descriptor3, this);

      _initializerDefineProperty(this, "matcher", _descriptor4, this);

      _initializerDefineProperty(this, "searchField", _descriptor5, this);

      _initializerDefineProperty(this, "triggerComponent", _descriptor6, this);

      _initializerDefineProperty(this, "optionsComponent", _descriptor7, this);

      _initializerDefineProperty(this, "optionsWithoutSelectedTask", _descriptor8, this);

      _initializerDefineProperty(this, "searchAndSuggestTask", _descriptor9, this);
    }

    get optionsWithoutSelected() {
      return this.optionsWithoutSelectedTask.perform();
    } // actions -----------------------------------------------------------------


    handleKeydown(select, event) {
      // On backspace with empty text, remove the last token but deviate
      // from default behaviour by not updating search to match last token
      if (event.keyCode === BACKSPACE && Ember.isBlank(event.target.value)) {
        let lastSelection = select.selected[select.selected.length - 1];

        if (lastSelection) {
          this.onChange(select.selected.slice(0, -1), select);
          select.actions.search('');
          select.actions.open(event);
        } // prevent default


        return false;
      } // Tab should work the same as Enter if there's a highlighted option


      if (event.keyCode === TAB && !Ember.isBlank(event.target.value) && select.highlighted) {
        if (!select.selected || select.selected.indexOf(select.highlighted) === -1) {
          select.actions.choose(select.highlighted, event);
          event.preventDefault(); // keep focus in search

          return false;
        }
      } // fallback to default


      return true;
    }

    handleFocus() {
      key.setScope('gh-token-input');

      if (this.onFocus) {
        this.onFocus(...arguments);
      }
    }

    handleBlur() {
      key.setScope('default');

      if (this.onBlur) {
        this.onBlur(...arguments);
      }
    }

    searchAndSuggest(term, select) {
      return this.searchAndSuggestTask.perform(term, select);
    }

    selectOrCreate(selection, select, keyboardEvent) {
      // allow tokens to be created with spaces
      if (keyboardEvent && keyboardEvent.code === 'Space') {
        select.actions.search("".concat(select.searchText, " "));
        return;
      } // guard against return being pressed when nothing is selected


      if (!Ember.isArray(selection)) {
        return;
      }

      let suggestion = selection.find(option => option.__isSuggestion__);

      if (suggestion) {
        this.onCreate(suggestion.__value__, select);
      } else {
        this.onChange(selection, select);
      } // clear select search


      select.actions.search('');
    } // tasks -------------------------------------------------------------------


    // internal ----------------------------------------------------------------
    // always select the first item in the list that isn't the "Add x" option
    defaultHighlighted(select) {
      let {
        results
      } = select;
      let option = (0, _groupUtils.advanceSelectableOption)(results, undefined, 1);

      if (results.length > 1 && option.__isSuggestion__) {
        option = (0, _groupUtils.advanceSelectableOption)(results, option, 1);
      }

      return option;
    } // private -----------------------------------------------------------------


    _addCreateOption(term, options) {
      if (this._shouldShowCreateOption(term, options)) {
        options.unshift(this._buildSuggestionForTerm(term));
      }
    }

    _shouldShowCreateOption(term, options) {
      if (!this.allowCreation) {
        return false;
      }

      if (this.showCreateWhen) {
        return this.showCreateWhen(term, options);
      } else {
        return this._hideCreateOptionOnSameTerm(term, options);
      }
    }

    _buildSuggestionForTerm(term) {
      return {
        __isSuggestion__: true,
        __value__: term,
        text: this._buildSuggestionLabel(term)
      };
    }

    _hideCreateOptionOnSameTerm(term, options) {
      let searchField = this.searchField;
      let existingOption = options.findBy(searchField, term);
      return !existingOption;
    }

    _filter(options, searchText) {
      let matcher;

      if (this.searchField) {
        matcher = (option, text) => this.matcher(Ember.get(option, this.searchField), text);
      } else {
        matcher = (option, text) => this.matcher(option, text);
      }

      return (0, _groupUtils.filterOptions)(options || [], searchText, matcher);
    }

    _buildSuggestionLabel(term) {
      if (this.buildSuggestion) {
        return this.buildSuggestion(term);
      }

      return Ember.String.htmlSafe("Add <strong>\"".concat(Handlebars.Utils.escapeExpression(term), "\"...</strong>"));
    }

  }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "allowCreation", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "closeOnSelect", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labelField", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "matcher", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "searchField", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "triggerComponent", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "optionsComponent", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "optionsWithoutSelected", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "optionsWithoutSelected"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleKeydown", [Ember._action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleKeydown"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleFocus", [Ember._action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleFocus"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleBlur", [Ember._action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleBlur"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "searchAndSuggest", [Ember._action], Object.getOwnPropertyDescriptor(_class2.prototype, "searchAndSuggest"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "selectOrCreate", [Ember._action], Object.getOwnPropertyDescriptor(_class2.prototype, "selectOrCreate"), _class2.prototype), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "optionsWithoutSelectedTask", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "searchAndSuggestTask", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  var _default = GhTokenInput;
  _exports.default = _default;
});
;define("ghost-admin/components/gh-token-input/label-token", ["exports", "ember-drag-drop/components/draggable-object"], function (_exports, _draggableObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _draggableObject.default.extend({
    attributeBindings: ['title'],
    classNames: ['label-token'],
    title: 'Label'
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-token-input/select-multiple", ["exports", "jquery", "ember-power-select/components/power-select-multiple", "ghost-admin/templates/components/gh-token-input/select-multiple", "@ember-decorators/component"], function (_exports, _jquery, _powerSelectMultiple, _selectMultiple, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _dec2, _class, _class2, _temp;

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  // TODO: convert from jQuery to native DOM
  const END_ACTIONS = 'click.ghToken mouseup.ghToken touchend.ghToken'; // triggering focus on the search input within ESA's onfocus event breaks the
  // drag-n-drop functionality in ember-drag-drop so we watch for events that
  // could be the start of a drag and disable the default focus behaviour until
  // we get another event signalling the end of a drag

  let GhTokenInputSelectMultiple = (_dec = (0, _component.tagName)('div'), _dec2 = (0, _component.layout)(_selectMultiple.default), _dec(_class = _dec2(_class = (_class2 = (_temp = class GhTokenInputSelectMultiple extends _powerSelectMultiple.default {
    constructor(...args) {
      super(...args);

      _defineProperty(this, "_canFocus", true);
    }

    willDestroyElement() {
      super.willDestroyElement(...arguments);

      if (this._allowFocusListener) {
        (0, _jquery.default)(window).off(END_ACTIONS, this._allowFocusListener);
      }
    } // actions


    optionMouseDown(event) {
      if (event.which === 1 && !event.ctrlKey) {
        this._denyFocus(event);
      }
    }

    optionTouchStart(event) {
      this._denyFocus(event);
    }

    handleFocus() {
      if (this._canFocus) {
        super.handleFocus(...arguments);
      }
    } // internal


    _denyFocus() {
      if (this._canFocus) {
        this._canFocus = false;
        this._allowFocusListener = Ember.run.bind(this, this._allowFocus);
        (0, _jquery.default)(window).on(END_ACTIONS, this._allowFocusListener);
      }
    }

    _allowFocus() {
      this._canFocus = true;
      (0, _jquery.default)(window).off(END_ACTIONS, this._allowFocusListener);
      this._allowFocusListener = null;
    }

  }, _temp), (_applyDecoratedDescriptor(_class2.prototype, "optionMouseDown", [Ember._action], Object.getOwnPropertyDescriptor(_class2.prototype, "optionMouseDown"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "optionTouchStart", [Ember._action], Object.getOwnPropertyDescriptor(_class2.prototype, "optionTouchStart"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleFocus", [Ember._action], Object.getOwnPropertyDescriptor(_class2.prototype, "handleFocus"), _class2.prototype)), _class2)) || _class) || _class);
  _exports.default = GhTokenInputSelectMultiple;
});
;define("ghost-admin/components/gh-token-input/suggested-option", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    tagName: ''
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-token-input/tag-token", ["exports", "ember-drag-drop/components/draggable-object"], function (_exports, _draggableObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _draggableObject.default.extend({
    attributeBindings: ['title'],
    classNames: ['tag-token'],
    classNameBindings: ['internal:tag-token--internal'],
    internal: Ember.computed.readOnly('content.isInternal'),
    primary: Ember.computed('idx', 'internal', function () {
      return !this.internal && this.idx === 0;
    }),
    title: Ember.computed('internal', function () {
      return this.internal ? 'Internal tag' : '';
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-token-input/trigger", ["exports", "ember-power-select/components/power-select-multiple/trigger"], function (_exports, _trigger) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _class;

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  let Trigger = (_class = class Trigger extends _trigger.default {
    handleOptionMouseDown(event) {
      if (!event.target.closest('[data-selected-index]')) {
        let optionMouseDown = this.get('extra.optionMouseDown');

        if (optionMouseDown) {
          return optionMouseDown(event);
        }
      }

      return this.chooseOption(event);
    }

    handleOptionTouchStart(event) {
      let optionTouchStart = this.get('extra.optionTouchStart');

      if (optionTouchStart) {
        return optionTouchStart(event);
      }
    }

    reorderItems() {
      // ember-drag-drop's sortable-objects has two-way bindings and will
      // update EPS' selected value directly. We have to create a copy
      // after sorting in order to force the onchange action to be triggered
      let selectedCopy = this.select.selected.slice();
      this.select.actions.select(selectedCopy);
    } // copied directly from EPS, the default behaviour of stopping propagation
    // of keydown events prevents our shortcuts from being triggered


    handleKeydown(e) {
      if (this.onKeydown && this.onKeydown(e) === false) {
        e.stopPropagation();
        return false;
      }

      if (e.keyCode === 8) {
        e.stopPropagation();

        if (Ember.isBlank(e.target.value)) {
          let lastSelection = this.select.selected[this.select.selected.length - 1];

          if (lastSelection) {
            this.select.actions.select(this.get('buildSelection')(lastSelection, this.select), e);

            if (typeof lastSelection === 'string') {
              this.select.actions.search(lastSelection);
            } else {
              let searchField = this.get('searchField');
              (true && !(searchField) && Ember.assert('`{{power-select-multiple}}` requires a `searchField` when the options are not strings to remove options using backspace', searchField));
              this.select.actions.search(Ember.get(lastSelection, searchField));
            }

            this.select.actions.open(e);
          }
        }
      } // Disable the propagation cancellation so that our shortcuts still work
      // } else if (e.keyCode >= 48 && e.keyCode <= 90 || e.keyCode === 32) { // Keys 0-9, a-z or SPACE
      //     e.stopPropagation();
      // }

    }

  }, (_applyDecoratedDescriptor(_class.prototype, "handleOptionMouseDown", [Ember._action], Object.getOwnPropertyDescriptor(_class.prototype, "handleOptionMouseDown"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleOptionTouchStart", [Ember._action], Object.getOwnPropertyDescriptor(_class.prototype, "handleOptionTouchStart"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "reorderItems", [Ember._action], Object.getOwnPropertyDescriptor(_class.prototype, "reorderItems"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleKeydown", [Ember._action], Object.getOwnPropertyDescriptor(_class.prototype, "handleKeydown"), _class.prototype)), _class);
  _exports.default = Trigger;
});
;define("ghost-admin/components/gh-tour-item", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  let instancesCounter = 0;
  let triangleClassPositions = {
    'top-left': {
      attachment: 'top left',
      targetAttachment: 'bottom center',
      offset: '0 28px'
    },
    top: {
      attachment: 'top center',
      targetAttachment: 'bottom center'
    },
    'top-right': {
      attachment: 'top right',
      targetAttachment: 'bottom center',
      offset: '0 -28px'
    },
    'right-top': {
      attachment: 'top right',
      targetAttachment: 'middle left',
      offset: '28px 0'
    },
    right: {
      attachment: 'middle right',
      targetAttachment: 'middle left'
    },
    'right-bottom': {
      attachment: 'bottom right',
      targetAttachment: 'middle left',
      offset: '-28px 0'
    },
    'bottom-right': {
      attachment: 'bottom right',
      targetAttachment: 'top center',
      offset: '0 -28px'
    },
    bottom: {
      attachment: 'bottom center',
      targetAttachment: 'top center'
    },
    'bottom-left': {
      attachment: 'bottom left',
      targetAttachment: 'top center',
      offset: '0 28px'
    },
    'left-bottom': {
      attachment: 'bottom left',
      targetAttachment: 'middle right',
      offset: '-28px 0'
    },
    left: {
      attachment: 'middle left',
      targetAttachment: 'middle right'
    },
    'left-top': {
      attachment: 'top left',
      targetAttachment: 'middle right',
      offset: '28px 0'
    }
  };
  const GhTourItemComponent = Ember.Component.extend({
    mediaQueries: Ember.inject.service(),
    tour: Ember.inject.service(),
    tagName: '',
    throbberId: null,
    target: null,
    throbberAttachment: 'middle center',
    popoverTriangleClass: 'top',
    isOpen: false,
    _elementId: null,
    _throbber: null,
    _throbberElementId: null,
    _throbberElementSelector: null,
    _popoverAttachment: null,
    _popoverTargetAttachment: null,
    _popoverOffset: null,
    isMobile: Ember.computed.reads('mediaQueries.isMobile'),
    isVisible: Ember.computed('isMobile', '_throbber', function () {
      let isMobile = this.isMobile;
      let hasThrobber = !Ember.isBlank(this._throbber);
      return !isMobile && hasThrobber;
    }),

    init() {
      this._super(...arguments); // this is a tagless component so we need to generate our own elementId


      this._elementId = instancesCounter += 1;
      this._throbberElementId = "throbber-".concat(this._elementId);
      this._throbberElementSelector = "#throbber-".concat(this._elementId);
      this._handleOptOut = Ember.run.bind(this, this._remove);
      this._handleViewed = Ember.run.bind(this, this._removeIfViewed);
      this.tour.on('optOut', this._handleOptOut);
      this.tour.on('viewed', this._handleViewed);
    },

    didReceiveAttrs() {
      let throbberId = this.throbberId;
      let throbber = this.tour.activeThrobber(throbberId);
      let triangleClass = this.popoverTriangleClass;
      let popoverPositions = triangleClassPositions[triangleClass];
      this._throbber = throbber;
      this._popoverAttachment = popoverPositions.attachment;
      this._popoverTargetAttachment = popoverPositions.targetAttachment;
      this._popoverOffset = popoverPositions.offset;
    },

    willDestroyElement() {
      this.tour.off('optOut', this._handleOptOut);
      this.tour.off('viewed', this._handleViewed);

      this._super(...arguments);
    },

    actions: {
      open() {
        this.set('isOpen', true);
      },

      close() {
        this._close();
      },

      markAsViewed() {
        let throbberId = this.throbberId;
        this.tour.markThrobberAsViewed(throbberId);
        this.set('_throbber', null);

        this._close();
      },

      optOut() {
        this.tour.optOut();
        this.set('_throbber', null);

        this._close();
      }

    },

    _removeIfViewed(id) {
      if (id === this.throbberId) {
        this._remove();
      }
    },

    _remove() {
      this.set('_throbber', null);
    },

    _close() {
      this.set('isOpen', false);
    }

  });
  var _default = GhTourItemComponent;
  _exports.default = _default;
});
;define("ghost-admin/components/gh-trim-focus-input", ["exports", "ghost-admin/components/gh-text-input"], function (_exports, _ghTextInput) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /**
   * This doesn't override the OneWayInput component because
   * we need finer control. It borrows
   * parts from both the OneWayInput component and Ember's default
   * input component
   */
  const TrimFocusInputComponent = _ghTextInput.default.extend({
    shouldFocus: true,

    focusOut(event) {
      this._trimInput(event.target.value, event);

      this._super(...arguments);
    },

    _trimInput(value, event) {
      if (value && typeof value.trim === 'function') {
        value = value.trim();
      }

      this.element.value = value;

      this._elementValueDidChange(event);

      let inputMethod = this.input;

      if (inputMethod) {
        inputMethod(event);
      }
    }

  });

  var _default = TrimFocusInputComponent;
  _exports.default = _default;
});
;define("ghost-admin/components/gh-unsplash-photo", ["exports", "jquery"], function (_exports, _jquery) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    height: 0,
    photo: null,
    tagName: '',
    width: 1200,
    zoomed: false,

    // closure actions
    select() {},

    zoom() {},

    style: Ember.computed('zoomed', function () {
      return Ember.String.htmlSafe(this.zoomed ? 'width: auto; margin: 0;' : '');
    }),
    // avoid "binding style attributes" warnings
    containerStyle: Ember.computed('photo.color', 'zoomed', function () {
      let styles = [];
      let ratio = this.get('photo.ratio');
      let zoomed = this.zoomed;
      styles.push("background-color: ".concat(this.get('photo.color')));

      if (zoomed) {
        styles.push("cursor: zoom-out");
      } else {
        styles.push("padding-bottom: ".concat(ratio * 100, "%"));
      }

      return Ember.String.htmlSafe(styles.join('; '));
    }),
    imageUrl: Ember.computed('photo.urls.regular', function () {
      let url = this.get('photo.urls.regular');
      url = url.replace('&w=1080', '&w=1200');
      return url;
    }),

    didReceiveAttrs() {
      this._super(...arguments);

      this.set('height', this.width * this.photo.ratio);

      if (this.zoomed && !this._zoomed) {
        this._setZoomedSize();
      }

      this._zoomed = this.zoomed;

      if (this.zoomed && !this._resizeHandler) {
        this._setupResizeHandler();
      } else if (!this.zoomed && this._resizeHandler) {
        this._teardownResizeHandler();
      }
    },

    didInsertElement() {
      this._super(...arguments);

      this._hasRendered = true;

      if (this.zoomed) {
        this._setZoomedSize();
      }
    },

    willDestroyElement() {
      this._super(...arguments);

      this._teardownResizeHandler();
    },

    actions: {
      select(event) {
        event.preventDefault();
        event.stopPropagation();
        this.select(this.photo);
      },

      zoom(event) {
        let $target = (0, _jquery.default)(event.target); // only zoom when it wasn't one of the child links clicked

        if (!$target.is('a') && $target.closest('a').hasClass('gh-unsplash-photo')) {
          event.preventDefault();
          this.zoom(this.photo);
        } // don't propagate otherwise we can trigger the closeZoom action on the overlay


        event.stopPropagation();
      }

    },

    _setZoomedSize() {
      if (!this._hasRendered) {
        return false;
      }

      let a = document.querySelector("[data-unsplash-zoomed-photo=\"".concat(this.photo.id, "\"]"));
      a.style.width = '100%';
      a.style.height = '100%';
      let offsets = a.getBoundingClientRect();
      let ratio = this.photo.ratio;
      let maxHeight = {
        width: offsets.height / ratio,
        height: offsets.height
      };
      let maxWidth = {
        width: offsets.width,
        height: offsets.width * ratio
      };
      let usableSize = null;

      if (ratio <= 1) {
        usableSize = maxWidth.height > offsets.height ? maxHeight : maxWidth;
      } else {
        usableSize = maxHeight.width > offsets.width ? maxWidth : maxHeight;
      }

      a.style.width = "".concat(usableSize.width, "px");
      a.style.height = "".concat(usableSize.height, "px");
    },

    _setupResizeHandler() {
      if (this._resizeHandler) {
        return;
      }

      this._resizeHandler = Ember.run.bind(this, this._handleResize);
      window.addEventListener('resize', this._resizeHandler);
    },

    _teardownResizeHandler() {
      window.removeEventListener('resize', this._resizeHandler);
      this._resizeHandler = null;
    },

    _handleResize() {
      this._throttleResize = Ember.run.throttle(this, this._setZoomedSize, 100);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-unsplash", ["exports", "ghost-admin/mixins/shortcuts"], function (_exports, _shortcuts) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const ONE_COLUMN_WIDTH = 540;
  const TWO_COLUMN_WIDTH = 940;

  var _default = Ember.Component.extend(_shortcuts.default, {
    resizeDetector: Ember.inject.service(),
    unsplash: Ember.inject.service(),
    ui: Ember.inject.service(),
    shortcuts: null,
    tagName: '',
    zoomedPhoto: null,
    searchTerm: null,

    // closure actions
    close() {},

    select() {},

    sideNavHidden: Ember.computed.or('ui.{isFullScreen,showMobileMenu}'),

    init() {
      this._super(...arguments);

      this.shortcuts = {
        escape: {
          action: 'handleEscape',
          scope: 'all'
        }
      };
    },

    didReceiveAttrs() {
      this._super(...arguments);

      if (this.searchTerm !== this._searchTerm) {
        this.unsplash.updateSearch(this.searchTerm);
      }

      this._searchTerm = this.searchTerm;
    },

    didInsertElement() {
      this._super(...arguments);

      this._resizeCallback = Ember.run.bind(this, this._handleResize);
      this.resizeDetector.setup('[data-unsplash]', this._resizeCallback);
      this.registerShortcuts();
    },

    willDestroyElement() {
      this.resizeDetector.teardown('[data-unsplash]', this._resizeCallback);
      this.removeShortcuts();
      this.send('resetKeyScope');

      this._super(...arguments);
    },

    actions: {
      loadNextPage() {
        this.unsplash.loadNextPage();
      },

      search(term) {
        this.unsplash.updateSearch(term);
        this.send('closeZoom');
      },

      zoomPhoto(photo) {
        this.set('zoomedPhoto', photo);
      },

      closeZoom() {
        this.set('zoomedPhoto', null);
      },

      select(photo) {
        this.unsplash.triggerDownload(photo);
        let selectParams = {
          src: photo.urls.regular.replace(/&w=1080/, '&w=2000'),
          alt: photo.description || '',
          caption: "Photo by <a href=\"".concat(photo.user.links.html, "?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\">").concat(photo.user.name, "</a> / <a href=\"https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\">Unsplash</a>")
        };
        this.select(selectParams);
        this.close();
      },

      close() {
        this.close();
      },

      retry() {
        this.unsplash.retryLastRequest();
      },

      setKeyScope() {
        key.setScope('unsplash');
      },

      resetKeyScope() {
        key.setScope('default');
      },

      handleEscape() {
        if (this.zoomedPhoto) {
          return this.send('closeZoom');
        }

        this.close();
      }

    },

    _handleResize(element) {
      let width = element.clientWidth;
      let columns = 3;

      if (width <= ONE_COLUMN_WIDTH) {
        columns = 1;
      } else if (width <= TWO_COLUMN_WIDTH) {
        columns = 2;
      }

      this.unsplash.changeColumnCount(columns);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-uploader", ["exports", "ghost-admin/utils/ghost-paths", "ember-concurrency"], function (_exports, _ghostPaths, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // TODO: this is designed to be a more re-usable/composable upload component, it
  // should be able to replace the duplicated upload logic in:
  // - gh-image-uploader
  // - gh-file-uploader
  //
  // In order to support the above components we'll need to introduce an
  // "allowMultiple" attribute so that single-image uploads don't allow multiple
  // simultaneous uploads
  const MAX_SIMULTANEOUS_UPLOADS = 2;
  /**
   * Result from a file upload
   * @typedef {Object} UploadResult
   * @property {string} fileName - file name, eg "my-image.png"
   * @property {string} url - url relative to Ghost root,eg "/content/images/2017/05/my-image.png"
   */

  const UploadTracker = Ember.Object.extend({
    file: null,
    total: 0,
    loaded: 0,

    init() {
      this._super(...arguments);

      this.total = this.file && this.file.size || 0;
    },

    update({
      loaded,
      total
    }) {
      this.total = total;
      this.loaded = loaded;
    }

  });

  var _default = Ember.Component.extend({
    ajax: Ember.inject.service(),
    tagName: '',
    // Public attributes
    accept: '',
    extensions: '',
    files: null,
    paramName: 'file',
    paramsHash: null,
    resourceName: 'images',
    uploadUrl: null,
    // Interal attributes
    errors: null,
    // [{fileName: 'x', message: 'y'}, ...]
    totalSize: 0,
    uploadedSize: 0,
    uploadPercentage: 0,
    uploadUrls: null,
    // [{filename: 'x', url: 'y'}],
    // Private
    _defaultUploadUrl: '/images/upload/',
    _files: null,
    _uploadTrackers: null,

    // Closure actions
    onCancel() {},

    onComplete() {},

    onFailed() {},

    onStart() {},

    onUploadStart() {},

    onUploadFailure() {},

    onUploadSuccess() {},

    // Optional closure actions
    // validate(file) {}
    init() {
      this._super(...arguments);

      this.set('errors', []);
      this.set('uploadUrls', []);
      this._uploadTrackers = [];

      if (!this.paramsHash) {
        this.set('paramsHash', {
          purpose: 'image'
        });
      }
    },

    didReceiveAttrs() {
      this._super(...arguments); // set up any defaults


      if (!this.uploadUrl) {
        this.set('uploadUrl', this._defaultUploadUrl);
      } // if we have new files, validate and start an upload


      let files = this.files;

      this._setFiles(files);
    },

    actions: {
      setFiles(files, resetInput) {
        this._setFiles(files);

        if (resetInput) {
          resetInput();
        }
      },

      cancel() {
        this._reset();

        this.onCancel();
      }

    },

    _setFiles(files) {
      this.set('files', files);

      if (files && files !== this._files) {
        if (this.get('_uploadFiles.isRunning')) {
          // eslint-disable-next-line
          console.error('Adding new files whilst an upload is in progress is not supported.');
        }

        this._files = files; // we cancel early if any file fails client-side validation

        if (this._validate()) {
          this._uploadFiles.perform(files);
        }
      }
    },

    _validate() {
      let files = this.files;

      let validate = this.validate || this._defaultValidator.bind(this);

      let ok = [];
      let errors = []; // NOTE: for...of loop results in a transpilation that errors in Edge,
      // once we drop IE11 support we should be able to use native for...of

      for (let i = 0; i < files.length; i += 1) {
        let file = files[i];
        let result = validate(file);

        if (result === true) {
          ok.push(file);
        } else {
          errors.push({
            fileName: file.name,
            message: result
          });
        }
      }

      if (Ember.isEmpty(errors)) {
        return true;
      }

      this.set('errors', errors);
      this.onFailed(errors);
      return false;
    },

    // we only check the file extension by default because IE doesn't always
    // expose the mime-type, we'll rely on the API for final validation
    _defaultValidator(file) {
      let extensions = this.extensions;
      let [, extension] = /(?:\.([^.]+))?$/.exec(file.name); // if extensions is falsy exit early and accept all files

      if (!extensions) {
        return true;
      }

      if (!Ember.isArray(extensions)) {
        extensions = extensions.split(',');
      }

      if (!extension || extensions.indexOf(extension.toLowerCase()) === -1) {
        let validExtensions = ".".concat(extensions.join(', .').toUpperCase());
        return "The file type you uploaded is not supported. Please use ".concat(validExtensions);
      }

      return true;
    },

    _uploadFiles: (0, _emberConcurrency.task)(function* (files) {
      let uploads = [];

      this._reset();

      this.onStart(files); // NOTE: for...of loop results in a transpilation that errors in Edge,
      // once we drop IE11 support we should be able to use native for...of

      for (let i = 0; i < files.length; i += 1) {
        let file = files[i];
        let tracker = UploadTracker.create({
          file
        });

        this._uploadTrackers.pushObject(tracker);

        uploads.push(this._uploadFile.perform(tracker, file, i));
      } // populates this.errors and this.uploadUrls


      yield (0, _emberConcurrency.all)(uploads);

      if (!Ember.isEmpty(this.errors)) {
        this.onFailed(this.errors);
      }

      this.onComplete(this.uploadUrls);
    }).drop(),
    // eslint-disable-next-line ghost/ember/order-in-components
    _uploadFile: (0, _emberConcurrency.task)(function* (tracker, file, index) {
      let ajax = this.ajax;

      let formData = this._getFormData(file);

      let url = "".concat((0, _ghostPaths.default)().apiRoot).concat(this.uploadUrl);

      try {
        this.onUploadStart(file);
        let response = yield ajax.post(url, {
          data: formData,
          processData: false,
          contentType: false,
          dataType: 'text',
          xhr: () => {
            let xhr = new window.XMLHttpRequest();
            xhr.upload.addEventListener('progress', event => {
              Ember.run(() => {
                tracker.update(event);

                this._updateProgress();
              });
            }, false);
            return xhr;
          }
        }); // force tracker progress to 100% in case we didn't get a final event,
        // eg. when using mirage

        tracker.update({
          loaded: file.size,
          total: file.size
        });

        this._updateProgress();

        let uploadResponse;
        let responseUrl;

        try {
          uploadResponse = JSON.parse(response);
        } catch (e) {
          if (!(e instanceof SyntaxError)) {
            throw e;
          }
        }

        if (uploadResponse) {
          let resource = Ember.get(uploadResponse, this.resourceName);

          if (resource && Ember.isArray(resource) && resource[0]) {
            responseUrl = Ember.get(resource[0], 'url');
          }
        }

        let result = {
          url: responseUrl,
          fileName: file.name
        };
        this.uploadUrls[index] = result;
        this.onUploadSuccess(result);
        return true;
      } catch (error) {
        // grab custom error message if present
        let message = error.payload.errors && error.payload.errors[0].message || '';
        let context = error.payload.errors && error.payload.errors[0].context || ''; // fall back to EmberData/ember-ajax default message for error type

        if (!message) {
          message = error.message;
        }

        let result = {
          message,
          context,
          fileName: file.name
        }; // TODO: check for or expose known error types?

        this.errors.pushObject(result);
        this.onUploadFailure(result);
      }
    }).maxConcurrency(MAX_SIMULTANEOUS_UPLOADS).enqueue(),

    // NOTE: this is necessary because the API doesn't accept direct file uploads
    _getFormData(file) {
      let formData = new FormData();
      formData.append(this.paramName, file, file.name);
      Object.keys(this.paramsHash || {}).forEach(key => {
        formData.append(key, this.paramsHash[key]);
      });
      return formData;
    },

    // TODO: this was needed because using CPs directly resulted in infrequent updates
    // - I think this was because updates were being wrapped up to save
    // computation but that hypothesis needs testing
    _updateProgress() {
      if (this.isDestroyed || this.isDestroying) {
        return;
      }

      let trackers = this._uploadTrackers;
      let totalSize = trackers.reduce((total, tracker) => total + tracker.get('total'), 0);
      let uploadedSize = trackers.reduce((total, tracker) => total + tracker.get('loaded'), 0);
      this.set('totalSize', totalSize);
      this.set('uploadedSize', uploadedSize);

      if (totalSize === 0 || uploadedSize === 0) {
        return;
      }

      let uploadPercentage = Math.round(uploadedSize / totalSize * 100);
      this.set('uploadPercentage', uploadPercentage);
    },

    _reset() {
      this.set('errors', []);
      this.set('totalSize', 0);
      this.set('uploadedSize', 0);
      this.set('uploadPercentage', 0);
      this.set('uploadUrls', []);
      this._uploadTrackers = [];
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-url-preview", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /*
  Example usage:
  {{gh-url-preview prefix="tag" slug=theSlugValue tagName="p" classNames="description"}}
  */
  var _default = Ember.Component.extend({
    config: Ember.inject.service(),
    classNames: 'ghost-url-preview',
    prefix: null,
    slug: null,
    url: Ember.computed('slug', function () {
      // Get the blog URL and strip the scheme
      let blogUrl = this.get('config.blogUrl'); // Remove `http[s]://`

      let noSchemeBlogUrl = blogUrl.substr(blogUrl.indexOf('://') + 3); // Get the prefix and slug values

      let prefix = this.prefix ? "".concat(this.prefix, "/") : '';
      let slug = this.slug ? "".concat(this.slug, "/") : ''; // Join parts of the URL together with slashes

      let theUrl = "".concat(noSchemeBlogUrl, "/").concat(prefix).concat(slug);
      return theUrl;
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-user-active", ["exports", "moment"], function (_exports, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    tagName: '',
    user: null,
    lastLoginUTC: Ember.computed('user.lastLoginUTC', function () {
      let lastLoginUTC = this.get('user.lastLoginUTC');
      return lastLoginUTC ? (0, _moment.default)(lastLoginUTC).fromNow() : '(Never)';
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-user-invited", ["exports", "moment", "ember-ajax/errors"], function (_exports, _moment, _errors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    notifications: Ember.inject.service(),
    store: Ember.inject.service(),
    tagName: '',
    invite: null,
    isSending: false,
    createdAt: Ember.computed('invite.createdAtUTC', function () {
      let createdAtUTC = this.get('invite.createdAtUTC');
      return createdAtUTC ? (0, _moment.default)(createdAtUTC).fromNow() : '';
    }),
    expiresAt: Ember.computed('invite.expires', function () {
      let expires = this.get('invite.expires');
      return expires ? (0, _moment.default)(expires).fromNow() : '';
    }),
    isExpired: Ember.computed('invite.expires', function () {
      let expires = this.get('invite.expires');
      let now = new Date().valueOf();
      return expires < now;
    }),
    actions: {
      resend() {
        let invite = this.invite;
        let notifications = this.notifications;
        this.set('isSending', true);
        invite.resend().then(result => {
          let notificationText = "Invitation resent! (".concat(invite.get('email'), ")"); // the server deletes the old record and creates a new one when
          // resending so we need to update the store accordingly

          invite.unloadRecord();
          this.store.pushPayload('invite', result); // If sending the invitation email fails, the API will still return a status of 201
          // but the invite's status in the response object will be 'invited-pending'.

          if (result.invites[0].status === 'invited-pending') {
            notifications.showAlert('Invitation email was not sent.  Please try resending.', {
              type: 'error',
              key: 'invite.resend.not-sent'
            });
          } else {
            notifications.showNotification(notificationText, {
              icon: 'send-email',
              key: 'invite.resend.success'
            });
          }
        }).catch(error => {
          notifications.showAPIError(error, {
            key: 'invite.resend'
          });
        }).finally(() => {
          this.set('isSending', false);
        });
      },

      revoke() {
        let invite = this.invite;
        let email = invite.get('email');
        let notifications = this.notifications; // reload the invite to get the most up-to-date information

        invite.reload().then(() => {
          invite.destroyRecord().then(() => {
            notifications.showNotification('Invitation revoked', {
              key: 'invite.revoke.success',
              description: "".concat(email)
            });
          }).catch(error => {
            notifications.showAPIError(error, {
              key: 'invite.revoke'
            });
          });
        }).catch(error => {
          if ((0, _errors.isNotFoundError)(error)) {
            // if the invite no longer exists, then show a warning and reload the route
            let action = this.reload;

            if (action) {
              action();
            }

            notifications.showAlert('This invite has been revoked or a user has already accepted the invitation.', {
              type: 'error',
              delayed: true,
              key: 'invite.revoke.already-accepted'
            });
          } else {
            throw error;
          }
        });
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-user-list-item", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    tagName: ''
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-validation-status-container", ["exports", "ghost-admin/mixins/validation-state"], function (_exports, _validationState) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /**
   * Handles the CSS necessary to show a specific property state. When passed a
   * DS.Errors object and a property name, if the DS.Errors object has errors for
   * the specified property, it will change the CSS to reflect the error state
   * @param  {DS.Errors} errors   The DS.Errors object
   * @param  {string} property    Name of the property
   */
  var _default = Ember.Component.extend(_validationState.default, {
    classNameBindings: ['errorClass'],
    errorClass: Ember.computed('property', 'hasError', 'hasValidated.[]', function () {
      let hasValidated = this.hasValidated;
      let property = this.property;

      if (hasValidated && hasValidated.includes(property)) {
        return this.hasError ? 'error' : 'success';
      } else {
        return '';
      }
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-view-title", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    ui: Ember.inject.service(),
    tagName: 'h2',
    classNames: ['view-title']
  });

  _exports.default = _default;
});
;define("ghost-admin/components/gh-whats-new", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    whatsNew: Ember.inject.service()
  });

  _exports.default = _default;
});
;define("ghost-admin/components/illiquid-model", ["exports", "liquid-fire/components/illiquid-model"], function (_exports, _illiquidModel) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _illiquidModel.default;
    }
  });
});
;define("ghost-admin/components/infinity-loader", ["exports", "ember-infinity/components/infinity-loader", "ghost-admin/templates/components/gh-infinity-loader"], function (_exports, _infinityLoader, _ghInfinityLoader) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _infinityLoader.default.extend({
    layout: _ghInfinityLoader.default
  });

  _exports.default = _default;
});
;define("ghost-admin/components/kg-action-bar", ["exports", "koenig-editor/components/kg-action-bar"], function (_exports, _kgActionBar) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _kgActionBar.default;
    }
  });
});
;define("ghost-admin/components/koenig-alt-input", ["exports", "koenig-editor/components/koenig-alt-input"], function (_exports, _koenigAltInput) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigAltInput.default;
    }
  });
});
;define("ghost-admin/components/koenig-basic-html-input", ["exports", "koenig-editor/components/koenig-basic-html-input"], function (_exports, _koenigBasicHtmlInput) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigBasicHtmlInput.default;
    }
  });
});
;define("ghost-admin/components/koenig-caption-input", ["exports", "koenig-editor/components/koenig-caption-input"], function (_exports, _koenigCaptionInput) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCaptionInput.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-bookmark", ["exports", "koenig-editor/components/koenig-card-bookmark"], function (_exports, _koenigCardBookmark) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardBookmark.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-code", ["exports", "koenig-editor/components/koenig-card-code"], function (_exports, _koenigCardCode) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardCode.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-email", ["exports", "koenig-editor/components/koenig-card-email"], function (_exports, _koenigCardEmail) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardEmail.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-embed", ["exports", "koenig-editor/components/koenig-card-embed"], function (_exports, _koenigCardEmbed) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardEmbed.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-gallery", ["exports", "koenig-editor/components/koenig-card-gallery"], function (_exports, _koenigCardGallery) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardGallery.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-hr", ["exports", "koenig-editor/components/koenig-card-hr"], function (_exports, _koenigCardHr) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardHr.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-html", ["exports", "koenig-editor/components/koenig-card-html"], function (_exports, _koenigCardHtml) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardHtml.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-image", ["exports", "koenig-editor/components/koenig-card-image"], function (_exports, _koenigCardImage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardImage.default;
    }
  });
});
;define("ghost-admin/components/koenig-card-markdown", ["exports", "koenig-editor/components/koenig-card-markdown"], function (_exports, _koenigCardMarkdown) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCardMarkdown.default;
    }
  });
});
;define("ghost-admin/components/koenig-card", ["exports", "koenig-editor/components/koenig-card"], function (_exports, _koenigCard) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigCard.default;
    }
  });
});
;define("ghost-admin/components/koenig-editor", ["exports", "koenig-editor/components/koenig-editor"], function (_exports, _koenigEditor) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigEditor.default;
    }
  });
});
;define("ghost-admin/components/koenig-link-input", ["exports", "koenig-editor/components/koenig-link-input"], function (_exports, _koenigLinkInput) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigLinkInput.default;
    }
  });
});
;define("ghost-admin/components/koenig-link-toolbar", ["exports", "koenig-editor/components/koenig-link-toolbar"], function (_exports, _koenigLinkToolbar) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigLinkToolbar.default;
    }
  });
});
;define("ghost-admin/components/koenig-menu-content", ["exports", "koenig-editor/components/koenig-menu-content"], function (_exports, _koenigMenuContent) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigMenuContent.default;
    }
  });
});
;define("ghost-admin/components/koenig-plus-menu", ["exports", "koenig-editor/components/koenig-plus-menu"], function (_exports, _koenigPlusMenu) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigPlusMenu.default;
    }
  });
});
;define("ghost-admin/components/koenig-slash-menu", ["exports", "koenig-editor/components/koenig-slash-menu"], function (_exports, _koenigSlashMenu) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigSlashMenu.default;
    }
  });
});
;define("ghost-admin/components/koenig-text-replacement-html-input", ["exports", "koenig-editor/components/koenig-text-replacement-html-input"], function (_exports, _koenigTextReplacementHtmlInput) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigTextReplacementHtmlInput.default;
    }
  });
});
;define("ghost-admin/components/koenig-toolbar", ["exports", "koenig-editor/components/koenig-toolbar"], function (_exports, _koenigToolbar) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigToolbar.default;
    }
  });
});
;define("ghost-admin/components/liquid-append", ["exports", "liquid-wormhole/components/liquid-append"], function (_exports, _liquidAppend) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidAppend.default;
    }
  });
});
;define("ghost-admin/components/liquid-bind", ["exports", "liquid-fire/components/liquid-bind"], function (_exports, _liquidBind) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidBind.default;
    }
  });
});
;define("ghost-admin/components/liquid-child", ["exports", "liquid-fire/components/liquid-child"], function (_exports, _liquidChild) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidChild.default;
    }
  });
});
;define("ghost-admin/components/liquid-container", ["exports", "liquid-fire/components/liquid-container"], function (_exports, _liquidContainer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidContainer.default;
    }
  });
});
;define("ghost-admin/components/liquid-destination", ["exports", "liquid-wormhole/components/liquid-destination"], function (_exports, _liquidDestination) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidDestination.default;
    }
  });
});
;define("ghost-admin/components/liquid-if", ["exports", "liquid-fire/components/liquid-if"], function (_exports, _liquidIf) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidIf.default;
    }
  });
});
;define("ghost-admin/components/liquid-measured", ["exports", "liquid-fire/components/liquid-measured"], function (_exports, _liquidMeasured) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidMeasured.default;
    }
  });
  Object.defineProperty(_exports, "measure", {
    enumerable: true,
    get: function () {
      return _liquidMeasured.measure;
    }
  });
});
;define("ghost-admin/components/liquid-outlet", ["exports", "liquid-fire/components/liquid-outlet"], function (_exports, _liquidOutlet) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidOutlet.default;
    }
  });
});
;define("ghost-admin/components/liquid-spacer", ["exports", "liquid-fire/components/liquid-spacer"], function (_exports, _liquidSpacer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidSpacer.default;
    }
  });
});
;define("ghost-admin/components/liquid-sync", ["exports", "liquid-fire/components/liquid-sync"], function (_exports, _liquidSync) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidSync.default;
    }
  });
});
;define("ghost-admin/components/liquid-tether", ["exports", "liquid-tether/components/liquid-tether"], function (_exports, _liquidTether) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidTether.default;
    }
  });
});
;define("ghost-admin/components/liquid-unless", ["exports", "liquid-fire/components/liquid-unless"], function (_exports, _liquidUnless) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidUnless.default;
    }
  });
});
;define("ghost-admin/components/liquid-versions", ["exports", "liquid-fire/components/liquid-versions"], function (_exports, _liquidVersions) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidVersions.default;
    }
  });
});
;define("ghost-admin/components/liquid-wormhole", ["exports", "liquid-wormhole/components/liquid-wormhole"], function (_exports, _liquidWormhole) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidWormhole.default;
    }
  });
});
;define("ghost-admin/components/modal-base", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({
    tagName: 'section',
    classNames: 'modal-content',
    _previousKeymasterScope: null,
    // Allowed Actions
    closeModal: () => {},

    didInsertElement() {
      this._super(...arguments);

      this._setupShortcuts();
    },

    willDestroyElement() {
      this._super(...arguments);

      this._removeShortcuts();
    },

    actions: {
      confirm() {
        throw new Error('You must override the "confirm" action in your modal component');
      },

      closeModal() {
        this.closeModal();
      }

    },

    _setupShortcuts() {
      Ember.run(function () {
        document.activeElement.blur();
      });
      this._previousKeymasterScope = key.getScope();
      key('enter', 'modal', () => {
        this.send('confirm');
      });
      key('escape', 'modal', () => {
        this.send('closeModal');
      });
      key.setScope('modal');
    },

    _removeShortcuts() {
      key.unbind('enter', 'modal');
      key.unbind('escape', 'modal');
      key.setScope(this._previousKeymasterScope);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-confirm-email-send", ["exports", "ghost-admin/components/modal-base", "ember-inflector", "ember-concurrency"], function (_exports, _modalBase, _emberInflector, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    session: Ember.inject.service(),
    errorMessage: null,
    // Allowed actions
    confirm: () => {},
    deliveredToMessage: Ember.computed('model.{paidOnly,memberCount}', function () {
      const isEditor = this.get('session.user.isEditor');

      if (this.get('model.paidOnly')) {
        return 'all paid members';
      }

      if (isEditor) {
        return 'all members';
      }

      return (0, _emberInflector.pluralize)(this.get('model.memberCount'), 'member');
    }),
    confirmAndCheckError: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.confirm();
        this.closeModal();
        return true;
      } catch (e) {
        // switch to "failed" state if email fails
        if (e && e.name === 'EmailFailedError') {
          this.set('errorMessage', e.message);
          return;
        } // close modal and continue with normal error handling if it was
        // a non-email-related error


        this.closeModal();

        if (e) {
          throw e;
        }
      }
    }),
    retryEmailTask: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.model.retryEmailSend();
        this.closeModal();
        return true;
      } catch (e) {
        // update "failed" state if email fails again
        if (e && e.name === 'EmailFailedError') {
          this.set('errorMessage', e.message);
          return;
        } // TODO: test a non-email failure - maybe this needs to go through
        // the notifications service


        if (e) {
          throw e;
        }
      }
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-custom-view-form", ["exports", "ghost-admin/components/modal-base", "ghost-admin/helpers/reset-query-params", "ember-concurrency"], function (_exports, _modalBase, _resetQueryParams, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    customViews: Ember.inject.service(),
    router: Ember.inject.service(),
    delayedModelColor: '',

    confirm() {},

    init() {
      this._super(...arguments);

      this.set('model', this.customViews.editView());

      this._setDelayedModelColor.perform();
    },

    actions: {
      changeColor(event) {
        let color = event.target.value;
        this.set('model.color', color);
        this.set('delayedModelColor', color);
      },

      confirm() {
        return this.saveTask.perform();
      }

    },
    saveTask: (0, _emberConcurrency.task)(function* () {
      let view = yield this.customViews.saveViewTask.perform(this.model);
      this.send('closeModal');
      return view;
    }),
    deleteTask: (0, _emberConcurrency.task)(function* () {
      let view = yield this.customViews.deleteViewTask.perform(this.model);
      let routeName = this.router.currentRouteName;
      this.send('closeModal');
      this.router.transitionTo(routeName, {
        queryParams: (0, _resetQueryParams.resetQueryParams)(routeName)
      });
      return view;
    }),
    // this is a hack to get around radio buttons not working with liquid-fire.
    // The DOM is duplicated whilst animating-in so browsers end up setting the
    // checked property on the temporary DOM. Delaying the value being set
    // allows us to ensure we're updating the checked property after animation
    _setDelayedModelColor: (0, _emberConcurrency.task)(function* () {
      yield (0, _emberConcurrency.timeout)(200);
      this.set('delayedModelColor', this.model.color);
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-delete-all", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    store: Ember.inject.service(),
    ajax: Ember.inject.service(),
    actions: {
      confirm() {
        this.deleteAll.perform();
      }

    },

    _deleteAll() {
      let deleteUrl = this.get('ghostPaths.url').api('db');
      return this.ajax.del(deleteUrl);
    },

    _unloadData() {
      this.store.unloadAll('post');
      this.store.unloadAll('tag');
    },

    _showSuccess() {
      this.notifications.showAlert('All content deleted from database.', {
        type: 'success',
        key: 'all-content.delete.success'
      });
    },

    _showFailure(error) {
      this.notifications.showAPIError(error, {
        key: 'all-content.delete'
      });
    },

    deleteAll: (0, _emberConcurrency.task)(function* () {
      try {
        yield this._deleteAll();

        this._unloadData();

        this._showSuccess();
      } catch (error) {
        this._showFailure(error);
      } finally {
        this.send('closeModal');
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-delete-integration", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    router: Ember.inject.service(),
    notifications: Ember.inject.service(),
    integration: Ember.computed.alias('model'),
    actions: {
      confirm() {
        this.deleteIntegration.perform();
      }

    },
    deleteIntegration: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.confirm();
        this.router.transitionTo('settings.integrations');
      } catch (error) {
        this.notifications.showAPIError(error, {
          key: 'integration.delete.failed'
        });
      } finally {
        this.send('closeModal');
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-delete-member", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    // Allowed actions
    confirm: () => {},
    member: Ember.computed.alias('model'),
    actions: {
      confirm() {
        this.deleteMember.perform();
      }

    },
    deleteMember: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.confirm();
      } finally {
        this.send('closeModal');
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-delete-post", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    notifications: Ember.inject.service(),
    post: Ember.computed.alias('model.post'),
    onSuccess: Ember.computed.alias('model.onSuccess'),
    actions: {
      confirm() {
        this.deletePost.perform();
      }

    },

    _deletePost() {
      let post = this.post; // definitely want to clear the data store and post of any unsaved,
      // client-generated tags

      post.updateTags();
      return post.destroyRecord();
    },

    _success() {
      // clear any previous error messages
      this.notifications.closeAlerts('post.delete'); // trigger the success action

      if (this.onSuccess) {
        this.onSuccess();
      }
    },

    _failure(error) {
      this.notifications.showAPIError(error, {
        key: 'post.delete.failed'
      });
    },

    deletePost: (0, _emberConcurrency.task)(function* () {
      try {
        yield this._deletePost();

        this._success();
      } catch (e) {
        this._failure(e);
      } finally {
        this.send('closeModal');
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-delete-tag", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    // Allowed actions
    confirm: () => {},
    tag: Ember.computed.alias('model'),
    postInflection: Ember.computed('tag.count.posts', function () {
      return this.get('tag.count.posts') > 1 ? 'posts' : 'post';
    }),
    actions: {
      confirm() {
        this.deleteTag.perform();
      }

    },
    deleteTag: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.confirm();
      } finally {
        this.send('closeModal');
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-delete-theme", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    // Allowed actions
    confirm: () => {},
    theme: Ember.computed.alias('model.theme'),
    download: Ember.computed.alias('model.download'),
    actions: {
      confirm() {
        this.deleteTheme.perform();
      }

    },
    deleteTheme: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.confirm();
      } finally {
        this.send('closeModal');
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-delete-user", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    // Allowed actions
    confirm: () => {},
    user: Ember.computed.alias('model'),
    actions: {
      confirm() {
        this.deleteUser.perform();
      }

    },
    deleteUser: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.confirm();
      } finally {
        this.send('closeModal');
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-delete-webhook", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    notifications: Ember.inject.service(),
    webhook: Ember.computed.alias('model'),
    actions: {
      confirm() {
        this.deleteWebhook.perform();
      }

    },
    deleteWebhook: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.confirm();
      } catch (error) {
        this.notifications.showAPIError(error, {
          key: 'webhook.delete.failed'
        });
      } finally {
        this.send('closeModal');
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-impersonate-member", ["exports", "ghost-admin/components/modal-base", "ghost-admin/utils/copy-text-to-clipboard", "ember-concurrency"], function (_exports, _modalBase, _copyTextToClipboard, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    config: Ember.inject.service(),
    store: Ember.inject.service(),
    classNames: 'modal-impersonate-member',
    signinUrl: null,
    member: Ember.computed.alias('model'),

    didInsertElement() {
      this._super(...arguments);

      this._signinUrlUpdateTask.perform();
    },

    copySigninUrl: (0, _emberConcurrency.task)(function* () {
      (0, _copyTextToClipboard.default)(this.get('signinUrl'));
      yield (0, _emberConcurrency.timeout)(1000);
      return true;
    }),
    _signinUrlUpdateTask: (0, _emberConcurrency.task)(function* () {
      const memberSigninURL = yield this.member.fetchSigninUrl.perform();
      this.set('signinUrl', memberSigninURL.url);
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-import-members", ["exports", "ghost-admin/components/modal-base", "ghost-admin/utils/ghost-paths"], function (_exports, _modalBase, _ghostPaths) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    labelText: 'Select or drag-and-drop a CSV File',
    response: null,
    closeDisabled: false,
    // Allowed actions
    confirm: () => {},
    uploadUrl: Ember.computed(function () {
      return "".concat((0, _ghostPaths.default)().apiRoot, "/members/csv/");
    }),
    actions: {
      uploadStarted() {
        this.set('closeDisabled', true);
      },

      uploadFinished() {
        this.set('closeDisabled', false);
      },

      uploadSuccess(response) {
        this.set('response', response.meta.stats); // invoke the passed in confirm action

        this.confirm();
      },

      confirm() {// noop - we don't want the enter key doing anything
      },

      closeModal() {
        if (!this.closeDisabled) {
          this._super(...arguments);
        }
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-invite-new-user", ["exports", "ghost-admin/components/modal-base", "ghost-admin/mixins/validation-engine", "ember-concurrency"], function (_exports, _modalBase, _validationEngine, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const {
    Promise
  } = Ember.RSVP;

  var _default = _modalBase.default.extend(_validationEngine.default, {
    notifications: Ember.inject.service(),
    store: Ember.inject.service(),
    classNames: 'modal-content invite-new-user',
    role: null,
    roles: null,
    authorRole: null,
    validationType: 'inviteUser',

    init() {
      this._super(...arguments);
    },

    didInsertElement() {
      this._super(...arguments);

      this.fetchRoles.perform();
    },

    willDestroyElement() {
      this._super(...arguments); // TODO: this should not be needed, ValidationEngine acts as a
      // singleton and so it's errors and hasValidated state stick around


      this.errors.clear();
      this.set('hasValidated', Ember.A());
    },

    actions: {
      setRole(role) {
        this.set('role', role);
        this.errors.remove('role');
      },

      confirm() {
        this.sendInvitation.perform();
      }

    },

    validate() {
      let email = this.email; // TODO: either the validator should check the email's existence or
      // the API should return an appropriate error when attempting to save

      return new Promise((resolve, reject) => this._super().then(() => Ember.RSVP.hash({
        users: this.store.findAll('user', {
          reload: true
        }),
        invites: this.store.findAll('invite', {
          reload: true
        })
      }).then(data => {
        let existingUser = data.users.findBy('email', email);
        let existingInvite = data.invites.findBy('email', email);

        if (existingUser || existingInvite) {
          this.errors.clear('email');

          if (existingUser) {
            this.errors.add('email', 'A user with that email address already exists.');
          } else {
            this.errors.add('email', 'A user with that email address was already invited.');
          } // TODO: this shouldn't be needed, ValidationEngine doesn't mark
          // properties as validated when validating an entire object


          this.hasValidated.addObject('email');
          reject();
        } else {
          resolve();
        }
      }), () => {
        // TODO: this shouldn't be needed, ValidationEngine doesn't mark
        // properties as validated when validating an entire object
        this.hasValidated.addObject('email');
        reject();
      }));
    },

    fetchRoles: (0, _emberConcurrency.task)(function* () {
      let roles = yield this.store.query('role', {
        permissions: 'assign'
      });
      let authorRole = roles.findBy('name', 'Author');
      this.set('roles', roles);
      this.set('authorRole', authorRole);

      if (!this.role) {
        this.set('role', authorRole);
      }
    }),
    sendInvitation: (0, _emberConcurrency.task)(function* () {
      let email = this.email;
      let role = this.role;
      let notifications = this.notifications;
      let invite;

      try {
        yield this.validate();
        invite = this.store.createRecord('invite', {
          email,
          role
        });
        yield invite.save(); // If sending the invitation email fails, the API will still return a status of 201
        // but the invite's status in the response object will be 'invited-pending'.

        if (invite.get('status') === 'pending') {
          notifications.showAlert('Invitation email was not sent', {
            type: 'error',
            key: 'invite.send.failed',
            description: 'Please try resending.'
          });
        } else {
          notifications.showNotification('Invitation sent', {
            icon: 'send-email',
            key: 'invite.send.success',
            description: "".concat(email)
          });
        }

        this.send('closeModal');
      } catch (error) {
        // validation will reject and cause this to be called with no error
        if (error) {
          invite.deleteRecord();
          notifications.showAPIError(error, {
            key: 'invite.send'
          });
          this.send('closeModal');
        }
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-leave-editor", ["exports", "ghost-admin/components/modal-base"], function (_exports, _modalBase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    actions: {
      confirm() {
        this.confirm();
        this.send('closeModal');
      }

    },
    // Allowed actions
    confirm: () => Ember.RSVP.resolve()
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-leave-settings", ["exports", "ghost-admin/components/modal-base"], function (_exports, _modalBase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    actions: {
      confirm() {
        this.confirm().finally(() => {
          if (!this.isDestroyed && !this.isDestroying) {
            this.send('closeModal');
          }
        });
      }

    },
    // Allowed actions
    confirm: () => Ember.RSVP.resolve()
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-markdown-help", ["exports", "ghost-admin/components/modal-base"], function (_exports, _modalBase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({});

  _exports.default = _default;
});
;define("ghost-admin/components/modal-members-label-form", ["exports", "ghost-admin/components/modal-base", "ghost-admin/helpers/reset-query-params", "ember-concurrency"], function (_exports, _modalBase, _resetQueryParams, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    router: Ember.inject.service(),
    notifications: Ember.inject.service(),
    model: null,
    showDeleteLabelModal: false,

    confirm() {},

    label: Ember.computed.and('model', 'model.label'),

    init() {
      this._super(...arguments);
    },

    willDestroyElement() {
      this._super(...arguments);

      this.label.errors.clear();
      this.label.rollbackAttributes();
    },

    actions: {
      toggleDeleteLabelModal() {
        this.label.rollbackAttributes();
        this.set('showDeleteLabelModal', true);
      },

      validate(property) {
        return this.label.validate({
          property
        });
      }

    },
    saveTask: (0, _emberConcurrency.task)(function* () {
      let label = this.model && this.model.label;
      let availableLabels = this.model && this.model.labels || [];

      if (!label) {
        return false;
      }

      try {
        yield label.validate();
        let duplicateLabel = availableLabels.find(existingLabel => {
          return existingLabel.name.trim().toLowerCase() === label.name.trim().toLowerCase() && existingLabel.slug !== label.slug;
        });

        if (duplicateLabel) {
          label.errors.add('name', 'A label with the same name already exists');
          label.hasValidated.pushObject('name'); // label.invalidate();

          return false;
        }

        let savedLabel = yield label.save();
        this.notifications.showNotification('Label saved'.htmlSafe());
        this.send('closeModal');
        return savedLabel;
      } catch (error) {
        if (error) {
          this.notifications.showAPIError(error, {
            key: 'label.save'
          });
        }
      }
    }),
    deleteLabel: (0, _emberConcurrency.task)(function* () {
      let label = this.model && this.model.label;

      if (!label) {
        return false;
      }

      try {
        yield label.destroyRecord();
        let routeName = this.router.currentRouteName;
        this.notifications.showNotification('Label deleted'.htmlSafe());
        this.send('closeModal');
        this.router.transitionTo(routeName, {
          queryParams: (0, _resetQueryParams.resetQueryParams)(routeName)
        });
      } catch (error) {
        if (error) {
          return this.notifications.showAPIError(error, {
            key: 'label.delete'
          });
        }
      }
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-new-integration", ["exports", "ghost-admin/components/modal-base", "ember-ajax/errors", "ember-concurrency"], function (_exports, _modalBase, _errors, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    router: Ember.inject.service(),

    confirm() {},

    integration: Ember.computed.alias('model'),
    actions: {
      updateName(name) {
        this.integration.set('name', name);
        this.integration.set('hasValidated', Ember.A());
        this.integration.errors.clear();
      },

      confirm() {
        return this.createIntegration.perform();
      }

    },
    createIntegration: (0, _emberConcurrency.task)(function* () {
      try {
        let integration = yield this.confirm();
        this.router.transitionTo('settings.integration', integration);
      } catch (error) {
        // TODO: server-side validation errors should be serialized
        // properly so that errors are added to model.errors automatically
        if (error && (0, _errors.isInvalidError)(error)) {
          let [firstError] = error.payload.errors;
          let {
            message
          } = firstError;

          if (message && message.match(/name/i)) {
            this.get('integration.errors').add('name', message);
            this.get('integration.hasValidated').pushObject('name');
            return;
          }
        } // bubble up to the global error handler


        if (error) {
          throw error;
        }
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-post-email-preview", ["exports", "ghost-admin/components/modal-base"], function (_exports, _modalBase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const INJECTED_CSS = "\nhtml::-webkit-scrollbar {\n    display: none;\n    width: 0;\n    background: transparent\n}\nhtml {\n    scrollbar-width: none;\n}\n";

  var _default = _modalBase.default.extend({
    ghostPaths: Ember.inject.service(),
    ajax: Ember.inject.service(),
    type: 'desktop',
    html: '',
    subject: '',
    post: Ember.computed.alias('model'),
    actions: {
      changeType(type) {
        this.set('type', type);
      }

    },
    renderEmailPreview: Ember._action(async function renderEmailPreview() {
      await this._fetchEmailData();
      let iframe = this.element.querySelector('iframe');

      if (iframe) {
        iframe.contentWindow.document.open();
        iframe.contentWindow.document.write(this.html);
        iframe.contentWindow.document.close();
      }
    }),

    async _fetchEmailData() {
      let {
        html,
        subject
      } = this;

      if (html && subject) {
        return {
          html,
          subject
        };
      }

      if (this.post.email) {
        // use sent email
        html = this.post.email.html;
        subject = this.post.email.subject;
      } else {
        // fetch email preview
        let url = this.get('ghostPaths.url').api('/email_preview/posts', this.post.id);
        let response = await this.ajax.request(url);
        let [emailPreview] = response.email_previews;
        html = emailPreview.html;
        subject = emailPreview.subject;
      } // inject extra CSS into the html for disabling links and scrollbars etc


      let domParser = new DOMParser();
      let htmlDoc = domParser.parseFromString(html, 'text/html');
      let stylesheet = htmlDoc.querySelector('style');
      let originalCss = stylesheet.innerHTML;
      stylesheet.innerHTML = "".concat(originalCss, "\n\n").concat(INJECTED_CSS);
      html = htmlDoc.documentElement.innerHTML;
      this.setProperties({
        html,
        subject
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-re-authenticate", ["exports", "jquery", "ghost-admin/components/modal-base", "ghost-admin/mixins/validation-engine", "ghost-admin/services/ajax", "ember-concurrency"], function (_exports, _jquery, _modalBase, _validationEngine, _ajax, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend(_validationEngine.default, {
    config: Ember.inject.service(),
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),
    validationType: 'signin',
    authenticationError: null,
    identification: Ember.computed.reads('session.user.email'),
    actions: {
      confirm() {
        this.reauthenticate.perform();
      }

    },

    _authenticate() {
      let session = this.session;
      let authStrategy = 'authenticator:cookie';
      let identification = this.identification;
      let password = this.password;
      session.set('skipAuthSuccessHandler', true);
      this.toggleProperty('submitting');
      return session.authenticate(authStrategy, identification, password).finally(() => {
        this.toggleProperty('submitting');
        session.set('skipAuthSuccessHandler', undefined);
      });
    },

    _passwordConfirm() {
      // Manually trigger events for input fields, ensuring legacy compatibility with
      // browsers and password managers that don't send proper events on autofill
      (0, _jquery.default)('#login').find('input').trigger('change');
      this.set('authenticationError', null);
      return this.validate({
        property: 'signin'
      }).then(() => this._authenticate().then(() => {
        this.notifications.closeAlerts();
        this.send('closeModal');
        return true;
      }).catch(error => {
        if (error && error.payload && error.payload.errors) {
          error.payload.errors.forEach(err => {
            if ((0, _ajax.isVersionMismatchError)(err)) {
              return this.notifications.showAPIError(error);
            }

            err.message = Ember.String.htmlSafe(err.context || err.message);
          });
          this.errors.add('password', 'Incorrect password');
          this.hasValidated.pushObject('password');
          this.set('authenticationError', error.payload.errors[0].message);
        }
      }), () => {
        this.hasValidated.pushObject('password');
        return false;
      });
    },

    reauthenticate: (0, _emberConcurrency.task)(function* () {
      return yield this._passwordConfirm();
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-search", ["exports", "ghost-admin/components/modal-base"], function (_exports, _modalBase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    actions: {
      confirm() {
        this.closeModal();
      }

    },

    click() {
      let input = this.element.querySelector('input');

      if (input) {
        input.focus();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-suspend-user", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    // Allowed actions
    confirm: () => {},
    user: Ember.computed.alias('model'),
    actions: {
      confirm() {
        return this.suspendUser.perform();
      }

    },
    suspendUser: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.confirm();
      } finally {
        this.send('closeModal');
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-theme-warnings", ["exports", "ghost-admin/components/modal-base"], function (_exports, _modalBase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    'data-test-theme-warnings-modal': true,
    title: Ember.computed.reads('model.title'),
    message: Ember.computed.reads('model.message'),
    warnings: Ember.computed.reads('model.warnings'),
    errors: Ember.computed.reads('model.errors'),
    fatalErrors: Ember.computed.reads('model.fatalErrors'),
    canActivate: Ember.computed.reads('model.canActivate')
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-transfer-owner", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    user: null,
    // Allowed actions
    confirm: () => {},
    actions: {
      confirm() {
        this.transferOwnership.perform();
      }

    },
    transferOwnership: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.confirm();
      } finally {
        this.send('closeModal');
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-unsuspend-user", ["exports", "ghost-admin/components/modal-base", "ember-concurrency"], function (_exports, _modalBase, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    // Allowed actions
    confirm: () => {},
    user: Ember.computed.alias('model'),
    actions: {
      confirm() {
        return this.unsuspendUser.perform();
      }

    },
    unsuspendUser: (0, _emberConcurrency.task)(function* () {
      try {
        yield this.confirm();
      } finally {
        this.send('closeModal');
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-upgrade-host-limit", ["exports", "ghost-admin/components/modal-base"], function (_exports, _modalBase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    upgradeMessage: Ember.computed('details', function () {
      const {
        limit,
        total
      } = this.model.details;
      return {
        limit,
        total
      };
    }),
    actions: {
      upgrade: function () {
        const upgradeLink = this.model.upgradeLink;
        window.open(upgradeLink);
        this.closeModal();
        return true;
      }
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-upload-image", ["exports", "ghost-admin/components/modal-base", "ghost-admin/utils/caja-sanitizers", "ember-concurrency"], function (_exports, _modalBase, _cajaSanitizers, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    config: Ember.inject.service(),
    notifications: Ember.inject.service(),
    model: null,
    url: '',
    newUrl: '',
    _isUploading: false,
    image: Ember.computed('model.{model,imageProperty}', {
      get() {
        let imageProperty = this.get('model.imageProperty');
        return this.get("model.model.".concat(imageProperty));
      },

      set(key, value) {
        let model = this.get('model.model');
        let imageProperty = this.get('model.imageProperty');
        return model.set(imageProperty, value);
      }

    }),

    didReceiveAttrs() {
      let image = this.image;
      this.set('url', image);
      this.set('newUrl', image);
    },

    actions: {
      fileUploaded(url) {
        this.set('url', url);
        this.set('newUrl', url);
      },

      removeImage() {
        this.set('url', '');
        this.set('newUrl', '');
      },

      confirm() {
        this.uploadImage.perform();
      },

      isUploading() {
        this.toggleProperty('_isUploading');
      }

    },

    // TODO: should validation be handled in the gh-image-uploader component?
    //  pro - consistency everywhere, simplification here
    //  con - difficult if the "save" is happening externally as it does here
    //
    //  maybe it should be handled at the model level?
    //      - automatically present everywhere
    //      - file uploads should always result in valid urls so it should only
    //        affect the url input form
    keyDown() {
      this._setErrorState(false);
    },

    _setErrorState(state) {
      if (state) {
        this.element.querySelector('.url').classList.add('error');
      } else {
        this.element.querySelector('.url').classList.remove('error');
      }
    },

    _validateUrl(url) {
      if (!Ember.isEmpty(url) && !_cajaSanitizers.default.url(url)) {
        this._setErrorState(true);

        return {
          message: 'Image URI is not valid'
        };
      }

      return true;
    },

    // end validation
    uploadImage: (0, _emberConcurrency.task)(function* () {
      let model = this.get('model.model');
      let newUrl = this.newUrl;

      let result = this._validateUrl(newUrl);

      let notifications = this.notifications;

      if (result === true) {
        this.set('image', newUrl);

        try {
          yield model.save();
        } catch (e) {
          notifications.showAPIError(e, {
            key: 'image.upload'
          });
        } finally {
          this.send('closeModal');
        }
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-upload-theme", ["exports", "ghost-admin/components/modal-base", "ghost-admin/utils/ghost-paths", "ghost-admin/services/ajax"], function (_exports, _modalBase, _ghostPaths, _ajax) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const DEFAULTS = {
    accept: ['application/zip', 'application/x-zip-compressed'],
    extensions: ['zip']
  };

  var _default = _modalBase.default.extend({
    eventBus: Ember.inject.service(),
    store: Ember.inject.service(),
    accept: null,
    extensions: null,
    themes: null,
    closeDisabled: false,
    file: null,
    theme: false,
    displayOverwriteWarning: false,
    hideUploader: Ember.computed.or('theme', 'displayOverwriteWarning'),
    currentThemeNames: Ember.computed.mapBy('model.themes', 'name'),
    uploadUrl: Ember.computed(function () {
      return "".concat((0, _ghostPaths.default)().apiRoot, "/themes/upload/");
    }),
    themeName: Ember.computed('theme.{name,package.name}', function () {
      let themePackage = this.get('theme.package');
      let name = this.get('theme.name');
      return themePackage ? "".concat(themePackage.name, " - ").concat(themePackage.version) : name;
    }),
    fileThemeName: Ember.computed('file', function () {
      let file = this.file;
      return file.name.replace(/\.zip$/, '');
    }),
    canActivateTheme: Ember.computed('theme', function () {
      let theme = this.theme;
      return theme && !theme.get('active');
    }),

    init() {
      this._super(...arguments);

      this.accept = this.accept || DEFAULTS.accept;
      this.extensions = this.extensions || DEFAULTS.extensions;
    },

    actions: {
      validateTheme(file) {
        let themeName = file.name.replace(/\.zip$/, '').replace(/[^\w@.]/gi, '-').toLowerCase();
        let currentThemeNames = this.currentThemeNames;
        this.set('file', file);
        let [, extension] = /(?:\.([^.]+))?$/.exec(file.name);
        let extensions = this.extensions;

        if (!extension || extensions.indexOf(extension.toLowerCase()) === -1) {
          return new _ajax.UnsupportedMediaTypeError();
        }

        if (file.name.match(/^casper\.zip$/i)) {
          return {
            payload: {
              errors: [{
                message: 'Sorry, the default Casper theme cannot be overwritten.<br>Please rename your zip file and try again.'
              }]
            }
          };
        }

        if (!this._allowOverwrite && currentThemeNames.includes(themeName)) {
          this.set('displayOverwriteWarning', true);
          return false;
        }

        return true;
      },

      confirmOverwrite() {
        this._allowOverwrite = true;
        this.set('displayOverwriteWarning', false); // we need to schedule afterRender so that the upload component is
        // displayed again in order to subscribe/respond to the event bus

        Ember.run.schedule('afterRender', this, function () {
          this.eventBus.publish('themeUploader:upload', this.file);
        });
      },

      uploadStarted() {
        this.set('closeDisabled', true);
      },

      uploadFinished() {
        this.set('closeDisabled', false);
      },

      uploadSuccess(response) {
        this.store.pushPayload(response);
        let theme = this.store.peekRecord('theme', response.themes[0].name);
        this.set('theme', theme);

        if (Ember.get(theme, 'warnings.length') > 0) {
          this.set('validationWarnings', Ember.get(theme, 'warnings'));
        } // Ghost differentiates between errors and fatal errors
        // You can't activate a theme with fatal errors, but with errors.


        if (Ember.get(theme, 'errors.length') > 0) {
          this.set('validationErrors', Ember.get(theme, 'errors'));
        }

        this.set('hasWarningsOrErrors', this.get('validationErrors.length') || this.get('validationWarnings.length')); // invoke the passed in confirm action

        this.get('model.uploadSuccess')(theme);
      },

      uploadFailed(error) {
        if ((0, _ajax.isThemeValidationError)(error)) {
          let errors = error.payload.errors[0].details.errors;
          let fatalErrors = [];
          let normalErrors = []; // to have a proper grouping of fatal errors and none fatal, we need to check
          // our errors for the fatal property

          if (errors && errors.length > 0) {
            for (let i = 0; i < errors.length; i += 1) {
              if (errors[i].fatal) {
                fatalErrors.push(errors[i]);
              } else {
                normalErrors.push(errors[i]);
              }
            }
          }

          this.set('fatalValidationErrors', fatalErrors);
          this.set('validationErrors', normalErrors);
        }
      },

      confirm() {// noop - we don't want the enter key doing anything
      },

      activate() {
        this.get('model.activate')(this.theme);
        this.closeModal();
      },

      closeModal() {
        if (!this.closeDisabled) {
          this._super(...arguments);
        }
      },

      reset() {
        this.set('theme', null);
        this.set('validationWarnings', []);
        this.set('validationErrors', []);
        this.set('fatalValidationErrors', []);
        this.set('hasWarningsOrErrors', false);
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-webhook-form", ["exports", "ghost-admin/components/modal-base", "ghost-admin/models/webhook", "ghost-admin/helpers/event-name", "ember-concurrency"], function (_exports, _modalBase, _webhook, _eventName, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    config: Ember.inject.service(),
    router: Ember.inject.service(),
    availableEvents: null,
    error: null,
    buttonText: 'Save',
    successText: 'Saved',

    confirm() {},

    webhook: Ember.computed.alias('model'),

    init() {
      this._super(...arguments);

      this.availableEvents = _eventName.AVAILABLE_EVENTS;
    },

    didReceiveAttrs() {
      if (this.webhook.isNew) {
        this.set('buttonText', 'Create');
        this.set('successText', 'Created');
      }
    },

    actions: {
      selectEvent(value) {
        this.webhook.set('event', value);
        this.webhook.validate({
          property: 'event'
        });
      },

      confirm() {
        this.saveWebhook.perform();
      }

    },
    saveWebhook: (0, _emberConcurrency.task)(function* () {
      this.set('error', null);

      try {
        let webhook = yield this.confirm();
        let integration = yield webhook.get('integration');
        this.router.transitionTo('settings.integration', integration);
      } catch (error) {
        // TODO: server-side validation errors should be serialized
        // properly so that errors are added to model.errors automatically
        if (error && error.payload && error.payload.errors) {
          let attrs = Array.from(_webhook.default.attributes.keys());
          error.payload.errors.forEach(error => {
            let {
              message,
              property = ''
            } = error;
            property = Ember.String.camelize(property);

            if (property && attrs.includes(property)) {
              this.webhook.errors.add(property, message);
              this.webhook.hasValidated.pushObject(property);
            } else {
              this.set('error', "Error: ".concat(message));
            }
          });
          return;
        } // bubble up to the global error handler


        if (error) {
          throw error;
        }
      }
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/components/modal-whats-new", ["exports", "ghost-admin/components/modal-base"], function (_exports, _modalBase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _modalBase.default.extend({
    whatsNew: Ember.inject.service(),

    confirm() {}

  });

  _exports.default = _default;
});
;define("ghost-admin/components/object-bin", ["exports", "ember-drag-drop/components/object-bin"], function (_exports, _objectBin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _objectBin.default;
  _exports.default = _default;
});
;define("ghost-admin/components/one-way-select", ["exports", "ember-one-way-select/components/one-way-select"], function (_exports, _oneWaySelect) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _oneWaySelect.default;
    }
  });
});
;define("ghost-admin/components/one-way-select/option", ["exports", "ember-one-way-select/components/one-way-select/option"], function (_exports, _option) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _option.default;
    }
  });
});
;define("ghost-admin/components/power-calendar-multiple", ["exports", "ember-power-calendar/components/power-calendar-multiple"], function (_exports, _powerCalendarMultiple) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _powerCalendarMultiple.default;
    }
  });
});
;define("ghost-admin/components/power-calendar-multiple/days", ["exports", "ember-power-calendar/components/power-calendar-multiple/days"], function (_exports, _days) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _days.default;
    }
  });
});
;define("ghost-admin/components/power-calendar-range", ["exports", "ember-power-calendar/components/power-calendar-range"], function (_exports, _powerCalendarRange) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _powerCalendarRange.default;
    }
  });
});
;define("ghost-admin/components/power-calendar-range/days", ["exports", "ember-power-calendar/components/power-calendar-range/days"], function (_exports, _days) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _days.default;
    }
  });
});
;define("ghost-admin/components/power-calendar", ["exports", "ember-power-calendar/components/power-calendar"], function (_exports, _powerCalendar) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _powerCalendar.default;
    }
  });
});
;define("ghost-admin/components/power-calendar/days", ["exports", "ember-power-calendar/components/power-calendar/days"], function (_exports, _days) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _days.default;
    }
  });
});
;define("ghost-admin/components/power-calendar/nav", ["exports", "ember-power-calendar/components/power-calendar/nav"], function (_exports, _nav) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _nav.default;
    }
  });
});
;define("ghost-admin/components/power-datepicker", ["exports", "ember-power-datepicker/components/power-datepicker"], function (_exports, _powerDatepicker) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _powerDatepicker.default;
    }
  });
});
;define("ghost-admin/components/power-select-multiple", ["exports", "ember-power-select/components/power-select-multiple"], function (_exports, _powerSelectMultiple) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _powerSelectMultiple.default;
    }
  });
});
;define("ghost-admin/components/power-select-multiple/trigger", ["exports", "ember-power-select/components/power-select-multiple/trigger"], function (_exports, _trigger) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _trigger.default;
    }
  });
});
;define("ghost-admin/components/power-select-vertical-collection-options", ["exports", "ember-power-select/components/power-select/options", "ghost-admin/templates/components/power-select-vertical-collection-options"], function (_exports, _options, _powerSelectVerticalCollectionOptions) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _options.default.extend({
    layout: _powerSelectVerticalCollectionOptions.default
  });

  _exports.default = _default;
});
;define("ghost-admin/components/power-select", ["exports", "ember-power-select/components/power-select"], function (_exports, _powerSelect) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _powerSelect.default;
    }
  });
});
;define("ghost-admin/components/power-select/before-options", ["exports", "ember-power-select/components/power-select/before-options"], function (_exports, _beforeOptions) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _beforeOptions.default;
    }
  });
});
;define("ghost-admin/components/power-select/no-matches-message", ["exports", "ember-power-select/components/power-select/no-matches-message"], function (_exports, _noMatchesMessage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _noMatchesMessage.default;
    }
  });
});
;define("ghost-admin/components/power-select/options", ["exports", "ember-power-select/components/power-select/options"], function (_exports, _options) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _options.default;
    }
  });
});
;define("ghost-admin/components/power-select/placeholder", ["exports", "ember-power-select/components/power-select/placeholder"], function (_exports, _placeholder) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _placeholder.default;
    }
  });
});
;define("ghost-admin/components/power-select/power-select-group", ["exports", "ember-power-select/components/power-select/power-select-group"], function (_exports, _powerSelectGroup) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _powerSelectGroup.default;
    }
  });
});
;define("ghost-admin/components/power-select/search-message", ["exports", "ember-power-select/components/power-select/search-message"], function (_exports, _searchMessage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _searchMessage.default;
    }
  });
});
;define("ghost-admin/components/power-select/trigger", ["exports", "ghost-admin/templates/components/power-select/trigger", "ember-power-select/components/power-select/trigger"], function (_exports, _trigger, _trigger2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _trigger2.default.extend({
    layout: _trigger.default
  });

  _exports.default = _default;
});
;define("ghost-admin/components/sortable-objects", ["exports", "ember-drag-drop/components/sortable-objects"], function (_exports, _sortableObjects) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _sortableObjects.default;
  _exports.default = _default;
});
;define("ghost-admin/components/sticky-element", ["exports", "ember-sticky-element/components/sticky-element"], function (_exports, _stickyElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _stickyElement.default;
    }
  });
});
;define("ghost-admin/components/sticky-element/trigger", ["exports", "ember-sticky-element/components/sticky-element/trigger"], function (_exports, _trigger) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _trigger.default;
    }
  });
});
;define("ghost-admin/components/vertical-collection", ["exports", "@html-next/vertical-collection/components/vertical-collection/component"], function (_exports, _component) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _component.default;
    }
  });
});
;define("ghost-admin/components/x-file-input", ["exports", "emberx-file-input/components/x-file-input"], function (_exports, _xFileInput) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _xFileInput.default;
    }
  });
});
;define("ghost-admin/controllers/about", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable ghost/ember/alias-model-in-controller */
  var _default = Ember.Controller.extend({
    config: Ember.inject.service(),
    upgradeStatus: Ember.inject.service(),
    copyrightYear: Ember.computed(function () {
      let date = new Date();
      return date.getFullYear();
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/application", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    customViews: Ember.inject.service(),
    dropdown: Ember.inject.service(),
    router: Ember.inject.service(),
    session: Ember.inject.service(),
    settings: Ember.inject.service(),
    ui: Ember.inject.service(),
    showNavMenu: Ember.computed('router.currentRouteName', 'session.{isAuthenticated,user.isFulfilled}', 'ui.isFullScreen', function () {
      let {
        router,
        session,
        ui
      } = this; // if we're in fullscreen mode don't show the nav menu

      if (ui.isFullScreen) {
        return false;
      } // we need to defer showing the navigation menu until the session.user
      // promise has fulfilled so that gh-user-can-admin has the correct data


      if (!session.isAuthenticated || !session.user.isFulfilled) {
        return false;
      }

      return (router.currentRouteName !== 'error404' || session.isAuthenticated) && !router.currentRouteName.match(/(signin|signup|setup|reset)/);
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/billing", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    guid: Ember.computed.alias('model')
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/editor", ["exports", "ghost-admin/models/post", "ghost-admin/utils/bound-one-way", "ghost-admin/config/environment", "ghost-admin/utils/isNumber", "ghost-admin/services/ajax", "ember-ajax/errors", "ember-concurrency"], function (_exports, _post, _boundOneWay, _environment, _isNumber, _ajax, _errors, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const DEFAULT_TITLE = '(Untitled)'; // time in ms to save after last content edit

  const AUTOSAVE_TIMEOUT = 3000; // time in ms to force a save if the user is continuously typing

  const TIMEDSAVE_TIMEOUT = 60000; // this array will hold properties we need to watch for this.hasDirtyAttributes

  let watchedProps = ['post.scratch', 'post.titleScratch', 'post.hasDirtyAttributes', 'post.tags.[]', 'post.isError']; // add all post model attrs to the watchedProps array, easier to do it this way
  // than remember to update every time we add a new attr

  _post.default.eachAttribute(function (name) {
    watchedProps.push("post.".concat(name));
  });

  const messageMap = {
    errors: {
      post: {
        published: {
          published: 'Update failed',
          draft: 'Saving failed',
          scheduled: 'Scheduling failed'
        },
        draft: {
          published: 'Publish failed',
          draft: 'Saving failed',
          scheduled: 'Scheduling failed'
        },
        scheduled: {
          scheduled: 'Update failed',
          draft: 'Unscheduling failed',
          published: 'Publish failed'
        }
      }
    },
    success: {
      post: {
        published: {
          published: 'Updated',
          draft: 'Saved',
          scheduled: 'Scheduled'
        },
        draft: {
          published: 'Published',
          draft: 'Saved',
          scheduled: 'Scheduled'
        },
        scheduled: {
          scheduled: 'Updated',
          draft: 'Unscheduled',
          published: 'Published'
        }
      }
    }
  };

  var _default = Ember.Controller.extend({
    application: Ember.inject.controller(),
    feature: Ember.inject.service(),
    notifications: Ember.inject.service(),
    router: Ember.inject.service(),
    slugGenerator: Ember.inject.service(),
    session: Ember.inject.service(),
    ui: Ember.inject.service(),

    /* public properties -----------------------------------------------------*/
    infoMessage: null,
    leaveEditorTransition: null,
    shouldFocusEditor: false,
    showDeletePostModal: false,
    showLeaveEditorModal: false,
    showReAuthenticateModal: false,
    showEmailPreviewModal: false,
    showUpgradeModal: false,
    hostLimitError: null,
    // koenig related properties
    wordcount: null,

    /* private properties ----------------------------------------------------*/
    // set by setPost and _postSaved, used in hasDirtyAttributes
    _previousTagNames: null,

    /* computed properties ---------------------------------------------------*/
    post: Ember.computed.alias('model'),
    // store the desired post status locally without updating the model,
    // the model will only be updated when a save occurs
    willPublish: (0, _boundOneWay.default)('post.isPublished'),
    willSchedule: (0, _boundOneWay.default)('post.isScheduled'),
    // updateSlug and save should always be enqueued so that we don't run into
    // problems with concurrency, for example when Cmd-S is pressed whilst the
    // cursor is in the slug field - that would previously trigger a simultaneous
    // slug update and save resulting in ember data errors and inconsistent save
    // results
    saveTasks: (0, _emberConcurrency.taskGroup)().enqueue(),
    _tagNames: Ember.computed.mapBy('post.tags', 'name'),
    hasDirtyAttributes: Ember.computed(...watchedProps, {
      get() {
        return this._hasDirtyAttributes();
      },

      set(key, value) {
        return value;
      }

    }),
    _autosaveRunning: Ember.computed('_autosave.isRunning', '_timedSave.isRunning', function () {
      let autosave = this.get('_autosave.isRunning');
      let timedsave = this.get('_timedSave.isRunning');
      return autosave || timedsave;
    }),
    _canAutosave: Ember.computed('post.isDraft', function () {
      return _environment.default.environment !== 'test' && this.get('post.isDraft');
    }),

    /* actions ---------------------------------------------------------------*/
    actions: {
      updateScratch(mobiledoc) {
        this.set('post.scratch', mobiledoc); // save 3 seconds after last edit

        this._autosave.perform(); // force save at 60 seconds


        this._timedSave.perform();
      },

      updateTitleScratch(title) {
        this.set('post.titleScratch', title);
      },

      // updates local willPublish/Schedule values, does not get applied to
      // the post's `status` value until a save is triggered
      setSaveType(newType) {
        if (newType === 'publish') {
          this.set('willPublish', true);
          this.set('willSchedule', false);
        } else if (newType === 'draft') {
          this.set('willPublish', false);
          this.set('willSchedule', false);
        } else if (newType === 'schedule') {
          this.set('willSchedule', true);
          this.set('willPublish', false);
        }
      },

      save(options) {
        return this.save.perform(options);
      },

      // used to prevent unexpected background saves. Triggered when opening
      // publish menu, starting a manual save, and when leaving the editor
      cancelAutosave() {
        this._autosave.cancelAll();

        this._timedSave.cancelAll();
      },

      toggleLeaveEditorModal(transition) {
        let leaveTransition = this.leaveEditorTransition; // "cancel" was clicked in the "are you sure?" modal so we just
        // reset the saved transition and remove the modal

        if (!transition && this.showLeaveEditorModal) {
          this.set('leaveEditorTransition', null);
          this.set('showLeaveEditorModal', false);
          return;
        }

        if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
          this.set('leaveEditorTransition', transition); // if a save is running, wait for it to finish then transition

          if (this.get('saveTasks.isRunning')) {
            return this.get('saveTasks.last').then(() => {
              transition.retry();
            });
          } // if an autosave is scheduled, cancel it, save then transition


          if (this._autosaveRunning) {
            this.send('cancelAutosave');
            this.autosave.cancelAll();
            return this.autosave.perform().then(() => {
              transition.retry();
            });
          } // we genuinely have unsaved data, show the modal


          if (this.post) {
            Object.assign(this._leaveModalReason, {
              status: this.post.status
            });
          }

          console.log('showing leave editor modal', this._leaveModalReason); // eslint-disable-line

          this.set('showLeaveEditorModal', true);
        }
      },

      // called by the "are you sure?" modal
      leaveEditor() {
        let transition = this.leaveEditorTransition;

        if (!transition) {
          this.notifications.showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', {
            type: 'error'
          });
          return;
        } // perform cleanup and reset manually, ensures the transition will succeed


        this.reset();
        return transition.retry();
      },

      toggleDeletePostModal() {
        if (!this.get('post.isNew')) {
          this.toggleProperty('showDeletePostModal');
        }
      },

      toggleEmailPreviewModal() {
        this.toggleProperty('showEmailPreviewModal');
      },

      toggleReAuthenticateModal() {
        this.toggleProperty('showReAuthenticateModal');
      },

      openUpgradeModal() {
        this.set('showUpgradeModal', true);
      },

      closeUpgradeModal() {
        this.set('showUpgradeModal', false);
      },

      setKoenigEditor(koenig) {
        this._koenig = koenig; // remove any empty cards when displaying a draft post
        // - empty cards may be left in draft posts due to autosave occuring
        //   whilst an empty card is present then the user closing the browser
        //   or refreshing the page

        if (this.post.isDraft) {
          this._koenig.cleanup();
        }
      },

      updateWordCount(counts) {
        this.set('wordCount', counts);
      }

    },

    /* Public tasks ----------------------------------------------------------*/
    // separate task for autosave so that it doesn't override a manual save
    autosave: (0, _emberConcurrency.task)(function* () {
      if (!this.get('save.isRunning')) {
        return yield this.save.perform({
          silent: true,
          backgroundSave: true
        });
      }
    }).drop(),
    // save tasks cancels autosave before running, although this cancels the
    // _xSave tasks  that will also cancel the autosave task
    save: (0, _emberConcurrency.task)(function* (options = {}) {
      let prevStatus = this.get('post.status');
      let isNew = this.get('post.isNew');
      let status;
      this.send('cancelAutosave');

      if (options.backgroundSave && !this.hasDirtyAttributes) {
        return;
      }

      if (options.backgroundSave) {
        // do not allow a post's status to be set to published by a background save
        status = 'draft';
      } else {
        if (this.get('post.pastScheduledTime')) {
          status = !this.willSchedule && !this.willPublish ? 'draft' : 'published';
        } else {
          if (this.willPublish && !this.get('post.isScheduled')) {
            status = 'published';
          } else if (this.willSchedule && !this.get('post.isPublished')) {
            status = 'scheduled';
          } else {
            status = 'draft';
          }
        } // let the adapter know it should use the `?send_email_when_published` QP when saving


        let isPublishing = status === 'published' && !this.post.isPublished;
        let isScheduling = status === 'scheduled' && !this.post.isScheduled;

        if (options.sendEmailWhenPublished && (isPublishing || isScheduling)) {
          options.adapterOptions = Object.assign({}, options.adapterOptions, {
            sendEmailWhenPublished: true
          });
        }
      } // ensure we remove any blank cards when performing a full save


      if (!options.backgroundSave) {
        if (this._koenig) {
          this._koenig.cleanup();

          this.set('hasDirtyAttributes', true);
        }
      } // Set the properties that are indirected
      // set mobiledoc equal to what's in the editor but create a copy so that
      // nested objects/arrays don't keep references which can mean that both
      // scratch and mobiledoc get updated simultaneously


      this.set('post.mobiledoc', JSON.parse(JSON.stringify(this.post.scratch || null)));
      this.set('post.status', status); // Set a default title

      if (!this.get('post.titleScratch').trim()) {
        this.set('post.titleScratch', DEFAULT_TITLE);
      }

      this.set('post.title', this.get('post.titleScratch'));
      this.set('post.customExcerpt', this.get('post.customExcerptScratch'));
      this.set('post.footerInjection', this.get('post.footerExcerptScratch'));
      this.set('post.headerInjection', this.get('post.headerExcerptScratch'));
      this.set('post.metaTitle', this.get('post.metaTitleScratch'));
      this.set('post.metaDescription', this.get('post.metaDescriptionScratch'));
      this.set('post.ogTitle', this.get('post.ogTitleScratch'));
      this.set('post.ogDescription', this.get('post.ogDescriptionScratch'));
      this.set('post.twitterTitle', this.get('post.twitterTitleScratch'));
      this.set('post.twitterDescription', this.get('post.twitterDescriptionScratch'));
      this.set('post.emailSubject', this.get('post.emailSubjectScratch'));

      if (!this.get('post.slug')) {
        this.saveTitle.cancelAll();
        yield this.generateSlug.perform();
      }

      try {
        let post = yield this._savePost.perform(options);
        post.set('statusScratch', null);

        if (!options.silent) {
          this._showSaveNotification(prevStatus, post.get('status'), isNew ? true : false);
        } // redirect to edit route if saving a new record


        if (isNew && post.get('id')) {
          if (!this.leaveEditorTransition) {
            this.replaceRoute('editor.edit', post);
          }

          return true;
        }

        return post;
      } catch (error) {
        // trigger upgrade modal if forbidden(403) error
        if ((0, _ajax.isHostLimitError)(error)) {
          this.post.rollbackAttributes();
          this.set('hostLimitError', error.payload.errors[0]);
          this.set('showUpgradeModal', true);
          return;
        } // re-throw if we have a general server error


        if (error && !(0, _errors.isInvalidError)(error)) {
          this.send('error', error);
          return;
        }

        this.set('post.status', prevStatus);

        if (!options.silent) {
          let errorOrMessages = error || this.get('post.errors.messages');

          this._showErrorAlert(prevStatus, this.get('post.status'), errorOrMessages); // simulate a validation error for upstream tasks


          throw undefined;
        }

        return this.post;
      }
    }).group('saveTasks'),

    /*
     * triggered by a user manually changing slug
     */
    updateSlug: (0, _emberConcurrency.task)(function* (_newSlug) {
      let slug = this.get('post.slug');
      let newSlug, serverSlug;
      newSlug = _newSlug || slug;
      newSlug = newSlug && newSlug.trim(); // Ignore unchanged slugs or candidate slugs that are empty

      if (!newSlug || slug === newSlug) {
        // reset the input to its previous state
        this.set('slugValue', slug);
        return;
      }

      serverSlug = yield this.slugGenerator.generateSlug('post', newSlug); // If after getting the sanitized and unique slug back from the API
      // we end up with a slug that matches the existing slug, abort the change

      if (serverSlug === slug) {
        return;
      } // Because the server transforms the candidate slug by stripping
      // certain characters and appending a number onto the end of slugs
      // to enforce uniqueness, there are cases where we can get back a
      // candidate slug that is a duplicate of the original except for
      // the trailing incrementor (e.g., this-is-a-slug and this-is-a-slug-2)
      // get the last token out of the slug candidate and see if it's a number


      let slugTokens = serverSlug.split('-');
      let check = Number(slugTokens.pop()); // if the candidate slug is the same as the existing slug except
      // for the incrementor then the existing slug should be used

      if ((0, _isNumber.default)(check) && check > 0) {
        if (slug === slugTokens.join('-') && serverSlug !== newSlug) {
          this.set('slugValue', slug);
          return;
        }
      }

      this.set('post.slug', serverSlug); // If this is a new post.  Don't save the post.  Defer the save
      // to the user pressing the save button

      if (this.get('post.isNew')) {
        return;
      }

      return yield this._savePost.perform();
    }).group('saveTasks'),
    // used in the PSM so that saves are sequential and don't trigger collision
    // detection errors
    savePost: (0, _emberConcurrency.task)(function* () {
      try {
        return yield this._savePost.perform();
      } catch (error) {
        if (error) {
          let status = this.get('post.status');

          this._showErrorAlert(status, status, error);
        }

        throw error;
      }
    }).group('saveTasks'),
    // convenience method for saving the post and performing post-save cleanup
    _savePost: (0, _emberConcurrency.task)(function* (options) {
      let {
        post
      } = this;
      yield post.save(options); // remove any unsaved tags
      // NOTE: `updateTags` changes `hasDirtyAttributes => true`.
      // For a saved post it would otherwise be false.

      post.updateTags();
      this._previousTagNames = this._tagNames; // update the scratch property if it's `null` and we get a blank mobiledoc
      // back from the API - prevents "unsaved changes" modal on new+blank posts

      if (!post.scratch) {
        post.set('scratch', JSON.parse(JSON.stringify(post.get('mobiledoc'))));
      } // if the two "scratch" properties (title and content) match the post,
      // then it's ok to set hasDirtyAttributes to false
      // TODO: why is this necessary?


      let titlesMatch = post.get('titleScratch') === post.get('title');
      let bodiesMatch = JSON.stringify(post.get('scratch')) === JSON.stringify(post.get('mobiledoc'));

      if (titlesMatch && bodiesMatch) {
        this.set('hasDirtyAttributes', false);
      }

      return post;
    }),
    saveTitle: (0, _emberConcurrency.task)(function* () {
      let post = this.post;
      let currentTitle = post.get('title');
      let newTitle = post.get('titleScratch').trim();

      if (currentTitle && newTitle && newTitle === currentTitle) {
        return;
      } // this is necessary to force a save when the title is blank


      this.set('hasDirtyAttributes', true); // generate a slug if a post is new and doesn't have a title yet or
      // if the title is still '(Untitled)'

      if (post.get('isNew') && !currentTitle || currentTitle === DEFAULT_TITLE) {
        yield this.generateSlug.perform();
      }

      if (this.get('post.isDraft')) {
        yield this.autosave.perform();
      }

      this.ui.updateDocumentTitle();
    }),
    generateSlug: (0, _emberConcurrency.task)(function* () {
      let title = this.get('post.titleScratch'); // Only set an "untitled" slug once per post

      if (title === DEFAULT_TITLE && this.get('post.slug')) {
        return;
      }

      try {
        let slug = yield this.slugGenerator.generateSlug('post', title);

        if (!Ember.isBlank(slug)) {
          this.set('post.slug', slug);
        }
      } catch (error) {
        // Nothing to do (would be nice to log this somewhere though),
        // but a rejected promise needs to be handled here so that a resolved
        // promise is returned.
        if ((0, _ajax.isVersionMismatchError)(error)) {
          this.notifications.showAPIError(error);
        }
      }
    }).enqueue(),
    // load supplementel data such as the members count in the background
    backgroundLoader: (0, _emberConcurrency.task)(function* () {
      try {
        if (this.feature.members) {
          let membersResponse = yield this.store.query('member', {
            limit: 1,
            filter: 'subscribed:true'
          });
          this.set('memberCount', Ember.get(membersResponse, 'meta.pagination.total'));
        }
      } catch (error) {
        this.set('memberCount', 0);
      }
    }).restartable(),

    /* Public methods --------------------------------------------------------*/
    // called by the new/edit routes to change the post model
    setPost(post) {
      // don't do anything else if we're setting the same post
      if (post === this.post) {
        // set autofocus as change signal to the persistent editor on new->edit
        this.set('shouldFocusEditor', post.get('isNew'));
        return;
      } // reset everything ready for a new post


      this.reset();
      this.set('post', post);
      this.backgroundLoader.perform(); // autofocus the editor if we have a new post

      this.set('shouldFocusEditor', post.get('isNew')); // need to set scratch values because they won't be present on first
      // edit of the post
      // TODO: can these be `boundOneWay` on the model as per the other attrs?

      post.set('titleScratch', post.get('title'));
      post.set('scratch', post.get('mobiledoc'));
      this._previousTagNames = this._tagNames; // triggered any time the admin tab is closed, we need to use a native
      // dialog here instead of our custom modal

      window.onbeforeunload = () => {
        if (this.hasDirtyAttributes) {
          return '==============================\n\n' + 'Hey there! It looks like you\'re in the middle of writing' + ' something and you haven\'t saved all of your content.' + '\n\nSave before you go!\n\n' + '==============================';
        }
      };
    },

    // called by editor route's willTransition hook, fires for editor.new->edit,
    // editor.edit->edit, or editor->any. Triggers `toggleLeaveEditorModal` action
    // which will either finish autosave then retry transition or abort and show
    // the "are you sure?" modal
    willTransition(transition) {
      let post = this.post; // exit early and allow transition if we have no post, occurs if reset
      // has already been called as in the `leaveEditor` action

      if (!post) {
        return;
      } // clean up blank cards when leaving the editor if we have a draft post
      // - blank cards could be left around due to autosave triggering whilst
      //   a blank card is present then the user attempting to leave
      // - will mark the post as dirty so it gets saved when transitioning


      if (this._koenig && post.isDraft) {
        this._koenig.cleanup();
      }

      let hasDirtyAttributes = this.hasDirtyAttributes;
      let state = post.getProperties('isDeleted', 'isSaving', 'hasDirtyAttributes', 'isNew');
      let fromNewToEdit = this.get('router.currentRouteName') === 'editor.new' && transition.targetName === 'editor.edit' && transition.intent.contexts && transition.intent.contexts[0] && transition.intent.contexts[0].id === post.get('id');
      let deletedWithoutChanges = state.isDeleted && (state.isSaving || !state.hasDirtyAttributes); // controller is dirty and we aren't in a new->edit or delete->index
      // transition so show our "are you sure you want to leave?" modal

      if (!fromNewToEdit && !deletedWithoutChanges && hasDirtyAttributes) {
        transition.abort();
        this.send('toggleLeaveEditorModal', transition);
        return;
      } // the transition is now certain to complete so cleanup and reset if
      // we're exiting the editor. new->edit keeps everything around and
      // edit->edit will call reset in the setPost method if necessary


      if (!fromNewToEdit && transition.targetName !== 'editor.edit') {
        this.reset();
      }
    },

    // called when the editor route is left or the post model is swapped
    reset() {
      let post = this.post; // make sure the save tasks aren't still running in the background
      // after leaving the edit route

      this.send('cancelAutosave');

      if (post) {
        // clear post of any unsaved, client-generated tags
        post.updateTags(); // remove new+unsaved records from the store and rollback any unsaved changes

        if (post.get('isNew')) {
          post.deleteRecord();
        } else {
          post.rollbackAttributes();
        }
      }

      this._previousTagNames = [];
      this.set('post', null);
      this.set('hasDirtyAttributes', false);
      this.set('shouldFocusEditor', false);
      this.set('leaveEditorTransition', null);
      this.set('showLeaveEditorModal', false);
      this.set('infoMessage', null);
      this.set('wordCount', null); // remove the onbeforeunload handler as it's only relevant whilst on
      // the editor route

      window.onbeforeunload = null;
    },

    /* Private tasks ---------------------------------------------------------*/
    // save 3 seconds after the last edit
    _autosave: (0, _emberConcurrency.task)(function* () {
      if (!this._canAutosave) {
        return;
      } // force an instant save on first body edit for new posts


      if (this.get('post.isNew')) {
        return this.autosave.perform();
      }

      yield (0, _emberConcurrency.timeout)(AUTOSAVE_TIMEOUT);
      this.autosave.perform();
    }).restartable(),
    // save at 60 seconds even if the user doesn't stop typing
    _timedSave: (0, _emberConcurrency.task)(function* () {
      if (!this._canAutosave) {
        return;
      }

      while (_environment.default.environment !== 'test' && true) {
        yield (0, _emberConcurrency.timeout)(TIMEDSAVE_TIMEOUT);
        this.autosave.perform();
      }
    }).drop(),

    /* Private methods -------------------------------------------------------*/
    _hasDirtyAttributes() {
      let post = this.post;

      if (!post) {
        return false;
      } // if the Adapter failed to save the post isError will be true
      // and we should consider the post still dirty.


      if (post.get('isError')) {
        this._leaveModalReason = {
          reason: 'isError',
          context: post.errors.messages
        };
        return true;
      } // post.tags is an array so hasDirtyAttributes doesn't pick up
      // changes unless the array ref is changed


      let currentTags = (this._tagNames || []).join(', ');
      let previousTags = (this._previousTagNames || []).join(', ');

      if (currentTags !== previousTags) {
        this._leaveModalReason = {
          reason: 'tags are different',
          context: {
            currentTags,
            previousTags
          }
        };
        return true;
      } // titleScratch isn't an attr so needs a manual dirty check


      if (this.titleScratch !== this.title) {
        this._leaveModalReason = {
          reason: 'title is different',
          context: {
            current: this.title,
            scratch: this.titleScratch
          }
        };
        return true;
      } // scratch isn't an attr so needs a manual dirty check


      let mobiledoc = post.get('mobiledoc');
      let scratch = post.get('scratch'); // additional guard in case we are trying to compare null with undefined

      if (scratch || mobiledoc) {
        let mobiledocJSON = JSON.stringify(mobiledoc);
        let scratchJSON = JSON.stringify(scratch);

        if (scratchJSON !== mobiledocJSON) {
          this._leaveModalReason = {
            reason: 'mobiledoc is different',
            context: {
              current: mobiledocJSON,
              scratch: scratchJSON
            }
          };
          return true;
        }
      } // new+unsaved posts always return `hasDirtyAttributes: true`
      // so we need a manual check to see if any


      if (post.get('isNew')) {
        let changedAttributes = Object.keys(post.changedAttributes());

        if (changedAttributes.length) {
          this._leaveModalReason = {
            reason: 'post.changedAttributes.length > 0',
            context: post.changedAttributes()
          };
        }

        return changedAttributes.length ? true : false;
      } // we've covered all the non-tracked cases we care about so fall
      // back on Ember Data's default dirty attribute checks


      let {
        hasDirtyAttributes
      } = post;

      if (hasDirtyAttributes) {
        this._leaveModalReason = {
          reason: 'post.hasDirtyAttributes === true',
          context: post.changedAttributes()
        };
      }

      return hasDirtyAttributes;
    },

    _showSaveNotification(prevStatus, status, delay) {
      let message = messageMap.success.post[prevStatus][status];
      let notifications = this.notifications;
      let actions, type, path;

      if (status === 'published' || status === 'scheduled') {
        type = this.get('post.page') ? 'Page' : 'Post';
        path = this.get('post.url');
        actions = "<a href=\"".concat(path, "\" target=\"_blank\">View ").concat(type, "</a>");
      } else {
        type = 'Preview';
        path = this.get('post.previewUrl');
        actions = "<a href=\"".concat(path, "\" target=\"_blank\">View ").concat(type, "</a>");
      }

      notifications.showNotification(message, {
        type: 'success',
        actions: actions.htmlSafe(),
        delayed: delay
      });
    },

    _showErrorAlert(prevStatus, status, error, delay) {
      let message = messageMap.errors.post[prevStatus][status];
      let notifications = this.notifications;
      let errorMessage;

      function isString(str) {
        return toString.call(str) === '[object String]';
      }

      if (error && isString(error)) {
        errorMessage = error;
      } else if (error && Ember.isArray(error)) {
        // This is here because validation errors are returned as an array
        // TODO: remove this once validations are fixed
        errorMessage = error[0];
      } else if (error && error.payload && error.payload.errors && error.payload.errors[0].message) {
        return this.notifications.showAPIError(error, {
          key: 'post.save'
        });
      } else {
        errorMessage = 'Unknown Error';
      }

      message += ": ".concat(errorMessage);
      message = Ember.String.htmlSafe(message);
      notifications.showAlert(message, {
        type: 'error',
        delayed: delay,
        key: 'post.save'
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/editor/edit-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable ghost/ember/alias-model-in-controller */
  var _default = Ember.Controller.extend({
    ui: Ember.inject.service()
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/error", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    stack: false,
    error: Ember.computed.readOnly('model'),
    code: Ember.computed('error.status', function () {
      return this.get('error.status') > 200 ? this.get('error.status') : 500;
    }),
    message: Ember.computed('error.statusText', function () {
      if (this.code === 404) {
        return 'Page not found';
      }

      return this.get('error.statusText') !== 'error' ? this.get('error.statusText') : 'Internal Server Error';
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/member", ["exports", "ghost-admin/utils/bound-one-way", "moment", "ember-concurrency"], function (_exports, _boundOneWay, _moment, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const SCRATCH_PROPS = ['name', 'email', 'note'];

  var _default = Ember.Controller.extend({
    members: Ember.inject.controller(),
    session: Ember.inject.service(),
    dropdown: Ember.inject.service(),
    notifications: Ember.inject.service(),
    router: Ember.inject.service(),
    store: Ember.inject.service(),
    showImpersonateMemberModal: false,
    member: Ember.computed.alias('model'),
    scratchMember: Ember.computed('member', function () {
      let scratchMember = Ember.Object.create({
        member: this.member
      });
      SCRATCH_PROPS.forEach(prop => Ember.defineProperty(scratchMember, prop, (0, _boundOneWay.default)("member.".concat(prop))));
      return scratchMember;
    }),
    subscribedAt: Ember.computed('member.createdAtUTC', function () {
      let memberSince = (0, _moment.default)(this.member.createdAtUTC).from((0, _moment.default)());
      let createdDate = (0, _moment.default)(this.member.createdAtUTC).format('MMM DD, YYYY');
      return "".concat(createdDate, " (").concat(memberSince, ")");
    }),
    actions: {
      setProperty(propKey, value) {
        this._saveMemberProperty(propKey, value);
      },

      toggleDeleteMemberModal() {
        this.toggleProperty('showDeleteMemberModal');
      },

      toggleImpersonateMemberModal() {
        this.toggleProperty('showImpersonateMemberModal');
      },

      save() {
        return this.save.perform();
      },

      deleteMember() {
        return this.member.destroyRecord().then(() => {
          return this.transitionToRoute('members');
        }, error => {
          return this.notifications.showAPIError(error, {
            key: 'member.delete'
          });
        });
      },

      toggleUnsavedChangesModal(transition) {
        let leaveTransition = this.leaveScreenTransition;

        if (!transition && this.showUnsavedChangesModal) {
          this.set('leaveScreenTransition', null);
          this.set('showUnsavedChangesModal', false);
          return;
        }

        if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
          this.set('leaveScreenTransition', transition); // if a save is running, wait for it to finish then transition

          if (this.save.isRunning) {
            return this.save.last.then(() => {
              transition.retry();
            });
          } // we genuinely have unsaved data, show the modal


          this.set('showUnsavedChangesModal', true);
        }
      },

      leaveScreen() {
        this.member.rollbackAttributes();
        return this.leaveScreenTransition.retry();
      }

    },
    saveMember: (0, _emberConcurrency.task)(function* () {
      let {
        member,
        scratchMember
      } = this; // if Cmd+S is pressed before the field loses focus make sure we're
      // saving the intended property values

      let scratchProps = scratchMember.getProperties(SCRATCH_PROPS);
      member.setProperties(scratchProps);

      try {
        yield member.save();
        member.updateLabels(); // replace 'member.new' route with 'member' route

        this.replaceRoute('member', member);
        return member;
      } catch (error) {
        if (error) {
          this.notifications.showAPIError(error, {
            key: 'member.save'
          });
        }
      }
    }).drop(),
    save: (0, _emberConcurrency.task)(function* () {
      yield this.saveMember.perform();
      yield (0, _emberConcurrency.timeout)(2500);

      if (this.get('saveMember.last.isSuccessful') && this.get('saveMember.last.value')) {
        // Reset last task to bring button back to idle state
        yield this.set('saveMember.last', null);
      }
    }).drop(),
    fetchMember: (0, _emberConcurrency.task)(function* (memberId) {
      this.set('isLoading', true);
      let member = yield this.store.findRecord('member', memberId, {
        reload: true
      });
      this.set('member', member);
      this.set('isLoading', false);
    }),

    _saveMemberProperty(propKey, newValue) {
      let currentValue = this.member.get(propKey);

      if (newValue) {
        newValue = newValue.trim();
      } // avoid modifying empty values and triggering inadvertant unsaved changes modals


      if (newValue !== false && !newValue && !currentValue) {
        return;
      }

      this.member.set(propKey, newValue);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/members", ["exports", "ghost-admin/utils/ghost-paths", "moment", "ember-inflector", "ember-concurrency"], function (_exports, _ghostPaths, _moment, _emberInflector, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable ghost/ember/alias-model-in-controller */
  var _default = Ember.Controller.extend({
    store: Ember.inject.service(),
    queryParams: ['label'],
    label: null,
    members: null,
    searchText: '',
    modalLabel: null,
    showLabelModal: false,
    _hasLoadedLabels: false,
    _availableLabels: null,

    init() {
      this._super(...arguments);

      this.set('members', this.store.peekAll('member'));
      this._availableLabels = this.store.peekAll('label');
    },

    listHeader: Ember.computed('selectedLabel', 'searchText', function () {
      let {
        searchText,
        selectedLabel,
        filteredMembers
      } = this;

      if (searchText) {
        return 'Search result';
      }

      if (this.fetchMembers.lastSuccessful) {
        let count = (0, _emberInflector.pluralize)(filteredMembers.length, 'member');

        if (selectedLabel && selectedLabel.slug) {
          if (filteredMembers.length > 1) {
            return "".concat(count, " match current filter");
          } else {
            return "".concat(count, " matches current filter");
          }
        }

        return count;
      }

      return 'Loading...';
    }),
    showingAll: Ember.computed('label', 'searchText', function () {
      let {
        searchText,
        label
      } = this;
      return !searchText && !label;
    }),
    availableLabels: Ember.computed('_availableLabels.@each.{isNew}', function () {
      let labels = this._availableLabels.filter(label => !label.get('isNew')).filter(label => label.get('id') !== null).sort((labelA, labelB) => labelA.name.localeCompare(labelB.name, undefined, {
        ignorePunctuation: true
      }));

      let options = labels.toArray();
      options.unshiftObject({
        name: 'All labels',
        slug: null
      });
      return options;
    }),
    selectedLabel: Ember.computed('label', 'availableLabels', function () {
      let label = this.get('label');
      let labels = this.get('availableLabels');
      return labels.findBy('slug', label);
    }),
    labelModalData: Ember.computed('modalLabel', 'availableLabels', function () {
      let label = this.get('modalLabel');
      let labels = this.get('availableLabels');
      return {
        label,
        labels
      };
    }),
    filteredMembers: Ember.computed('members.@each.{name,email}', 'searchText', 'label', function () {
      let {
        members,
        searchText,
        label
      } = this;
      searchText = searchText.toLowerCase();
      let filtered = members.filter(member => {
        if (!searchText) {
          return true;
        }

        let {
          name,
          email
        } = member;
        return name && name.toLowerCase().indexOf(searchText) >= 0 || email && email.toLowerCase().indexOf(searchText) >= 0;
      }).filter(member => {
        if (!label) {
          return true;
        }

        return !!member.labels.find(_label => {
          return _label.slug === label;
        });
      }).sort((a, b) => {
        return b.get('createdAtUTC').valueOf() - a.get('createdAtUTC').valueOf();
      });
      return filtered;
    }),
    actions: {
      exportData() {
        let exportUrl = (0, _ghostPaths.default)().url.api('members/csv');
        let downloadURL = "".concat(exportUrl, "?limit=all");
        let iframe = document.getElementById('iframeDownload');

        if (!iframe) {
          iframe = document.createElement('iframe');
          iframe.id = 'iframeDownload';
          iframe.style.display = 'none';
          document.body.append(iframe);
        }

        iframe.setAttribute('src', downloadURL);
      },

      changeLabel(label, e) {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }

        this.set('label', Ember.get(label, 'slug'));
      },

      addLabel(e) {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }

        const newLabel = this.store.createRecord('label');
        this.set('modalLabel', newLabel);
        this.toggleProperty('showLabelModal');
      },

      editLabel(label, e) {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }

        let labels = this.get('availableLabels');
        let modalLabel = labels.findBy('slug', label);
        this.set('modalLabel', modalLabel);
        this.toggleProperty('showLabelModal');
      },

      toggleLabelModal() {
        this.toggleProperty('showLabelModal');
      }

    },
    fetchMembers: (0, _emberConcurrency.task)(function* () {
      let newFetchDate = new Date();

      if (this._hasFetchedAll) {
        // fetch any records modified since last fetch
        yield this.store.query('member', {
          limit: 'all',
          filter: "updated_at:>='".concat(_moment.default.utc(this._lastFetchDate).format('YYYY-MM-DD HH:mm:ss'), "'"),
          order: 'created_at desc'
        });
      } else {
        // fetch all records
        yield this.store.query('member', {
          limit: 'all',
          order: 'created_at desc'
        });
        this._hasFetchedAll = true;
      }

      this._lastFetchDate = newFetchDate;
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/members/import", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable ghost/ember/alias-model-in-controller */
  var _default = Ember.Controller.extend({
    members: Ember.inject.controller(),
    router: Ember.inject.service(),
    actions: {
      fetchNewMembers() {
        this.members.fetchMembers.perform();
      },

      close() {
        this.router.transitionTo('members');
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/pages-loading", ["exports", "ghost-admin/controllers/posts-loading"], function (_exports, _postsLoading) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable ghost/ember/alias-model-in-controller */
  var _default = _postsLoading.default.extend({
    postsController: Ember.inject.controller('pages'),
    ui: Ember.inject.service()
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/pages", ["exports", "ghost-admin/controllers/posts"], function (_exports, _posts) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const TYPES = [{
    name: 'All pages',
    value: null
  }, {
    name: 'Draft pages',
    value: 'draft'
  }, {
    name: 'Published pages',
    value: 'published'
  }, {
    name: 'Scheduled pages',
    value: 'scheduled'
  }, {
    name: 'Featured pages',
    value: 'featured'
  }];
  /* eslint-disable ghost/ember/alias-model-in-controller */

  var _default = _posts.default.extend({
    init() {
      this._super(...arguments);

      this.availableTypes = TYPES;
    },

    actions: {
      openEditor(page) {
        this.transitionToRoute('editor.edit', 'page', page.get('id'));
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/posts-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable ghost/ember/alias-model-in-controller */
  var _default = Ember.Controller.extend({
    postsController: Ember.inject.controller('posts'),
    session: Ember.inject.service(),
    ui: Ember.inject.service(),
    availableTypes: Ember.computed.readOnly('postsController.availableTypes'),
    selectedType: Ember.computed.readOnly('postsController.selectedType'),
    availableTags: Ember.computed.readOnly('postsController.availableTags'),
    selectedTag: Ember.computed.readOnly('postsController.selectedTag'),
    availableAuthors: Ember.computed.readOnly('postsController.availableAuthors'),
    selectedAuthor: Ember.computed.readOnly('postsController.selectedAuthor'),
    availableOrders: Ember.computed.readOnly('postsController.availableOrders'),
    selectedOrder: Ember.computed.readOnly('postsController.selectedOrder')
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/posts", ["exports", "ghost-admin/helpers/reset-query-params"], function (_exports, _resetQueryParams) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const TYPES = [{
    name: 'All posts',
    value: null
  }, {
    name: 'Draft posts',
    value: 'draft'
  }, {
    name: 'Published posts',
    value: 'published'
  }, {
    name: 'Scheduled posts',
    value: 'scheduled'
  }, {
    name: 'Featured posts',
    value: 'featured'
  }];
  const ORDERS = [{
    name: 'Newest',
    value: null
  }, {
    name: 'Oldest',
    value: 'published_at asc'
  }, {
    name: 'Recently updated',
    value: 'updated_at desc'
  }];

  var _default = Ember.Controller.extend({
    store: Ember.inject.service(),
    // default values for these are set in `init` and defined in `helpers/reset-query-params`
    queryParams: ['type', 'author', 'tag', 'order'],
    _hasLoadedTags: false,
    _hasLoadedAuthors: false,
    availableTypes: null,
    availableOrders: null,

    init() {
      this._super(...arguments);

      this.availableTypes = TYPES;
      this.availableOrders = ORDERS;
      this.setProperties(_resetQueryParams.DEFAULT_QUERY_PARAMS.posts);
    },

    postsInfinityModel: Ember.computed.alias('model'),
    showingAll: Ember.computed('type', 'author', 'tag', function () {
      let {
        type,
        author,
        tag
      } = this.getProperties(['type', 'author', 'tag']);
      return !type && !author && !tag;
    }),
    selectedType: Ember.computed('type', function () {
      let types = this.get('availableTypes');
      return types.findBy('value', this.get('type')) || {
        value: '!unknown'
      };
    }),
    selectedOrder: Ember.computed('order', function () {
      let orders = this.get('availableOrders');
      return orders.findBy('value', this.get('order')) || {
        value: '!unknown'
      };
    }),
    _availableTags: Ember.computed(function () {
      return this.get('store').peekAll('tag');
    }),
    availableTags: Ember.computed('_availableTags.[]', function () {
      let tags = this.get('_availableTags').filter(tag => tag.get('id') !== null).sort((tagA, tagB) => tagA.name.localeCompare(tagB.name, undefined, {
        ignorePunctuation: true
      }));
      let options = tags.toArray();
      options.unshiftObject({
        name: 'All tags',
        slug: null
      });
      return options;
    }),
    selectedTag: Ember.computed('tag', '_availableTags.[]', function () {
      let tag = this.get('tag');
      let tags = this.get('availableTags');
      return tags.findBy('slug', tag) || {
        slug: '!unknown'
      };
    }),
    _availableAuthors: Ember.computed(function () {
      return this.get('store').peekAll('user');
    }),
    availableAuthors: Ember.computed('_availableAuthors.[]', function () {
      let authors = this.get('_availableAuthors');
      let options = authors.toArray();
      options.unshiftObject({
        name: 'All authors',
        slug: null
      });
      return options;
    }),
    selectedAuthor: Ember.computed('author', 'availableAuthors.[]', function () {
      let author = this.get('author');
      let authors = this.get('availableAuthors');
      return authors.findBy('slug', author) || {
        slug: '!unknown'
      };
    }),
    actions: {
      changeType(type) {
        this.set('type', Ember.get(type, 'value'));
      },

      changeAuthor(author) {
        this.set('author', Ember.get(author, 'slug'));
      },

      changeTag(tag) {
        this.set('tag', Ember.get(tag, 'slug'));
      },

      changeOrder(order) {
        this.set('order', Ember.get(order, 'value'));
      },

      openEditor(post) {
        this.transitionToRoute('editor.edit', 'post', post.get('id'));
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/reset", ["exports", "ghost-admin/mixins/validation-engine", "ember-concurrency"], function (_exports, _validationEngine, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend(_validationEngine.default, {
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),
    ajax: Ember.inject.service(),
    config: Ember.inject.service(),
    newPassword: '',
    ne2Password: '',
    token: '',
    flowErrors: '',
    validationType: 'reset',
    email: Ember.computed('token', function () {
      // The token base64 encodes the email (and some other stuff),
      // each section is divided by a '|'. Email comes second.
      return atob(this.token).split('|')[1];
    }),
    actions: {
      submit() {
        return this.resetPassword.perform();
      }

    },

    // Used to clear sensitive information
    clearData() {
      this.setProperties({
        newPassword: '',
        ne2Password: '',
        token: ''
      });
    },

    resetPassword: (0, _emberConcurrency.task)(function* () {
      let credentials = this.getProperties('newPassword', 'ne2Password', 'token');
      let authUrl = this.get('ghostPaths.url').api('authentication', 'passwordreset');
      this.set('flowErrors', '');
      this.hasValidated.addObjects(['newPassword', 'ne2Password']);

      try {
        yield this.validate();

        try {
          let resp = yield this.ajax.put(authUrl, {
            data: {
              passwordreset: [credentials]
            }
          });
          this.notifications.showAlert(resp.passwordreset[0].message, {
            type: 'warn',
            delayed: true,
            key: 'password.reset'
          });
          this.session.authenticate('authenticator:cookie', this.email, credentials.newPassword);
          return true;
        } catch (error) {
          this.notifications.showAPIError(error, {
            key: 'password.reset'
          });
        }
      } catch (error) {
        if (this.get('errors.newPassword')) {
          this.set('flowErrors', this.get('errors.newPassword')[0].message);
        }

        if (this.get('errors.ne2Password')) {
          this.set('flowErrors', this.get('errors.ne2Password')[0].message);
        }

        if (error && this.get('errors.length') === 0) {
          throw error;
        }
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/code-injection", ["exports", "ember-concurrency"], function (_exports, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    notifications: Ember.inject.service(),
    settings: Ember.inject.service(),
    actions: {
      save() {
        this.save.perform();
      },

      toggleLeaveSettingsModal(transition) {
        let leaveTransition = this.leaveSettingsTransition;

        if (!transition && this.showLeaveSettingsModal) {
          this.set('leaveSettingsTransition', null);
          this.set('showLeaveSettingsModal', false);
          return;
        }

        if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
          this.set('leaveSettingsTransition', transition); // if a save is running, wait for it to finish then transition

          if (this.get('save.isRunning')) {
            return this.get('save.last').then(() => {
              transition.retry();
            });
          } // we genuinely have unsaved data, show the modal


          this.set('showLeaveSettingsModal', true);
        }
      },

      leaveSettings() {
        let transition = this.leaveSettingsTransition;
        let settings = this.settings;

        if (!transition) {
          this.notifications.showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', {
            type: 'error'
          });
          return;
        } // roll back changes on settings props


        settings.rollbackAttributes();
        return transition.retry();
      }

    },
    saveTask: (0, _emberConcurrency.task)(function* () {
      let notifications = this.notifications;

      try {
        return yield this.settings.save();
      } catch (error) {
        notifications.showAPIError(error, {
          key: 'code-injection.save'
        });
        throw error;
      }
    }),
    save: (0, _emberConcurrency.task)(function* () {
      yield this.saveTask.perform();
      yield (0, _emberConcurrency.timeout)(2500);

      if (this.get('saveTask.last.isSuccessful') && this.get('saveTask.last.value')) {
        // Reset last task to bring button back to idle state
        yield this.set('saveTask.last', null);
      }
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/design", ["exports", "jquery", "ghost-admin/models/navigation-item", "ghost-admin/services/ajax", "ember-concurrency"], function (_exports, _jquery, _navigationItem, _ajax, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable ghost/ember/alias-model-in-controller */
  var _default = Ember.Controller.extend({
    config: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),
    settings: Ember.inject.service(),
    dirtyAttributes: false,
    newNavItem: null,
    newSecondaryNavItem: null,
    themes: null,
    themeToDelete: null,

    init() {
      this._super(...arguments);

      this.set('newNavItem', _navigationItem.default.create({
        isNew: true
      }));
      this.set('newSecondaryNavItem', _navigationItem.default.create({
        isNew: true,
        isSecondary: true
      }));
    },

    showDeleteThemeModal: Ember.computed.notEmpty('themeToDelete'),
    blogUrl: Ember.computed('config.blogUrl', function () {
      let url = this.get('config.blogUrl');
      return url.slice(-1) !== '/' ? "".concat(url, "/") : url;
    }),
    actions: {
      save() {
        this.save.perform();
      },

      addNavItem(item) {
        // If the url sent through is blank (user never edited the url)
        if (item.get('url') === '') {
          item.set('url', '/');
        }

        return item.validate().then(() => {
          this.addNewNavItem(item);
        });
      },

      deleteNavItem(item) {
        if (!item) {
          return;
        }

        let navItems = item.isSecondary ? this.get('settings.secondaryNavigation') : this.get('settings.navigation');
        navItems.removeObject(item);
        this.set('dirtyAttributes', true);
      },

      updateLabel(label, navItem) {
        if (!navItem) {
          return;
        }

        navItem.set('label', label);
        this.set('dirtyAttributes', true);
      },

      updateUrl(url, navItem) {
        if (!navItem) {
          return;
        }

        navItem.set('url', url);
        this.set('dirtyAttributes', true);
        return url;
      },

      toggleLeaveSettingsModal(transition) {
        let leaveTransition = this.leaveSettingsTransition;

        if (!transition && this.showLeaveSettingsModal) {
          this.set('leaveSettingsTransition', null);
          this.set('showLeaveSettingsModal', false);
          return;
        }

        if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
          this.set('leaveSettingsTransition', transition); // if a save is running, wait for it to finish then transition

          if (this.get('save.isRunning')) {
            return this.get('save.last').then(() => {
              transition.retry();
            });
          } // we genuinely have unsaved data, show the modal


          this.set('showLeaveSettingsModal', true);
        }
      },

      leaveSettings() {
        let transition = this.leaveSettingsTransition;
        let settings = this.settings;

        if (!transition) {
          this.notifications.showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', {
            type: 'error'
          });
          return;
        } // roll back changes on settings props


        settings.rollbackAttributes();
        this.set('dirtyAttributes', false);
        return transition.retry();
      },

      activateTheme(theme) {
        return theme.activate().then(theme => {
          if (!Ember.isEmpty(theme.get('warnings'))) {
            this.set('themeWarnings', theme.get('warnings'));
            this.set('showThemeWarningsModal', true);
          }

          if (!Ember.isEmpty(theme.get('errors'))) {
            this.set('themeErrors', theme.get('errors'));
            this.set('showThemeWarningsModal', true);
          }
        }).catch(error => {
          if ((0, _ajax.isThemeValidationError)(error)) {
            let errors = error.payload.errors[0].details.errors;
            let fatalErrors = [];
            let normalErrors = []; // to have a proper grouping of fatal errors and none fatal, we need to check
            // our errors for the fatal property

            if (errors.length > 0) {
              for (let i = 0; i < errors.length; i += 1) {
                if (errors[i].fatal) {
                  fatalErrors.push(errors[i]);
                } else {
                  normalErrors.push(errors[i]);
                }
              }
            }

            this.set('themeErrors', normalErrors);
            this.set('themeFatalErrors', fatalErrors);
            this.set('showThemeErrorsModal', true);
            return;
          }

          throw error;
        });
      },

      downloadTheme(theme) {
        let downloadURL = "".concat(this.get('ghostPaths.apiRoot'), "/themes/").concat(theme.name, "/download/");
        let iframe = (0, _jquery.default)('#iframeDownload');

        if (iframe.length === 0) {
          iframe = (0, _jquery.default)('<iframe>', {
            id: 'iframeDownload'
          }).hide().appendTo('body');
        }

        iframe.attr('src', downloadURL);
      },

      deleteTheme(theme) {
        if (theme) {
          return this.set('themeToDelete', theme);
        }

        return this._deleteTheme();
      },

      hideDeleteThemeModal() {
        this.set('themeToDelete', null);
      },

      hideThemeWarningsModal() {
        this.set('themeWarnings', null);
        this.set('themeErrors', null);
        this.set('themeFatalErrors', null);
        this.set('showThemeWarningsModal', false);
        this.set('showThemeErrorsModal', false);
      },

      reset() {
        this.set('newNavItem', _navigationItem.default.create({
          isNew: true
        }));
        this.set('newSecondaryNavItem', _navigationItem.default.create({
          isNew: true,
          isSecondary: true
        }));
      }

    },
    saveTask: (0, _emberConcurrency.task)(function* () {
      let navItems = this.get('settings.navigation');
      let secondaryNavItems = this.get('settings.secondaryNavigation');
      let notifications = this.notifications;
      let validationPromises = [];

      if (!this.newNavItem.get('isBlank')) {
        validationPromises.pushObject(this.send('addNavItem', this.newNavItem));
      }

      if (!this.newSecondaryNavItem.get('isBlank')) {
        validationPromises.pushObject(this.send('addNavItem', this.newSecondaryNavItem));
      }

      navItems.map(item => {
        validationPromises.pushObject(item.validate());
      });
      secondaryNavItems.map(item => {
        validationPromises.pushObject(item.validate());
      });

      try {
        yield Ember.RSVP.all(validationPromises);
        this.set('dirtyAttributes', false);
        return yield this.settings.save();
      } catch (error) {
        if (error) {
          notifications.showAPIError(error);
          throw error;
        }
      }
    }),
    save: (0, _emberConcurrency.task)(function* () {
      yield this.saveTask.perform();
      yield (0, _emberConcurrency.timeout)(2500);

      if (this.get('saveTask.last.isSuccessful') && this.get('saveTask.last.value')) {
        // Reset last task to bring button back to idle state
        yield this.set('saveTask.last', null);
      }
    }),

    addNewNavItem(item) {
      let navItems = item.isSecondary ? this.get('settings.secondaryNavigation') : this.get('settings.navigation');
      item.set('isNew', false);
      navItems.pushObject(item);
      this.set('dirtyAttributes', true);

      if (item.isSecondary) {
        this.set('newSecondaryNavItem', _navigationItem.default.create({
          isNew: true,
          isSecondary: true
        }));
        (0, _jquery.default)('.gh-blognav-container:last .gh-blognav-line:last input:first').focus();
      } else {
        this.set('newNavItem', _navigationItem.default.create({
          isNew: true
        }));
        (0, _jquery.default)('.gh-blognav-container:first .gh-blognav-line:last input:first').focus();
      }
    },

    _deleteTheme() {
      let theme = this.store.peekRecord('theme', this.themeToDelete.name);

      if (!theme) {
        return;
      }

      return theme.destroyRecord().then(() => {
        // HACK: this is a private method, we need to unload from the store
        // here so that uploading another theme with the same "id" doesn't
        // attempt to update the deleted record
        theme.unloadRecord();
      }).catch(error => {
        this.notifications.showAPIError(error);
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/general", ["exports", "jquery", "ghost-admin/utils/password-generator", "validator", "ghost-admin/components/gh-image-uploader", "ember-concurrency"], function (_exports, _jquery, _passwordGenerator, _validator, _ghImageUploader, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable ghost/ember/alias-model-in-controller */
  const ICON_EXTENSIONS = ['ico', 'png'];

  function randomPassword() {
    let word = (0, _passwordGenerator.default)(6);
    let randomN = Math.floor(Math.random() * 1000);
    return word + randomN;
  }

  var _default = Ember.Controller.extend({
    config: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),
    settings: Ember.inject.service(),
    ui: Ember.inject.service(),
    availableTimezones: null,
    iconExtensions: null,
    iconMimeTypes: 'image/png,image/x-icon',
    imageExtensions: _ghImageUploader.IMAGE_EXTENSIONS,
    imageMimeTypes: _ghImageUploader.IMAGE_MIME_TYPES,
    _scratchFacebook: null,
    _scratchTwitter: null,

    init() {
      this._super(...arguments);

      this.iconExtensions = ICON_EXTENSIONS;
    },

    privateRSSUrl: Ember.computed('config.blogUrl', 'settings.publicHash', function () {
      let blogUrl = this.get('config.blogUrl');
      let publicHash = this.get('settings.publicHash');
      return "".concat(blogUrl, "/").concat(publicHash, "/rss");
    }),
    backgroundStyle: Ember.computed('settings.brand.primaryColor', function () {
      let color = this.get('settings.brand.primaryColor') || '#ffffff';
      return Ember.String.htmlSafe("background-color: ".concat(color));
    }),
    brandColor: Ember.computed('settings.brand.primaryColor', function () {
      let color = this.get('settings.brand.primaryColor');

      if (color && color[0] === '#') {
        return color.slice(1);
      }

      return color;
    }),
    actions: {
      save() {
        this.save.perform();
      },

      setTimezone(timezone) {
        this.set('settings.activeTimezone', timezone.name);
      },

      removeImage(image) {
        // setting `null` here will error as the server treats it as "null"
        this.settings.set(image, '');
      },

      /**
       * Opens a file selection dialog - Triggered by "Upload Image" buttons,
       * searches for the hidden file input within the .gh-setting element
       * containing the clicked button then simulates a click
       * @param  {MouseEvent} event - MouseEvent fired by the button click
       */
      triggerFileDialog(event) {
        // simulate click to open file dialog
        // using jQuery because IE11 doesn't support MouseEvent
        (0, _jquery.default)(event.target).closest('.gh-setting-action').find('input[type="file"]').click();
      },

      /**
       * Fired after an image upload completes
       * @param  {string} property - Property name to be set on `this.settings`
       * @param  {UploadResult[]} results - Array of UploadResult objects
       * @return {string} The URL that was set on `this.settings.property`
       */
      imageUploaded(property, results) {
        if (results[0]) {
          return this.settings.set(property, results[0].url);
        }
      },

      toggleIsPrivate(isPrivate) {
        let settings = this.settings;
        settings.set('isPrivate', isPrivate);
        settings.get('errors').remove('password');
        let changedAttrs = settings.changedAttributes(); // set a new random password when isPrivate is enabled

        if (isPrivate && changedAttrs.isPrivate) {
          settings.set('password', randomPassword()); // reset the password when isPrivate is disabled
        } else if (changedAttrs.password) {
          settings.set('password', changedAttrs.password[0]);
        }
      },

      toggleLeaveSettingsModal(transition) {
        let leaveTransition = this.leaveSettingsTransition;

        if (!transition && this.showLeaveSettingsModal) {
          this.set('leaveSettingsTransition', null);
          this.set('showLeaveSettingsModal', false);
          return;
        }

        if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
          this.set('leaveSettingsTransition', transition); // if a save is running, wait for it to finish then transition

          if (this.get('save.isRunning')) {
            return this.get('save.last').then(() => {
              transition.retry();
            });
          } // we genuinely have unsaved data, show the modal


          this.set('showLeaveSettingsModal', true);
        }
      },

      leaveSettings() {
        let transition = this.leaveSettingsTransition;
        let settings = this.settings;

        if (!transition) {
          this.notifications.showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', {
            type: 'error'
          });
          return;
        } // roll back changes on settings props


        settings.rollbackAttributes();
        return transition.retry();
      },

      validateFacebookUrl() {
        let newUrl = this._scratchFacebook;
        let oldUrl = this.get('settings.facebook');
        let errMessage = ''; // reset errors and validation

        this.get('settings.errors').remove('facebook');
        this.get('settings.hasValidated').removeObject('facebook');

        if (newUrl === '') {
          // Clear out the Facebook url
          this.set('settings.facebook', '');
          return;
        } // _scratchFacebook will be null unless the user has input something


        if (!newUrl) {
          newUrl = oldUrl;
        }

        try {
          // strip any facebook URLs out
          newUrl = newUrl.replace(/(https?:\/\/)?(www\.)?facebook\.com/i, ''); // don't allow any non-facebook urls

          if (newUrl.match(/^(http|\/\/)/i)) {
            throw 'invalid url';
          } // strip leading / if we have one then concat to full facebook URL


          newUrl = newUrl.replace(/^\//, '');
          newUrl = "https://www.facebook.com/".concat(newUrl); // don't allow URL if it's not valid

          if (!_validator.default.isURL(newUrl)) {
            throw 'invalid url';
          }

          this.set('settings.facebook', '');
          Ember.run.schedule('afterRender', this, function () {
            this.set('settings.facebook', newUrl);
          });
        } catch (e) {
          if (e === 'invalid url') {
            errMessage = 'The URL must be in a format like ' + 'https://www.facebook.com/yourPage';
            this.get('settings.errors').add('facebook', errMessage);
            return;
          }

          throw e;
        } finally {
          this.get('settings.hasValidated').pushObject('facebook');
        }
      },

      validateTwitterUrl() {
        let newUrl = this._scratchTwitter;
        let oldUrl = this.get('settings.twitter');
        let errMessage = ''; // reset errors and validation

        this.get('settings.errors').remove('twitter');
        this.get('settings.hasValidated').removeObject('twitter');

        if (newUrl === '') {
          // Clear out the Twitter url
          this.set('settings.twitter', '');
          return;
        } // _scratchTwitter will be null unless the user has input something


        if (!newUrl) {
          newUrl = oldUrl;
        }

        if (newUrl.match(/(?:twitter\.com\/)(\S+)/) || newUrl.match(/([a-z\d.]+)/i)) {
          let username = [];

          if (newUrl.match(/(?:twitter\.com\/)(\S+)/)) {
            [, username] = newUrl.match(/(?:twitter\.com\/)(\S+)/);
          } else {
            [username] = newUrl.match(/([^/]+)\/?$/mi);
          } // check if username starts with http or www and show error if so


          if (username.match(/^(http|www)|(\/)/) || !username.match(/^[a-z\d._]{1,15}$/mi)) {
            errMessage = !username.match(/^[a-z\d._]{1,15}$/mi) ? 'Your Username is not a valid Twitter Username' : 'The URL must be in a format like https://twitter.com/yourUsername';
            this.get('settings.errors').add('twitter', errMessage);
            this.get('settings.hasValidated').pushObject('twitter');
            return;
          }

          newUrl = "https://twitter.com/".concat(username);
          this.get('settings.hasValidated').pushObject('twitter');
          this.set('settings.twitter', '');
          Ember.run.schedule('afterRender', this, function () {
            this.set('settings.twitter', newUrl);
          });
        } else {
          errMessage = 'The URL must be in a format like ' + 'https://twitter.com/yourUsername';
          this.get('settings.errors').add('twitter', errMessage);
          this.get('settings.hasValidated').pushObject('twitter');
          return;
        }
      },

      validateBrandColor() {
        let newColor = this.get('brandColor');
        let oldColor = this.get('settings.brand.primaryColor');
        let errMessage = ''; // reset errors and validation

        this.get('settings.errors').remove('brandColor');
        this.get('settings.hasValidated').removeObject('brandColor');

        if (newColor === '') {
          // Clear out the brand color
          this.set('settings.brand.primaryColor', '');
          return;
        } // brandColor will be null unless the user has input something


        if (!newColor) {
          newColor = oldColor;
        }

        if (newColor[0] !== '#') {
          newColor = "#".concat(newColor);
        }

        if (newColor.match(/#[0-9A-Fa-f]{6}$/)) {
          this.set('settings.brand.primaryColor', '');
          Ember.run.schedule('afterRender', this, function () {
            this.set('settings.brand.primaryColor', newColor);
          });
        } else {
          errMessage = 'The color should be in valid hex format';
          this.get('settings.errors').add('brandColor', errMessage);
          this.get('settings.hasValidated').pushObject('brandColor');
          return;
        }
      }

    },

    _deleteTheme() {
      let theme = this.store.peekRecord('theme', this.themeToDelete.name);

      if (!theme) {
        return;
      }

      return theme.destroyRecord().catch(error => {
        this.notifications.showAPIError(error);
      });
    },

    saveSettings: (0, _emberConcurrency.task)(function* () {
      let notifications = this.notifications;
      let config = this.config;

      try {
        let settings = yield this.settings.save();
        config.set('blogTitle', settings.get('title')); // this forces the document title to recompute after a blog title change

        this.ui.updateDocumentTitle();
        return settings;
      } catch (error) {
        if (error) {
          notifications.showAPIError(error, {
            key: 'settings.save'
          });
        }

        throw error;
      }
    }),
    save: (0, _emberConcurrency.task)(function* () {
      yield this.saveSettings.perform();
      yield (0, _emberConcurrency.timeout)(2500);

      if (this.get('saveSettings.last.isSuccessful') && this.get('saveSettings.last.value')) {
        // Reset last task to bring button back to idle state
        yield this.set('saveSettings.last', null);
      }
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/integration", ["exports", "ghost-admin/utils/copy-text-to-clipboard", "ghost-admin/components/gh-image-uploader", "ember-concurrency"], function (_exports, _copyTextToClipboard, _ghImageUploader, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    config: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    imageExtensions: _ghImageUploader.IMAGE_EXTENSIONS,
    imageMimeTypes: _ghImageUploader.IMAGE_MIME_TYPES,
    integration: Ember.computed.alias('model'),
    apiUrl: Ember.computed(function () {
      let origin = window.location.origin;
      let subdir = this.ghostPaths.subdir;
      let url = this.ghostPaths.url.join(origin, subdir);
      return url.replace(/\/$/, '');
    }),
    allWebhooks: Ember.computed(function () {
      return this.store.peekAll('webhook');
    }),
    filteredWebhooks: Ember.computed('integration.id', 'allWebhooks.@each.{isNew,isDeleted}', function () {
      return this.allWebhooks.filter(webhook => {
        let matchesIntegration = webhook.belongsTo('integration').id() === this.integration.id;
        return matchesIntegration && !webhook.isNew && !webhook.isDeleted;
      });
    }),
    iconImageStyle: Ember.computed('integration.iconImage', function () {
      let url = this.integration.iconImage;

      if (url) {
        let styles = ["background-image: url(".concat(url, ")"), 'background-size: 50%', 'background-position: 50%', 'background-repeat: no-repeat'];
        return Ember.String.htmlSafe(styles.join('; '));
      }

      return Ember.String.htmlSafe('');
    }),
    actions: {
      triggerIconFileDialog() {
        let input = document.querySelector('input[type="file"][name="iconImage"]');
        input.click();
      },

      setIconImage([image]) {
        this.integration.set('iconImage', image.url);
      },

      save() {
        return this.save.perform();
      },

      toggleUnsavedChangesModal(transition) {
        let leaveTransition = this.leaveScreenTransition;

        if (!transition && this.showUnsavedChangesModal) {
          this.set('leaveScreenTransition', null);
          this.set('showUnsavedChangesModal', false);
          return;
        }

        if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
          this.set('leaveScreenTransition', transition); // if a save is running, wait for it to finish then transition

          if (this.save.isRunning) {
            return this.save.last.then(() => {
              transition.retry();
            });
          } // we genuinely have unsaved data, show the modal


          this.set('showUnsavedChangesModal', true);
        }
      },

      leaveScreen() {
        let transition = this.leaveScreenTransition;

        if (!transition) {
          this.notifications.showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', {
            type: 'error'
          });
          return;
        } // roll back changes on model props


        this.integration.rollbackAttributes();
        return transition.retry();
      },

      deleteIntegration() {
        this.integration.destroyRecord();
      },

      confirmIntegrationDeletion() {
        this.set('showDeleteIntegrationModal', true);
      },

      cancelIntegrationDeletion() {
        this.set('showDeleteIntegrationModal', false);
      },

      confirmWebhookDeletion(webhook) {
        this.set('webhookToDelete', webhook);
      },

      cancelWebhookDeletion() {
        this.set('webhookToDelete', null);
      },

      deleteWebhook() {
        return this.webhookToDelete.destroyRecord();
      }

    },
    saveIntegration: (0, _emberConcurrency.task)(function* () {
      return yield this.integration.save();
    }),
    save: (0, _emberConcurrency.task)(function* () {
      yield this.saveIntegration.perform();
      yield (0, _emberConcurrency.timeout)(2500);

      if (this.get('saveIntegration.last.isSuccessful') && this.get('saveIntegration.last.value')) {
        // Reset last task to bring button back to idle state
        yield this.set('saveIntegration.last', null);
      }
    }),
    copyContentKey: (0, _emberConcurrency.task)(function* () {
      (0, _copyTextToClipboard.default)(this.integration.contentKey.secret);
      yield (0, _emberConcurrency.timeout)(3000);
    }),
    copyAdminKey: (0, _emberConcurrency.task)(function* () {
      (0, _copyTextToClipboard.default)(this.integration.adminKey.secret);
      yield (0, _emberConcurrency.timeout)(3000);
    }),
    copyApiUrl: (0, _emberConcurrency.task)(function* () {
      (0, _copyTextToClipboard.default)(this.apiUrl);
      yield (0, _emberConcurrency.timeout)(3000);
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/integration/webhooks/edit", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    webhook: Ember.computed.alias('model'),
    actions: {
      save() {
        return this.webhook.save();
      },

      cancel() {
        // 'new' route's dectivate hook takes care of rollback
        return this.webhook.get('integration').then(integration => {
          this.transitionToRoute('settings.integration', integration);
        });
      }

    },

    reset() {
      this.webhook.rollbackAttributes();
      this.webhook.errors.clear();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/integration/webhooks/new", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    webhook: Ember.computed.alias('model'),
    actions: {
      save() {
        return this.webhook.save();
      },

      cancel() {
        // 'new' route's dectivate hook takes care of rollback
        return this.webhook.get('integration').then(integration => {
          this.transitionToRoute('settings.integration', integration);
        });
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/integrations", ["exports", "ember-concurrency"], function (_exports, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    settings: Ember.inject.service(),
    store: Ember.inject.service(),
    _allIntegrations: null,

    init() {
      this._super(...arguments);

      this._allIntegrations = this.store.peekAll('integration');
    },

    // filter over the live query so that the list is automatically updated
    // as integrations are added/removed
    integrations: Ember.computed('_allIntegrations.@each.{isNew,type}', function () {
      return this._allIntegrations.reject(integration => {
        return integration.isNew || integration.type !== 'custom';
      });
    }),
    // use ember-concurrency so that we can use the derived state to show
    // a spinner only in the integrations list and avoid delaying the whole
    // screen display
    fetchIntegrations: (0, _emberConcurrency.task)(function* () {
      return yield this.store.findAll('integration');
    }),

    // used by individual integration routes' `model` hooks
    integrationModelHook(prop, value, route, transition) {
      let integration = this.store.peekAll('integration').findBy(prop, value);

      if (integration) {
        return integration;
      }

      return this.fetchIntegrations.perform().then(integrations => {
        let integration = integrations.findBy(prop, value);

        if (!integration) {
          let path = transition.intent.url.replace(/^\//, '');
          return route.replaceWith('error404', {
            path,
            status: 404
          });
        }

        return integration;
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/integrations/amp", ["exports", "ember-concurrency"], function (_exports, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    notifications: Ember.inject.service(),
    settings: Ember.inject.service(),
    leaveSettingsTransition: null,
    ampSettings: Ember.computed.alias('settings.amp'),
    actions: {
      update(value) {
        this.set('ampSettings', value);
      },

      save() {
        this.save.perform();
      },

      toggleLeaveSettingsModal(transition) {
        let leaveTransition = this.leaveSettingsTransition;

        if (!transition && this.showLeaveSettingsModal) {
          this.set('leaveSettingsTransition', null);
          this.set('showLeaveSettingsModal', false);
          return;
        }

        if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
          this.set('leaveSettingsTransition', transition); // if a save is running, wait for it to finish then transition

          if (this.get('save.isRunning')) {
            return this.get('save.last').then(() => {
              transition.retry();
            });
          } // we genuinely have unsaved data, show the modal


          this.set('showLeaveSettingsModal', true);
        }
      },

      leaveSettings() {
        let transition = this.leaveSettingsTransition;
        let settings = this.settings;

        if (!transition) {
          this.notifications.showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', {
            type: 'error'
          });
          return;
        } // roll back changes on settings model


        settings.rollbackAttributes();
        return transition.retry();
      }

    },
    saveTask: (0, _emberConcurrency.task)(function* () {
      let amp = this.ampSettings;
      let settings = this.settings;
      settings.set('amp', amp);

      try {
        return yield settings.save();
      } catch (error) {
        this.notifications.showAPIError(error);
        throw error;
      }
    }).drop(),
    save: (0, _emberConcurrency.task)(function* () {
      yield this.saveTask.perform();
      yield (0, _emberConcurrency.timeout)(2500);

      if (this.get('saveTask.last.isSuccessful') && this.get('saveTask.last.value')) {
        // Reset last task to bring button back to idle state
        yield this.set('saveTask.last', null);
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/integrations/new", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    integration: Ember.computed.alias('model'),
    actions: {
      save() {
        return this.integration.save();
      },

      cancel() {
        // 'new' route's dectivate hook takes care of rollback
        this.transitionToRoute('settings.integrations');
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/integrations/slack", ["exports", "ghost-admin/utils/bound-one-way", "ember-ajax/errors", "ember-concurrency"], function (_exports, _boundOneWay, _errors, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    ghostPaths: Ember.inject.service(),
    ajax: Ember.inject.service(),
    notifications: Ember.inject.service(),
    settings: Ember.inject.service(),
    leaveSettingsTransition: null,
    slackArray: null,

    init() {
      this._super(...arguments);

      this.slackArray = [];
    },

    slackSettings: (0, _boundOneWay.default)('settings.slack.firstObject'),
    testNotificationDisabled: Ember.computed.empty('slackSettings.url'),
    actions: {
      save() {
        this.save.perform();
      },

      updateURL(value) {
        value = typeof value === 'string' ? value.trim() : value;
        this.set('slackSettings.url', value);
        this.get('slackSettings.errors').clear();
      },

      updateUsername(value) {
        value = typeof value === 'string' ? value.trimLeft() : value;
        this.set('slackSettings.username', value);
        this.get('slackSettings.errors').clear();
      },

      triggerDirtyState() {
        let slack = this.slackSettings;
        let slackArray = this.slackArray;
        let settings = this.settings; // Hack to trigger the `isDirty` state on the settings model by setting a new Array
        // for slack rather that replacing the existing one which would still point to the
        // same reference and therfore not setting the model into a dirty state

        slackArray.clear().pushObject(slack);
        settings.set('slack', slackArray);
      },

      toggleLeaveSettingsModal(transition) {
        let leaveTransition = this.leaveSettingsTransition;

        if (!transition && this.showLeaveSettingsModal) {
          this.set('leaveSettingsTransition', null);
          this.set('showLeaveSettingsModal', false);
          return;
        }

        if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
          this.set('leaveSettingsTransition', transition); // if a save is running, wait for it to finish then transition

          if (this.get('save.isRunning')) {
            return this.get('save.last').then(() => {
              transition.retry();
            });
          } // we genuinely have unsaved data, show the modal


          this.set('showLeaveSettingsModal', true);
        }
      },

      leaveSettings() {
        let transition = this.leaveSettingsTransition;
        let settings = this.settings;
        let slackArray = this.slackArray;

        if (!transition) {
          this.notifications.showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', {
            type: 'error'
          });
          return;
        } // roll back changes on model props


        settings.rollbackAttributes();
        slackArray.clear();
        return transition.retry();
      }

    },
    saveTask: (0, _emberConcurrency.task)(function* () {
      let slack = this.slackSettings;
      let settings = this.settings;
      let slackArray = this.slackArray;

      try {
        yield slack.validate(); // clear existing objects in slackArray to make sure we only push the validated one

        slackArray.clear().pushObject(slack);
        yield settings.set('slack', slackArray);
        return yield settings.save();
      } catch (error) {
        if (error) {
          this.notifications.showAPIError(error);
          throw error;
        }
      }
    }).drop(),
    save: (0, _emberConcurrency.task)(function* () {
      yield this.saveTask.perform();
      yield (0, _emberConcurrency.timeout)(2500);

      if (this.get('saveTask.last.isSuccessful') && this.get('saveTask.last.value')) {
        // Reset last task to bring button back to idle state
        yield this.set('saveTask.last', null);
      }
    }).drop(),
    sendTestNotification: (0, _emberConcurrency.task)(function* () {
      let notifications = this.notifications;
      let slackApi = this.get('ghostPaths.url').api('slack', 'test');

      try {
        yield this.save.perform();
        yield this.ajax.post(slackApi);
        notifications.showNotification('Test notification sent', {
          type: 'info',
          key: 'slack-test.send.success',
          description: 'Check your Slack channel for the test message'
        });
        return true;
      } catch (error) {
        notifications.showAPIError(error, {
          key: 'slack-test:send'
        });

        if (!(0, _errors.isInvalidError)(error)) {
          throw error;
        }
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/integrations/unsplash", ["exports", "ember-concurrency"], function (_exports, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    notifications: Ember.inject.service(),
    settings: Ember.inject.service(),
    dirtyAttributes: null,
    rollbackValue: null,
    leaveSettingsTransition: null,
    unsplashSettings: Ember.computed.alias('settings.unsplash'),
    actions: {
      save() {
        this.save.perform();
      },

      update(value) {
        if (!this.dirtyAttributes) {
          this.set('rollbackValue', this.get('unsplashSettings.isActive'));
        }

        this.set('unsplashSettings.isActive', value);
        this.set('dirtyAttributes', true);
      },

      toggleLeaveSettingsModal(transition) {
        let leaveTransition = this.leaveSettingsTransition;

        if (!transition && this.showLeaveSettingsModal) {
          this.set('leaveSettingsTransition', null);
          this.set('showLeaveSettingsModal', false);
          return;
        }

        if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
          this.set('leaveSettingsTransition', transition); // if a save is running, wait for it to finish then transition

          if (this.get('save.isRunning')) {
            return this.get('save.last').then(() => {
              transition.retry();
            });
          } // we genuinely have unsaved data, show the modal


          this.set('showLeaveSettingsModal', true);
        }
      },

      leaveSettings() {
        let transition = this.leaveSettingsTransition;

        if (!transition) {
          this.notifications.showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', {
            type: 'error'
          });
          return;
        } // roll back changes on model props


        this.set('unsplashSettings.isActive', this.rollbackValue);
        this.set('dirtyAttributes', false);
        this.set('rollbackValue', null);
        return transition.retry();
      }

    },
    saveTask: (0, _emberConcurrency.task)(function* () {
      let unsplash = this.unsplashSettings;
      let settings = this.settings;

      try {
        settings.set('unsplash', unsplash);
        this.set('dirtyAttributes', false);
        this.set('rollbackValue', null);
        return yield settings.save();
      } catch (error) {
        if (error) {
          this.notifications.showAPIError(error);
          throw error;
        }
      }
    }).drop(),
    save: (0, _emberConcurrency.task)(function* () {
      yield this.saveTask.perform();
      yield (0, _emberConcurrency.timeout)(2500);

      if (this.get('saveTask.last.isSuccessful') && this.get('saveTask.last.value')) {
        // Reset last task to bring button back to idle state
        yield this.set('saveTask.last', null);
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/integrations/zapier", ["exports", "ghost-admin/config/environment", "ghost-admin/utils/copy-text-to-clipboard", "ember-concurrency"], function (_exports, _environment, _copyTextToClipboard, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    ghostPaths: Ember.inject.service(),
    isTesting: undefined,

    init() {
      this._super(...arguments);

      if (this.isTesting === undefined) {
        this.isTesting = _environment.default.environment === 'test';
      }
    },

    integration: Ember.computed.alias('model'),
    apiUrl: Ember.computed(function () {
      let origin = window.location.origin;
      let subdir = this.ghostPaths.subdir;
      let url = this.ghostPaths.url.join(origin, subdir);
      return url.replace(/\/$/, '');
    }),
    copyAdminKey: (0, _emberConcurrency.task)(function* () {
      (0, _copyTextToClipboard.default)(this.integration.adminKey.secret);
      yield (0, _emberConcurrency.timeout)(3000);
    }),
    copyApiUrl: (0, _emberConcurrency.task)(function* () {
      (0, _copyTextToClipboard.default)(this.apiUrl);
      yield (0, _emberConcurrency.timeout)(3000);
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/settings/labs", ["exports", "jquery", "ghost-admin/config/environment", "ghost-admin/services/ajax", "ember-concurrency"], function (_exports, _jquery, _environment, _ajax, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable ghost/ember/alias-model-in-controller */
  const {
    Promise
  } = Ember.RSVP;
  const IMPORT_MIME_TYPES = ['application/json', 'application/zip', 'application/x-zip-compressed'];
  const JSON_EXTENSION = ['json'];
  const JSON_MIME_TYPE = ['application/json'];
  const YAML_EXTENSION = ['yaml'];
  const YAML_MIME_TYPE = ['text/vnd.yaml', 'application/vnd.yaml', 'text/x-yaml', 'application/x-yaml'];

  var _default = Ember.Controller.extend({
    ajax: Ember.inject.service(),
    config: Ember.inject.service(),
    feature: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),
    settings: Ember.inject.service(),
    importErrors: null,
    importSuccessful: false,
    showDeleteAllModal: false,
    submitting: false,
    uploadButtonText: 'Import',
    importMimeType: null,
    jsonExtension: null,
    jsonMimeType: null,
    yamlExtension: null,
    yamlMimeType: null,

    init() {
      this._super(...arguments);

      this.importMimeType = IMPORT_MIME_TYPES;
      this.jsonExtension = JSON_EXTENSION;
      this.jsonMimeType = JSON_MIME_TYPE;
      this.yamlExtension = YAML_EXTENSION;
      this.yamlMimeType = YAML_MIME_TYPE;
    },

    actions: {
      onUpload(file) {
        let formData = new FormData();
        let notifications = this.notifications;
        let currentUserId = this.get('session.user.id');
        let dbUrl = this.get('ghostPaths.url').api('db');
        this.set('uploadButtonText', 'Importing');
        this.set('importErrors', null);
        this.set('importSuccessful', false);
        return this._validate(file).then(() => {
          formData.append('importfile', file);
          return this.ajax.post(dbUrl, {
            data: formData,
            dataType: 'json',
            cache: false,
            contentType: false,
            processData: false
          });
        }).then(response => {
          let store = this.store;
          this.set('importSuccessful', true);

          if (response.problems) {
            this.set('importErrors', response.problems);
          } // Clear the store, so that all the new data gets fetched correctly.


          store.unloadAll(); // NOTE: workaround for behaviour change in Ember 2.13
          // store.unloadAll has some async tendencies so we need to schedule
          // the reload of the current user once the unload has finished
          // https://github.com/emberjs/data/issues/4963

          Ember.run.schedule('destroy', this, () => {
            // Reload currentUser and set session
            this.set('session.user', store.findRecord('user', currentUserId)); // TODO: keep as notification, add link to view content

            notifications.showNotification('Import successful', {
              key: 'import.upload.success'
            }); // reload settings

            return this.settings.reload().then(settings => {
              this.feature.fetch();
              this.config.set('blogTitle', settings.get('title'));
            });
          });
        }).catch(response => {
          if ((0, _ajax.isUnsupportedMediaTypeError)(response) || (0, _ajax.isRequestEntityTooLargeError)(response)) {
            this.set('importErrors', [response]);
          } else if (response && response.payload.errors && Ember.isArray(response.payload.errors)) {
            this.set('importErrors', response.payload.errors);
          } else {
            this.set('importErrors', [{
              message: 'Import failed due to an unknown error. Check the Web Inspector console and network tabs for errors.'
            }]);
          }

          throw response;
        }).finally(() => {
          this.set('uploadButtonText', 'Import');
        });
      },

      downloadFile(endpoint) {
        let downloadURL = this.get('ghostPaths.url').api(endpoint);
        let iframe = (0, _jquery.default)('#iframeDownload');

        if (iframe.length === 0) {
          iframe = (0, _jquery.default)('<iframe>', {
            id: 'iframeDownload'
          }).hide().appendTo('body');
        }

        iframe.attr('src', downloadURL);
      },

      toggleDeleteAllModal() {
        this.toggleProperty('showDeleteAllModal');
      },

      /**
       * Opens a file selection dialog - Triggered by "Upload x" buttons,
       * searches for the hidden file input within the .gh-setting element
       * containing the clicked button then simulates a click
       * @param  {MouseEvent} event - MouseEvent fired by the button click
       */
      triggerFileDialog(event) {
        // simulate click to open file dialog
        // using jQuery because IE11 doesn't support MouseEvent
        (0, _jquery.default)(event.target).closest('.gh-setting-action').find('input[type="file"]').click();
      },

      setDefaultContentVisibility(value) {
        this.set('settings.defaultContentVisibility', value);
      },

      setMembersSubscriptionSettings(subscriptionSettings) {
        this.set('settings.membersSubscriptionSettings', JSON.stringify(subscriptionSettings));
      },

      setBulkEmailSettings(bulkEmailSettings) {
        this.set('settings.bulkEmailSettings', bulkEmailSettings);
      }

    },

    // TODO: convert to ember-concurrency task
    _validate(file) {
      // Windows doesn't have mime-types for json files by default, so we
      // need to have some additional checking
      if (file.type === '') {
        // First check file extension so we can early return
        let [, extension] = /(?:\.([^.]+))?$/.exec(file.name);

        if (!extension || extension.toLowerCase() !== 'json') {
          return Ember.RSVP.reject(new _ajax.UnsupportedMediaTypeError());
        }

        return new Promise((resolve, reject) => {
          // Extension is correct, so check the contents of the file
          let reader = new FileReader();

          reader.onload = function () {
            let {
              result
            } = reader;

            try {
              JSON.parse(result);
              return resolve();
            } catch (e) {
              return reject(new _ajax.UnsupportedMediaTypeError());
            }
          };

          reader.readAsText(file);
        });
      }

      let accept = this.importMimeType;

      if (!Ember.isBlank(accept) && file && accept.indexOf(file.type) === -1) {
        return Ember.RSVP.reject(new _ajax.UnsupportedMediaTypeError());
      }

      return Ember.RSVP.resolve();
    },

    sendTestEmail: (0, _emberConcurrency.task)(function* () {
      let notifications = this.notifications;
      let emailUrl = this.get('ghostPaths.url').api('mail', 'test');

      try {
        yield this.ajax.post(emailUrl);
        notifications.showAlert('Check your email for the test message.', {
          type: 'info',
          key: 'test-email.send.success'
        });
        return true;
      } catch (error) {
        notifications.showAPIError(error, {
          key: 'test-email:send'
        });
      }
    }).drop(),
    saveSettings: (0, _emberConcurrency.task)(function* () {
      return yield this.settings.save();
    }).drop(),
    redirectUploadResult: (0, _emberConcurrency.task)(function* (success) {
      this.set('redirectSuccess', success);
      this.set('redirectFailure', !success);
      yield (0, _emberConcurrency.timeout)(_environment.default.environment === 'test' ? 100 : 5000);
      this.set('redirectSuccess', null);
      this.set('redirectFailure', null);
      return true;
    }).drop(),
    routesUploadResult: (0, _emberConcurrency.task)(function* (success) {
      this.set('routesSuccess', success);
      this.set('routesFailure', !success);
      yield (0, _emberConcurrency.timeout)(_environment.default.environment === 'test' ? 100 : 5000);
      this.set('routesSuccess', null);
      this.set('routesFailure', null);
      return true;
    }).drop(),

    reset() {
      this.set('importErrors', null);
      this.set('importSuccessful', false);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/setup", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    ghostPaths: Ember.inject.service(),
    router: Ember.inject.service(),
    showBackLink: Ember.computed.match('router.currentRouteName', /^setup\.(two|three)$/),
    backRoute: Ember.computed('router.currentRouteName', function () {
      let currentRoute = this.router.currentRouteName;
      return currentRoute === 'setup.two' ? 'setup.one' : 'setup.two';
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/setup/three", ["exports", "ember-data", "validator", "ember-ajax/errors", "ember-concurrency"], function (_exports, _emberData, _validator, _errors, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // TODO: remove usage of Ember Data's private `Errors` class when refactoring validations
  // eslint-disable-next-line
  const {
    Errors
  } = _emberData.default;

  var _default = Ember.Controller.extend({
    two: Ember.inject.controller('setup/two'),
    notifications: Ember.inject.service(),
    users: '',
    errors: Errors.create(),
    hasValidated: Ember.A(),
    ownerEmail: Ember.computed.alias('two.email'),
    usersArray: Ember.computed('users', function () {
      let errors = this.errors;
      let users = this.users.split('\n').filter(function (email) {
        return email.trim().length > 0;
      }); // remove "no users to invite" error if we have users

      if (users.uniq().length > 0 && errors.get('users.length') === 1) {
        if (errors.get('users.firstObject').message.match(/no users/i)) {
          errors.remove('users');
        }
      }

      return users.uniq();
    }),
    validUsersArray: Ember.computed('usersArray', 'ownerEmail', function () {
      let ownerEmail = this.ownerEmail;
      return this.usersArray.filter(function (user) {
        return _validator.default.isEmail(user || '') && user !== ownerEmail;
      });
    }),
    invalidUsersArray: Ember.computed('usersArray', 'ownerEmail', function () {
      let ownerEmail = this.ownerEmail;
      return this.usersArray.reject(user => _validator.default.isEmail(user || '') || user === ownerEmail);
    }),
    validationResult: Ember.computed('invalidUsersArray', function () {
      let errors = [];
      this.invalidUsersArray.forEach(user => {
        errors.push({
          user,
          error: 'email'
        });
      });

      if (errors.length === 0) {
        // ensure we aren't highlighting fields when everything is fine
        this.errors.clear();
        return true;
      } else {
        return errors;
      }
    }),
    buttonText: Ember.computed('errors.users', 'validUsersArray', 'invalidUsersArray', function () {
      let usersError = this.get('errors.users.firstObject.message');
      let validNum = this.validUsersArray.length;
      let invalidNum = this.invalidUsersArray.length;
      let userCount;

      if (usersError && usersError.match(/no users/i)) {
        return usersError;
      }

      if (invalidNum > 0) {
        userCount = invalidNum === 1 ? 'email address' : 'email addresses';
        return "".concat(invalidNum, " invalid ").concat(userCount);
      }

      if (validNum > 0) {
        userCount = validNum === 1 ? 'user' : 'users';
        userCount = "".concat(validNum, " ").concat(userCount);
      } else {
        userCount = 'some users';
      }

      return "Invite ".concat(userCount);
    }),
    buttonClass: Ember.computed('validationResult', 'usersArray.length', function () {
      if (this.validationResult === true && this.get('usersArray.length') > 0) {
        return 'gh-btn-green';
      } else {
        return 'gh-btn-minor';
      }
    }),
    authorRole: Ember.computed(function () {
      return this.store.findAll('role', {
        reload: true
      }).then(roles => roles.findBy('name', 'Author'));
    }),
    actions: {
      validate() {
        this.validate();
      },

      invite() {
        this.invite.perform();
      },

      skipInvite() {
        this.send('loadServerNotifications');
        this.transitionToRoute('home');
      }

    },

    validate() {
      let errors = this.errors;
      let validationResult = this.validationResult;
      let property = 'users';
      errors.clear(); // If property isn't in the `hasValidated` array, add it to mark that this field can show a validation result

      this.hasValidated.addObject(property);

      if (validationResult === true) {
        return true;
      }

      validationResult.forEach(error => {
        // Only one error type here so far, but one day the errors might be more detailed
        switch (error.error) {
          case 'email':
            errors.add(property, "".concat(error.user, " is not a valid email."));
        }
      });
      return false;
    },

    _transitionAfterSubmission() {
      if (!this._hasTransitioned) {
        this._hasTransitioned = true;
        this.transitionToRoute('home');
      }
    },

    invite: (0, _emberConcurrency.task)(function* () {
      let users = this.validUsersArray;

      if (this.validate() && users.length > 0) {
        this._hasTransitioned = false;

        this._slowSubmissionTimeout.perform();

        let authorRole = yield this.authorRole;
        let invites = yield this._saveInvites(authorRole);

        this._slowSubmissionTimeout.cancelAll();

        this._showNotifications(invites);

        Ember.run.schedule('actions', this, function () {
          this.send('loadServerNotifications');

          this._transitionAfterSubmission();
        });
      } else if (users.length === 0) {
        this.errors.add('users', 'No users to invite');
      }
    }).drop(),
    _slowSubmissionTimeout: (0, _emberConcurrency.task)(function* () {
      yield (0, _emberConcurrency.timeout)(4000);

      this._transitionAfterSubmission();
    }).drop(),

    _saveInvites(authorRole) {
      let users = this.validUsersArray;
      return Ember.RSVP.Promise.all(users.map(user => {
        let invite = this.store.createRecord('invite', {
          email: user,
          role: authorRole
        });
        return invite.save().then(() => ({
          email: user,
          success: invite.get('status') === 'sent'
        })).catch(error => ({
          error,
          email: user,
          success: false
        }));
      }));
    },

    _showNotifications(invites) {
      let notifications = this.notifications;
      let erroredEmails = [];
      let successCount = 0;
      let invitationsString, message;
      invites.forEach(invite => {
        if (invite.success) {
          successCount += 1;
        } else if ((0, _errors.isInvalidError)(invite.error)) {
          message = "".concat(invite.email, " was invalid: ").concat(invite.error.payload.errors[0].message);
          notifications.showAlert(message, {
            type: 'error',
            delayed: true,
            key: "signup.send-invitations.".concat(invite.email)
          });
        } else {
          erroredEmails.push(invite.email);
        }
      });

      if (erroredEmails.length > 0) {
        invitationsString = erroredEmails.length > 1 ? ' invitations: ' : ' invitation: ';
        message = "Failed to send ".concat(erroredEmails.length, " ").concat(invitationsString);
        message += Ember.Handlebars.Utils.escapeExpression(erroredEmails.join(', '));
        message += '. Please check your email configuration, see <a href=\'https://ghost.org/docs/concepts/config/#mail\' target=\'_blank\'>https://ghost.org/docs/concepts/config/#mail</a> for instructions';
        message = Ember.String.htmlSafe(message);
        notifications.showAlert(message, {
          type: 'error',
          delayed: successCount > 0,
          key: 'signup.send-invitations.failed'
        });
      }

      if (successCount > 0) {
        // pluralize
        invitationsString = successCount > 1 ? 'invitations' : 'invitation';
        notifications.showAlert("".concat(successCount, " ").concat(invitationsString, " sent!"), {
          type: 'success',
          delayed: true,
          key: 'signup.send-invitations.success'
        });
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/setup/two", ["exports", "ghost-admin/mixins/validation-engine", "ember-ajax/errors", "ghost-admin/services/ajax", "ember-concurrency"], function (_exports, _validationEngine, _errors, _ajax, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend(_validationEngine.default, {
    application: Ember.inject.controller(),
    ajax: Ember.inject.service(),
    config: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),
    settings: Ember.inject.service(),
    // ValidationEngine settings
    validationType: 'setup',
    blogCreated: false,
    blogTitle: null,
    email: '',
    flowErrors: '',
    profileImage: null,
    name: null,
    password: null,
    actions: {
      setup() {
        this.setup.perform();
      },

      preValidate(model) {
        // Only triggers validation if a value has been entered, preventing empty errors on focusOut
        if (this.get(model)) {
          return this.validate({
            property: model
          });
        }
      },

      setImage(image) {
        this.set('profileImage', image);
      }

    },
    setup: (0, _emberConcurrency.task)(function* () {
      return yield this._passwordSetup();
    }),
    authenticate: (0, _emberConcurrency.task)(function* (authStrategy, authentication) {
      // we don't want to redirect after sign-in during setup
      this.set('session.skipAuthSuccessHandler', true);

      try {
        let authResult = yield this.session.authenticate(authStrategy, ...authentication);
        this.errors.remove('session');
        return authResult;
      } catch (error) {
        if (error && error.payload && error.payload.errors) {
          if ((0, _ajax.isVersionMismatchError)(error)) {
            return this.notifications.showAPIError(error);
          }

          error.payload.errors.forEach(err => {
            err.message = err.message.htmlSafe();
          });
          this.set('flowErrors', error.payload.errors[0].message.string);
        } else {
          // Connection errors don't return proper status message, only req.body
          this.notifications.showAlert('There was a problem on the server.', {
            type: 'error',
            key: 'session.authenticate.failed'
          });
        }
      }
    }),

    /**
     * Uploads the given data image, then sends the changed user image property to the server
     * @param  {Object} user User object, returned from the 'setup' api call
     * @return {RSVP.Promise} A promise that takes care of both calls
     */
    _sendImage(user) {
      let formData = new FormData();
      let imageFile = this.profileImage;
      let uploadUrl = this.get('ghostPaths.url').api('images', 'upload');
      formData.append('file', imageFile, imageFile.name);
      formData.append('purpose', 'profile_image');
      return this.ajax.post(uploadUrl, {
        data: formData,
        processData: false,
        contentType: false,
        dataType: 'text'
      }).then(response => {
        let [image] = Ember.get(JSON.parse(response), 'images');
        let imageUrl = image.url;
        let usersUrl = this.get('ghostPaths.url').api('users', user.id.toString());
        user.profile_image = imageUrl;
        return this.ajax.put(usersUrl, {
          data: {
            users: [user]
          }
        });
      });
    },

    _passwordSetup() {
      let setupProperties = ['blogTitle', 'name', 'email', 'password'];
      let data = this.getProperties(setupProperties);
      let config = this.config;
      let method = this.blogCreated ? 'put' : 'post';
      this.set('flowErrors', '');
      this.hasValidated.addObjects(setupProperties);
      return this.validate().then(() => {
        let authUrl = this.get('ghostPaths.url').api('authentication', 'setup');
        return this.ajax[method](authUrl, {
          data: {
            setup: [{
              name: data.name,
              email: data.email,
              password: data.password,
              blogTitle: data.blogTitle
            }]
          }
        }).then(result => {
          config.set('blogTitle', data.blogTitle); // don't try to login again if we are already logged in

          if (this.get('session.isAuthenticated')) {
            return this._afterAuthentication(result);
          } // Don't call the success handler, otherwise we will be redirected to admin


          this.set('session.skipAuthSuccessHandler', true);
          return this.session.authenticate('authenticator:cookie', data.email, data.password).then(() => {
            this.set('blogCreated', true);
            return this._afterAuthentication(result);
          }).catch(error => {
            this._handleAuthenticationError(error);
          }).finally(() => {
            this.set('session.skipAuthSuccessHandler', undefined);
          });
        }).catch(error => {
          this._handleSaveError(error);
        });
      }).catch(() => {
        this.set('flowErrors', 'Please fill out the form to setup your blog.');
      });
    },

    _handleSaveError(resp) {
      if ((0, _errors.isInvalidError)(resp)) {
        let [error] = resp.payload.errors;
        this.set('flowErrors', [error.message, error.context].join(' '));
      } else {
        this.notifications.showAPIError(resp, {
          key: 'setup.blog-details'
        });
      }
    },

    _handleAuthenticationError(error) {
      if (error && error.payload && error.payload.errors) {
        let [apiError] = error.payload.errors;
        this.set('flowErrors', [apiError.message, apiError.context].join(' '));
      } else {
        // Connection errors don't return proper status message, only req.body
        this.notifications.showAlert('There was a problem on the server.', {
          type: 'error',
          key: 'setup.authenticate.failed'
        });
      }
    },

    _afterAuthentication(result) {
      // fetch settings and private config for synchronous access before transitioning
      let fetchSettingsAndConfig = Ember.RSVP.all([this.settings.fetch()]);

      if (this.profileImage) {
        return this._sendImage(result.users[0]).then(() => fetchSettingsAndConfig).then(() => this.transitionToRoute('setup.three')).catch(resp => {
          this.notifications.showAPIError(resp, {
            key: 'setup.blog-details'
          });
        });
      } else {
        return fetchSettingsAndConfig.then(() => this.transitionToRoute('setup.three'));
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/signin", ["exports", "jquery", "ghost-admin/mixins/validation-engine", "ghost-admin/services/ajax", "ember-concurrency"], function (_exports, _jquery, _validationEngine, _ajax, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend(_validationEngine.default, {
    application: Ember.inject.controller(),
    ajax: Ember.inject.service(),
    config: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),
    settings: Ember.inject.service(),
    submitting: false,
    loggingIn: false,
    authProperties: null,
    flowErrors: '',
    // ValidationEngine settings
    validationType: 'signin',

    init() {
      this._super(...arguments);

      this.authProperties = ['identification', 'password'];
    },

    signin: Ember.computed.alias('model'),
    actions: {
      authenticate() {
        return this.validateAndAuthenticate.perform();
      }

    },
    authenticate: (0, _emberConcurrency.task)(function* (authStrategy, authentication) {
      try {
        return yield this.session.authenticate(authStrategy, ...authentication).then(() => true); // ensure task button transitions to "success" state
      } catch (error) {
        if ((0, _ajax.isVersionMismatchError)(error)) {
          return this.notifications.showAPIError(error);
        }

        if (error && error.payload && error.payload.errors) {
          let [mainError] = error.payload.errors;
          mainError.message = (mainError.message || '').htmlSafe();
          mainError.context = (mainError.context || '').htmlSafe();
          this.set('flowErrors', mainError.context.string || mainError.message.string);

          if (mainError.context.string.match(/user with that email/i)) {
            this.get('signin.errors').add('identification', '');
          }

          if (mainError.context.string.match(/password is incorrect/i)) {
            this.get('signin.errors').add('password', '');
          }
        } else {
          console.error(error); // eslint-disable-line no-console
          // Connection errors don't return proper status message, only req.body

          this.notifications.showAlert('There was a problem on the server.', {
            type: 'error',
            key: 'session.authenticate.failed'
          });
        }
      }
    }).drop(),
    validateAndAuthenticate: (0, _emberConcurrency.task)(function* () {
      let signin = this.signin;
      let authStrategy = 'authenticator:cookie';
      this.set('flowErrors', ''); // Manually trigger events for input fields, ensuring legacy compatibility with
      // browsers and password managers that don't send proper events on autofill

      (0, _jquery.default)('#login').find('input').trigger('change'); // This is a bit dirty, but there's no other way to ensure the properties are set as well as 'signin'

      this.hasValidated.addObjects(this.authProperties);

      try {
        yield this.validate({
          property: 'signin'
        });
        return yield this.authenticate.perform(authStrategy, [signin.get('identification'), signin.get('password')]).then(() => true);
      } catch (error) {
        this.set('flowErrors', 'Please fill out the form to sign in.');
      }
    }).drop(),
    forgotten: (0, _emberConcurrency.task)(function* () {
      let email = this.get('signin.identification');
      let forgottenUrl = this.get('ghostPaths.url').api('authentication', 'passwordreset');
      let notifications = this.notifications;
      this.set('flowErrors', ''); // This is a bit dirty, but there's no other way to ensure the properties are set as well as 'forgotPassword'

      this.hasValidated.addObject('identification');

      try {
        yield this.validate({
          property: 'forgotPassword'
        });
        yield this.ajax.post(forgottenUrl, {
          data: {
            passwordreset: [{
              email
            }]
          }
        });
        notifications.showAlert('Please check your email for instructions.', {
          type: 'info',
          key: 'forgot-password.send.success'
        });
        return true;
      } catch (error) {
        // ValidationEngine throws "undefined" for failed validation
        if (!error) {
          return this.set('flowErrors', 'We need your email address to reset your password!');
        }

        if ((0, _ajax.isVersionMismatchError)(error)) {
          return notifications.showAPIError(error);
        }

        if (error && error.payload && error.payload.errors && Ember.isArray(error.payload.errors)) {
          let [{
            message
          }] = error.payload.errors;
          this.set('flowErrors', message);

          if (message.match(/no user|not found/)) {
            this.get('signin.errors').add('identification', '');
          }
        } else {
          notifications.showAPIError(error, {
            defaultErrorText: 'There was a problem with the reset, please try again.',
            key: 'forgot-password.send'
          });
        }
      }
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/signup", ["exports", "ghost-admin/services/ajax", "ember-concurrency"], function (_exports, _ajax, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    ajax: Ember.inject.service(),
    config: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),
    settings: Ember.inject.service(),
    flowErrors: '',
    profileImage: null,
    signupDetails: Ember.computed.alias('model'),
    actions: {
      validate(property) {
        return this.signupDetails.validate({
          property
        });
      },

      setImage(image) {
        this.set('profileImage', image);
      },

      submit(event) {
        event.preventDefault();
        this.signup.perform();
      }

    },
    signup: (0, _emberConcurrency.task)(function* () {
      let setupProperties = ['name', 'email', 'password', 'token'];
      let notifications = this.notifications;
      this.set('flowErrors', '');
      this.get('signupDetails.hasValidated').addObjects(setupProperties);

      try {
        yield this.signupDetails.validate();
        yield this._completeInvitation();

        try {
          yield this._authenticateWithPassword();
          yield this._sendImage.perform();
        } catch (error) {
          notifications.showAPIError(error, {
            key: 'signup.complete'
          });
        }
      } catch (error) {
        // ValidationEngine throws undefined
        if (!error) {
          this.set('flowErrors', 'Please fill out the form to complete your sign-up');
          return false;
        }

        if (error && error.payload && error.payload.errors && Ember.isArray(error.payload.errors)) {
          if ((0, _ajax.isVersionMismatchError)(error)) {
            notifications.showAPIError(error);
          }

          this.set('flowErrors', error.payload.errors[0].message);
        } else {
          notifications.showAPIError(error, {
            key: 'signup.complete'
          });
        }
      }
    }).drop(),

    _completeInvitation() {
      let authUrl = this.get('ghostPaths.url').api('authentication', 'invitation');
      let signupDetails = this.signupDetails;
      return this.ajax.post(authUrl, {
        dataType: 'json',
        data: {
          invitation: [{
            name: signupDetails.get('name'),
            email: signupDetails.get('email'),
            password: signupDetails.get('password'),
            token: signupDetails.get('token')
          }]
        }
      });
    },

    _authenticateWithPassword() {
      let email = this.get('signupDetails.email');
      let password = this.get('signupDetails.password');
      return this.session.authenticate('authenticator:cookie', email, password);
    },

    _sendImage: (0, _emberConcurrency.task)(function* () {
      let formData = new FormData();
      let imageFile = this.profileImage;
      let uploadUrl = this.get('ghostPaths.url').api('images', 'upload');

      if (imageFile) {
        formData.append('file', imageFile, imageFile.name);
        formData.append('purpose', 'profile_image');
        let user = yield this.get('session.user');
        let response = yield this.ajax.post(uploadUrl, {
          data: formData,
          processData: false,
          contentType: false,
          dataType: 'text'
        });
        let [image] = Ember.get(JSON.parse(response), 'images');
        let imageUrl = image.url;
        user.set('profileImage', imageUrl);
        return yield user.save();
      }
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/site", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    guid: Ember.computed.alias('model')
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/staff/index", ["exports", "ember-concurrency"], function (_exports, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    session: Ember.inject.service(),
    store: Ember.inject.service(),
    showInviteUserModal: false,
    inviteOrder: null,
    userOrder: null,

    init() {
      this._super(...arguments);

      this.inviteOrder = ['email'];
      this.userOrder = ['name', 'email'];
    },

    currentUser: Ember.computed.alias('model'),
    sortedInvites: Ember.computed.sort('filteredInvites', 'inviteOrder'),
    sortedActiveUsers: Ember.computed.sort('activeUsers', 'userOrder'),
    sortedSuspendedUsers: Ember.computed.sort('suspendedUsers', 'userOrder'),
    invites: Ember.computed(function () {
      return this.store.peekAll('invite');
    }),
    filteredInvites: Ember.computed('invites.@each.isNew', function () {
      return this.invites.filterBy('isNew', false);
    }),
    allUsers: Ember.computed(function () {
      return this.store.peekAll('user');
    }),
    activeUsers: Ember.computed('allUsers.@each.status', function () {
      return this.allUsers.filter(user => {
        return user.status !== 'inactive';
      });
    }),
    suspendedUsers: Ember.computed('allUsers.@each.status', function () {
      return this.allUsers.filter(user => {
        return user.status === 'inactive';
      });
    }),
    actions: {
      toggleInviteUserModal() {
        this.toggleProperty('showInviteUserModal');
      }

    },
    backgroundUpdate: (0, _emberConcurrency.task)(function* () {
      let users = this.fetchUsers.perform();
      let invites = this.fetchInvites.perform();

      try {
        yield Ember.RSVP.all([users, invites]);
      } catch (error) {
        this.send('error', error);
      }
    }),
    fetchUsers: (0, _emberConcurrency.task)(function* () {
      yield this.store.query('user', {
        limit: 'all'
      });
    }),
    fetchInvites: (0, _emberConcurrency.task)(function* () {
      if (this.currentUser.isAuthorOrContributor) {
        return;
      } // ensure roles are loaded before invites. Invites do not have embedded
      // role records which means Ember Data will throw errors when trying to
      // read the invite.role data when the role has not yet been loaded


      yield this.store.query('role', {
        limit: 'all'
      });
      return yield this.store.query('invite', {
        limit: 'all'
      });
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/staff/user", ["exports", "ghost-admin/utils/bound-one-way", "ghost-admin/utils/isNumber", "validator", "ghost-admin/utils/window-proxy", "ember-concurrency"], function (_exports, _boundOneWay, _isNumber, _validator, _windowProxy, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    ajax: Ember.inject.service(),
    config: Ember.inject.service(),
    dropdown: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),
    slugGenerator: Ember.inject.service(),
    leaveSettingsTransition: null,
    dirtyAttributes: false,
    showDeleteUserModal: false,
    showSuspendUserModal: false,
    showTransferOwnerModal: false,
    showUploadCoverModal: false,
    showUplaodImageModal: false,
    _scratchFacebook: null,
    _scratchTwitter: null,
    saveHandlers: (0, _emberConcurrency.taskGroup)().enqueue(),
    user: Ember.computed.alias('model'),
    currentUser: Ember.computed.alias('session.user'),
    email: Ember.computed.readOnly('user.email'),
    slugValue: (0, _boundOneWay.default)('user.slug'),
    canChangeEmail: Ember.computed.not('isAdminUserOnOwnerProfile'),
    canChangePassword: Ember.computed.not('isAdminUserOnOwnerProfile'),
    canMakeOwner: Ember.computed.and('currentUser.isOwner', 'isNotOwnProfile', 'user.isAdmin', 'isNotSuspended'),
    isAdminUserOnOwnerProfile: Ember.computed.and('currentUser.isAdmin', 'user.isOwner'),
    isNotOwnersProfile: Ember.computed.not('user.isOwner'),
    isNotSuspended: Ember.computed.not('user.isSuspended'),
    rolesDropdownIsVisible: Ember.computed.and('currentUser.isOwnerOrAdmin', 'isNotOwnProfile', 'isNotOwnersProfile'),
    userActionsAreVisible: Ember.computed.or('deleteUserActionIsVisible', 'canMakeOwner'),
    isNotOwnProfile: Ember.computed.not('isOwnProfile'),
    isOwnProfile: Ember.computed('user.id', 'currentUser.id', function () {
      return this.get('user.id') === this.get('currentUser.id');
    }),
    deleteUserActionIsVisible: Ember.computed('currentUser.{isOwnerOrAdmin,isEditor}', 'user.{isOwner,isAuthorOrContributor}', 'isOwnProfile', function () {
      // users can't delete themselves
      if (this.isOwnProfile) {
        return false;
      }

      if ( // owners/admins can delete any non-owner user
      this.currentUser.get('isOwnerOrAdmin') && !this.user.isOwner || // editors can delete any author or contributor
      this.currentUser.get('isEditor') && this.user.isAuthorOrContributor) {
        return true;
      }

      return false;
    }),
    coverTitle: Ember.computed('user.name', function () {
      return "".concat(this.get('user.name'), "'s Cover Image");
    }),
    roles: Ember.computed(function () {
      return this.store.query('role', {
        permissions: 'assign'
      });
    }),
    actions: {
      changeRole(newRole) {
        this.user.set('role', newRole);
        this.set('dirtyAttributes', true);
      },

      toggleDeleteUserModal() {
        if (this.deleteUserActionIsVisible) {
          this.toggleProperty('showDeleteUserModal');
        }
      },

      suspendUser() {
        this.user.set('status', 'inactive');
        return this.save.perform();
      },

      toggleSuspendUserModal() {
        if (this.deleteUserActionIsVisible) {
          this.toggleProperty('showSuspendUserModal');
        }
      },

      unsuspendUser() {
        this.user.set('status', 'active');
        return this.save.perform();
      },

      toggleUnsuspendUserModal() {
        if (this.deleteUserActionIsVisible) {
          this.toggleProperty('showUnsuspendUserModal');
        }
      },

      validateFacebookUrl() {
        let newUrl = this._scratchFacebook;
        let oldUrl = this.get('user.facebook');
        let errMessage = ''; // reset errors and validation

        this.get('user.errors').remove('facebook');
        this.get('user.hasValidated').removeObject('facebook');

        if (newUrl === '') {
          // Clear out the Facebook url
          this.set('user.facebook', '');
          return;
        } // _scratchFacebook will be null unless the user has input something


        if (!newUrl) {
          newUrl = oldUrl;
        }

        try {
          // strip any facebook URLs out
          newUrl = newUrl.replace(/(https?:\/\/)?(www\.)?facebook\.com/i, ''); // don't allow any non-facebook urls

          if (newUrl.match(/^(http|\/\/)/i)) {
            throw 'invalid url';
          } // strip leading / if we have one then concat to full facebook URL


          newUrl = newUrl.replace(/^\//, '');
          newUrl = "https://www.facebook.com/".concat(newUrl); // don't allow URL if it's not valid

          if (!_validator.default.isURL(newUrl)) {
            throw 'invalid url';
          }

          this.set('user.facebook', '');
          Ember.run.schedule('afterRender', this, function () {
            this.set('user.facebook', newUrl);
          });
        } catch (e) {
          if (e === 'invalid url') {
            errMessage = 'The URL must be in a format like ' + 'https://www.facebook.com/yourPage';
            this.get('user.errors').add('facebook', errMessage);
            return;
          }

          throw e;
        } finally {
          this.get('user.hasValidated').pushObject('facebook');
        }
      },

      validateTwitterUrl() {
        let newUrl = this._scratchTwitter;
        let oldUrl = this.get('user.twitter');
        let errMessage = ''; // reset errors and validation

        this.get('user.errors').remove('twitter');
        this.get('user.hasValidated').removeObject('twitter');

        if (newUrl === '') {
          // Clear out the Twitter url
          this.set('user.twitter', '');
          return;
        } // _scratchTwitter will be null unless the user has input something


        if (!newUrl) {
          newUrl = oldUrl;
        }

        if (newUrl.match(/(?:twitter\.com\/)(\S+)/) || newUrl.match(/([a-z\d.]+)/i)) {
          let username = [];

          if (newUrl.match(/(?:twitter\.com\/)(\S+)/)) {
            [, username] = newUrl.match(/(?:twitter\.com\/)(\S+)/);
          } else {
            [username] = newUrl.match(/([^/]+)\/?$/mi);
          } // check if username starts with http or www and show error if so


          if (username.match(/^(http|www)|(\/)/) || !username.match(/^[a-z\d._]{1,15}$/mi)) {
            errMessage = !username.match(/^[a-z\d._]{1,15}$/mi) ? 'Your Username is not a valid Twitter Username' : 'The URL must be in a format like https://twitter.com/yourUsername';
            this.get('user.errors').add('twitter', errMessage);
            this.get('user.hasValidated').pushObject('twitter');
            return;
          }

          newUrl = "https://twitter.com/".concat(username);
          this.get('user.hasValidated').pushObject('twitter');
          this.set('user.twitter', '');
          Ember.run.schedule('afterRender', this, function () {
            this.set('user.twitter', newUrl);
          });
        } else {
          errMessage = 'The URL must be in a format like ' + 'https://twitter.com/yourUsername';
          this.get('user.errors').add('twitter', errMessage);
          this.get('user.hasValidated').pushObject('twitter');
          return;
        }
      },

      transferOwnership() {
        let user = this.user;
        let url = this.get('ghostPaths.url').api('users', 'owner');
        this.dropdown.closeDropdowns();
        return this.ajax.put(url, {
          data: {
            owner: [{
              id: user.get('id')
            }]
          }
        }).then(response => {
          // manually update the roles for the users that just changed roles
          // because store.pushPayload is not working with embedded relations
          if (response && Ember.isArray(response.users)) {
            response.users.forEach(userJSON => {
              let user = this.store.peekRecord('user', userJSON.id);
              let role = this.store.peekRecord('role', userJSON.roles[0].id);
              user.set('role', role);
            });
          }

          this.notifications.showAlert("Ownership successfully transferred to ".concat(user.get('name')), {
            type: 'success',
            key: 'owner.transfer.success'
          });
        }).catch(error => {
          this.notifications.showAPIError(error, {
            key: 'owner.transfer'
          });
        });
      },

      toggleLeaveSettingsModal(transition) {
        let leaveTransition = this.leaveSettingsTransition;

        if (!transition && this.showLeaveSettingsModal) {
          this.set('leaveSettingsTransition', null);
          this.set('showLeaveSettingsModal', false);
          return;
        }

        if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
          this.set('leaveSettingsTransition', transition); // if a save is running, wait for it to finish then transition

          if (this.get('saveHandlers.isRunning')) {
            return this.get('saveHandlers.last').then(() => {
              transition.retry();
            });
          } // we genuinely have unsaved data, show the modal


          this.set('showLeaveSettingsModal', true);
        }
      },

      leaveSettings() {
        let transition = this.leaveSettingsTransition;
        let user = this.user;

        if (!transition) {
          this.notifications.showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', {
            type: 'error'
          });
          return;
        } // roll back changes on user props


        user.rollbackAttributes(); // roll back the slugValue property

        if (this.dirtyAttributes) {
          this.set('slugValue', user.get('slug'));
          this.set('dirtyAttributes', false);
        }

        return transition.retry();
      },

      toggleTransferOwnerModal() {
        if (this.canMakeOwner) {
          this.toggleProperty('showTransferOwnerModal');
        }
      },

      toggleUploadCoverModal() {
        this.toggleProperty('showUploadCoverModal');
      },

      toggleUploadImageModal() {
        this.toggleProperty('showUploadImageModal');
      },

      // TODO: remove those mutation actions once we have better
      // inline validations that auto-clear errors on input
      updatePassword(password) {
        this.set('user.password', password);
        this.get('user.hasValidated').removeObject('password');
        this.get('user.errors').remove('password');
      },

      updateNewPassword(password) {
        this.set('user.newPassword', password);
        this.get('user.hasValidated').removeObject('newPassword');
        this.get('user.errors').remove('newPassword');
      },

      updateNe2Password(password) {
        this.set('user.ne2Password', password);
        this.get('user.hasValidated').removeObject('ne2Password');
        this.get('user.errors').remove('ne2Password');
      }

    },

    _exportDb(filename) {
      let exportUrl = this.get('ghostPaths.url').api('db');
      let downloadURL = "".concat(exportUrl, "?filename=").concat(filename);
      let iframe = document.getElementById('iframeDownload');

      if (!iframe) {
        iframe = document.createElement('iframe');
        iframe.id = 'iframeDownload';
        iframe.style.display = 'none';
        document.body.append(iframe);
      }

      iframe.setAttribute('src', downloadURL);
    },

    deleteUser: (0, _emberConcurrency.task)(function* () {
      try {
        const result = yield this.user.destroyRecord();

        if (result._meta && result._meta.filename) {
          this._exportDb(result._meta.filename); // give the iframe some time to trigger the download before
          // it's removed from the dom when transitioning


          yield (0, _emberConcurrency.timeout)(300);
        }

        this.notifications.closeAlerts('user.delete');
        this.store.unloadAll('post');
        this.transitionToRoute('staff');
      } catch (error) {
        this.notifications.showAlert('The user could not be deleted. Please try again.', {
          type: 'error',
          key: 'user.delete.failed'
        });
        throw error;
      }
    }),
    updateSlug: (0, _emberConcurrency.task)(function* (newSlug) {
      let slug = this.get('user.slug');
      newSlug = newSlug || slug;
      newSlug = newSlug.trim(); // Ignore unchanged slugs or candidate slugs that are empty

      if (!newSlug || slug === newSlug) {
        this.set('slugValue', slug);
        return true;
      }

      let serverSlug = yield this.slugGenerator.generateSlug('user', newSlug); // If after getting the sanitized and unique slug back from the API
      // we end up with a slug that matches the existing slug, abort the change

      if (serverSlug === slug) {
        return true;
      } // Because the server transforms the candidate slug by stripping
      // certain characters and appending a number onto the end of slugs
      // to enforce uniqueness, there are cases where we can get back a
      // candidate slug that is a duplicate of the original except for
      // the trailing incrementor (e.g., this-is-a-slug and this-is-a-slug-2)
      // get the last token out of the slug candidate and see if it's a number


      let slugTokens = serverSlug.split('-');
      let check = Number(slugTokens.pop()); // if the candidate slug is the same as the existing slug except
      // for the incrementor then the existing slug should be used

      if ((0, _isNumber.default)(check) && check > 0) {
        if (slug === slugTokens.join('-') && serverSlug !== newSlug) {
          this.set('slugValue', slug);
          return true;
        }
      }

      this.set('slugValue', serverSlug);
      this.set('dirtyAttributes', true);
      return true;
    }).group('saveHandlers'),
    save: (0, _emberConcurrency.task)(function* () {
      let user = this.user;
      let slugValue = this.slugValue;
      let slugChanged;

      if (user.get('slug') !== slugValue) {
        slugChanged = true;
        user.set('slug', slugValue);
      }

      try {
        user = yield user.save({
          format: false
        }); // If the user's slug has changed, change the URL and replace
        // the history so refresh and back button still work

        if (slugChanged) {
          let currentPath = window.location.hash;
          let newPath = currentPath.split('/');
          newPath[newPath.length - 1] = user.get('slug');
          newPath = newPath.join('/');

          _windowProxy.default.replaceState({
            path: newPath
          }, '', newPath);
        }

        this.set('dirtyAttributes', false);
        this.notifications.closeAlerts('user.update');
        return user;
      } catch (error) {
        // validation engine returns undefined so we have to check
        // before treating the failure as an API error
        if (error) {
          this.notifications.showAPIError(error, {
            key: 'user.update'
          });
        }
      }
    }).group('saveHandlers')
  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/tag", ["exports", "ghost-admin/utils/bound-one-way", "@tryghost/string", "ember-concurrency"], function (_exports, _boundOneWay, _string, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const SCRATCH_PROPS = ['name', 'slug', 'description', 'metaTitle', 'metaDescription'];

  var _default = Ember.Controller.extend({
    notifications: Ember.inject.service(),
    router: Ember.inject.service(),
    showDeleteTagModal: false,
    tag: Ember.computed.alias('model'),
    scratchTag: Ember.computed('tag', function () {
      let scratchTag = Ember.Object.create({
        tag: this.tag
      });
      SCRATCH_PROPS.forEach(prop => Ember.defineProperty(scratchTag, prop, (0, _boundOneWay.default)("tag.".concat(prop))));
      return scratchTag;
    }),
    actions: {
      setProperty(propKey, value) {
        this._saveTagProperty(propKey, value);
      },

      toggleDeleteTagModal() {
        this.toggleProperty('showDeleteTagModal');
      },

      deleteTag() {
        return this.tag.destroyRecord().then(() => {
          return this.transitionToRoute('tags');
        }, error => {
          return this.notifications.showAPIError(error, {
            key: 'tag.delete'
          });
        });
      },

      save() {
        return this.save.perform();
      },

      toggleUnsavedChangesModal(transition) {
        let leaveTransition = this.leaveScreenTransition;

        if (!transition && this.showUnsavedChangesModal) {
          this.set('leaveScreenTransition', null);
          this.set('showUnsavedChangesModal', false);
          return;
        }

        if (!leaveTransition || transition.targetName === leaveTransition.targetName) {
          this.set('leaveScreenTransition', transition); // if a save is running, wait for it to finish then transition

          if (this.save.isRunning) {
            return this.save.last.then(() => {
              transition.retry();
            });
          } // we genuinely have unsaved data, show the modal


          this.set('showUnsavedChangesModal', true);
        }
      },

      leaveScreen() {
        this.tag.rollbackAttributes();
        return this.leaveScreenTransition.retry();
      }

    },
    saveTask: (0, _emberConcurrency.task)(function* () {
      let {
        tag,
        scratchTag
      } = this; // if Cmd+S is pressed before the field loses focus make sure we're
      // saving the intended property values

      let scratchProps = scratchTag.getProperties(SCRATCH_PROPS);
      tag.setProperties(scratchProps);

      try {
        yield tag.save(); // replace 'new' route with 'tag' route

        this.replaceRoute('tag', tag);
        return tag;
      } catch (error) {
        if (error) {
          this.notifications.showAPIError(error, {
            key: 'tag.save'
          });
        }
      }
    }),
    save: (0, _emberConcurrency.task)(function* () {
      yield this.saveTask.perform();
      yield (0, _emberConcurrency.timeout)(2500);

      if (this.get('saveTask.last.isSuccessful') && this.get('saveTask.last.value')) {
        // Reset last task to bring button back to idle state
        yield this.set('saveTask.last', null);
      }
    }).drop(),
    fetchTag: (0, _emberConcurrency.task)(function* (slug) {
      this.set('isLoading', true);
      yield this.store.queryRecord('tag', {
        slug
      }).then(tag => {
        this.set('tag', tag);
        this.set('isLoading', false);
        return tag;
      });
    }),

    _saveTagProperty(propKey, newValue) {
      let tag = this.tag;
      let currentValue = tag.get(propKey);

      if (newValue) {
        newValue = newValue.trim();
      } // avoid modifying empty values and triggering inadvertant unsaved changes modals


      if (newValue !== false && !newValue && !currentValue) {
        return;
      } // Quit if there was no change


      if (newValue === currentValue) {
        return;
      }

      tag.set(propKey, newValue); // Generate slug based on name for new tag when empty

      if (propKey === 'name' && !tag.slug && tag.isNew) {
        let slugValue = (0, _string.slugify)(newValue);

        if (/^#/.test(newValue)) {
          slugValue = 'hash-' + slugValue;
        }

        tag.set('slug', slugValue);
      } // TODO: This is required until .validate/.save mark fields as validated


      tag.get('hasValidated').addObject(propKey);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/controllers/tags", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Controller.extend({
    queryParams: ['type'],
    type: 'public',
    tags: Ember.computed.alias('model'),
    filteredTags: Ember.computed('tags.@each.isNew', 'type', function () {
      return this.tags.filter(tag => {
        return !tag.isNew && (!this.type || tag.visibility === this.type);
      });
    }),
    // tags are sorted by name
    sortedTags: Ember.computed.sort('filteredTags', function (tagA, tagB) {
      // ignorePunctuation means the # in internal tag names is ignored
      return tagA.name.localeCompare(tagB.name, undefined, {
        ignorePunctuation: true
      });
    }),
    actions: {
      changeType(type) {
        this.set('type', type);
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/data-adapter", ["exports", "@ember-data/debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _debug.default;
    }
  });
});
;define("ghost-admin/errors/email-failed-error", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  class EmailFailedError extends Error {
    constructor(message) {
      super(message);
      this.name = 'EmailFailedError';
    }

  }

  _exports.default = EmailFailedError;
});
;define("ghost-admin/helpers/-element", ["exports", "ember-element-helper/helpers/-element"], function (_exports, _element) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _element.default;
    }
  });
});
;define("ghost-admin/helpers/and", ["exports", "ember-truth-helpers/helpers/and"], function (_exports, _and) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _and.default;
    }
  });
  Object.defineProperty(_exports, "and", {
    enumerable: true,
    get: function () {
      return _and.and;
    }
  });
});
;define("ghost-admin/helpers/app-version", ["exports", "ghost-admin/config/environment", "ember-cli-app-version/utils/regexp"], function (_exports, _environment, _regexp) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.appVersion = appVersion;
  _exports.default = void 0;

  function appVersion(_, hash = {}) {
    const version = _environment.default.APP.version; // e.g. 1.0.0-alpha.1+4jds75hf
    // Allow use of 'hideSha' and 'hideVersion' For backwards compatibility

    let versionOnly = hash.versionOnly || hash.hideSha;
    let shaOnly = hash.shaOnly || hash.hideVersion;
    let match = null;

    if (versionOnly) {
      if (hash.showExtended) {
        match = version.match(_regexp.versionExtendedRegExp); // 1.0.0-alpha.1
      } // Fallback to just version


      if (!match) {
        match = version.match(_regexp.versionRegExp); // 1.0.0
      }
    }

    if (shaOnly) {
      match = version.match(_regexp.shaRegExp); // 4jds75hf
    }

    return match ? match[0] : version;
  }

  var _default = Ember.Helper.helper(appVersion);

  _exports.default = _default;
});
;define("ghost-admin/helpers/assign", ["exports", "ember-assign-helper/helpers/assign"], function (_exports, _assign) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _assign.default;
    }
  });
  Object.defineProperty(_exports, "assign", {
    enumerable: true,
    get: function () {
      return _assign.assign;
    }
  });
});
;define("ghost-admin/helpers/author-names", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.authorNames = authorNames;
  _exports.default = void 0;

  function authorNames([authors]
  /*, hash*/
  ) {
    if (!authors || Ember.isEmpty(authors)) {
      return;
    }

    return authors.mapBy('name').join(', ');
  }

  var _default = Ember.Helper.helper(authorNames);

  _exports.default = _default;
});
;define("ghost-admin/helpers/background-image-style", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.backgroundImageStyle = backgroundImageStyle;
  _exports.default = void 0;

  function backgroundImageStyle([url]
  /*, hash*/
  ) {
    if (url) {
      let safeUrl = encodeURI(decodeURI(url));
      return Ember.String.htmlSafe("background-image: url(".concat(safeUrl, ");"));
    }

    return '';
  }

  var _default = Ember.Helper.helper(backgroundImageStyle);

  _exports.default = _default;
});
;define("ghost-admin/helpers/camelize", ["exports", "ember-cli-string-helpers/helpers/camelize"], function (_exports, _camelize) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _camelize.default;
    }
  });
  Object.defineProperty(_exports, "camelize", {
    enumerable: true,
    get: function () {
      return _camelize.camelize;
    }
  });
});
;define("ghost-admin/helpers/cancel-all", ["exports", "ember-concurrency/helpers/cancel-all"], function (_exports, _cancelAll) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _cancelAll.default;
    }
  });
});
;define("ghost-admin/helpers/capitalize", ["exports", "ember-cli-string-helpers/helpers/capitalize"], function (_exports, _capitalize) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _capitalize.default;
    }
  });
  Object.defineProperty(_exports, "capitalize", {
    enumerable: true,
    get: function () {
      return _capitalize.capitalize;
    }
  });
});
;define("ghost-admin/helpers/classify", ["exports", "ember-cli-string-helpers/helpers/classify"], function (_exports, _classify) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _classify.default;
    }
  });
  Object.defineProperty(_exports, "classify", {
    enumerable: true,
    get: function () {
      return _classify.classify;
    }
  });
});
;define("ghost-admin/helpers/clean-basic-html", ["exports", "koenig-editor/helpers/clean-basic-html"], function (_exports, _cleanBasicHtml) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _cleanBasicHtml.default;
    }
  });
});
;define("ghost-admin/helpers/dasherize", ["exports", "ember-cli-string-helpers/helpers/dasherize"], function (_exports, _dasherize) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _dasherize.default;
    }
  });
  Object.defineProperty(_exports, "dasherize", {
    enumerable: true,
    get: function () {
      return _dasherize.dasherize;
    }
  });
});
;define("ghost-admin/helpers/ember-power-calendar-day-classes", ["exports", "ember-power-calendar/helpers/ember-power-calendar-day-classes"], function (_exports, _emberPowerCalendarDayClasses) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _emberPowerCalendarDayClasses.default;
    }
  });
  Object.defineProperty(_exports, "emberPowerCalendarDayClasses", {
    enumerable: true,
    get: function () {
      return _emberPowerCalendarDayClasses.emberPowerCalendarDayClasses;
    }
  });
});
;define("ghost-admin/helpers/ember-power-select-is-group", ["exports", "ember-power-select/helpers/ember-power-select-is-group"], function (_exports, _emberPowerSelectIsGroup) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _emberPowerSelectIsGroup.default;
    }
  });
  Object.defineProperty(_exports, "emberPowerSelectIsGroup", {
    enumerable: true,
    get: function () {
      return _emberPowerSelectIsGroup.emberPowerSelectIsGroup;
    }
  });
});
;define("ghost-admin/helpers/ember-power-select-is-selected", ["exports", "ember-power-select/helpers/ember-power-select-is-selected"], function (_exports, _emberPowerSelectIsSelected) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _emberPowerSelectIsSelected.default;
    }
  });
  Object.defineProperty(_exports, "emberPowerSelectIsSelected", {
    enumerable: true,
    get: function () {
      return _emberPowerSelectIsSelected.emberPowerSelectIsSelected;
    }
  });
});
;define("ghost-admin/helpers/eq", ["exports", "ember-truth-helpers/helpers/equal"], function (_exports, _equal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _equal.default;
    }
  });
  Object.defineProperty(_exports, "equal", {
    enumerable: true,
    get: function () {
      return _equal.equal;
    }
  });
});
;define("ghost-admin/helpers/event-name", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.eventName = eventName;
  _exports.default = _exports.AVAILABLE_EVENTS = void 0;
  const AVAILABLE_EVENTS = [// GROUPNAME: Global
  {
    event: 'site.changed',
    name: 'Site changed (rebuild)',
    group: 'Global'
  }, // GROUPNAME: Posts
  {
    event: 'post.added',
    name: 'Post created',
    group: 'Posts'
  }, {
    event: 'post.deleted',
    name: 'Post deleted',
    group: 'Posts'
  }, {
    event: 'post.edited',
    name: 'Post updated',
    group: 'Posts'
  }, {
    event: 'post.published',
    name: 'Post published',
    group: 'Posts'
  }, {
    event: 'post.published.edited',
    name: 'Published post updated',
    group: 'Posts'
  }, {
    event: 'post.unpublished',
    name: 'Post unpublished',
    group: 'Posts'
  }, {
    event: 'post.tag.attached',
    name: 'Tag added to post',
    group: 'Posts'
  }, {
    event: 'post.tag.detached',
    name: 'Tag removed from post',
    group: 'Posts'
  }, // GROUPNAME: Pages
  {
    event: 'page.added',
    name: 'Page created',
    group: 'Pages'
  }, {
    event: 'page.deleted',
    name: 'Page deleted',
    group: 'Pages'
  }, {
    event: 'page.edited',
    name: 'Page updated',
    group: 'Pages'
  }, {
    event: 'page.published',
    name: 'Page published',
    group: 'Pages'
  }, {
    event: 'page.published.edited',
    name: 'Published page updated',
    group: 'Pages'
  }, {
    event: 'page.unpublished',
    name: 'Page unpublished',
    group: 'Pages'
  }, {
    event: 'page.tag.attached',
    name: 'Tag added to page',
    group: 'Pages'
  }, {
    event: 'page.tag.detached',
    name: 'Tag removed from page',
    group: 'Pages'
  }, // GROUPNAME: Tags
  {
    event: 'tag.added',
    name: 'Tag created',
    group: 'Tags'
  }, {
    event: 'tag.edited',
    name: 'Tag updated',
    group: 'Tags'
  }, {
    event: 'tag.deleted',
    name: 'Tag deleted',
    group: 'Tags'
  }, // GROUPNAME: Members
  {
    event: 'member.added',
    name: 'Member added',
    group: 'Members'
  }, {
    event: 'member.edited',
    name: 'Member updated',
    group: 'Members'
  }, {
    event: 'member.deleted',
    name: 'Member deleted',
    group: 'Members'
  }];
  _exports.AVAILABLE_EVENTS = AVAILABLE_EVENTS;

  function eventName([event]
  /*, hash*/
  ) {
    let match = AVAILABLE_EVENTS.findBy('event', event);
    return match ? match.name : event;
  }

  var _default = Ember.Helper.helper(eventName);

  _exports.default = _default;
});
;define("ghost-admin/helpers/gh-count-characters", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.countCharacters = countCharacters;
  _exports.default = void 0;

  function countCharacters(params) {
    if (!params || !params.length) {
      return;
    }

    let el = document.createElement('span');
    let content = params[0] || ''; // convert to array so that we get accurate symbol counts for multibyte chars
    // this will still count emoji+modifer as two chars

    let {
      length
    } = Array.from(content);
    el.className = 'word-count';

    if (length > 180) {
      el.style.color = '#f05230';
    } else {
      el.style.color = '#738a94';
    }

    el.innerHTML = 200 - length;
    return Ember.String.htmlSafe(el.outerHTML);
  }

  var _default = Ember.Helper.helper(function (params) {
    return countCharacters(params);
  });

  _exports.default = _default;
});
;define("ghost-admin/helpers/gh-count-down-characters", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.countDownCharacters = countDownCharacters;
  _exports.default = void 0;

  function countDownCharacters(params) {
    if (!params || params.length < 2) {
      return;
    }

    let el = document.createElement('span');
    let [content, maxCharacters] = params; // convert to array so that we get accurate symbol counts for multibyte chars
    // this will still count emoji+modifer as two chars

    let {
      length
    } = Array.from(content || '');
    el.className = 'word-count';

    if (length > maxCharacters) {
      el.style.color = '#E25440';
    } else {
      el.style.color = '#9FBB58';
    }

    el.innerHTML = length;
    return Ember.String.htmlSafe(el.outerHTML);
  }

  var _default = Ember.Helper.helper(function (params) {
    return countDownCharacters(params);
  });

  _exports.default = _default;
});
;define("ghost-admin/helpers/gh-format-post-time", ["exports", "moment"], function (_exports, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Helper.extend({
    settings: Ember.inject.service(),

    compute([timeago], {
      draft,
      scheduled,
      published
    }) {
      (true && !(timeago) && Ember.assert('You must pass a time to the gh-format-post-time helper', timeago));

      if (draft) {
        // No special handling for drafts, just use moment.from
        return (0, _moment.default)(timeago).from(_moment.default.utc());
      }

      let timezone = this.get('settings.activeTimezone');

      let time = _moment.default.tz(timeago, timezone);

      let now = _moment.default.tz(_moment.default.utc(), timezone); // If not a draft and post was published <= 15 minutes ago
      // or scheduled to be published <= 15 minutes from now, use moment.from


      if (Math.abs(now.diff(time, 'minutes')) <= 15) {
        return time.from(now);
      } // If scheduled for or published on the same day, render the time + Today


      if (time.isSame(now, 'day')) {
        let formatted = time.format('HH:mm [Today]');
        return scheduled ? "at ".concat(formatted) : formatted;
      } // if published yesterday, render time + yesterday
      // This check comes before scheduled, because there are likely to be more published
      // posts than scheduled posts.


      if (published && time.isSame(now.clone().subtract(1, 'days').startOf('day'), 'day')) {
        return time.format('HH:mm [Yesterday]');
      } // if scheduled for tomorrow, render the time + Tomorrow


      if (scheduled && time.isSame(now.clone().add(1, 'days').startOf('day'), 'day')) {
        return time.format('[at] HH:mm [Tomorrow]');
      } // Else, render just the date if published, or the time & date if scheduled


      let format = scheduled ? '[at] HH:mm [on] DD MMM YYYY' : 'DD MMM YYYY';
      return time.format(format);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/helpers/gh-user-can-admin", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ghUserCanAdmin = ghUserCanAdmin;
  _exports.default = void 0;

  // Handlebars Helper {{gh-user-can-admin}} group users by admin and owner using if, or group them author using unless
  // Usage: call helper as with aparameter of session.user
  // e.g - {{#if (gh-user-can-admin session.user)}} 'block content' {{/if}}
  // @param session.user
  function ghUserCanAdmin(params) {
    return !!params[0].get('isOwnerOrAdmin');
  }

  var _default = Ember.Helper.helper(function (params) {
    return ghUserCanAdmin(params);
  });

  _exports.default = _default;
});
;define("ghost-admin/helpers/gravatar", ["exports", "blueimp-md5"], function (_exports, _blueimpMd) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Helper.extend({
    config: Ember.inject.service(),

    compute([email], {
      size = 180,
      d = 'blank'
    }
    /*, hash*/
    ) {
      if (!this.get('config.useGravatar')) {
        return;
      }

      if (!email || Ember.isEmpty(email)) {
        return;
      }

      return "https://www.gravatar.com/avatar/".concat((0, _blueimpMd.default)(email), "?s=").concat(size, "&d=").concat(d);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/helpers/gt", ["exports", "ember-truth-helpers/helpers/gt"], function (_exports, _gt) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _gt.default;
    }
  });
  Object.defineProperty(_exports, "gt", {
    enumerable: true,
    get: function () {
      return _gt.gt;
    }
  });
});
;define("ghost-admin/helpers/gte", ["exports", "ember-truth-helpers/helpers/gte"], function (_exports, _gte) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _gte.default;
    }
  });
  Object.defineProperty(_exports, "gte", {
    enumerable: true,
    get: function () {
      return _gte.gte;
    }
  });
});
;define("ghost-admin/helpers/highlighted-text", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.highlightedText = highlightedText;
  _exports.default = void 0;

  function highlightedText([text, termToHighlight]) {
    // replace any non-word character with an escaped character
    let sanitisedTerm = termToHighlight.replace(new RegExp(/\W/ig), '\\$&');
    return Ember.String.htmlSafe(text.replace(new RegExp(sanitisedTerm, 'ig'), '<span class="highlight">$&</span>'));
  }

  var _default = Ember.Helper.helper(highlightedText);

  _exports.default = _default;
});
;define("ghost-admin/helpers/html-safe", ["exports", "ember-cli-string-helpers/helpers/html-safe"], function (_exports, _htmlSafe) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _htmlSafe.default;
    }
  });
  Object.defineProperty(_exports, "htmlSafe", {
    enumerable: true,
    get: function () {
      return _htmlSafe.htmlSafe;
    }
  });
});
;define("ghost-admin/helpers/humanize", ["exports", "ember-cli-string-helpers/helpers/humanize"], function (_exports, _humanize) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _humanize.default;
    }
  });
  Object.defineProperty(_exports, "humanize", {
    enumerable: true,
    get: function () {
      return _humanize.humanize;
    }
  });
});
;define("ghost-admin/helpers/integration-icon-style", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.integrationLogoStyle = integrationLogoStyle;
  _exports.default = void 0;

  function integrationLogoStyle([integration]
  /*, hash*/
  ) {
    if (integration.iconImage) {
      let style = "background-image:url(".concat(integration.iconImage, ");background-size:36px;");
      return Ember.String.htmlSafe(style);
    }
  }

  var _default = Ember.Helper.helper(integrationLogoStyle);

  _exports.default = _default;
});
;define("ghost-admin/helpers/is-after", ["exports", "ember-moment/helpers/is-after"], function (_exports, _isAfter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _isAfter.default;
    }
  });
});
;define("ghost-admin/helpers/is-array", ["exports", "ember-truth-helpers/helpers/is-array"], function (_exports, _isArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _isArray.default;
    }
  });
  Object.defineProperty(_exports, "isArray", {
    enumerable: true,
    get: function () {
      return _isArray.isArray;
    }
  });
});
;define("ghost-admin/helpers/is-before", ["exports", "ember-moment/helpers/is-before"], function (_exports, _isBefore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _isBefore.default;
    }
  });
});
;define("ghost-admin/helpers/is-between", ["exports", "ember-moment/helpers/is-between"], function (_exports, _isBetween) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _isBetween.default;
    }
  });
});
;define("ghost-admin/helpers/is-empty", ["exports", "ember-truth-helpers/helpers/is-empty"], function (_exports, _isEmpty) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _isEmpty.default;
    }
  });
});
;define("ghost-admin/helpers/is-equal", ["exports", "ember-truth-helpers/helpers/is-equal"], function (_exports, _isEqual) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _isEqual.default;
    }
  });
  Object.defineProperty(_exports, "isEqual", {
    enumerable: true,
    get: function () {
      return _isEqual.isEqual;
    }
  });
});
;define("ghost-admin/helpers/is-same-or-after", ["exports", "ember-moment/helpers/is-same-or-after"], function (_exports, _isSameOrAfter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _isSameOrAfter.default;
    }
  });
});
;define("ghost-admin/helpers/is-same-or-before", ["exports", "ember-moment/helpers/is-same-or-before"], function (_exports, _isSameOrBefore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _isSameOrBefore.default;
    }
  });
});
;define("ghost-admin/helpers/is-same", ["exports", "ember-moment/helpers/is-same"], function (_exports, _isSame) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _isSame.default;
    }
  });
});
;define("ghost-admin/helpers/kg-style", ["exports", "koenig-editor/helpers/kg-style"], function (_exports, _kgStyle) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _kgStyle.default;
    }
  });
  Object.defineProperty(_exports, "kgStyle", {
    enumerable: true,
    get: function () {
      return _kgStyle.kgStyle;
    }
  });
});
;define("ghost-admin/helpers/lf-lock-model", ["exports", "liquid-fire/helpers/lf-lock-model"], function (_exports, _lfLockModel) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _lfLockModel.default;
    }
  });
  Object.defineProperty(_exports, "lfLockModel", {
    enumerable: true,
    get: function () {
      return _lfLockModel.lfLockModel;
    }
  });
});
;define("ghost-admin/helpers/lf-or", ["exports", "liquid-fire/helpers/lf-or"], function (_exports, _lfOr) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _lfOr.default;
    }
  });
  Object.defineProperty(_exports, "lfOr", {
    enumerable: true,
    get: function () {
      return _lfOr.lfOr;
    }
  });
});
;define("ghost-admin/helpers/lowercase", ["exports", "ember-cli-string-helpers/helpers/lowercase"], function (_exports, _lowercase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _lowercase.default;
    }
  });
  Object.defineProperty(_exports, "lowercase", {
    enumerable: true,
    get: function () {
      return _lowercase.lowercase;
    }
  });
});
;define("ghost-admin/helpers/lt", ["exports", "ember-truth-helpers/helpers/lt"], function (_exports, _lt) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _lt.default;
    }
  });
  Object.defineProperty(_exports, "lt", {
    enumerable: true,
    get: function () {
      return _lt.lt;
    }
  });
});
;define("ghost-admin/helpers/lte", ["exports", "ember-truth-helpers/helpers/lte"], function (_exports, _lte) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _lte.default;
    }
  });
  Object.defineProperty(_exports, "lte", {
    enumerable: true,
    get: function () {
      return _lte.lte;
    }
  });
});
;define("ghost-admin/helpers/moment-add", ["exports", "ember-moment/helpers/moment-add"], function (_exports, _momentAdd) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _momentAdd.default;
    }
  });
});
;define("ghost-admin/helpers/moment-calendar", ["exports", "ember-moment/helpers/moment-calendar"], function (_exports, _momentCalendar) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _momentCalendar.default;
    }
  });
});
;define("ghost-admin/helpers/moment-diff", ["exports", "ember-moment/helpers/moment-diff"], function (_exports, _momentDiff) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _momentDiff.default;
    }
  });
});
;define("ghost-admin/helpers/moment-duration", ["exports", "ember-moment/helpers/moment-duration"], function (_exports, _momentDuration) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _momentDuration.default;
    }
  });
});
;define("ghost-admin/helpers/moment-format", ["exports", "ember-moment/helpers/moment-format"], function (_exports, _momentFormat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _momentFormat.default;
    }
  });
});
;define("ghost-admin/helpers/moment-from-now", ["exports", "ember-moment/helpers/moment-from-now"], function (_exports, _momentFromNow) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _momentFromNow.default;
    }
  });
});
;define("ghost-admin/helpers/moment-from", ["exports", "ember-moment/helpers/moment-from"], function (_exports, _momentFrom) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _momentFrom.default;
    }
  });
});
;define("ghost-admin/helpers/moment-subtract", ["exports", "ember-moment/helpers/moment-subtract"], function (_exports, _momentSubtract) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _momentSubtract.default;
    }
  });
});
;define("ghost-admin/helpers/moment-to-date", ["exports", "ember-moment/helpers/moment-to-date"], function (_exports, _momentToDate) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _momentToDate.default;
    }
  });
});
;define("ghost-admin/helpers/moment-to-now", ["exports", "ember-moment/helpers/moment-to-now"], function (_exports, _momentToNow) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _momentToNow.default;
    }
  });
});
;define("ghost-admin/helpers/moment-to", ["exports", "ember-moment/helpers/moment-to"], function (_exports, _momentTo) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _momentTo.default;
    }
  });
});
;define("ghost-admin/helpers/moment-unix", ["exports", "ember-moment/helpers/unix"], function (_exports, _unix) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _unix.default;
    }
  });
});
;define("ghost-admin/helpers/moment", ["exports", "ember-moment/helpers/moment"], function (_exports, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _moment.default;
    }
  });
});
;define("ghost-admin/helpers/not-eq", ["exports", "ember-truth-helpers/helpers/not-equal"], function (_exports, _notEqual) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _notEqual.default;
    }
  });
  Object.defineProperty(_exports, "notEq", {
    enumerable: true,
    get: function () {
      return _notEqual.notEq;
    }
  });
});
;define("ghost-admin/helpers/not", ["exports", "ember-truth-helpers/helpers/not"], function (_exports, _not) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _not.default;
    }
  });
  Object.defineProperty(_exports, "not", {
    enumerable: true,
    get: function () {
      return _not.not;
    }
  });
});
;define("ghost-admin/helpers/now", ["exports", "ember-moment/helpers/now"], function (_exports, _now) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _now.default;
    }
  });
});
;define("ghost-admin/helpers/one-way-select/contains", ["exports", "ember-one-way-select/helpers/one-way-select/contains"], function (_exports, _contains) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _contains.default;
    }
  });
  Object.defineProperty(_exports, "contains", {
    enumerable: true,
    get: function () {
      return _contains.contains;
    }
  });
});
;define("ghost-admin/helpers/optional", ["exports", "ember-composable-helpers/helpers/optional"], function (_exports, _optional) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _optional.default;
    }
  });
  Object.defineProperty(_exports, "optional", {
    enumerable: true,
    get: function () {
      return _optional.optional;
    }
  });
});
;define("ghost-admin/helpers/or", ["exports", "ember-truth-helpers/helpers/or"], function (_exports, _or) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _or.default;
    }
  });
  Object.defineProperty(_exports, "or", {
    enumerable: true,
    get: function () {
      return _or.or;
    }
  });
});
;define("ghost-admin/helpers/perform", ["exports", "ember-concurrency/helpers/perform"], function (_exports, _perform) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _perform.default;
    }
  });
});
;define("ghost-admin/helpers/pluralize", ["exports", "ember-inflector/lib/helpers/pluralize"], function (_exports, _pluralize) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _pluralize.default;
  _exports.default = _default;
});
;define("ghost-admin/helpers/power-calendar-format-date", ["exports", "ember-power-calendar/helpers/power-calendar-format-date"], function (_exports, _powerCalendarFormatDate) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _powerCalendarFormatDate.default;
    }
  });
  Object.defineProperty(_exports, "powerCalendarFormatDate", {
    enumerable: true,
    get: function () {
      return _powerCalendarFormatDate.powerCalendarFormatDate;
    }
  });
});
;define("ghost-admin/helpers/reset-query-params", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.resetQueryParams = resetQueryParams;
  _exports.default = _exports.DEFAULT_QUERY_PARAMS = void 0;
  const DEFAULT_QUERY_PARAMS = {
    posts: {
      type: null,
      author: null,
      tag: null,
      order: null
    },
    'members.index': {
      label: null
    }
  }; // in order to reset query params to their defaults when using <LinkTo> or
  // `transitionTo` it's necessary to explicitly set each param. This helper makes
  // it easier to provide a "resetting" link, especially when used with custom views

  _exports.DEFAULT_QUERY_PARAMS = DEFAULT_QUERY_PARAMS;

  function resetQueryParams(routeName, newParams) {
    return Object.assign({}, DEFAULT_QUERY_PARAMS[routeName], newParams);
  }

  var _default = Ember.Helper.helper(function (params
  /*, hash*/
  ) {
    return resetQueryParams(...params);
  });

  _exports.default = _default;
});
;define("ghost-admin/helpers/route-action", ["exports", "ember-route-action-helper/helpers/route-action"], function (_exports, _routeAction) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _routeAction.default;
    }
  });
});
;define("ghost-admin/helpers/sanitize-html", ["exports", "koenig-editor/helpers/sanitize-html"], function (_exports, _sanitizeHtml) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _sanitizeHtml.default;
    }
  });
  Object.defineProperty(_exports, "sanitizeHtml", {
    enumerable: true,
    get: function () {
      return _sanitizeHtml.sanitizeHtml;
    }
  });
});
;define("ghost-admin/helpers/singularize", ["exports", "ember-inflector/lib/helpers/singularize"], function (_exports, _singularize) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _singularize.default;
  _exports.default = _default;
});
;define("ghost-admin/helpers/svg-jar", ["exports", "ember-svg-jar/utils/make-helper", "ember-svg-jar/utils/make-svg"], function (_exports, _makeHelper, _makeSvg) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.svgJar = svgJar;
  _exports.default = void 0;

  function getInlineAsset(assetId) {
    try {
      /* eslint-disable global-require */
      return require("ember-svg-jar/inlined/".concat(assetId)).default;
    } catch (err) {
      return null;
    }
  }

  function svgJar(assetId, svgAttrs) {
    return (0, _makeSvg.default)(assetId, svgAttrs, getInlineAsset);
  }

  var _default = (0, _makeHelper.default)(svgJar);

  _exports.default = _default;
});
;define("ghost-admin/helpers/task", ["exports", "ember-concurrency/helpers/task"], function (_exports, _task) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _task.default;
    }
  });
});
;define("ghost-admin/helpers/titleize", ["exports", "ember-cli-string-helpers/helpers/titleize"], function (_exports, _titleize) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _titleize.default;
    }
  });
  Object.defineProperty(_exports, "titleize", {
    enumerable: true,
    get: function () {
      return _titleize.titleize;
    }
  });
});
;define("ghost-admin/helpers/toggle", ["exports", "ember-composable-helpers/helpers/toggle"], function (_exports, _toggle) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _toggle.default;
    }
  });
  Object.defineProperty(_exports, "toggle", {
    enumerable: true,
    get: function () {
      return _toggle.toggle;
    }
  });
});
;define("ghost-admin/helpers/trim", ["exports", "ember-cli-string-helpers/helpers/trim"], function (_exports, _trim) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _trim.default;
    }
  });
  Object.defineProperty(_exports, "trim", {
    enumerable: true,
    get: function () {
      return _trim.trim;
    }
  });
});
;define("ghost-admin/helpers/truncate", ["exports", "ember-cli-string-helpers/helpers/truncate"], function (_exports, _truncate) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _truncate.default;
    }
  });
  Object.defineProperty(_exports, "truncate", {
    enumerable: true,
    get: function () {
      return _truncate.truncate;
    }
  });
});
;define("ghost-admin/helpers/ui-btn-span", ["exports", "ghost-admin/helpers/ui-btn"], function (_exports, _uiBtn) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.uiBtnSpan = uiBtnSpan;
  _exports.default = void 0;

  function uiBtnSpan([style], hash) {
    return (0, _uiBtn.btnStyles)(Object.assign({}, {
      style
    }, hash)).span;
  }

  var _default = Ember.Helper.helper(uiBtnSpan);

  _exports.default = _default;
});
;define("ghost-admin/helpers/ui-btn", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.btnStyles = btnStyles;
  _exports.uiBtn = uiBtn;
  _exports.default = void 0;

  function btnStyles(options = {}) {
    let button = 'dib midgrey btn-base br3 ba b--lightgrey-l1 pointer glow';
    let span = 'f8 fw5 tracked-2 dib pt0 pb0 tc'; // Set style

    if (options.style) {
      switch (options.style) {
        case 'outline-white':
        case 'outline-white--s':
          button = 'bg-transparent dib white btn-base br3 ba b--white-60 pointer highlight-white';
          span = 'f8 fw5 tracked-2 dib pt0 pb0 tc';
          break;

        case 'outline-blue':
        case 'outline-blue--s':
          button = 'bg-transparent dib blue btn-base br3 ba b--lightgrey pointer glow';
          span = 'f8 fw5 tracked-2 dib pt0 pb0 tc';
          break;

        case 'blue':
        case 'blue--s':
          button = 'dib bw0 white br3 btn-base btn-blue pointer';
          span = 'f8 fw5 tracked-2 dib pt0 pb0 tc';
          break;

        case 'green':
        case 'green--s':
          button = 'dib bw0 white br3 btn-base btn-green pointer';
          span = 'f8 fw5 tracked-2 dib pt0 pb0 tc';
          break;

        case 'red':
        case 'red--s':
          button = 'dib bw0 white br3 btn-base btn-red pointer';
          span = 'f8 fw5 tracked-2 dib pt0 pb0 tc';
          break;
      } // Style ending with '--s' means small button


      if (options.style.substr(options.style.length - 3) === '--s') {
        button = "".concat(button, " btn-small");
      }
    }

    if (options.class) {
      button = "".concat(button, " ").concat(options.class);
    }

    button = "sans-serif ".concat(button, " flex-shrink-0");
    span = "".concat(span, " inline-flex items-center");
    return {
      button: button,
      span: span
    };
  }

  function uiBtn([style], hash) {
    return btnStyles(Object.assign({}, {
      style
    }, hash)).button;
  }

  var _default = Ember.Helper.helper(uiBtn);

  _exports.default = _default;
});
;define("ghost-admin/helpers/ui-text", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.uiText = uiText;
  _exports.default = void 0;

  function uiText([style]) {
    let cssClass = '';

    switch (style) {
      case 'h1':
        cssClass = 'f-subheadline fw7 tracked-3 lh-heading ma0 pa0';
        break;

      case 'h2':
        cssClass = 'f2 fw6 tracked-2 tracked-3 lh-title ma0 pa0';
        break;

      case 'h3':
        cssClass = 'f5 fw6 tracked-2 lh-title ma0 pa0';
        break;

      case 'h4':
        cssClass = 'f7 fw6 tracked-2 lh-copy ma0 pa0';
        break;

      case 'h5':
        cssClass = 'f8 fw6 tracked-2 lh-copy ma0 pa0';
        break;

      case 'h6':
        cssClass = 'f-small ttu fw4 tracked-3 lh-copy ma0 pa0';
        break;

      case 'tl':
        cssClass = 'f6 fw3 lh-copy tracked-1 ma0 pa0';
        break;

      case 't':
        cssClass = 'f7 fw3 lh-copy tracked-1 ma0 pa0';
        break;

      case 'ts':
        cssClass = 'f8 fw3 lh-copy tracked-2 ma0 pa0';
        break;

      case 'txs':
        cssClass = 'f-small fw3 lh-copy tracked-3 ma0 pa0';
        break;
    }

    return cssClass;
  }

  var _default = Ember.Helper.helper(uiText);

  _exports.default = _default;
});
;define("ghost-admin/helpers/underscore", ["exports", "ember-cli-string-helpers/helpers/underscore"], function (_exports, _underscore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _underscore.default;
    }
  });
  Object.defineProperty(_exports, "underscore", {
    enumerable: true,
    get: function () {
      return _underscore.underscore;
    }
  });
});
;define("ghost-admin/helpers/unix", ["exports", "ember-moment/helpers/unix"], function (_exports, _unix) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _unix.default;
    }
  });
});
;define("ghost-admin/helpers/uppercase", ["exports", "ember-cli-string-helpers/helpers/uppercase"], function (_exports, _uppercase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _uppercase.default;
    }
  });
  Object.defineProperty(_exports, "uppercase", {
    enumerable: true,
    get: function () {
      return _uppercase.uppercase;
    }
  });
});
;define("ghost-admin/helpers/user-agent", ["exports", "ember-useragent/helpers/user-agent"], function (_exports, _userAgent) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _userAgent.default;
    }
  });
});
;define("ghost-admin/helpers/utc", ["exports", "ember-moment/helpers/utc"], function (_exports, _utc) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _utc.default;
    }
  });
  Object.defineProperty(_exports, "utc", {
    enumerable: true,
    get: function () {
      return _utc.utc;
    }
  });
});
;define("ghost-admin/helpers/w", ["exports", "ember-cli-string-helpers/helpers/w"], function (_exports, _w) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _w.default;
    }
  });
  Object.defineProperty(_exports, "w", {
    enumerable: true,
    get: function () {
      return _w.w;
    }
  });
});
;define("ghost-admin/helpers/xor", ["exports", "ember-truth-helpers/helpers/xor"], function (_exports, _xor) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _xor.default;
    }
  });
  Object.defineProperty(_exports, "xor", {
    enumerable: true,
    get: function () {
      return _xor.xor;
    }
  });
});
;define("ghost-admin/initializers/app-version", ["exports", "ember-cli-app-version/initializer-factory", "ghost-admin/config/environment"], function (_exports, _initializerFactory, _environment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  let name, version;

  if (_environment.default.APP) {
    name = _environment.default.APP.name;
    version = _environment.default.APP.version;
  }

  var _default = {
    name: 'App Version',
    initialize: (0, _initializerFactory.default)(name, version)
  };
  _exports.default = _default;
});
;define("ghost-admin/initializers/container-debug-adapter", ["exports", "ember-resolver/resolvers/classic/container-debug-adapter"], function (_exports, _containerDebugAdapter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = {
    name: 'container-debug-adapter',

    initialize() {
      let app = arguments[1] || arguments[0];
      app.register('container-debug-adapter:main', _containerDebugAdapter.default);
      app.inject('container-debug-adapter:main', 'namespace', 'application:main');
    }

  };
  _exports.default = _default;
});
;define("ghost-admin/initializers/coordinator-setup", ["exports", "ghost-admin/models/coordinator"], function (_exports, _coordinator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = {
    name: "setup coordinator",
    initialize: function () {
      let app = arguments[1] || arguments[0];
      app.register("drag:coordinator", _coordinator.default);
      app.inject("component", "coordinator", "drag:coordinator");
    }
  };
  _exports.default = _default;
});
;define("ghost-admin/initializers/debug", ["exports", "@html-next/vertical-collection/-debug"], function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = {
    name: 'vertical-collection-debug',

    initialize() {}

  };
  _exports.default = _default;
});
;define("ghost-admin/initializers/ember-cli-mirage", ["exports", "ghost-admin/config/environment", "ghost-admin/mirage/config", "ember-cli-mirage/get-rfc232-test-context", "ember-cli-mirage/start-mirage"], function (_exports, _environment, _config, _getRfc232TestContext, _startMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.startMirage = startMirage;
  _exports.default = void 0;
  //
  // This initializer does two things:
  //
  // 1. Pulls the mirage config objects from the application's config and
  //    registers them in the container so `ember-cli-mirage/start-mirage` can
  //    find them (since it doesn't have access to the app's namespace).
  // 2. Provides legacy support for auto-starting mirage in pre-rfc268 acceptance
  //    tests.
  //
  var _default = {
    name: 'ember-cli-mirage',

    initialize(application) {
      if (_config.default) {
        application.register('mirage:base-config', _config.default, {
          instantiate: false
        });
      }

      if (_config.testConfig) {
        application.register('mirage:test-config', _config.testConfig, {
          instantiate: false
        });
      }

      _environment.default['ember-cli-mirage'] = _environment.default['ember-cli-mirage'] || {};

      if (_shouldUseMirage(_environment.default.environment, _environment.default['ember-cli-mirage'])) {
        startMirage(_environment.default);
      }
    }

  };
  _exports.default = _default;

  function startMirage(env = _environment.default) {
    return (0, _startMirage.default)(null, {
      env,
      baseConfig: _config.default,
      testConfig: _config.testConfig
    });
  }

  function _shouldUseMirage(env, addonConfig) {
    if (typeof FastBoot !== 'undefined') {
      return false;
    }

    if ((0, _getRfc232TestContext.default)()) {
      return false;
    }

    let userDeclaredEnabled = typeof addonConfig.enabled !== 'undefined';

    let defaultEnabled = _defaultEnabled(env, addonConfig);

    return userDeclaredEnabled ? addonConfig.enabled : defaultEnabled;
  }
  /*
    Returns a boolean specifying the default behavior for whether
    to initialize Mirage.
  */


  function _defaultEnabled(env, addonConfig) {
    let usingInDev = env === 'development' && !addonConfig.usingProxy;
    let usingInTest = env === 'test';
    return usingInDev || usingInTest;
  }
});
;define("ghost-admin/initializers/ember-concurrency", ["exports", "ember-concurrency/initializers/ember-concurrency"], function (_exports, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _emberConcurrency.default;
    }
  });
});
;define("ghost-admin/initializers/ember-data-data-adapter", ["exports", "@ember-data/debug/setup"], function (_exports, _setup) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _setup.default;
    }
  });
});
;define("ghost-admin/initializers/ember-data", ["exports", "ember-data", "ember-data/setup-container"], function (_exports, _emberData, _setupContainer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /*
    This code initializes EmberData in an Ember application.
  
    It ensures that the `store` service is automatically injected
    as the `store` property on all routes and controllers.
  */
  var _default = {
    name: 'ember-data',
    initialize: _setupContainer.default
  };
  _exports.default = _default;
});
;define("ghost-admin/initializers/ember-simple-auth", ["exports", "ember-simple-auth/configuration", "ghost-admin/config/environment", "ghost-admin/utils/ghost-paths", "ember-simple-auth/initializers/setup-session", "ember-simple-auth/initializers/setup-session-restoration", "ember-simple-auth/initializers/setup-session-service"], function (_exports, _configuration, _environment, _ghostPaths, _setupSession, _setupSessionRestoration, _setupSessionService) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = {
    name: 'ember-simple-auth',

    initialize(registry) {
      let config = _environment.default['ember-simple-auth'] || {};
      config.rootURL = (0, _ghostPaths.default)().adminRoot;

      _configuration.default.load(config);

      (0, _setupSession.default)(registry);
      (0, _setupSessionService.default)(registry);
      (0, _setupSessionRestoration.default)(registry);
    }

  };
  _exports.default = _default;
});
;define("ghost-admin/initializers/export-application-global", ["exports", "ghost-admin/config/environment"], function (_exports, _environment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.initialize = initialize;
  _exports.default = void 0;

  function initialize() {
    var application = arguments[1] || arguments[0];

    if (_environment.default.exportApplicationGlobal !== false) {
      var theGlobal;

      if (typeof window !== 'undefined') {
        theGlobal = window;
      } else if (typeof global !== 'undefined') {
        theGlobal = global;
      } else if (typeof self !== 'undefined') {
        theGlobal = self;
      } else {
        // no reasonable global, just bail
        return;
      }

      var value = _environment.default.exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = Ember.String.classify(_environment.default.modulePrefix);
      }

      if (!theGlobal[globalName]) {
        theGlobal[globalName] = application;
        application.reopen({
          willDestroy: function () {
            this._super.apply(this, arguments);

            delete theGlobal[globalName];
          }
        });
      }
    }
  }

  var _default = {
    name: 'export-application-global',
    initialize: initialize
  };
  _exports.default = _default;
});
;define("ghost-admin/initializers/hide-loading-screen", ["exports", "ghost-admin/instance-initializers/hide-loading-screen"], function (_exports, _hideLoadingScreen) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.initialize = initialize;
  _exports.default = void 0;
  const EMBER_VERSION_REGEX = /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:(?:-(alpha|beta)\.([0-9]+)(?:\.([0-9]+))?)?)?(?:\+(canary))?(?:\.([0-9abcdef]+))?(?:-([A-Za-z0-9.-]+))?(?:\+([A-Za-z0-9.-]+))?$/;
  /**
   * VERSION_INFO[i] is as follows:
   *
   * 0  complete version string
   * 1  major version
   * 2  minor version
   * 3  trivial version
   * 4  pre-release type (optional: "alpha" or "beta" or undefined for stable releases)
   * 5  pre-release version (optional)
   * 6  pre-release sub-version (optional)
   * 7  canary (optional: "canary", or undefined for stable releases)
   * 8  SHA (optional)
   *
   * @private
   */

  const VERSION_INFO = EMBER_VERSION_REGEX.exec(Ember.VERSION);
  const isPre111 = parseInt(VERSION_INFO[1], 10) < 2 && parseInt(VERSION_INFO[2], 10) < 12;

  function initialize() {
    if (isPre111) {
      let [registry, application] = arguments;

      _hideLoadingScreen.default.initialize(registry, application);
    }
  }

  var _default = {
    name: 'hide-loading-screen',
    initialize
  };
  _exports.default = _default;
});
;define("ghost-admin/initializers/liquid-fire", ["exports", "liquid-fire/velocity-ext"], function (_exports, _velocityExt) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = {
    name: 'liquid-fire',
    initialize: function () {}
  };
  _exports.default = _default;
});
;define("ghost-admin/initializers/trailing-hash", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  let trailingHash = Ember.HashLocation.extend({
    formatURL() {
      let url = this._super(...arguments);

      if (url.indexOf('?') > 0) {
        return url.replace(/([^/])\?/, '$1/?');
      } else {
        return url.replace(/\/?$/, '/');
      }
    }

  });
  var _default = {
    name: 'registerTrailingHashLocation',

    initialize(application) {
      application.register('location:trailing-hash', trailingHash);
    }

  };
  _exports.default = _default;
});
;define("ghost-admin/initializers/upgrade-status", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.initialize = initialize;
  _exports.default = void 0;

  function initialize(application) {
    application.inject('route', 'upgradeStatus', 'service:upgrade-status');
  }

  var _default = {
    name: 'upgrade-status',
    initialize
  };
  _exports.default = _default;
});
;define("ghost-admin/initializers/user-agent", ["exports", "ember-useragent/initializers/user-agent"], function (_exports, _userAgent) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _userAgent.default;
    }
  });
  Object.defineProperty(_exports, "initialize", {
    enumerable: true,
    get: function () {
      return _userAgent.initialize;
    }
  });
});
;define("ghost-admin/initializers/viewport-config", ["exports", "ember-in-viewport/initializers/viewport-config"], function (_exports, _viewportConfig) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _viewportConfig.default;
    }
  });
  Object.defineProperty(_exports, "initialize", {
    enumerable: true,
    get: function () {
      return _viewportConfig.initialize;
    }
  });
});
;define("ghost-admin/instance-initializers/ember-cli-mirage-autostart", ["exports", "ember-cli-mirage/instance-initializers/ember-cli-mirage-autostart"], function (_exports, _emberCliMirageAutostart) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _emberCliMirageAutostart.default;
    }
  });
});
;define("ghost-admin/instance-initializers/ember-data", ["exports", "ember-data/initialize-store-service"], function (_exports, _initializeStoreService) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = {
    name: 'ember-data',
    initialize: _initializeStoreService.default
  };
  _exports.default = _default;
});
;define("ghost-admin/instance-initializers/ember-simple-auth", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // This is only needed for backwards compatibility and will be removed in the
  // next major release of ember-simple-auth. Unfortunately, there is no way to
  // deprecate this without hooking into Ember's internals…
  var _default = {
    name: 'ember-simple-auth',

    initialize() {}

  };
  _exports.default = _default;
});
;define("ghost-admin/instance-initializers/hide-loading-screen", ["exports", "ghost-admin/config/environment"], function (_exports, _environment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.initialize = initialize;
  _exports.default = void 0;
  const userConfig = _environment.default['ember-load'] || {};

  function initialize() {
    let instance = arguments[1] || arguments[0];
    let container = arguments[1] ? arguments[0] : instance.container;

    if (Ember.View) {
      let ApplicationView = container.lookupFactory ? container.lookupFactory('view:application') : instance.resolveRegistration('view:application');
      ApplicationView.reopen({
        didInsertElement() {
          this._super(...arguments);

          let loadingIndicatorClass = userConfig.loadingIndicatorClass || 'ember-load-indicator';
          document.querySelectorAll(".".concat(loadingIndicatorClass)).forEach(e => e.remove());
        }

      });
    }
  }

  var _default = {
    name: 'hide-loading-screen-instance',
    initialize
  };
  _exports.default = _default;
});
;define("ghost-admin/instance-initializers/user-agent", ["exports", "ember-useragent/instance-initializers/user-agent"], function (_exports, _userAgent) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _userAgent.default;
    }
  });
  Object.defineProperty(_exports, "initialize", {
    enumerable: true,
    get: function () {
      return _userAgent.initialize;
    }
  });
});
;define("ghost-admin/koenig-editor/tests/addon.lint-test", [], function () {
  "use strict";

  describe('ESLint | addon', function () {
    it('addon/components/kg-action-bar.js', function () {// test passed
    });
    it('addon/components/koenig-alt-input.js', function () {// test passed
    });
    it('addon/components/koenig-basic-html-input.js', function () {// test passed
    });
    it('addon/components/koenig-caption-input.js', function () {// test passed
    });
    it('addon/components/koenig-card-bookmark.js', function () {// test passed
    });
    it('addon/components/koenig-card-code.js', function () {// test passed
    });
    it('addon/components/koenig-card-email.js', function () {// test passed
    });
    it('addon/components/koenig-card-embed.js', function () {// test passed
    });
    it('addon/components/koenig-card-gallery.js', function () {// test passed
    });
    it('addon/components/koenig-card-hr.js', function () {// test passed
    });
    it('addon/components/koenig-card-html.js', function () {// test passed
    });
    it('addon/components/koenig-card-image.js', function () {// test passed
    });
    it('addon/components/koenig-card-markdown.js', function () {// test passed
    });
    it('addon/components/koenig-card.js', function () {// test passed
    });
    it('addon/components/koenig-editor.js', function () {// test passed
    });
    it('addon/components/koenig-link-input.js', function () {// test passed
    });
    it('addon/components/koenig-link-toolbar.js', function () {// test passed
    });
    it('addon/components/koenig-menu-content.js', function () {// test passed
    });
    it('addon/components/koenig-plus-menu.js', function () {// test passed
    });
    it('addon/components/koenig-slash-menu.js', function () {// test passed
    });
    it('addon/components/koenig-text-replacement-html-input.js', function () {// test passed
    });
    it('addon/components/koenig-toolbar.js', function () {// test passed
    });
    it('addon/helpers/clean-basic-html.js', function () {// test passed
    });
    it('addon/helpers/kg-style.js', function () {// test passed
    });
    it('addon/helpers/sanitize-html.js', function () {// test passed
    });
    it('addon/lib/clean-text-replacement-html.js', function () {// test passed
    });
    it('addon/lib/dnd/constants.js', function () {// test passed
    });
    it('addon/lib/dnd/container.js', function () {// test passed
    });
    it('addon/lib/dnd/scroll-handler.js', function () {// test passed
    });
    it('addon/lib/dnd/utils.js', function () {// test passed
    });
    it('addon/lib/relative-to-absolute.js', function () {// test passed
    });
    it('addon/options/atoms.js', function () {// test passed
    });
    it('addon/options/basic-html-parser-plugins.js', function () {// test passed
    });
    it('addon/options/cards.js', function () {// test passed
    });
    it('addon/options/key-commands.js', function () {// test passed
    });
    it('addon/options/text-expansions.js', function () {// test passed
    });
    it('addon/services/koenig-drag-drop-handler.js', function () {// test passed
    });
    it('addon/services/koenig-ui.js', function () {// test passed
    });
    it('addon/utils/create-component-card.js', function () {// test passed
    });
    it('addon/utils/markup-utils.js', function () {// test passed
    });
    it('addon/utils/oembed.js', function () {// test passed
    });
    it('addon/utils/reading-time.js', function () {// test passed
    });
  });
});
;define("ghost-admin/koenig-editor/tests/app.lint-test", [], function () {
  "use strict";

  describe('ESLint | app', function () {
    it('app/components/kg-action-bar.js', function () {// test passed
    });
    it('app/components/koenig-alt-input.js', function () {// test passed
    });
    it('app/components/koenig-basic-html-input.js', function () {// test passed
    });
    it('app/components/koenig-caption-input.js', function () {// test passed
    });
    it('app/components/koenig-card-bookmark.js', function () {// test passed
    });
    it('app/components/koenig-card-code.js', function () {// test passed
    });
    it('app/components/koenig-card-email.js', function () {// test passed
    });
    it('app/components/koenig-card-embed.js', function () {// test passed
    });
    it('app/components/koenig-card-gallery.js', function () {// test passed
    });
    it('app/components/koenig-card-hr.js', function () {// test passed
    });
    it('app/components/koenig-card-html.js', function () {// test passed
    });
    it('app/components/koenig-card-image.js', function () {// test passed
    });
    it('app/components/koenig-card-markdown.js', function () {// test passed
    });
    it('app/components/koenig-card.js', function () {// test passed
    });
    it('app/components/koenig-editor.js', function () {// test passed
    });
    it('app/components/koenig-link-input.js', function () {// test passed
    });
    it('app/components/koenig-link-toolbar.js', function () {// test passed
    });
    it('app/components/koenig-menu-content.js', function () {// test passed
    });
    it('app/components/koenig-plus-menu.js', function () {// test passed
    });
    it('app/components/koenig-slash-menu.js', function () {// test passed
    });
    it('app/components/koenig-text-replacement-html-input.js', function () {// test passed
    });
    it('app/components/koenig-toolbar.js', function () {// test passed
    });
    it('app/helpers/clean-basic-html.js', function () {// test passed
    });
    it('app/helpers/kg-style.js', function () {// test passed
    });
    it('app/helpers/sanitize-html.js', function () {// test passed
    });
    it('app/services/koenig-drag-drop-handler.js', function () {// test passed
    });
    it('app/services/koenig-ui.js', function () {// test passed
    });
  });
});
;define("ghost-admin/mirage/config", ["exports", "ghost-admin/mirage/config/api-keys", "ghost-admin/mirage/config/authentication", "ghost-admin/mirage/config/config", "ghost-admin/mirage/config/emails", "ghost-admin/mirage/config/integrations", "ghost-admin/mirage/config/invites", "ghost-admin/mirage/config/labels", "ghost-admin/mirage/config/members", "ghost-admin/mirage/config/pages", "ghost-admin/mirage/config/posts", "ghost-admin/mirage/config/roles", "ghost-admin/mirage/config/settings", "ghost-admin/mirage/config/site", "ghost-admin/mirage/config/slugs", "ghost-admin/mirage/config/tags", "ghost-admin/mirage/config/themes", "ghost-admin/mirage/config/uploads", "ghost-admin/mirage/config/users", "ghost-admin/mirage/config/webhooks"], function (_exports, _apiKeys, _authentication, _config, _emails, _integrations, _invites, _labels, _members, _pages, _posts, _roles, _settings, _site, _slugs, _tags, _themes, _uploads, _users, _webhooks) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;
  _exports.testConfig = testConfig;

  // import {versionMismatchResponse} from 'utils';
  function _default() {
    // allow any local requests outside of the namespace (configured below) to hit the real server
    // _must_ be called before the namespace property is set
    this.passthrough('/ghost/assets/**'); // this.urlPrefix = '';    // make this `http://localhost:8080`, for example, if your API is on a different server

    this.namespace = '/ghost/api/v3/admin'; // make this `api`, for example, if your API is namespaced

    this.timing = 1000; // delay for each request, automatically set to 0 during testing

    this.logging = true; // Mock endpoints here to override real API requests during development, eg...
    // this.put('/posts/:id/', versionMismatchResponse);
    // mockTags(this);
    // this.loadFixtures('settings');
    // mockMembers(this);
    // keep this line, it allows all other API requests to hit the real server

    this.passthrough(); // add any external domains to make sure those get passed through too

    this.passthrough('http://www.gravatar.com/**');
    this.passthrough('https://cdn.jsdelivr.net/**');
    this.passthrough('https://api.unsplash.com/**');
    this.passthrough('https://ghost.org/**');
  } // Mock all endpoints here as there is no real API during testing


  function testConfig() {
    // this.urlPrefix = '';    // make this `http://localhost:8080`, for example, if your API is on a different server
    this.namespace = '/ghost/api/v3/admin'; // make this `api`, for example, if your API is namespaced
    // this.timing = 400;      // delay for each request, automatically set to 0 during testing

    this.logging = false;
    (0, _apiKeys.default)(this);
    (0, _authentication.default)(this);
    (0, _config.default)(this);
    (0, _emails.default)(this);
    (0, _integrations.default)(this);
    (0, _invites.default)(this);
    (0, _members.default)(this);
    (0, _labels.default)(this);
    (0, _pages.default)(this);
    (0, _posts.default)(this);
    (0, _roles.default)(this);
    (0, _settings.default)(this);
    (0, _site.default)(this);
    (0, _slugs.default)(this);
    (0, _tags.default)(this);
    (0, _themes.default)(this);
    (0, _uploads.default)(this);
    (0, _users.default)(this);
    (0, _webhooks.default)(this);
    /* Notifications -------------------------------------------------------- */

    this.get('/notifications/');
    /* Integrations - Slack Test Notification ------------------------------- */

    this.post('/slack/test', function () {
      return {};
    });
    /* External sites ------------------------------------------------------- */

    this.head('http://www.gravatar.com/avatar/:md5', function () {
      return '';
    }, 200);
    this.get('http://www.gravatar.com/avatar/:md5', function () {
      return '';
    }, 200);
    this.get('https://ghost.org/changelog.json', function () {
      return {
        changelog: [{
          title: 'Custom image alt tags',
          custom_excerpt: null,
          html: '<p>We just shipped custom image alt tag support in the Ghost editor. This is one of our most requested features - and great news for accessibility and search engine optimisation for your Ghost publication.</p><p>Previously, you\'d need to use a Markdown card to add an image alt tag. Now you can create alt tags on the go directly from the editor, without the need to add any additional cards or custom tags.</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://mainframe.ghost.io/content/images/2019/08/image-alt-tag.gif" class="kg-image"></figure><!--kg-card-end: image--><p>To write your alt tag, hit the <code>alt</code> button on the right in the caption line, type your alt text and then hit the button again to return to the caption text. </p><p><em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><a href="https://ghost.org/pricing/">Ghost(Pro)</a></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> users already have access to custom image alt tags. Self hosted developers can use <a href="https://ghost.org/docs/api/ghost-cli/">Ghost-CLI</a> to install the latest release!</em></p>',
          slug: 'image-alt-text-support',
          published_at: '2019-08-05T07:46:16.000+00:00',
          url: 'https://ghost.org/blog/image-alt-text-support/'
        }],
        changelogMajor: [],
        changelogUrl: 'https://ghost.org/blog/'
      };
    });
  }
});
;define("ghost-admin/mirage/config/api-keys", ["exports", "ghost-admin/mirage/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockApiKeys;

  function mockApiKeys(server) {
    server.get('/api-keys/', (0, _utils.paginatedResponse)('api-keys'));
    server.post('/api-keys/');
    server.put('/api-keys/:id/');
    server.del('/api-keys/:id/');
  }
});
;define("ghost-admin/mirage/config/authentication", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockAuthentication;

  /* eslint-disable camelcase */
  function mockAuthentication(server) {
    server.post('/session', function () {
      // Password sign-in
      return new _emberCliMirage.Response(201);
    });
    server.post('/authentication/passwordreset', function (schema, request) {
      let {
        passwordreset
      } = JSON.parse(request.requestBody);
      let email = passwordreset[0].email;

      if (email === 'unknown@example.com') {
        return new _emberCliMirage.Response(404, {}, {
          errors: [{
            message: 'There is no user with that email address.',
            type: 'NotFoundError'
          }]
        });
      } else {
        return {
          passwordreset: [{
            message: 'Check your email for further instructions.'
          }]
        };
      }
    });
    server.get('/authentication/invitation/', function (schema, request) {
      let {
        email
      } = request.queryParams;
      let invite = schema.invites.findBy({
        email
      });
      let valid = !!invite;
      return {
        invitation: [{
          valid
        }]
      };
    });
    /* Setup ---------------------------------------------------------------- */

    server.post('/authentication/setup', function ({
      roles,
      users
    }, request) {
      let attrs = JSON.parse(request.requestBody).setup;
      let role = roles.findBy({
        name: 'Owner'
      }); // create owner role unless already exists

      if (!role) {
        role = roles.create({
          name: 'Owner'
        });
      }

      attrs.roles = [role];

      if (!Ember.isBlank(attrs.email)) {
        attrs.slug = attrs.email.split('@')[0].dasherize();
      } // NOTE: server does not use the user factory to fill in blank fields


      return users.create(attrs);
    });
    server.get('/authentication/setup/', function () {
      return {
        setup: [{
          status: true
        }]
      };
    });
  }
});
;define("ghost-admin/mirage/config/config", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockConfig;

  function mockConfig(server) {
    server.get('/config/', function ({
      db
    }) {
      if (Ember.isEmpty(db.configs)) {
        server.loadFixtures('configs');
      }

      return {
        config: db.configs.find(1)
      };
    });
  }
});
;define("ghost-admin/mirage/config/emails", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockEmails;

  function mockEmails()
  /* server */
  {// emails are currently only returned as an embedded record in post models
  }
});
;define("ghost-admin/mirage/config/integrations", ["exports", "moment", "ember-cli-mirage", "ghost-admin/mirage/utils"], function (_exports, _moment, _emberCliMirage, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockIntegrations;

  function mockIntegrations(server) {
    server.get('/integrations/', (0, _utils.paginatedResponse)('integrations'));
    server.post('/integrations/', function ({
      integrations
    }, {
      requestBody
    }) {
      let body = JSON.parse(requestBody);
      let [params] = body.integrations; // all integrations created via the API have a type of 'custom'

      params.type = 'custom';

      if (!params.name) {
        return new _emberCliMirage.Response(422, {}, {
          errors: [{
            type: 'ValidationError',
            message: 'Name is required',
            property: 'name'
          }]
        });
      }

      if (integrations.findBy({
        name: params.name
      }) || params.name.match(/Duplicate/i)) {
        return new _emberCliMirage.Response(422, {}, {
          errors: [{
            type: 'ValidationError',
            message: 'Name has already been used',
            property: 'name'
          }]
        });
      } // allow factory to create defaults


      if (!params.slug) {
        delete params.slug;
      } // use factory creation to auto-create api keys


      return server.create('integration', params);
    });
    server.put('/integrations/:id/', function (schema, {
      params
    }) {
      let {
        integrations,
        apiKeys,
        webhooks
      } = schema;
      let attrs = this.normalizedRequestAttrs();
      let integration = integrations.find(params.id);
      let _apiKeys = [];
      let _webhooks = []; // this is required to work around an issue with ember-cli-mirage and
      // embedded records. The `attrs` object will contain POJOs of the
      // embedded apiKeys and webhooks but mirage expects schema model
      // objects for relations so we need to fetch model records and replace
      // the relationship keys

      attrs.apiKeys.forEach(apiKey => {
        _apiKeys.push(apiKeys.find(apiKey.id));
      });
      attrs.webhooks.forEach(webhook => {
        _webhooks.push(webhooks.find(webhook.id));
      });
      attrs.apiKeys = _apiKeys;
      attrs.webhooks = _webhooks;
      attrs.updatedAt = _moment.default.utc().format();
      return integration.update(attrs);
    });
    server.del('/integrations/:id/');
  }
});
;define("ghost-admin/mirage/config/invites", ["exports", "moment", "ember-cli-mirage", "ghost-admin/mirage/utils"], function (_exports, _moment, _emberCliMirage, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockInvites;

  function mockInvites(server) {
    server.get('/invites/', (0, _utils.paginatedResponse)('invites'));
    server.get('/invites/:id', function (schema, request) {
      let {
        id
      } = request.params;
      let invite = schema.invites.find(id);
      return invite || new _emberCliMirage.Response(404, {}, {
        errors: [{
          type: 'NotFoundError',
          message: 'Invite not found.'
        }]
      });
    });
    server.post('/invites/', function ({
      invites
    }) {
      let attrs = this.normalizedRequestAttrs();
      let oldInvite = invites.findBy({
        email: attrs.email
      });

      if (oldInvite) {
        oldInvite.destroy();
      }
      /* eslint-disable camelcase */


      attrs.token = "".concat(invites.all().models.length, "-token");
      attrs.expires = _moment.default.utc().add(1, 'day').valueOf();
      attrs.createdAt = _moment.default.utc().format();
      attrs.createdBy = 1;
      attrs.updatedAt = _moment.default.utc().format();
      attrs.updatedBy = 1;
      attrs.status = 'sent';
      /* eslint-enable camelcase */

      return invites.create(attrs);
    });
    server.del('/invites/:id/');
  }
});
;define("ghost-admin/mirage/config/labels", ["exports", "ghost-admin/mirage/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockLabels;

  function mockLabels(server) {
    server.post('/labels/', function ({
      labels
    }) {
      let attrs = this.normalizedRequestAttrs();
      return labels.create(Object.assign({}, attrs, {
        id: 99
      }));
    });
    server.get('/labels/', (0, _utils.paginatedResponse)('labels'));
    server.get('/labels/:id/', function ({
      labels
    }, {
      params
    }) {
      let {
        id
      } = params;
      let label = labels.find(id);
      return label || new Response(404, {}, {
        errors: [{
          type: 'NotFoundError',
          message: 'Label not found.'
        }]
      });
    });
    server.put('/labels/:id/');
    server.del('/labels/:id/');
  }
});
;define("ghost-admin/mirage/config/members", ["exports", "ghost-admin/mirage/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockMembers;

  function mockMembers(server) {
    server.post('/members/', function ({
      members
    }) {
      let attrs = this.normalizedRequestAttrs();
      return members.create(Object.assign({}, attrs, {
        id: 99
      }));
    });
    server.get('/members/', (0, _utils.paginatedResponse)('members'));
    server.get('/members/:id/', function ({
      members
    }, {
      params
    }) {
      let {
        id
      } = params;
      let member = members.find(id);
      return member || new Response(404, {}, {
        errors: [{
          type: 'NotFoundError',
          message: 'Member not found.'
        }]
      });
    });
    server.put('/members/:id/');
    server.del('/members/:id/');
  }
});
;define("ghost-admin/mirage/config/pages", ["exports", "moment", "ember-cli-mirage", "ghost-admin/mirage/utils"], function (_exports, _moment, _emberCliMirage, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockPages;

  function normalizeBooleanParams(arr) {
    if (!Ember.isArray(arr)) {
      return arr;
    }

    return arr.map(i => {
      if (i === 'true') {
        return true;
      } else if (i === 'false') {
        return false;
      } else {
        return i;
      }
    });
  } // TODO: use GQL to parse filter string?


  function extractFilterParam(param, filter) {
    let filterRegex = new RegExp("".concat(param, ":(.*?)(?:\\+|$)"));
    let match;
    let [, result] = filter.match(filterRegex) || [];

    if (result && result.startsWith('[')) {
      match = result.replace(/^\[|\]$/g, '').split(',');
    } else if (result) {
      match = [result];
    }

    return normalizeBooleanParams(match);
  } // NOTE: mirage requires Model objects when saving relationships, however the
  // `attrs` on POST/PUT requests will contain POJOs for authors and tags so we
  // need to replace them


  function extractAuthors(pageAttrs, users) {
    return pageAttrs.authors.map(author => users.find(author.id));
  }

  function extractTags(pageAttrs, tags) {
    return pageAttrs.tags.map(requestTag => {
      let tag = tags.find(requestTag.id);

      if (!tag) {
        tag = tag.create(requestTag);
      }

      return tag;
    });
  }

  function mockPages(server) {
    server.post('/pages', function ({
      pages,
      users,
      tags
    }) {
      let attrs = this.normalizedRequestAttrs();
      attrs.authors = extractAuthors(attrs, users);
      attrs.tags = extractTags(attrs, tags);

      if (Ember.isBlank(attrs.slug) && !Ember.isBlank(attrs.title)) {
        attrs.slug = Ember.String.dasherize(attrs.title);
      }

      return pages.create(attrs);
    }); // TODO: handle authors filter

    server.get('/pages/', function ({
      pages
    }, {
      queryParams
    }) {
      let {
        filter,
        page,
        limit
      } = queryParams;
      page = +page || 1;
      limit = +limit || 15;
      let statusFilter = extractFilterParam('status', filter);
      let collection = pages.all().filter(page => {
        let matchesStatus = true;

        if (!Ember.isEmpty(statusFilter)) {
          matchesStatus = statusFilter.includes(page.status);
        }

        return matchesStatus;
      });
      return (0, _utils.paginateModelCollection)('pages', collection, page, limit);
    });
    server.get('/pages/:id/', function ({
      pages
    }, {
      params
    }) {
      let {
        id
      } = params;
      let page = pages.find(id);
      return page || new _emberCliMirage.Response(404, {}, {
        errors: [{
          type: 'NotFoundError',
          message: 'Page not found.'
        }]
      });
    });
    server.put('/pages/:id/', function ({
      pages,
      users,
      tags
    }, {
      params
    }) {
      let attrs = this.normalizedRequestAttrs();
      let page = pages.find(params.id);
      attrs.authors = extractAuthors(attrs, users);
      attrs.tags = extractTags(attrs, tags);
      attrs.updatedAt = _moment.default.utc().toDate();
      return page.update(attrs);
    });
    server.del('/pages/:id/');
  }
});
;define("ghost-admin/mirage/config/posts", ["exports", "moment", "ember-cli-mirage", "ghost-admin/mirage/utils"], function (_exports, _moment, _emberCliMirage, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockPosts;

  function normalizeBooleanParams(arr) {
    if (!Ember.isArray(arr)) {
      return arr;
    }

    return arr.map(i => {
      if (i === 'true') {
        return true;
      } else if (i === 'false') {
        return false;
      } else {
        return i;
      }
    });
  } // TODO: use GQL to parse filter string?


  function extractFilterParam(param, filter) {
    let filterRegex = new RegExp("".concat(param, ":(.*?)(?:\\+|$)"));
    let match;
    let [, result] = filter.match(filterRegex) || [];

    if (result.startsWith('[')) {
      match = result.replace(/^\[|\]$/g, '').split(',');
    } else if (result) {
      match = [result];
    }

    return normalizeBooleanParams(match);
  } // NOTE: mirage requires Model objects when saving relationships, however the
  // `attrs` on POST/PUT requests will contain POJOs for authors and tags so we
  // need to replace them


  function extractAuthors(postAttrs, users) {
    return postAttrs.authors.map(author => users.find(author.id));
  }

  function extractTags(postAttrs, tags) {
    return postAttrs.tags.map(requestTag => {
      let tag = tags.find(requestTag.id);

      if (!tag) {
        tag = tag.create(requestTag);
      }

      return tag;
    });
  }

  function mockPosts(server) {
    server.post('/posts', function ({
      posts,
      users,
      tags
    }) {
      let attrs = this.normalizedRequestAttrs();
      attrs.authors = extractAuthors(attrs, users);
      attrs.tags = extractTags(attrs, tags);

      if (Ember.isBlank(attrs.slug) && !Ember.isBlank(attrs.title)) {
        attrs.slug = Ember.String.dasherize(attrs.title);
      }

      return posts.create(attrs);
    }); // TODO: handle authors filter

    server.get('/posts/', function ({
      posts
    }, {
      queryParams
    }) {
      let {
        filter,
        page,
        limit
      } = queryParams;
      page = +page || 1;
      limit = +limit || 15;
      let statusFilter = extractFilterParam('status', filter);
      let collection = posts.all().filter(post => {
        let matchesStatus = true;

        if (!Ember.isEmpty(statusFilter)) {
          matchesStatus = statusFilter.includes(post.status);
        }

        return matchesStatus;
      });
      return (0, _utils.paginateModelCollection)('posts', collection, page, limit);
    });
    server.get('/posts/:id/', function ({
      posts
    }, {
      params
    }) {
      let {
        id
      } = params;
      let post = posts.find(id);
      return post || new _emberCliMirage.Response(404, {}, {
        errors: [{
          type: 'NotFoundError',
          message: 'Post not found.'
        }]
      });
    });
    server.put('/posts/:id/', function ({
      posts,
      users,
      tags
    }, {
      params
    }) {
      let attrs = this.normalizedRequestAttrs();
      let post = posts.find(params.id);
      attrs.authors = extractAuthors(attrs, users);
      attrs.tags = extractTags(attrs, tags);
      attrs.updatedAt = _moment.default.utc().toDate();
      return post.update(attrs);
    });
    server.del('/posts/:id/');
  }
});
;define("ghost-admin/mirage/config/roles", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockRoles;

  function mockRoles(server) {
    server.get('/roles/', function ({
      roles
    }, {
      queryParams
    }) {
      if (queryParams.permissions === 'assign') {
        return roles.find([1, 2, 3]);
      }

      return roles.all();
    });
  }
});
;define("ghost-admin/mirage/config/settings", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockSettings;

  function mockSettings(server) {
    server.get('/settings/', function ({
      db
    }, {
      queryParams
    }) {
      let {
        type
      } = queryParams;
      let filters = type.split(',');
      let settings = [];

      if (!db.settings.length) {
        server.loadFixtures('settings');
      }

      filters.forEach(type => {
        settings.pushObjects(db.settings.where({
          type
        }));
      });
      return {
        settings,
        meta: {
          filters: {
            type
          }
        }
      };
    });
    server.put('/settings/', function ({
      db
    }, {
      requestBody
    }) {
      let newSettings = JSON.parse(requestBody).settings;
      newSettings.forEach(newSetting => {
        let {
          key
        } = newSetting;

        if (db.settings.where({
          key
        }).length > 0) {
          db.settings.update({
            key
          }, newSetting);
        } else {
          newSetting.type = newSetting.type || 'blog';
          db.settings.insert(newSetting);
        }
      });
      return {
        meta: {},
        settings: db.settings
      };
    });
  }
});
;define("ghost-admin/mirage/config/site", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockSite;

  function mockSite(server) {
    server.get('/site/', function ({
      db
    }) {
      if (Ember.isEmpty(db.sites)) {
        server.loadFixtures('sites');
      }

      return {
        site: db.sites.find(1)
      };
    });
  }
});
;define("ghost-admin/mirage/config/slugs", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockSlugs;

  function mockSlugs(server) {
    server.get('/slugs/post/:slug/', function (schema, request) {
      return {
        slugs: [{
          slug: Ember.String.dasherize(decodeURIComponent(request.params.slug))
        }]
      };
    });
    server.get('/slugs/user/:slug/', function (schema, request) {
      return {
        slugs: [{
          slug: Ember.String.dasherize(decodeURIComponent(request.params.slug))
        }]
      };
    });
  }
});
;define("ghost-admin/mirage/config/tags", ["exports", "ghost-admin/mirage/utils"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockTags;

  function mockTags(server) {
    server.post('/tags/', function ({
      tags
    }) {
      let attrs = this.normalizedRequestAttrs();

      if (Ember.isBlank(attrs.slug) && !Ember.isBlank(attrs.name)) {
        attrs.slug = Ember.String.dasherize(attrs.name);
      } // NOTE: this does not use the tag factory to fill in blank fields


      return tags.create(attrs);
    });
    server.get('/tags/', (0, _utils.paginatedResponse)('tags'));
    server.get('/tags/slug/:slug/', function ({
      tags
    }, {
      params: {
        slug
      }
    }) {
      // TODO: remove post_count unless requested?
      return tags.findBy({
        slug
      });
    });
    server.put('/tags/:id/');
    server.del('/tags/:id/');
  }
});
;define("ghost-admin/mirage/config/themes", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockThemes;
  let themeCount = 1;

  function mockThemes(server) {
    server.get('/themes');
    server.post('/themes/upload/', function ({
      themes
    }) {
      // pretender/mirage doesn't currently process FormData so we can't use
      // any info passed in through the request
      let theme = {
        name: "test-".concat(themeCount),
        package: {
          name: "Test ".concat(themeCount),
          version: '0.1'
        }
      };
      themeCount += 1;
      theme = themes.create(theme);
      return {
        themes: [theme]
      };
    });
    server.del('/themes/:theme/', function ({
      themes
    }, {
      params
    }) {
      themes.findBy({
        name: params.theme
      }).destroy();
      return new _emberCliMirage.Response(204);
    });
    server.put('/themes/:theme/activate/', function ({
      themes
    }, {
      params
    }) {
      themes.all().update('active', false);
      let theme = themes.findBy({
        name: params.theme
      }).update({
        active: true
      });
      return {
        themes: [theme]
      };
    });
  }
});
;define("ghost-admin/mirage/config/uploads", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockUploads;

  const fileUploadResponse = function (db, {
    requestBody
  }) {
    // let [ref] = requestBody.getAll('ref');
    let [purpose] = requestBody.getAll('purpose');
    let [file] = requestBody.getAll('file');
    let now = new Date();
    let year = now.getFullYear();
    let month = "".concat(now.getMonth());

    if (month.length === 1) {
      month = "0".concat(month);
    }

    if (['image', 'profile_image', 'icon'].includes(purpose)) {
      return {
        images: [{
          url: "/content/images/".concat(year, "/").concat(month, "/").concat(file.name)
        }]
      };
    }
  };

  function mockUploads(server) {
    server.post('/images/upload/', fileUploadResponse, 200, {
      timing: 100
    });
  }
});
;define("ghost-admin/mirage/config/users", ["exports", "ember-cli-mirage", "ghost-admin/mirage/utils"], function (_exports, _emberCliMirage, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockUsers;

  function mockUsers(server) {
    // /users/me = Always return the user with ID=1
    server.get('/users/me/', function ({
      users
    }) {
      let user = users.find(1);

      if (user) {
        return user;
      } else {
        return new _emberCliMirage.Response(404, {}, {
          errors: [{
            message: 'Not found',
            type: 'NotFoundError'
          }]
        });
      }
    });
    server.get('/users/', function ({
      users
    }, {
      queryParams
    }) {
      let page = +queryParams.page || 1; // NOTE: this is naive and only set up to work with queries that are
      // actually used - if you use a different filter in the app, add it here!

      let collection = users.where(function (user) {
        let statusMatch = true;

        if (queryParams.filter === 'status:-inactive') {
          statusMatch = user.status !== 'inactive';
        } else if (queryParams.filter === 'status:inactive') {
          statusMatch = user.status === 'inactive';
        } else if (queryParams.status && queryParams.status !== 'all') {
          statusMatch = user.status === queryParams.status;
        }

        return statusMatch;
      });
      return (0, _utils.paginateModelCollection)('users', collection, page, queryParams.limit);
    });
    server.get('/users/slug/:slug/', function ({
      users
    }, {
      params,
      queryParams
    }) {
      let user = users.findBy({
        slug: params.slug
      });
      user.postCount = queryParams.include.match(/count\.posts/);
      return user;
    });
    server.get('/users/:id', function ({
      users
    }, {
      params,
      queryParams
    }) {
      let user = users.find(params.id);
      user.postCount = queryParams.include.match(/count\.posts/);
      return user;
    });
    server.put('/users/:id/', function ({
      users
    }, {
      params
    }) {
      let {
        id
      } = params;

      if (id === 'password') {
        return {
          password: [{
            message: 'Password changed successfully.'
          }]
        };
      } else {
        let attrs = this.normalizedRequestAttrs(); // TODO: why is our custom serializer causing .update to throw
        // children.update is not a function?
        // https://github.com/samselikoff/ember-cli-mirage/issues/964

        delete attrs.roles;
        return users.find(id).update(attrs);
      }
    });
    server.del('/users/:id/');
  }
});
;define("ghost-admin/mirage/config/webhooks", ["exports", "ember-cli-mirage", "ghost-admin/mirage/utils"], function (_exports, _emberCliMirage, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = mockWebhooks;

  function mockWebhooks(server) {
    server.get('/webhooks/', (0, _utils.paginatedResponse)('webhooks'));
    server.post('/webhooks/', function ({
      webhooks
    }) {
      let attrs = this.normalizedRequestAttrs();
      let errors = [];

      if (!attrs.name) {
        errors.push({
          type: 'ValidationError',
          message: 'Name is required',
          property: 'name'
        });
      }

      if (!attrs.event) {
        errors.push({
          type: 'ValidationError',
          message: 'Event is required',
          property: 'event'
        });
      }

      if (!attrs.targetUrl) {
        errors.push({
          type: 'ValidationError',
          message: 'Target URL is required',
          property: 'target_url'
        });
      }

      if (attrs.name && (webhooks.findBy({
        name: attrs.name,
        integrationId: attrs.integrationId
      }) || attrs.name.match(/Duplicate/i))) {
        errors.push({
          type: 'ValidationError',
          message: 'Name has already been used',
          property: 'name'
        });
      } // TODO: check server-side validation


      if (webhooks.findBy({
        targetUrl: attrs.targetUrl,
        event: attrs.event
      })) {
        errors.push({
          type: 'ValidationError',
          message: 'Target URL has already been used for this event',
          property: 'target_url'
        });
      }

      if (!Ember.isEmpty(errors)) {
        return new _emberCliMirage.Response(422, {}, {
          errors
        });
      }

      return webhooks.create(attrs);
    });
    server.put('/webhooks/:id/');
    server.del('/webhooks/:id/');
  }
});
;define("ghost-admin/mirage/factories/api-key", ["exports", "moment", "ember-cli-mirage"], function (_exports, _moment, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Factory.extend({
    type: 'content',

    secret() {
      if (this.integration) {
        return "".concat(this.integration.slug, "_").concat(this.type, "_key-12345");
      }

      return "".concat(this.type, "_key-12345");
    },

    lastSeenAt() {
      return _moment.default.utc().format();
    },

    createdAt() {
      return _moment.default.utc().format();
    },

    createdBy: 1,

    updatedAt() {
      return _moment.default.utc().format();
    },

    updatedBy: 1
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/email", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Factory.extend({
    emailCount: 0,
    error: null,
    html: null,
    plaintext: null,
    stats: null,
    status: 'sending',
    subject: null,
    submittedAtUTC: '2019-11-06T12:44:30.000Z',

    uuid(i) {
      return "email-".concat(i);
    },

    createdAtUTC: '2019-11-06T12:44:30.000Z',
    createdBy: 1,
    updatedAtUTC: '2019-11-06T12:44:30.000Z',
    updatedBy: 1,
    sent: (0, _emberCliMirage.trait)({
      status: 'sent',
      stats: JSON.stringify({
        delivered: 0,
        failed: 0,
        opened: 0,
        clicked: 0,
        unsubscribed: 0,
        complaints: 0
      })
    }),
    failed: (0, _emberCliMirage.trait)({
      status: 'failed',
      error: 'Narp! This was an expected test failure',
      stats: null
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/integration", ["exports", "moment", "ember-cli-mirage"], function (_exports, _moment, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Factory.extend({
    name(i) {
      return "Integration ".concat(i + 1);
    },

    slug() {
      return this.name.toLowerCase().replace(' ', '-');
    },

    description: null,
    iconImage: null,
    type: 'custom',

    createdAt() {
      return _moment.default.utc().format();
    },

    createdBy: 1,

    updatedAt() {
      return _moment.default.utc().format();
    },

    updatedBy: 1,

    afterCreate(integration, server) {
      let contentKey = server.create('api-key', {
        type: 'content',
        integration
      });
      let adminKey = server.create('api-key', {
        type: 'admin',
        integration
      });
      integration.apiKeyIds = [contentKey.id, adminKey.id];
      integration.save();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/invite", ["exports", "moment", "ember-cli-mirage"], function (_exports, _moment, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Factory.extend({
    token(i) {
      return "".concat(i, "-token");
    },

    email(i) {
      return "invited-user-".concat(i, "@example.com");
    },

    expires() {
      return _moment.default.utc().add(1, 'day').valueOf();
    },

    createdAt() {
      return _moment.default.utc().format();
    },

    createdBy() {
      return 1;
    },

    updatedAt() {
      return _moment.default.utc().format();
    },

    updatedBy() {
      return 1;
    },

    status() {
      return 'sent';
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/member", ["exports", "faker", "moment", "ember-cli-mirage"], function (_exports, _faker, _moment, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  let randomDate = function randomDate(start = (0, _moment.default)().subtract(30, 'days').toDate(), end = new Date()) {
    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
  };

  var _default = _emberCliMirage.Factory.extend({
    name() {
      return "".concat(_faker.default.name.firstName(), " ").concat(_faker.default.name.lastName());
    },

    email: _faker.default.internet.email,

    createdAt() {
      return randomDate();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/notification", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Factory.extend({
    dismissible: true,
    message: 'This is an alert',
    status: 'alert',
    type: 'error'
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/post", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Factory.extend({
    codeinjectionFoot: null,
    codeinjectionHead: null,
    createdAt: '2015-09-11T09:44:29.871Z',
    createdBy: 1,
    customExcerpt: null,
    customTemplate: null,

    description(i) {
      return "Title for post ".concat(i, ".");
    },

    featured: false,

    featureImage(i) {
      return "/content/images/2015/10/post-".concat(i, ".jpg");
    },

    html(i) {
      return "<p>HTML for post ".concat(i, ".</p>");
    },

    locale: null,
    visibility: 'public',

    metaDescription(i) {
      return "Meta description for post ".concat(i, ".");
    },

    metaTitle(i) {
      return "Meta Title for post ".concat(i);
    },

    ogDescription: null,
    ogImage: null,
    ogTitle: null,

    excerpt(i) {
      return "Excerpt for post ".concat(i, ".");
    },

    plaintext(i) {
      return "Plaintext for post ".concat(i, ".");
    },

    publishedAt: '2015-12-19T16:25:07.000Z',
    publishedBy: 1,

    status(i) {
      let statuses = ['draft', 'published', 'scheduled'];
      return statuses[i % statuses.length];
    },

    title(i) {
      return "Post ".concat(i);
    },

    twitterDescription: null,
    twitterImage: null,
    twitterTitle: null,
    emailSubject: null,
    updatedAt: '2015-10-19T16:25:07.756Z',
    updatedBy: 1,

    uuid(i) {
      return "post-".concat(i);
    },

    authors() {
      return [];
    },

    tags() {
      return [];
    },

    afterCreate(post, server) {
      if (Ember.isEmpty(post.authors)) {
        let user = server.schema.users.find(1);

        if (!user) {
          let role = server.schema.roles.find({
            name: 'Administrator'
          }) || server.create('role', {
            name: 'Administrator'
          });
          user = server.create('user', {
            roles: [role]
          });
        }

        post.authors = [user];
        post.save();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/role", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Factory.extend({
    createdAt: '2013-11-25T14:48:11.000Z',
    createdBy: 1,

    description(i) {
      return "Role ".concat(i);
    },

    name: '',
    updatedAt: '2013-11-25T14:48:11.000Z',
    updatedBy: 1
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/tag", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Factory.extend({
    createdAt: '2015-09-11T09:44:29.871Z',
    createdBy: 1,

    description(i) {
      return "Description for tag ".concat(i, ".");
    },

    visibility: 'public',

    featureImage(i) {
      return "/content/images/2015/10/tag-".concat(i, ".jpg");
    },

    metaDescription(i) {
      return "Meta description for tag ".concat(i, ".");
    },

    metaTitle(i) {
      return "Meta Title for tag ".concat(i);
    },

    name(i) {
      return "Tag ".concat(i);
    },

    parent: null,

    slug(i) {
      return "tag-".concat(i);
    },

    updatedAt: '2015-10-19T16:25:07.756Z',
    updatedBy: 1,

    count() {
      // this gets updated automatically by the tag serializer
      return {
        posts: 0
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/user", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Factory.extend({
    accessibility: null,
    bio: null,
    coverImage: null,
    createdAt: '2015-09-02T13:41:50.000Z',
    createdBy: null,

    email(i) {
      return "user-".concat(i, "@example.com");
    },

    profileImage: '//www.gravatar.com/avatar/3ae045bc198a157401827c8455cd7c99?s=250&d=mm&r=x',
    lastLogin: '2015-11-02T16:12:05.000Z',
    location: null,
    metaDescription: null,
    metaTitle: null,

    name(i) {
      return "User ".concat(i);
    },

    slug(i) {
      return "user-".concat(i);
    },

    status: 'active',
    tour: null,
    updatedAt: '2015-11-02T16:12:05.000Z',
    updatedBy: '1',
    website: 'http://example.com',

    posts() {
      return [];
    },

    roles() {
      return [];
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/factories/webhook", ["exports", "moment", "ghost-admin/helpers/event-name", "ember-cli-mirage"], function (_exports, _moment, _eventName, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Factory.extend({
    name(i) {
      return "Integration ".concat(i + 1);
    },

    event(i) {
      let event = _eventName.AVAILABLE_EVENTS[i % 3];
      return event.event;
    },

    target(i) {
      return "https://example.com/".concat(i + 1);
    },

    lastTriggeredAt: null,

    createdAt() {
      return _moment.default.utc().format();
    },

    createdBy: 1,

    updatedAt() {
      return _moment.default.utc().format();
    },

    updatedBy: 1
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/fixtures/configs", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = [{
    clientExtensions: {},
    database: 'mysql',
    enableDeveloperExperiments: true,
    environment: 'development',
    labs: {},
    mail: 'SMTP',
    version: '2.15.0',
    useGravatar: 'true'
  }];
  _exports.default = _default;
});
;define("ghost-admin/mirage/fixtures/roles", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = [{
    id: 1,
    name: 'Administrator',
    description: 'Administrators',
    created_at: '2015-11-13T16:01:29.131Z',
    created_by: 1,
    updated_at: '2015-11-13T16:01:29.131Z',
    updated_by: 1
  }, {
    id: 2,
    name: 'Editor',
    description: 'Editors',
    created_at: '2015-11-13T16:01:29.131Z',
    created_by: 1,
    updated_at: '2015-11-13T16:01:29.131Z',
    updated_by: 1
  }, {
    id: 3,
    name: 'Author',
    description: 'Authors',
    created_at: '2015-11-13T16:01:29.131Z',
    created_by: 1,
    updated_at: '2015-11-13T16:01:29.131Z',
    updated_by: 1
  }, {
    id: 4,
    name: 'Owner',
    description: 'Blog Owner',
    created_at: '2015-11-13T16:01:29.132Z',
    created_by: 1,
    updated_at: '2015-11-13T16:01:29.132Z',
    updated_by: 1
  }, {
    id: 5,
    name: 'Contributor',
    description: 'Contributors',
    created_at: '2015-11-13T16:01:29.132Z',
    created_by: 1,
    updated_at: '2015-11-13T16:01:29.132Z',
    updated_by: 1
  }];
  _exports.default = _default;
});
;define("ghost-admin/mirage/fixtures/settings", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = [{
    id: 1,
    created_at: '2015-09-11T09:44:30.805Z',
    created_by: 1,
    key: 'title',
    type: 'blog',
    updated_at: '2015-10-04T16:26:05.195Z',
    updated_by: 1,
    value: 'Test Blog'
  }, {
    id: 2,
    created_at: '2015-09-11T09:44:30.806Z',
    created_by: 1,
    key: 'description',
    type: 'blog',
    updated_at: '2015-10-04T16:26:05.198Z',
    updated_by: 1,
    value: 'Thoughts, stories and ideas.'
  }, {
    id: 3,
    key: 'logo',
    value: '/content/images/2013/Nov/logo.png',
    type: 'blog',
    created_at: '2013-11-25T14:48:11.000Z',
    created_by: 1,
    updated_at: '2015-10-27T17:39:58.273Z',
    updated_by: 1
  }, {
    id: 4,
    key: 'cover_image',
    value: '/content/images/2014/Feb/cover.jpg',
    type: 'blog',
    created_at: '2013-11-25T14:48:11.000Z',
    created_by: 1,
    updated_at: '2015-10-27T17:39:58.276Z',
    updated_by: 1
  }, {
    id: 5,
    key: 'default_lang',
    value: 'en_US',
    type: 'blog',
    created_at: '2013-11-25T14:48:11.000Z',
    created_by: 1,
    updated_at: '2015-10-27T17:39:58.278Z',
    updated_by: 1
  }, {
    id: 10,
    created_at: '2015-09-11T09:44:30.809Z',
    created_by: 1,
    key: 'codeinjection_head',
    type: 'blog',
    updated_at: '2015-09-23T13:32:49.858Z',
    updated_by: 1,
    value: ''
  }, {
    id: 11,
    created_at: '2015-09-11T09:44:30.809Z',
    created_by: 1,
    key: 'codeinjection_foot',
    type: 'blog',
    updated_at: '2015-09-23T13:32:49.858Z',
    updated_by: 1,
    value: ''
  }, {
    id: 12,
    key: 'labs',
    value: '{}',
    type: 'blog',
    created_at: '2015-01-12T18:29:01.000Z',
    created_by: 1,
    updated_at: '2015-10-27T17:39:58.288Z',
    updated_by: 1
  }, {
    id: 13,
    created_at: '2015-09-11T09:44:30.810Z',
    created_by: 1,
    key: 'navigation',
    type: 'blog',
    updated_at: '2015-09-23T13:32:49.868Z',
    updated_by: 1,
    value: JSON.stringify([{
      label: 'Home',
      url: '/'
    }, {
      label: 'About',
      url: '/about'
    }])
  }, {
    id: 14,
    created_at: '2015-09-11T09:44:30.810Z',
    created_by: 1,
    key: 'is_private',
    type: 'private',
    updated_at: '2015-09-23T13:32:49.868Z',
    updated_by: 1,
    value: false
  }, {
    id: 15,
    created_at: '2015-09-11T09:44:30.810Z',
    created_by: 1,
    key: 'password',
    type: 'private',
    updated_at: '2015-09-23T13:32:49.868Z',
    updated_by: 1,
    value: ''
  }, {
    id: 16,
    created_at: '2016-05-05T15:04:03.115Z',
    created_by: 1,
    key: 'slack',
    type: 'blog',
    updated_at: '2016-05-05T18:33:09.168Z',
    updated_by: 1,
    value: '[{"url":"", "username":"Ghost"}]'
  }, {
    id: 17,
    created_at: '2016-05-05T15:40:12.133Z',
    created_by: 1,
    key: 'facebook',
    type: 'blog',
    updated_at: '2016-05-08T15:20:25.953Z',
    updated_by: 1,
    value: 'test'
  }, {
    id: 18,
    created_at: '2016-05-05T15:40:12.134Z',
    created_by: 1,
    key: 'twitter',
    type: 'blog',
    updated_at: '2016-05-08T15:20:25.954Z',
    updated_by: 1,
    value: '@test'
  }, {
    id: 19,
    created_at: '2015-09-11T09:44:30.810Z',
    created_by: 1,
    key: 'active_timezone',
    type: 'blog',
    updated_at: '2015-09-23T13:32:49.868Z',
    updated_by: 1,
    value: 'Etc/UTC'
  }, {
    id: 21,
    created_at: '2017-01-09T08:40:59.000Z',
    created_by: 1,
    key: 'amp',
    type: 'blog',
    updated_at: '2017-01-09T08:49:42.991Z',
    updated_by: 1,
    value: 'true'
  }, {
    id: 22,
    key: 'icon',
    value: '/content/images/2014/Feb/favicon.ico',
    type: 'blog',
    created_at: '2013-11-25T14:48:11.000Z',
    created_by: 1,
    updated_at: '2015-10-27T17:39:58.276Z',
    updated_by: 1
  }, {
    id: 23,
    type: 'members',
    key: 'members_subscription_settings',
    value: '{"allowSelfSignup":true,"fromAddress":"noreply","paymentProcessors":[{"adapter":"stripe","config":{"secret_token":"","public_token":"","product":{"name":"Ghost Subscription"},"plans":[{"name":"Monthly","currency":"usd","interval":"month","amount":""},{"name":"Yearly","currency":"usd","interval":"year","amount":""}]}}]}',
    created_at: '2019-10-09T09:49:00.000Z',
    created_by: 1,
    updated_at: '2019-10-09T09:49:00.000Z',
    updated_by: 1
  }, {
    id: 24,
    type: 'bulk_email',
    key: 'bulk_email_settings',
    value: '{"provider":"mailgun","apiKey":"","domain":"","baseUrl":""}',
    created_at: '2019-10-09T09:49:00.000Z',
    created_by: 1,
    updated_at: '2019-10-09T09:49:00.000Z',
    updated_by: 1
  }, {
    id: 25,
    key: 'secondary_navigation',
    type: 'blog',
    created_at: '2019-11-20T09:44:30.810Z',
    created_by: 1,
    updated_at: '2019-11-20T13:32:49.868Z',
    updated_by: 1,
    value: JSON.stringify([])
  }];
  _exports.default = _default;
});
;define("ghost-admin/mirage/fixtures/sites", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = [{
    title: 'Test Blog',
    url: "".concat(window.location.origin, "/")
  }];
  _exports.default = _default;
});
;define("ghost-admin/mirage/fixtures/themes", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = [{
    name: 'casper',
    package: {
      name: 'Blog',
      version: '1.0'
    },
    active: true
  }, {
    name: 'foo',
    package: {
      name: 'Foo',
      version: '0.1'
    }
  }, {
    name: 'bar'
  }];
  _exports.default = _default;
});
;define("ghost-admin/mirage/fixtures/timezones", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = [{
    name: 'Pacific/Pago_Pago',
    label: '(GMT -11:00) Midway Island, Samoa'
  }, {
    name: 'Pacific/Honolulu',
    label: '(GMT -10:00) Hawaii'
  }, {
    name: 'America/Anchorage',
    label: '(GMT -9:00) Alaska'
  }, {
    name: 'America/Tijuana',
    label: '(GMT -8:00) Chihuahua, La Paz, Mazatlan'
  }, {
    name: 'America/Los_Angeles',
    label: '(GMT -8:00) Pacific Time (US & Canada); Tijuana'
  }, {
    name: 'America/Phoenix',
    label: '(GMT -7:00) Arizona'
  }, {
    name: 'America/Denver',
    label: '(GMT -7:00) Mountain Time (US & Canada)'
  }, {
    name: 'America/Costa_Rica',
    label: '(GMT -6:00) Central America'
  }, {
    name: 'America/Chicago',
    label: '(GMT -6:00) Central Time (US & Canada)'
  }, {
    name: 'America/Mexico_City',
    label: '(GMT -6:00) Guadalajara, Mexico City, Monterrey'
  }, {
    name: 'America/Regina',
    label: '(GMT -6:00) Saskatchewan'
  }, {
    name: 'America/Bogota',
    label: '(GMT -5:00) Bogota, Lima, Quito'
  }, {
    name: 'America/New_York',
    label: '(GMT -5:00) Eastern Time (US & Canada)'
  }, {
    name: 'America/Fort_Wayne',
    label: '(GMT -5:00) Indiana (East)'
  }, {
    name: 'America/Caracas',
    label: '(GMT -4:00) Caracas, La Paz'
  }, {
    name: 'America/Halifax',
    label: '(GMT -4:00) Atlantic Time (Canada); Brasilia, Greenland'
  }, {
    name: 'America/Santiago',
    label: '(GMT -4:00) Santiago'
  }, {
    name: 'America/St_Johns',
    label: '(GMT -3:30) Newfoundland'
  }, {
    name: 'America/Argentina/Buenos_Aires',
    label: '(GMT -3:00) Buenos Aires, Georgetown'
  }, {
    name: 'America/Noronha',
    label: '(GMT -2:00) Fernando de Noronha'
  }, {
    name: 'Atlantic/Azores',
    label: '(GMT -1:00) Azores'
  }, {
    name: 'Atlantic/Cape_Verde',
    label: '(GMT -1:00) Cape Verde Is.'
  }, {
    name: 'Etc/UTC',
    label: '(GMT) UTC'
  }, {
    name: 'Africa/Casablanca',
    label: '(GMT +0:00) Casablanca, Monrovia'
  }, {
    name: 'Europe/Dublin',
    label: '(GMT +0:00) Dublin, Edinburgh, London'
  }, {
    name: 'Europe/Amsterdam',
    label: '(GMT +1:00) Amsterdam, Berlin, Rome, Stockholm, Vienna'
  }, {
    name: 'Europe/Prague',
    label: '(GMT +1:00) Belgrade, Bratislava, Budapest, Prague'
  }, {
    name: 'Europe/Paris',
    label: '(GMT +1:00) Brussels, Copenhagen, Madrid, Paris'
  }, {
    name: 'Europe/Warsaw',
    label: '(GMT +1:00) Sarajevo, Skopje, Warsaw, Zagreb'
  }, {
    name: 'Africa/Lagos',
    label: '(GMT +1:00) West Central Africa'
  }, {
    name: 'Europe/Istanbul',
    label: '(GMT +2:00) Athens, Beirut, Bucharest, Istanbul'
  }, {
    name: 'Africa/Cairo',
    label: '(GMT +2:00) Cairo, Egypt'
  }, {
    name: 'Africa/Maputo',
    label: '(GMT +2:00) Harare'
  }, {
    name: 'Europe/Kiev',
    label: '(GMT +2:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius'
  }, {
    name: 'Asia/Jerusalem',
    label: '(GMT +2:00) Jerusalem'
  }, {
    name: 'Africa/Johannesburg',
    label: '(GMT +2:00) Pretoria'
  }, {
    name: 'Asia/Baghdad',
    label: '(GMT +3:00) Baghdad'
  }, {
    name: 'Asia/Riyadh',
    label: '(GMT +3:00) Kuwait, Nairobi, Riyadh'
  }, {
    name: 'Europe/Moscow',
    label: '(GMT +3:00) Moscow, St. Petersburg, Volgograd'
  }, {
    name: 'Asia/Tehran',
    label: '(GMT +3:30) Tehran'
  }, {
    name: 'Asia/Dubai',
    label: '(GMT +4:00) Abu Dhabi, Muscat'
  }, {
    name: 'Asia/Baku',
    label: '(GMT +4:00) Baku, Tbilisi, Yerevan'
  }, {
    name: 'Asia/Kabul',
    label: '(GMT +4:30) Kabul'
  }, {
    name: 'Asia/Karachi',
    label: '(GMT +5:00) Islamabad, Karachi, Tashkent'
  }, {
    name: 'Asia/Yekaterinburg',
    label: '(GMT +5:00) Yekaterinburg'
  }, {
    name: 'Asia/Kolkata',
    label: '(GMT +5:30) Chennai, Calcutta, Mumbai, New Delhi'
  }, {
    name: 'Asia/Kathmandu',
    label: '(GMT +5:45) Katmandu'
  }, {
    name: 'Asia/Almaty',
    label: '(GMT +6:00) Almaty, Novosibirsk'
  }, {
    name: 'Asia/Dhaka',
    label: '(GMT +6:00) Astana, Dhaka, Sri Jayawardenepura'
  }, {
    name: 'Asia/Rangoon',
    label: '(GMT +6:30) Rangoon'
  }, {
    name: 'Asia/Bangkok',
    label: '(GMT +7:00) Bangkok, Hanoi, Jakarta'
  }, {
    name: 'Asia/Krasnoyarsk',
    label: '(GMT +7:00) Krasnoyarsk'
  }, {
    name: 'Asia/Hong_Kong',
    label: '(GMT +8:00) Beijing, Chongqing, Hong Kong, Urumqi'
  }, {
    name: 'Asia/Irkutsk',
    label: '(GMT +8:00) Irkutsk, Ulaan Bataar'
  }, {
    name: 'Asia/Singapore',
    label: '(GMT +8:00) Kuala Lumpur, Perth, Singapore, Taipei'
  }, {
    name: 'Asia/Tokyo',
    label: '(GMT +9:00) Osaka, Sapporo, Tokyo'
  }, {
    name: 'Asia/Seoul',
    label: '(GMT +9:00) Seoul'
  }, {
    name: 'Asia/Yakutsk',
    label: '(GMT +9:00) Yakutsk'
  }, {
    name: 'Australia/Adelaide',
    label: '(GMT +9:30) Adelaide'
  }, {
    name: 'Australia/Darwin',
    label: '(GMT +9:30) Darwin'
  }, {
    name: 'Australia/Brisbane',
    label: '(GMT +10:00) Brisbane, Guam, Port Moresby'
  }, {
    name: 'Australia/Sydney',
    label: '(GMT +10:00) Canberra, Hobart, Melbourne, Sydney, Vladivostok'
  }, {
    name: 'Asia/Magadan',
    label: '(GMT +11:00) Magadan, Soloman Is., New Caledonia'
  }, {
    name: 'Pacific/Auckland',
    label: '(GMT +12:00) Auckland, Wellington'
  }, {
    name: 'Pacific/Fiji',
    label: '(GMT +12:00) Fiji, Kamchatka, Marshall Is.'
  }, {
    name: 'Pacific/Kwajalein',
    label: '(GMT +12:00) International Date Line West'
  }];
  _exports.default = _default;
});
;define("ghost-admin/mirage/models/api-key", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({
    integration: (0, _emberCliMirage.belongsTo)()
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/config", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({});

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/email", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({
    post: (0, _emberCliMirage.belongsTo)()
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/integration", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({
    apiKeys: (0, _emberCliMirage.hasMany)(),
    webhooks: (0, _emberCliMirage.hasMany)()
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/invite", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({
    role: (0, _emberCliMirage.belongsTo)()
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/member", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({});

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/notification", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({});

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/page", ["exports", "ghost-admin/mirage/models/post"], function (_exports, _post) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _post.default.extend({});

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/post", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({
    tags: (0, _emberCliMirage.hasMany)(),
    authors: (0, _emberCliMirage.hasMany)('user'),
    email: (0, _emberCliMirage.belongsTo)()
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/role", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({});

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/site", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({});

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/subscriber", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({});

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/tag", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({
    posts: (0, _emberCliMirage.hasMany)()
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/theme", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({});

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/user", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({
    // used by the serializer to determine whether
    // or not to include the post count
    postCount: false,
    roles: (0, _emberCliMirage.hasMany)(),
    posts: (0, _emberCliMirage.hasMany)()
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/models/webhook", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.Model.extend({
    integration: (0, _emberCliMirage.belongsTo)()
  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/scenarios/default", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;

  function _default(server) {
    // Seed your development database using your factories. This
    // data will not be loaded in your tests.
    // server.createList('contact', 10);
    server.createList('tag', 100);
    server.create('integration', {
      name: 'Demo'
    });
    server.createList('member', 125);
  }
});
;define("ghost-admin/mirage/serializers/application", ["exports", "ember-cli-mirage", "ember-cli-mirage/utils/inflector"], function (_exports, _emberCliMirage, _inflector) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _emberCliMirage.RestSerializer.extend({
    keyForCollection(collection) {
      return Ember.String.underscore((0, _inflector.pluralize)(collection));
    },

    keyForAttribute(attr) {
      return Ember.String.underscore(attr);
    },

    keyForRelationship(relationship) {
      return Ember.String.underscore(relationship);
    },

    keyForEmbeddedRelationship(relationship) {
      return Ember.String.underscore(relationship);
    },

    keyForForeignKey(relationshipName) {
      return "".concat(Ember.String.underscore(relationshipName), "_id");
    },

    serialize(object, request) {
      // Ember expects pluralized responses for the post, user, and invite models,
      // and this shortcut will ensure that those models are pluralized
      if (this.isModel(object) && ['post', 'user', 'invite'].includes(object.modelName)) {
        object = new _emberCliMirage.Collection(object.modelName, [object]);
      }

      let json = _emberCliMirage.RestSerializer.prototype.serialize.call(this, object, request);

      if (this.isCollection(object) && object.meta) {
        json.meta = object.meta;
      }

      return json;
    },

    // POST and PUT request send data in pluralized attributes for all models,
    // so we extract it here - this allows #normalizedRequestAttrs to work
    // in route functions
    normalize(body, modelName) {
      // sometimes mirage doesn't include a modelName, so we extrapolate it from
      // the first element of Object.keys
      modelName = (0, _inflector.pluralize)(modelName) || Object.keys(body)[0];
      let [attributes] = body[modelName] || [{}];
      return {
        data: {
          attributes
        }
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/serializers/integration", ["exports", "ghost-admin/mirage/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    embed: true,

    include(request) {
      if (!request.queryParams.include) {
        return;
      }

      return request.queryParams.include.split(',').map(Ember.String.camelize);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/serializers/page", ["exports", "ghost-admin/mirage/serializers/post"], function (_exports, _post) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _post.default.extend({});

  _exports.default = _default;
});
;define("ghost-admin/mirage/serializers/post", ["exports", "ghost-admin/mirage/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    embed: true,

    include()
    /*request*/
    {
      let includes = [];
      includes.push('tags');
      includes.push('authors');
      return includes;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/serializers/tag", ["exports", "ghost-admin/mirage/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    // make the tag.count.posts value dynamic
    serialize(tagModelOrCollection, request) {
      let updatePostCount = tag => {
        tag.update('count', {
          posts: tag.postIds.length
        });
      };

      if (this.isModel(tagModelOrCollection)) {
        updatePostCount(tagModelOrCollection);
      } else {
        tagModelOrCollection.models.forEach(updatePostCount);
      }

      return _application.default.prototype.serialize.call(this, tagModelOrCollection, request);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/serializers/user", ["exports", "ghost-admin/mirage/serializers/application", "ember-cli-mirage"], function (_exports, _application, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    embed: true,

    include(request) {
      if (request.queryParams.include && request.queryParams.include.indexOf('roles') >= 0) {
        return ['roles'];
      }

      return [];
    },

    serialize(object, request) {
      if (this.isCollection(object)) {
        return _application.default.prototype.serialize.call(this, object, request);
      }

      let {
        user
      } = _emberCliMirage.RestSerializer.prototype.serialize.call(this, object, request);

      if (object.postCount) {
        let posts = object.posts.models.length;
        user.count = {
          posts
        };
      }

      return {
        users: [user]
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mirage/utils", ["exports", "ember-cli-mirage"], function (_exports, _emberCliMirage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.paginatedResponse = paginatedResponse;
  _exports.paginateModelCollection = paginateModelCollection;
  _exports.maintenanceResponse = maintenanceResponse;
  _exports.versionMismatchResponse = versionMismatchResponse;

  /* eslint-disable max-statements-per-line */
  function paginatedResponse(modelName) {
    return function (schema, request) {
      let page = +request.queryParams.page || 1;
      let limit = request.queryParams.limit;
      let collection = schema[modelName].all();

      if (limit !== 'all') {
        limit = +request.queryParams.limit || 15;
      }

      return paginateModelCollection(modelName, collection, page, limit);
    };
  }

  function paginateModelCollection(modelName, collection, page, limit) {
    let pages, next, prev, models;

    if (limit === 'all') {
      pages = 1;
    } else {
      limit = +limit;
      let start = (page - 1) * limit;
      let end = start + limit;
      pages = Math.ceil(collection.models.length / limit);
      models = collection.models.slice(start, end);

      if (start > 0) {
        prev = page - 1;
      }

      if (end < collection.models.length) {
        next = page + 1;
      }
    }

    collection.meta = {
      pagination: {
        page,
        limit,
        pages,
        total: collection.models.length,
        next: next || null,
        prev: prev || null
      }
    };

    if (models) {
      collection.models = models;
    }

    return collection;
  }

  function maintenanceResponse() {
    return new _emberCliMirage.Response(503, {}, {
      errors: [{
        type: 'Maintenance'
      }]
    });
  }

  function versionMismatchResponse() {
    return new _emberCliMirage.Response(400, {}, {
      errors: [{
        type: 'VersionMismatchError'
      }]
    });
  }
});
;define("ghost-admin/mixins/body-event-listener", ["exports", "jquery"], function (_exports, _jquery) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function K() {
    return this;
  } // Code modified from Addepar/ember-widgets
  // https://github.com/Addepar/ember-widgets/blob/master/src/mixins.coffee#L39


  var _default = Ember.Mixin.create({
    bodyElementSelector: 'html',
    bodyClick: K,

    init() {
      this._super(...arguments);

      return Ember.run.next(this, this._setupDocumentHandlers);
    },

    willDestroy() {
      this._super(...arguments);

      return this._removeDocumentHandlers();
    },

    _setupDocumentHandlers() {
      if (this._clickHandler) {
        return;
      }

      this._clickHandler = event => this.bodyClick(event);

      return (0, _jquery.default)(this.bodyElementSelector).on('click', this._clickHandler);
    },

    _removeDocumentHandlers() {
      (0, _jquery.default)(this.bodyElementSelector).off('click', this._clickHandler);
      this._clickHandler = null;
    },

    // http://stackoverflow.com/questions/152975/how-to-detect-a-click-outside-an-element
    click(event) {
      return event.stopPropagation();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mixins/current-user-settings", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Mixin.create({
    transitionAuthor() {
      return user => {
        if (user.get('isAuthorOrContributor')) {
          return this.transitionTo('staff.user', user);
        }

        return user;
      };
    },

    transitionEditor() {
      return user => {
        if (user.get('isEditor')) {
          return this.transitionTo('staff');
        }

        return user;
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mixins/dropdown-mixin", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /*
    Dropdowns and their buttons are evented and do not propagate clicks.
  */
  var _default = Ember.Mixin.create(Ember.Evented, {
    classNameBindings: ['isOpen:open:closed'],
    isOpen: false,

    click(event) {
      this._super(event);

      return event.stopPropagation();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mixins/settings-menu-component", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Mixin.create({
    showSettingsMenu: false,
    isViewingSubview: Ember.computed('showSettingsMenu', {
      get() {
        return false;
      },

      set(key, value) {
        // Not viewing a subview if we can't even see the PSM
        if (!this.showSettingsMenu) {
          return false;
        }

        return value;
      }

    }),
    actions: {
      showSubview() {
        this.set('isViewingSubview', true);
      },

      closeSubview() {
        this.set('isViewingSubview', false);
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/mixins/shortcuts-route", ["exports", "ghost-admin/mixins/shortcuts"], function (_exports, _shortcuts) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /**
   * Only routes can implement shortcuts.
   * If you need to trigger actions on the controller,
   * simply call them with `this.get('controller').send('action')`.
   *
   * To implement shortcuts, add this mixin to your `extend()`,
   * and implement a `shortcuts` hash.
   * In this hash, keys are shortcut combinations and values are route action names.
   *  (see [keymaster docs](https://github.com/madrobby/keymaster/blob/master/README.markdown)),
   *
   * ```javascript
   * shortcuts: {
   *     'ctrl+s, command+s': 'save'
   * }
   * ```
   * For more complex actions, shortcuts can instead have their value
   * be an object like {action, options}
   * ```javascript
   * shortcuts: {
   *      'ctrl+k': {action: 'markdownShortcut', options: 'createLink'}
   * }
   * ```
   * You can set the scope of your shortcut by passing a scope property.
   * ```javascript
   * shortcuts : {
   *   'enter': {action : 'confirmModal', scope: 'modal'}
   * }
   * ```
   * If you don't specify a scope, we use a default scope called "default".
   * To have all your shortcut work in all scopes, give it the scope "all".
   * Find out more at the keymaster docs
   */
  var _default = Ember.Mixin.create(_shortcuts.default, {
    activate() {
      this._super(...arguments);

      this.registerShortcuts();
    },

    deactivate() {
      this._super(...arguments);

      this.removeShortcuts();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mixins/shortcuts", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  // Configure KeyMaster to respond to all shortcuts,
  // even inside of
  // input, textarea, and select.
  key.filter = function () {
    return true;
  };

  key.setScope('default');
  /**
   * Only routes can implement shortcuts.
   * If you need to trigger actions on the controller,
   * simply call them with `this.get('controller').send('action')`.
   *
   * To implement shortcuts, add this mixin to your `extend()`,
   * and implement a `shortcuts` hash.
   * In this hash, keys are shortcut combinations and values are route action names.
   *  (see [keymaster docs](https://github.com/madrobby/keymaster/blob/master/README.markdown)),
   *
   * ```javascript
   * shortcuts: {
   *     'ctrl+s, command+s': 'save'
   * }
   * ```
   * For more complex actions, shortcuts can instead have their value
   * be an object like {action, options}
   * ```javascript
   * shortcuts: {
   *      'ctrl+k': {action: 'markdownShortcut', options: 'createLink'}
   * }
   * ```
   * You can set the scope of your shortcut by passing a scope property.
   * ```javascript
   * shortcuts : {
   *   'enter': {action : 'confirmModal', scope: 'modal'}
   * }
   * ```
   * If you don't specify a scope, we use a default scope called "default".
   * To have all your shortcut work in all scopes, give it the scope "all".
   * Find out more at the keymaster docs
   */

  var _default = Ember.Mixin.create({
    registerShortcuts() {
      let shortcuts = this.shortcuts;
      Object.keys(shortcuts).forEach(shortcut => {
        let scope = shortcuts[shortcut].scope || 'default';
        let action = shortcuts[shortcut];
        let options;

        if (Ember.typeOf(action) !== 'string') {
          options = action.options;
          action = action.action;
        }

        key(shortcut, scope, event => {
          // stop things like ctrl+s from actually opening a save dialogue
          event.preventDefault();
          Ember.run(this, function () {
            this.send(action, options);
          });
        });
      });
    },

    removeShortcuts() {
      let shortcuts = this.shortcuts;
      Object.keys(shortcuts).forEach(shortcut => {
        let scope = shortcuts[shortcut].scope || 'default';
        key.unbind(shortcut, scope);
      });
    },

    willDestroy() {
      this._super(...arguments);

      this.removeShortcuts();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mixins/slug-url", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Mixin.create({
    buildURL(_modelName, _id, _snapshot, _requestType, query) {
      let url = this._super(...arguments);

      if (query && !Ember.isBlank(query.slug)) {
        url += "slug/".concat(query.slug, "/");
        delete query.slug;
      }

      return url;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mixins/text-input", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const keyCodes = {
    13: 'Enter',
    9: 'Tab'
  };

  var _default = Ember.Mixin.create({
    userAgent: Ember.inject.service(),
    attributeBindings: ['autofocus'],
    selectOnClick: false,
    shouldFocus: false,
    stopEnterKeyDownPropagation: false,
    autofocus: Ember.computed(function () {
      if (this.shouldFocus) {
        return this.userAgent.os.isIOS ? false : 'autofocus';
      }

      return false;
    }),

    didInsertElement() {
      this._super(...arguments);

      this._focus();
    },

    click(event) {
      if (this.selectOnClick) {
        event.currentTarget.select();
      }
    },

    keyDown(event) {
      // stop event propagation when pressing "enter"
      // most useful in the case when undesired (global) keyboard shortcuts
      // are getting triggered while interacting with this particular input element.
      if (event.keyCode === 13 && this.stopEnterKeyDownPropagation) {
        event.stopPropagation();
        return true;
      } // prevent default TAB behaviour if we have a keyEvent for it


      if (event.keyCode === 9 && typeof this.get('keyEvents.Tab') === 'function') {
        event.preventDefault();
      }

      this._super(...arguments);
    },

    keyPress(event) {
      // prevent default ENTER behaviour if we have a keyEvent for it
      if (event.keyCode === 13 && typeof this.get('keyEvents.Enter') === 'function') {
        event.preventDefault();
      }

      this._super(...arguments);
    },

    keyUp(event) {
      if (event.keyCode) {
        let methodName = this._getMethodFromKeyCode(event.keyCode);

        let method = this.get("keyEvents.".concat(methodName));

        if (method) {
          method(event.target.value);
        }
      }
    },

    _focus() {
      // Until mobile safari has better support
      // for focusing, we just ignore it
      if (this.shouldFocus && !this.userAgent.os.isIOS) {
        this.element.focus();
      }
    },

    _getMethodFromKeyCode(keyCode) {
      let methodName = keyCodes[keyCode.toString()];
      return methodName;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mixins/unauthenticated-route-mixin", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Mixin.create({
    ajax: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    session: Ember.inject.service(),
    routeIfAlreadyAuthenticated: 'home',

    beforeModel() {
      let authUrl = this.get('ghostPaths.url').api('authentication', 'setup'); // check the state of the setup process via the API

      return this.ajax.request(authUrl).then(result => {
        let [setup] = result.setup;

        if (setup.status !== true) {
          this.transitionTo('setup');
        } else {
          // NOTE: this is the same as ESA's UnauthenticatedRouteMixin,
          // adding that mixin to this and calling _super wasn't calling
          // the ESA mixin's beforeModel method
          if (this.session.get('isAuthenticated')) {
            let routeIfAlreadyAuthenticated = this.routeIfAlreadyAuthenticated;
            return this.transitionTo(routeIfAlreadyAuthenticated);
          } else {
            return this._super(...arguments);
          }
        }
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/mixins/validation-engine", ["exports", "ghost-admin/validators/custom-view", "ember-data", "ghost-admin/validators/integration", "ghost-admin/validators/invite-user", "ghost-admin/validators/label", "ghost-admin/validators/member", "@ember-data/model", "ghost-admin/validators/nav-item", "ghost-admin/validators/post", "ghost-admin/validators/reset", "ghost-admin/validators/setting", "ghost-admin/validators/setup", "ghost-admin/validators/signin", "ghost-admin/validators/signup", "ghost-admin/validators/slack-integration", "ghost-admin/validators/tag-settings", "ghost-admin/validators/user", "ghost-admin/validators/webhook"], function (_exports, _customView, _emberData, _integration, _inviteUser, _label, _member, _model, _navItem, _post, _reset, _setting, _setup, _signin, _signup, _slackIntegration, _tagSettings, _user, _webhook) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // TODO: remove usage of Ember Data's private `Errors` class when refactoring validations
  // eslint-disable-next-line
  // eslint-disable-line
  const {
    Errors
  } = _emberData.default;
  /**
  * The class that gets this mixin will receive these properties and functions.
  * It will be able to validate any properties on itself (or the model it passes to validate())
  * with the use of a declared validator.
  */

  var _default = Ember.Mixin.create({
    // these validators can be passed a model to validate when the class that
    // mixes in the ValidationEngine declares a validationType equal to a key on this object.
    // the model is either passed in via `this.validate({ model: object })`
    // or by calling `this.validate()` without the model property.
    // in that case the model will be the class that the ValidationEngine
    // was mixed into, i.e. the controller or Ember Data model.
    validators: {
      customView: _customView.default,
      inviteUser: _inviteUser.default,
      navItem: _navItem.default,
      post: _post.default,
      reset: _reset.default,
      setting: _setting.default,
      setup: _setup.default,
      signin: _signin.default,
      signup: _signup.default,
      slackIntegration: _slackIntegration.default,
      tag: _tagSettings.default,
      user: _user.default,
      member: _member.default,
      integration: _integration.default,
      webhook: _webhook.default,
      label: _label.default
    },
    // This adds the Errors object to the validation engine, and shouldn't affect
    // ember-data models because they essentially use the same thing
    errors: null,
    // Store whether a property has been validated yet, so that we know whether or not
    // to show error / success validation for a field
    hasValidated: null,

    init() {
      this._super(...arguments);

      this.set('errors', Errors.create());
      this.set('hasValidated', Ember.A());
    },

    /**
    * Passes the model to the validator specified by validationType.
    * Returns a promise that will resolve if validation succeeds, and reject if not.
    * Some options can be specified:
    *
    * `model: Object` - you can specify the model to be validated, rather than pass the default value of `this`,
    *                   the class that mixes in this mixin.
    *
    * `property: String` - you can specify a specific property to validate. If
    * 					   no property is specified, the entire model will be
    * 					   validated
    */
    validate(opts) {
      let model = this;
      let hasValidated, type, validator;
      opts = opts || {};

      if (opts.model) {
        model = opts.model;
      } else if (this instanceof _model.default) {
        model = this;
      } else if (this.model) {
        model = this.model;
      }

      type = this.validationType || model.get('validationType');
      validator = this.get("validators.".concat(type)) || model.get("validators.".concat(type));
      hasValidated = this.hasValidated;
      opts.validationType = type;
      return new Ember.RSVP.Promise((resolve, reject) => {
        let passed;

        if (!type || !validator) {
          return reject(["The validator specified, \"".concat(type, "\", did not exist!")]);
        }

        if (opts.property) {
          // If property isn't in `hasValidated`, add it to mark that this field can show a validation result
          hasValidated.addObject(opts.property);
          model.get('errors').remove(opts.property);
        } else {
          model.get('errors').clear();
        }

        passed = validator.check(model, opts.property);
        return passed ? resolve() : reject();
      });
    },

    /**
    * The primary goal of this method is to override the `save` method on Ember Data models.
    * This allows us to run validation before actually trying to save the model to the server.
    * You can supply options to be passed into the `validate` method, since the ED `save` method takes no options.
    */
    save(options) {
      let {
        _super
      } = this;
      options = options || {};
      options.wasSave = true; // model.destroyRecord() calls model.save() behind the scenes.
      // in that case, we don't need validation checks or error propagation,
      // because the model itself is being destroyed.

      if (this.isDeleted) {
        return this._super(...arguments);
      } // If validation fails, reject with validation errors.
      // If save to the server fails, reject with server response.


      return this.validate(options).then(() => {
        if (typeof this.beforeSave === 'function') {
          this.beforeSave();
        }

        return _super.call(this, options);
      }).catch(result => {
        // server save failed or validator type doesn't exist
        if (result && !Ember.isArray(result)) {
          throw result;
        }

        return Ember.RSVP.reject(result);
      });
    },

    actions: {
      validate(property) {
        this.validate({
          property
        });
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/mixins/validation-state", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Mixin.create({
    errors: null,
    property: '',
    hasValidated: Ember.A(),
    hasError: false,

    setHasError() {
      let property = this.property;
      let errors = this.errors;
      let hasValidated = this.hasValidated; // if we aren't looking at a specific property we always want an error class

      if (!property && errors && !errors.get('isEmpty')) {
        this.set('hasError', true);
        return;
      } // If we haven't yet validated this field, there is no validation class needed


      if (!hasValidated || !hasValidated.includes(property)) {
        this.set('hasError', false);
        return;
      }

      if (errors && !Ember.isEmpty(errors.errorsFor(property))) {
        this.set('hasError', true);
        return;
      }

      this.set('hasError', false);
    },

    // eslint-disable-next-line ghost/ember/no-observers
    hasErrorObserver: Ember.on('init', Ember.observer('errors.[]', 'property', 'hasValidated.[]', function () {
      Ember.run.once(this, 'setHasError');
    }))
  });

  _exports.default = _default;
});
;define("ghost-admin/models/action", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend({
    resourceId: (0, _model.attr)('string'),
    resourceType: (0, _model.attr)('string'),
    actorId: (0, _model.attr)('string'),
    actorType: (0, _model.attr)('string'),
    event: (0, _model.attr)('string'),
    context: (0, _model.attr)('json-string'),
    createdAtUTC: (0, _model.attr)('moment-utc')
  });

  _exports.default = _default;
});
;define("ghost-admin/models/api-key", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend({
    type: (0, _model.attr)('string'),
    secret: (0, _model.attr)('string'),
    lastSeenAtUTC: (0, _model.attr)('moment-utc'),
    createdAtUTC: (0, _model.attr)('moment-utc'),
    createdBy: (0, _model.attr)('number'),
    updatedAtUTC: (0, _model.attr)('moment-utc'),
    updatedBy: (0, _model.attr)('number'),
    integration: (0, _model.belongsTo)('integration')
  });

  _exports.default = _default;
});
;define("ghost-admin/models/base", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend({
    // this is a hack that gives us access to meta data in single resource responses
    // allows similar response.get('_meta') as with multi-resource responses but can
    // suffer from race conditions
    // TODO: review once the record links and meta RFC lands
    // https://github.com/emberjs/rfcs/blob/master/text/0332-ember-data-record-links-and-meta.md
    get _meta() {
      return this._internalModel.type.___meta;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/models/coordinator", ["exports", "ghost-admin/models/obj-hash"], function (_exports, _objHash) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Object.extend(Ember.Evented, {
    objectMap: Ember.computed(function () {
      return _objHash.default.create();
    }),
    getObject: function (id, ops) {
      ops = ops || {};
      var payload = this.get('objectMap').getObj(id);

      if (payload.ops.source) {
        payload.ops.source.sendAction('action', payload.obj);
      }

      if (payload.ops.target) {
        payload.ops.target.sendAction('action', payload.obj);
      }

      this.trigger("objectMoved", {
        obj: payload.obj,
        source: payload.ops.source,
        target: ops.target
      });
      return payload.obj;
    },
    setObject: function (obj, ops) {
      ops = ops || {};
      return this.get('objectMap').add({
        obj: obj,
        ops: ops
      });
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/models/email", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend({
    emailCount: (0, _model.attr)('number'),
    error: (0, _model.attr)('string'),
    html: (0, _model.attr)('string'),
    plaintext: (0, _model.attr)('string'),
    stats: (0, _model.attr)('json-string'),
    status: (0, _model.attr)('string'),
    subject: (0, _model.attr)('string'),
    submittedAtUTC: (0, _model.attr)('moment-utc'),
    uuid: (0, _model.attr)('string'),
    createdAtUTC: (0, _model.attr)('moment-utc'),
    createdBy: (0, _model.attr)('string'),
    updatedAtUTC: (0, _model.attr)('moment-utc'),
    updatedBy: (0, _model.attr)('string'),
    post: (0, _model.belongsTo)('post'),
    isSuccess: Ember.computed.equal('status', 'submitted'),
    isFailure: Ember.computed.equal('status', 'failed'),

    retry() {
      return this.store.adapterFor('email').retry(this);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/models/integration", ["exports", "@ember-data/model", "ghost-admin/mixins/validation-engine"], function (_exports, _model, _validationEngine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend(_validationEngine.default, {
    validationType: 'integration',
    name: (0, _model.attr)('string'),
    slug: (0, _model.attr)('string'),
    type: (0, _model.attr)('string'),
    iconImage: (0, _model.attr)('string'),
    description: (0, _model.attr)('string'),
    createdAtUTC: (0, _model.attr)('moment-utc'),
    createdBy: (0, _model.attr)('number'),
    updatedAtUTC: (0, _model.attr)('moment-utc'),
    updatedBy: (0, _model.attr)('number'),
    apiKeys: (0, _model.hasMany)('api-key', {
      embedded: 'always',
      async: false
    }),
    webhooks: (0, _model.hasMany)('webhook', {
      embedded: 'always',
      async: false
    }),
    adminKey: Ember.computed('apiKeys.[]', function () {
      return this.apiKeys.findBy('type', 'admin');
    }),
    contentKey: Ember.computed('apiKeys.[]', function () {
      return this.apiKeys.findBy('type', 'content');
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/models/invite", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend({
    token: (0, _model.attr)('string'),
    email: (0, _model.attr)('string'),
    expires: (0, _model.attr)('number'),
    createdAtUTC: (0, _model.attr)('moment-utc'),
    createdBy: (0, _model.attr)('number'),
    updatedAtUTC: (0, _model.attr)('moment-utc'),
    updatedBy: (0, _model.attr)('number'),
    status: (0, _model.attr)('string'),
    role: (0, _model.belongsTo)('role', {
      async: false
    }),
    ajax: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),

    resend() {
      let inviteData = {
        email: this.email,
        role_id: this.role.id
      };
      let inviteUrl = this.get('ghostPaths.url').api('invites');
      return this.ajax.post(inviteUrl, {
        data: JSON.stringify({
          invites: [inviteData]
        }),
        contentType: 'application/json'
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/models/label", ["exports", "@ember-data/model", "ghost-admin/mixins/validation-engine"], function (_exports, _model, _validationEngine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend(_validationEngine.default, {
    validationType: 'label',
    name: (0, _model.attr)('string'),
    slug: (0, _model.attr)('string'),
    createdAtUTC: (0, _model.attr)('moment-utc'),
    updatedAtUTC: (0, _model.attr)('moment-utc'),
    createdBy: (0, _model.attr)('number'),
    updatedBy: (0, _model.attr)('number'),
    count: (0, _model.attr)('raw'),
    feature: Ember.inject.service()
  });

  _exports.default = _default;
});
;define("ghost-admin/models/member-subscription", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Object.extend({
    customer: 'customer_id',
    subscription: 'subscription_id',
    plan: 'plan_id',
    status: 'subscription status',
    name: 'plan nickname e.g. "Monthly"',
    interval: 'how often plan charges e.g "month", "year"',
    amount: 'amount in smallest denomination e.g. cents, so value for 5 dollars would be 500',
    currency: 'e.g. usd',
    last4: 'last four digits of card OR null',
    validUntil: 'epoch timestamp of when current interval ends IN SECONDS'
  });

  _exports.default = _default;
});
;define("ghost-admin/models/member", ["exports", "@ember-data/model", "ghost-admin/mixins/validation-engine", "ember-concurrency"], function (_exports, _model, _validationEngine, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend(_validationEngine.default, {
    validationType: 'member',
    name: (0, _model.attr)('string'),
    email: (0, _model.attr)('string'),
    note: (0, _model.attr)('string'),
    createdAtUTC: (0, _model.attr)('moment-utc'),
    stripe: (0, _model.attr)('member-subscription'),
    subscribed: (0, _model.attr)('boolean', {
      defaultValue: true
    }),
    labels: (0, _model.hasMany)('label', {
      embedded: 'always',
      async: false
    }),
    comped: (0, _model.attr)('boolean', {
      defaultValue: false
    }),
    geolocation: (0, _model.attr)('json-string'),
    ghostPaths: Ember.inject.service(),
    ajax: Ember.inject.service(),

    // remove client-generated labels, which have `id: null`.
    // Ember Data won't recognize/update them automatically
    // when returned from the server with ids.
    // https://github.com/emberjs/data/issues/1829
    updateLabels() {
      let labels = this.labels;
      let oldLabels = labels.filterBy('id', null);
      labels.removeObjects(oldLabels);
      oldLabels.invoke('deleteRecord');
    },

    fetchSigninUrl: (0, _emberConcurrency.task)(function* () {
      let url = this.get('ghostPaths.url').api('members', this.get('id'), 'signin_urls');
      let response = yield this.ajax.request(url);
      return response.member_signin_urls[0];
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/models/navigation-item", ["exports", "ghost-admin/mixins/validation-engine"], function (_exports, _validationEngine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Object.extend(_validationEngine.default, {
    label: '',
    url: '',
    isNew: false,
    isSecondary: false,
    validationType: 'navItem',
    isComplete: Ember.computed('label', 'url', function () {
      let {
        label,
        url
      } = this;
      return !Ember.isBlank(label) && !Ember.isBlank(url);
    }),
    isBlank: Ember.computed('label', 'url', function () {
      let {
        label,
        url
      } = this;
      return Ember.isBlank(label) && Ember.isBlank(url);
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/models/notification", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend({
    custom: (0, _model.attr)('boolean'),
    dismissible: (0, _model.attr)('boolean'),
    key: (0, _model.attr)('string'),
    message: (0, _model.attr)('string'),
    status: (0, _model.attr)('string'),
    type: (0, _model.attr)('string')
  });

  _exports.default = _default;
});
;define("ghost-admin/models/obj-hash", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Object.extend({
    contentLength: 0,
    length: Ember.computed.alias('contentLength'),
    init: function () {
      this._super();

      this.content = {};
    },
    add: function (obj) {
      var id = this.generateId();
      this.get('content')[id] = obj;
      this.incrementProperty("contentLength");
      return id;
    },
    getObj: function (key) {
      var res = this.get('content')[key];

      if (!res) {
        throw "no obj for key " + key;
      }

      return res;
    },
    generateId: function () {
      var num = Math.random() * 1000000000000.0;
      num = parseInt(num);
      num = "" + num;
      return num;
    },
    keys: function () {
      var res = [];

      for (var key in this.get('content')) {
        res.push(key);
      }

      return Ember.A(res);
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/models/page", ["exports", "ghost-admin/models/post"], function (_exports, _post) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _post.default.extend({
    displayName: 'page'
  });

  _exports.default = _default;
});
;define("ghost-admin/models/post", ["exports", "@ember-data/model", "ghost-admin/mixins/validation-engine", "ghost-admin/utils/bound-one-way", "moment"], function (_exports, _model, _validationEngine, _boundOneWay, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // ember-cli-shims doesn't export these so we must get them manually
  const {
    Comparable
  } = Ember;

  function statusCompare(postA, postB) {
    let status1 = postA.get('status');
    let status2 = postB.get('status'); // if any of those is empty

    if (!status1 && !status2) {
      return 0;
    }

    if (!status1 && status2) {
      return -1;
    }

    if (!status2 && status1) {
      return 1;
    } // We have to make sure, that scheduled posts will be listed first
    // after that, draft and published will be sorted alphabetically and don't need
    // any manual comparison.


    if (status1 === 'scheduled' && (status2 === 'draft' || status2 === 'published')) {
      return -1;
    }

    if (status2 === 'scheduled' && (status1 === 'draft' || status1 === 'published')) {
      return 1;
    }

    return Ember.compare(status1.valueOf(), status2.valueOf());
  }

  function publishedAtCompare(postA, postB) {
    let published1 = postA.get('publishedAtUTC');
    let published2 = postB.get('publishedAtUTC');

    if (!published1 && !published2) {
      return 0;
    }

    if (!published1 && published2) {
      return -1;
    }

    if (!published2 && published1) {
      return 1;
    }

    return Ember.compare(published1.valueOf(), published2.valueOf());
  }

  var _default = _model.default.extend(Comparable, _validationEngine.default, {
    config: Ember.inject.service(),
    feature: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    clock: Ember.inject.service(),
    settings: Ember.inject.service(),
    displayName: 'post',
    validationType: 'post',
    createdAtUTC: (0, _model.attr)('moment-utc'),
    excerpt: (0, _model.attr)('string'),
    customExcerpt: (0, _model.attr)('string'),
    featured: (0, _model.attr)('boolean', {
      defaultValue: false
    }),
    featureImage: (0, _model.attr)('string'),
    canonicalUrl: (0, _model.attr)('string'),
    codeinjectionFoot: (0, _model.attr)('string', {
      defaultValue: ''
    }),
    codeinjectionHead: (0, _model.attr)('string', {
      defaultValue: ''
    }),
    customTemplate: (0, _model.attr)('string'),
    ogImage: (0, _model.attr)('string'),
    ogTitle: (0, _model.attr)('string'),
    ogDescription: (0, _model.attr)('string'),
    twitterImage: (0, _model.attr)('string'),
    twitterTitle: (0, _model.attr)('string'),
    twitterDescription: (0, _model.attr)('string'),
    emailSubject: (0, _model.attr)('string'),
    html: (0, _model.attr)('string'),
    locale: (0, _model.attr)('string'),
    visibility: (0, _model.attr)('string'),
    metaDescription: (0, _model.attr)('string'),
    metaTitle: (0, _model.attr)('string'),
    mobiledoc: (0, _model.attr)('json-string'),
    plaintext: (0, _model.attr)('string'),
    publishedAtUTC: (0, _model.attr)('moment-utc'),
    slug: (0, _model.attr)('string'),
    status: (0, _model.attr)('string', {
      defaultValue: 'draft'
    }),
    title: (0, _model.attr)('string', {
      defaultValue: ''
    }),
    updatedAtUTC: (0, _model.attr)('moment-utc'),
    updatedBy: (0, _model.attr)('number'),
    url: (0, _model.attr)('string'),
    uuid: (0, _model.attr)('string'),
    sendEmailWhenPublished: (0, _model.attr)('boolean', {
      defaultValue: false
    }),
    authors: (0, _model.hasMany)('user', {
      embedded: 'always',
      async: false
    }),
    createdBy: (0, _model.belongsTo)('user', {
      async: true
    }),
    email: (0, _model.belongsTo)('email', {
      async: false
    }),
    publishedBy: (0, _model.belongsTo)('user', {
      async: true
    }),
    tags: (0, _model.hasMany)('tag', {
      embedded: 'always',
      async: false
    }),
    primaryAuthor: Ember.computed.reads('authors.firstObject'),
    scratch: null,
    titleScratch: null,
    // HACK: used for validation so that date/time can be validated based on
    // eventual status rather than current status
    statusScratch: null,
    // For use by date/time pickers - will be validated then converted to UTC
    // on save. Updated by an observer whenever publishedAtUTC changes.
    // Everything that revolves around publishedAtUTC only cares about the saved
    // value so this should be almost entirely internal
    publishedAtBlogDate: '',
    publishedAtBlogTime: '',
    canonicalUrlScratch: (0, _boundOneWay.default)('canonicalUrl'),
    customExcerptScratch: (0, _boundOneWay.default)('customExcerpt'),
    codeinjectionFootScratch: (0, _boundOneWay.default)('codeinjectionFoot'),
    codeinjectionHeadScratch: (0, _boundOneWay.default)('codeinjectionHead'),
    metaDescriptionScratch: (0, _boundOneWay.default)('metaDescription'),
    metaTitleScratch: (0, _boundOneWay.default)('metaTitle'),
    ogDescriptionScratch: (0, _boundOneWay.default)('ogDescription'),
    ogTitleScratch: (0, _boundOneWay.default)('ogTitle'),
    twitterDescriptionScratch: (0, _boundOneWay.default)('twitterDescription'),
    twitterTitleScratch: (0, _boundOneWay.default)('twitterTitle'),
    emailSubjectScratch: (0, _boundOneWay.default)('emailSubject'),
    isPublished: Ember.computed.equal('status', 'published'),
    isDraft: Ember.computed.equal('status', 'draft'),
    internalTags: Ember.computed.filterBy('tags', 'isInternal', true),
    isScheduled: Ember.computed.equal('status', 'scheduled'),
    previewUrl: Ember.computed('uuid', 'ghostPaths.url', 'config.blogUrl', function () {
      let blogUrl = this.get('config.blogUrl');
      let uuid = this.uuid; // routeKeywords.preview: 'p'

      let previewKeyword = 'p'; // New posts don't have a preview

      if (!uuid) {
        return '';
      }

      return this.get('ghostPaths.url').join(blogUrl, previewKeyword, uuid);
    }),
    // check every second to see if we're past the scheduled time
    // will only re-compute if this property is being observed elsewhere
    pastScheduledTime: Ember.computed('isScheduled', 'publishedAtUTC', 'clock.second', function () {
      if (this.isScheduled) {
        let now = _moment.default.utc();

        let publishedAtUTC = this.publishedAtUTC || now;
        let pastScheduledTime = publishedAtUTC.diff(now, 'hours', true) < 0; // force a recompute

        this.get('clock.second');
        return pastScheduledTime;
      } else {
        return false;
      }
    }),
    publishedAtBlogTZ: Ember.computed('publishedAtBlogDate', 'publishedAtBlogTime', 'settings.activeTimezone', {
      get() {
        return this._getPublishedAtBlogTZ();
      },

      set(key, value) {
        let momentValue = value ? (0, _moment.default)(value) : null;

        this._setPublishedAtBlogStrings(momentValue);

        return this._getPublishedAtBlogTZ();
      }

    }),

    _getPublishedAtBlogTZ() {
      let publishedAtUTC = this.publishedAtUTC;
      let publishedAtBlogDate = this.publishedAtBlogDate;
      let publishedAtBlogTime = this.publishedAtBlogTime;
      let blogTimezone = this.get('settings.activeTimezone');

      if (!publishedAtUTC && Ember.isBlank(publishedAtBlogDate) && Ember.isBlank(publishedAtBlogTime)) {
        return null;
      }

      if (publishedAtBlogDate && publishedAtBlogTime) {
        let publishedAtBlog = _moment.default.tz("".concat(publishedAtBlogDate, " ").concat(publishedAtBlogTime), blogTimezone);
        /**
         * Note:
         * If you create a post and publish it, we send seconds to the database.
         * If you edit the post afterwards, ember would send the date without seconds, because
         * the `publishedAtUTC` is based on `publishedAtBlogTime`, which is only in seconds.
         * The date time picker doesn't use seconds.
         *
         * This condition prevents the case:
         *   - you edit a post, but you don't change the published_at time
         *   - we keep the original date with seconds
         *
         * See https://github.com/TryGhost/Ghost/issues/8603#issuecomment-309538395.
         */


        if (publishedAtUTC && publishedAtBlog.diff(publishedAtUTC.clone().startOf('minutes')) === 0) {
          return publishedAtUTC;
        }

        return publishedAtBlog;
      } else {
        return _moment.default.tz(this.publishedAtUTC, blogTimezone);
      }
    },

    // TODO: is there a better way to handle this?
    // eslint-disable-next-line ghost/ember/no-observers
    _setPublishedAtBlogTZ: Ember.on('init', Ember.observer('publishedAtUTC', 'settings.activeTimezone', function () {
      let publishedAtUTC = this.publishedAtUTC;

      this._setPublishedAtBlogStrings(publishedAtUTC);
    })),

    _setPublishedAtBlogStrings(momentDate) {
      if (momentDate) {
        let blogTimezone = this.get('settings.activeTimezone');

        let publishedAtBlog = _moment.default.tz(momentDate, blogTimezone);

        this.set('publishedAtBlogDate', publishedAtBlog.format('YYYY-MM-DD'));
        this.set('publishedAtBlogTime', publishedAtBlog.format('HH:mm'));
      } else {
        this.set('publishedAtBlogDate', '');
        this.set('publishedAtBlogTime', '');
      }
    },

    // remove client-generated tags, which have `id: null`.
    // Ember Data won't recognize/update them automatically
    // when returned from the server with ids.
    // https://github.com/emberjs/data/issues/1829
    updateTags() {
      let tags = this.tags;
      let oldTags = tags.filterBy('id', null);
      tags.removeObjects(oldTags);
      oldTags.invoke('deleteRecord');
    },

    isAuthoredByUser(user) {
      return this.authors.includes(user);
    },

    // a custom sort function is needed in order to sort the posts list the same way the server would:
    //     status: scheduled, draft, published
    //     publishedAt: DESC
    //     updatedAt: DESC
    //     id: DESC
    compare(postA, postB) {
      let updated1 = postA.get('updatedAtUTC');
      let updated2 = postB.get('updatedAtUTC');
      let idResult, publishedAtResult, statusResult, updatedAtResult; // when `updatedAt` is undefined, the model is still
      // being written to with the results from the server

      if (postA.get('isNew') || !updated1) {
        return -1;
      }

      if (postB.get('isNew') || !updated2) {
        return 1;
      } // TODO: revisit the ID sorting because we no longer have auto-incrementing IDs


      idResult = Ember.compare(postA.get('id'), postB.get('id'));
      statusResult = statusCompare(postA, postB);
      updatedAtResult = Ember.compare(updated1.valueOf(), updated2.valueOf());
      publishedAtResult = publishedAtCompare(postA, postB);

      if (statusResult === 0) {
        if (publishedAtResult === 0) {
          if (updatedAtResult === 0) {
            // This should be DESC
            return idResult * -1;
          } // This should be DESC


          return updatedAtResult * -1;
        } // This should be DESC


        return publishedAtResult * -1;
      }

      return statusResult;
    },

    // this is a hook added by the ValidationEngine mixin and is called after
    // successful validation and before this.save()
    //
    // the publishedAtBlog{Date/Time} strings are set separately so they can be
    // validated, grab that time if it exists and set the publishedAtUTC
    beforeSave() {
      let publishedAtBlogTZ = this.publishedAtBlogTZ;
      let publishedAtUTC = publishedAtBlogTZ ? publishedAtBlogTZ.utc() : null;
      this.set('publishedAtUTC', publishedAtUTC);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/models/role", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _model.default.extend({
    name: (0, _model.attr)('string'),
    description: (0, _model.attr)('string'),
    createdAtUTC: (0, _model.attr)('moment-utc'),
    updatedAtUTC: (0, _model.attr)('moment-utc'),
    createdBy: (0, _model.attr)('number'),
    updatedBy: (0, _model.attr)('number'),
    lowerCaseName: Ember.computed('name', function () {
      return (this.name || '').toLocaleLowerCase();
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/models/setting", ["exports", "@ember-data/model", "ghost-admin/mixins/validation-engine"], function (_exports, _model, _validationEngine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _model.default.extend(_validationEngine.default, {
    validationType: 'setting',
    title: (0, _model.attr)('string'),
    description: (0, _model.attr)('string'),
    logo: (0, _model.attr)('string'),
    coverImage: (0, _model.attr)('string'),
    icon: (0, _model.attr)('string'),
    brand: (0, _model.attr)('json-string'),
    defaultLocale: (0, _model.attr)('string'),
    activeTimezone: (0, _model.attr)('string', {
      defaultValue: 'Etc/UTC'
    }),
    codeinjectionHead: (0, _model.attr)('string'),
    codeinjectionFoot: (0, _model.attr)('string'),
    facebook: (0, _model.attr)('facebook-url-user'),
    twitter: (0, _model.attr)('twitter-url-user'),
    labs: (0, _model.attr)('string'),
    navigation: (0, _model.attr)('navigation-settings'),
    secondaryNavigation: (0, _model.attr)('navigation-settings', {
      isSecondary: true
    }),
    isPrivate: (0, _model.attr)('boolean'),
    publicHash: (0, _model.attr)('string'),
    password: (0, _model.attr)('string'),
    slack: (0, _model.attr)('slack-settings'),
    amp: (0, _model.attr)('boolean'),
    unsplash: (0, _model.attr)('unsplash-settings', {
      defaultValue() {
        return {
          isActive: true
        };
      }

    }),
    defaultContentVisibility: (0, _model.attr)('string'),
    membersSubscriptionSettings: (0, _model.attr)('string'),
    metaTitle: (0, _model.attr)('string'),
    metaDescription: (0, _model.attr)('string'),
    twitterTitle: (0, _model.attr)('string'),
    twitterDescription: (0, _model.attr)('string'),
    twitterImage: (0, _model.attr)('string'),
    ogTitle: (0, _model.attr)('string'),
    ogDescription: (0, _model.attr)('string'),
    ogImage: (0, _model.attr)('string'),
    bulkEmailSettings: (0, _model.attr)('json-string')
  });

  _exports.default = _default;
});
;define("ghost-admin/models/slack-integration", ["exports", "ghost-admin/mixins/validation-engine"], function (_exports, _validationEngine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Object.extend(_validationEngine.default, {
    // values entered here will act as defaults
    url: '',
    username: '',
    validationType: 'slackIntegration',
    isActive: Ember.computed('url', function () {
      let url = this.url;
      return !Ember.isBlank(url);
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/models/tag", ["exports", "@ember-data/model", "ghost-admin/mixins/validation-engine"], function (_exports, _model, _validationEngine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend(_validationEngine.default, {
    validationType: 'tag',
    name: (0, _model.attr)('string'),
    slug: (0, _model.attr)('string'),
    description: (0, _model.attr)('string'),
    parent: (0, _model.attr)('string'),
    // unused
    metaTitle: (0, _model.attr)('string'),
    metaDescription: (0, _model.attr)('string'),
    featureImage: (0, _model.attr)('string'),
    visibility: (0, _model.attr)('string', {
      defaultValue: 'public'
    }),
    createdAtUTC: (0, _model.attr)('moment-utc'),
    updatedAtUTC: (0, _model.attr)('moment-utc'),
    createdBy: (0, _model.attr)('number'),
    updatedBy: (0, _model.attr)('number'),
    count: (0, _model.attr)('raw'),
    isInternal: Ember.computed.equal('visibility', 'internal'),
    isPublic: Ember.computed.equal('visibility', 'public'),
    feature: Ember.inject.service(),

    updateVisibility() {
      let internalRegex = /^#.?/;
      this.set('visibility', internalRegex.test(this.name) ? 'internal' : 'public');
    },

    save() {
      if (this.get('changedAttributes.name') && !this.isDeleted) {
        this.updateVisibility();
      }

      return this._super(...arguments);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/models/theme", ["exports", "@ember-data/model"], function (_exports, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend({
    active: (0, _model.attr)('boolean'),
    errors: (0, _model.attr)('raw'),
    name: (0, _model.attr)('string'),
    package: (0, _model.attr)('raw'),
    templates: (0, _model.attr)('raw', {
      defaultValue: () => []
    }),
    warnings: (0, _model.attr)('raw'),
    customTemplates: Ember.computed('templates.[]', function () {
      let templates = this.templates || [];
      return templates.filter(function (template) {
        return Ember.isBlank(template.slug);
      });
    }),
    slugTemplates: Ember.computed('templates.[]', function () {
      let templates = this.templates || [];
      return templates.filter(function (template) {
        return !Ember.isBlank(template.slug);
      });
    }),

    activate() {
      let adapter = this.store.adapterFor(this.constructor.modelName);
      return adapter.activate(this).then(() => {
        // the server only gives us the newly active theme back so we need
        // to manually mark other themes as inactive in the store
        let activeThemes = this.store.peekAll('theme').filterBy('active', true);
        activeThemes.forEach(theme => {
          if (theme !== this) {
            // store.push is necessary to avoid dirty records that cause
            // problems when we get new data back in subsequent requests
            this.store.push({
              data: {
                id: theme.id,
                type: 'theme',
                attributes: {
                  active: false
                }
              }
            });
          }
        });
        return this;
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/models/unsplash-integration", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Object.extend({
    isActive: false
  });

  _exports.default = _default;
});
;define("ghost-admin/models/user", ["exports", "ghost-admin/models/base", "ghost-admin/mixins/validation-engine", "@ember-data/model", "ember-concurrency"], function (_exports, _base, _validationEngine, _model, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _base.default.extend(_validationEngine.default, {
    validationType: 'user',
    name: (0, _model.attr)('string'),
    slug: (0, _model.attr)('string'),
    email: (0, _model.attr)('string'),
    profileImage: (0, _model.attr)('string'),
    coverImage: (0, _model.attr)('string'),
    bio: (0, _model.attr)('string'),
    website: (0, _model.attr)('string'),
    location: (0, _model.attr)('string'),
    accessibility: (0, _model.attr)('string'),
    status: (0, _model.attr)('string'),
    locale: (0, _model.attr)('string'),
    metaTitle: (0, _model.attr)('string'),
    metaDescription: (0, _model.attr)('string'),
    lastLoginUTC: (0, _model.attr)('moment-utc'),
    createdAtUTC: (0, _model.attr)('moment-utc'),
    createdBy: (0, _model.attr)('number'),
    updatedAtUTC: (0, _model.attr)('moment-utc'),
    updatedBy: (0, _model.attr)('number'),
    roles: (0, _model.hasMany)('role', {
      embedded: 'always',
      async: false
    }),
    count: (0, _model.attr)('raw'),
    facebook: (0, _model.attr)('facebook-url-user'),
    twitter: (0, _model.attr)('twitter-url-user'),
    tour: (0, _model.attr)('json-string'),
    ghostPaths: Ember.inject.service(),
    ajax: Ember.inject.service(),
    session: Ember.inject.service(),
    notifications: Ember.inject.service(),
    config: Ember.inject.service(),
    // TODO: Once client-side permissions are in place,
    // remove the hard role check.
    isContributor: Ember.computed.equal('role.name', 'Contributor'),
    isAuthor: Ember.computed.equal('role.name', 'Author'),
    isEditor: Ember.computed.equal('role.name', 'Editor'),
    isAdmin: Ember.computed.equal('role.name', 'Administrator'),
    isOwner: Ember.computed.equal('role.name', 'Owner'),
    // These are used in enough places that it's useful to throw them here
    isOwnerOrAdmin: Ember.computed.or('isOwner', 'isAdmin'),
    isAuthorOrContributor: Ember.computed.or('isAuthor', 'isContributor'),
    isLoggedIn: Ember.computed('id', 'session.user.id', function () {
      return this.id === this.get('session.user.id');
    }),
    isActive: Ember.computed('status', function () {
      // TODO: review "locked" as an "active" status
      return ['active', 'warn-1', 'warn-2', 'warn-3', 'warn-4', 'locked'].indexOf(this.status) > -1;
    }),
    isSuspended: Ember.computed.equal('status', 'inactive'),
    isLocked: Ember.computed.equal('status', 'locked'),
    role: Ember.computed('roles', {
      get() {
        return this.get('roles.firstObject');
      },

      set(key, value) {
        // Only one role per user, so remove any old data.
        this.roles.clear();
        this.roles.pushObject(value);
        return value;
      }

    }),
    profileImageUrl: Ember.computed('ghostPaths.assetRoot', 'profileImage', function () {
      // keep path separate so asset rewriting correctly picks it up
      let defaultImage = '/img/user-image.png';
      let defaultPath = this.ghostPaths.assetRoot.replace(/\/$/, '') + defaultImage;
      return this.profileImage || defaultPath;
    }),
    coverImageUrl: Ember.computed('ghostPaths.assetRoot', 'coverImage', function () {
      // keep path separate so asset rewriting correctly picks it up
      let defaultImage = '/img/user-cover.png';
      let defaultPath = this.ghostPaths.assetRoot.replace(/\/$/, '') + defaultImage;
      return this.coverImage || defaultPath;
    }),
    saveNewPassword: (0, _emberConcurrency.task)(function* () {
      let validation = this.isLoggedIn ? 'ownPasswordChange' : 'passwordChange';

      try {
        yield this.validate({
          property: validation
        });
      } catch (e) {
        // validation error, don't do anything
        return;
      }

      try {
        let url = this.get('ghostPaths.url').api('users', 'password');
        yield this.ajax.put(url, {
          data: {
            password: [{
              user_id: this.id,
              oldPassword: this.password,
              newPassword: this.newPassword,
              ne2Password: this.ne2Password
            }]
          }
        });
        this.setProperties({
          password: '',
          newPassword: '',
          ne2Password: ''
        });
        this.notifications.showNotification('Password updated', {
          type: 'success',
          key: 'user.change-password.success'
        }); // clear errors manually for ne2password because validation
        // engine only clears the "validated proeprty"
        // TODO: clean up once we have a better validations library

        this.errors.remove('ne2Password');
        return true;
      } catch (error) {
        this.notifications.showAPIError(error, {
          key: 'user.change-password'
        });
      }
    }).drop()
  });

  _exports.default = _default;
});
;define("ghost-admin/models/webhook", ["exports", "@ember-data/model", "ghost-admin/mixins/validation-engine"], function (_exports, _model, _validationEngine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _model.default.extend(_validationEngine.default, {
    validationType: 'webhook',
    name: (0, _model.attr)('string'),
    event: (0, _model.attr)('string'),
    targetUrl: (0, _model.attr)('string'),
    secret: (0, _model.attr)('string'),
    lastTriggeredAtUTC: (0, _model.attr)('moment-utc'),
    createdAtUTC: (0, _model.attr)('moment-utc'),
    createdBy: (0, _model.attr)('number'),
    updatedAtUTC: (0, _model.attr)('moment-utc'),
    updatedBy: (0, _model.attr)('number'),
    integration: (0, _model.belongsTo)('integration')
  });

  _exports.default = _default;
});
;define("ghost-admin/modifiers/did-insert", ["exports", "@ember/render-modifiers/modifiers/did-insert"], function (_exports, _didInsert) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _didInsert.default;
    }
  });
});
;define("ghost-admin/modifiers/did-update", ["exports", "@ember/render-modifiers/modifiers/did-update"], function (_exports, _didUpdate) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _didUpdate.default;
    }
  });
});
;define("ghost-admin/modifiers/will-destroy", ["exports", "@ember/render-modifiers/modifiers/will-destroy"], function (_exports, _willDestroy) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _willDestroy.default;
    }
  });
});
;define("ghost-admin/router", ["exports", "ghost-admin/config/environment", "ghost-admin/utils/ghost-paths"], function (_exports, _environment, _ghostPaths) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const Router = Ember.Router.extend({
    location: _environment.default.locationType,
    // use HTML5 History API instead of hash-tag based URLs
    rootURL: (0, _ghostPaths.default)().adminRoot // admin interface lives under sub-directory /ghost

  });
  Router.map(function () {
    this.route('home', {
      path: '/'
    });
    this.route('setup', function () {
      this.route('one');
      this.route('two');
      this.route('three');
    });
    this.route('signin');
    this.route('signout');
    this.route('signup', {
      path: '/signup/:token'
    });
    this.route('reset', {
      path: '/reset/:token'
    });
    this.route('about');
    this.route('site');
    this.route('billing');
    this.route('posts');
    this.route('pages');
    this.route('editor', function () {
      this.route('new', {
        path: ':type'
      });
      this.route('edit', {
        path: ':type/:post_id'
      });
    });
    this.route('staff', function () {
      this.route('user', {
        path: ':user_slug'
      });
    });
    this.route('tags');
    this.route('tag.new', {
      path: '/tags/new'
    });
    this.route('tag', {
      path: '/tags/:tag_slug'
    });
    this.route('settings.general', {
      path: '/settings/general'
    });
    this.route('settings.labs', {
      path: '/settings/labs'
    });
    this.route('settings.code-injection', {
      path: '/settings/code-injection'
    });
    this.route('settings.design', {
      path: '/settings/design'
    }, function () {
      this.route('uploadtheme');
    });
    this.route('settings.integrations', {
      path: '/settings/integrations'
    }, function () {
      this.route('new');
    });
    this.route('settings.integration', {
      path: '/settings/integrations/:integration_id'
    }, function () {
      this.route('webhooks.new', {
        path: 'webhooks/new'
      });
      this.route('webhooks.edit', {
        path: 'webhooks/:webhook_id'
      });
    });
    this.route('settings.integrations.slack', {
      path: '/settings/integrations/slack'
    });
    this.route('settings.integrations.amp', {
      path: '/settings/integrations/amp'
    });
    this.route('settings.integrations.unsplash', {
      path: '/settings/integrations/unsplash'
    });
    this.route('settings.integrations.zapier', {
      path: '/settings/integrations/zapier'
    });
    this.route('members', function () {
      this.route('import');
    });
    this.route('member.new', {
      path: '/members/new'
    });
    this.route('member', {
      path: '/members/:member_id'
    });
    this.route('error404', {
      path: '/*path'
    });
  });
  var _default = Router;
  _exports.default = _default;
});
;define("ghost-admin/routes/about", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend({
    buildRouteInfoMetadata() {
      return {
        titleToken: 'About'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/application", ["exports", "ember-simple-auth/mixins/application-route-mixin", "ember-simple-auth/configuration", "ghost-admin/mixins/shortcuts-route", "ghost-admin/utils/ctrl-or-cmd", "ghost-admin/utils/window-proxy", "ember-ajax/errors", "ghost-admin/services/ajax"], function (_exports, _applicationRouteMixin, _configuration, _shortcutsRoute, _ctrlOrCmd, _windowProxy, _errors, _ajax) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function K() {
    return this;
  }

  let shortcuts = {};
  shortcuts.esc = {
    action: 'closeMenus',
    scope: 'default'
  };
  shortcuts["".concat(_ctrlOrCmd.default, "+s")] = {
    action: 'save',
    scope: 'all'
  };

  var _default = Ember.Route.extend(_applicationRouteMixin.default, _shortcutsRoute.default, {
    ajax: Ember.inject.service(),
    config: Ember.inject.service(),
    feature: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    router: Ember.inject.service(),
    settings: Ember.inject.service(),
    tour: Ember.inject.service(),
    ui: Ember.inject.service(),
    whatsNew: Ember.inject.service(),
    shortcuts,
    routeAfterAuthentication: 'home',

    init() {
      this._super(...arguments);

      this.router.on('routeDidChange', () => {
        this.notifications.displayDelayed();
      });
    },

    beforeModel() {
      return this.config.fetchUnauthenticated();
    },

    afterModel(model, transition) {
      this._super(...arguments);

      if (this.get('session.isAuthenticated')) {
        this.set('appLoadTransition', transition);
        transition.send('loadServerNotifications'); // return the feature/settings load promises so that we block until
        // they are loaded to enable synchronous access everywhere

        return Ember.RSVP.all([this.config.fetchAuthenticated(), this.feature.fetch(), this.settings.fetch(), this.tour.fetchViewed()]).then(results => {
          this._appLoaded = true; // kick off background update of "whats new"
          // - we don't want to block the router for this
          // - we need the user details to know what the user has seen

          this.whatsNew.fetchLatest.perform();
          return results;
        });
      }

      this._appLoaded = true;
    },

    actions: {
      closeMenus() {
        this.ui.closeMenus();
      },

      didTransition() {
        this.set('appLoadTransition', null);
        this.send('closeMenus');
      },

      signedIn() {
        this.notifications.clearAll();
        this.send('loadServerNotifications', true);
      },

      authorizationFailed() {
        _windowProxy.default.replaceLocation(_configuration.default.rootURL);
      },

      loadServerNotifications(isDelayed) {
        if (this.get('session.isAuthenticated')) {
          this.get('session.user').then(user => {
            if (!user.get('isAuthorOrContributor')) {
              this.store.findAll('notification', {
                reload: true
              }).then(serverNotifications => {
                serverNotifications.forEach(notification => {
                  if (notification.get('top') || notification.get('custom')) {
                    this.notifications.handleNotification(notification, isDelayed);
                  } else {
                    this.upgradeStatus.handleUpgradeNotification(notification);
                  }
                });
              });
            }
          });
        }
      },

      // noop default for unhandled save (used from shortcuts)
      save: K,

      error(error, transition) {
        // unauthoirized errors are already handled in the ajax service
        if ((0, _errors.isUnauthorizedError)(error)) {
          return false;
        }

        if ((0, _errors.isNotFoundError)(error)) {
          if (transition) {
            transition.abort();
          }

          let routeInfo = transition.to;
          let router = this.router;
          let params = [];

          for (let key of Object.keys(routeInfo.params)) {
            params.push(routeInfo.params[key]);
          }

          let url = router.urlFor(routeInfo.name, ...params).replace(/^#\//, '').replace(/^\//, '').replace(/^ghost\//, '');
          return this.replaceWith('error404', url);
        }

        if ((0, _ajax.isVersionMismatchError)(error)) {
          if (transition) {
            transition.abort();
          }

          this.upgradeStatus.requireUpgrade();

          if (this._appLoaded) {
            return false;
          }
        }

        if ((0, _ajax.isMaintenanceError)(error)) {
          if (transition) {
            transition.abort();
          }

          this.upgradeStatus.maintenanceAlert();

          if (this._appLoaded) {
            return false;
          }
        }

        if ((0, _errors.isAjaxError)(error) || error && error.payload && Ember.isArray(error.payload.errors)) {
          this.notifications.showAPIError(error); // don't show the 500 page if we weren't navigating

          if (!transition) {
            return false;
          }
        } // fallback to 500 error page


        return true;
      }

    },

    sessionAuthenticated() {
      if (this.get('session.skipAuthSuccessHandler')) {
        return;
      } // standard ESA post-sign-in redirect


      this._super(...arguments); // trigger post-sign-in background behaviour


      this.get('session.user').then(user => {
        this.send('signedIn', user);
      });
    },

    sessionInvalidated() {
      let transition = this.appLoadTransition;

      if (transition) {
        transition.send('authorizationFailed');
      } else {
        Ember.run.scheduleOnce('routerTransitions', this, 'send', 'authorizationFailed');
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/authenticated", ["exports", "ember-simple-auth/mixins/authenticated-route-mixin"], function (_exports, _authenticatedRouteMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Route.extend(_authenticatedRouteMixin.default, {
    authenticationRoute: 'signin'
  });

  _exports.default = _default;
});
;define("ghost-admin/routes/billing", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend({
    config: Ember.inject.service(),
    router: Ember.inject.service(),

    beforeModel() {
      // Transition to home if billing is not available
      if (!this.get('config.billingUrl')) {
        return this.transitionTo('home');
      }
    },

    model() {
      return new Date().valueOf();
    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Billing'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/editor", ["exports", "jquery", "ghost-admin/routes/authenticated", "ghost-admin/mixins/shortcuts-route", "ghost-admin/utils/ctrl-or-cmd"], function (_exports, _jquery, _authenticated, _shortcutsRoute, _ctrlOrCmd) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  let generalShortcuts = {};
  generalShortcuts["".concat(_ctrlOrCmd.default, "+shift+p")] = 'publish';

  var _default = _authenticated.default.extend(_shortcutsRoute.default, {
    feature: Ember.inject.service(),
    notifications: Ember.inject.service(),
    userAgent: Ember.inject.service(),
    ui: Ember.inject.service(),
    classNames: ['editor'],
    shortcuts: generalShortcuts,

    activate() {
      this._super(...arguments);

      this.ui.set('isFullScreen', true);
    },

    setupController() {
      this._super(...arguments); // edge has known issues


      if (this.userAgent.browser.isEdge && this.userAgent.parser.getEngine().name === 'EdgeHTML') {
        this.notifications.showAlert(Ember.String.htmlSafe('Microsoft Edge is not currently supported. Please switch to <a href="https://ghost.org/downloads/" target="_blank" rel="noopener">Ghost Desktop</a> or a recent version of Chrome/Firefox/Safari.'), {
          type: 'info',
          key: 'koenig.browserSupport'
        });
      } // mobile browsers are not currently supported


      if (this.userAgent.device.isMobile || this.userAgent.device.isTablet) {
        this.notifications.showAlert(Ember.String.htmlSafe('Mobile editing is not currently supported. Please use a desktop browser or <a href="https://ghost.org/downloads/" target="_blank" rel="noopener">Ghost Desktop</a>.'), {
          type: 'info',
          key: 'koenig.browserSupport'
        });
      }
    },

    deactivate() {
      this._super(...arguments);

      this.ui.set('isFullScreen', false);
    },

    actions: {
      save() {
        this._blurAndScheduleAction(function () {
          this.controller.send('save');
        });
      },

      publish() {
        this._blurAndScheduleAction(function () {
          this.controller.send('setSaveType', 'publish');
          this.controller.send('save');
        });
      },

      authorizationFailed() {
        this.controller.send('toggleReAuthenticateModal');
      },

      redirectToContentScreen(displayName) {
        this.transitionTo(displayName === 'page' ? 'pages' : 'posts');
      },

      willTransition(transition) {
        // exit early if an upgrade is required because our extended route
        // class will abort the transition and show an error
        if (this.get('upgradeStatus.isRequired')) {
          return this._super(...arguments);
        }

        this.controller.willTransition(transition);
      }

    },

    buildRouteInfoMetadata() {
      return {
        titleToken: () => {
          return this.get('controller.post.title') || 'Editor';
        },
        mainClasses: ['gh-main-white']
      };
    },

    _blurAndScheduleAction(func) {
      let selectedElement = (0, _jquery.default)(document.activeElement); // TODO: we should trigger a blur for textareas as well as text inputs

      if (selectedElement.is('input[type="text"]')) {
        selectedElement.trigger('focusout');
      } // wait for actions triggered by the focusout to finish before saving


      Ember.run.scheduleOnce('actions', this, func);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/editor/edit", ["exports", "ghost-admin/routes/authenticated", "ember-inflector"], function (_exports, _authenticated, _emberInflector) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend({
    beforeModel(transition) {
      this._super(...arguments); // if the transition is not new->edit, reset the post on the controller
      // so that the editor view is cleared before showing the loading state


      if (transition.urlMethod !== 'replace') {
        let editor = this.controllerFor('editor');
        editor.set('post', null);
        editor.reset();
      }
    },

    model(params, transition) {
      // eslint-disable-next-line camelcase
      let {
        type: modelName,
        post_id
      } = params;

      if (!['post', 'page'].includes(modelName)) {
        let path = transition.intent.url.replace(/^\//, '');
        return this.replaceWith('error404', {
          path,
          status: 404
        });
      }

      let query = {
        id: post_id
      };
      return this.store.query(modelName, query).then(records => records.get('firstObject'));
    },

    // the API will return a post even if the logged in user doesn't have
    // permission to edit it (all posts are public) so we need to do our
    // own permissions check and redirect if necessary
    afterModel(post) {
      this._super(...arguments);

      return this.get('session.user').then(user => {
        let returnRoute = (0, _emberInflector.pluralize)(post.constructor.modelName);

        if (user.get('isAuthorOrContributor') && !post.isAuthoredByUser(user)) {
          return this.replaceWith(returnRoute);
        } // If the post is not a draft and user is contributor, redirect to index


        if (user.get('isContributor') && !post.get('isDraft')) {
          return this.replaceWith(returnRoute);
        }
      });
    },

    serialize(model) {
      return {
        type: model.constructor.modelName,
        post_id: model.id
      };
    },

    // there's no specific controller for this route, instead all editor
    // handling is done on the editor route/controler
    setupController(controller, post) {
      let editor = this.controllerFor('editor');
      editor.setPost(post);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/editor/index", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend({
    beforeModel() {
      this._super(...arguments);

      this.replaceWith('editor.new', 'post');
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/editor/new", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend({
    model(params, transition) {
      let {
        type: modelName
      } = params;

      if (!['post', 'page'].includes(modelName)) {
        let path = transition.intent.url.replace(/^\//, '');
        return this.replaceWith('error404', {
          path,
          status: 404
        });
      }

      return this.get('session.user').then(user => this.store.createRecord(modelName, {
        authors: [user]
      }));
    },

    // there's no specific controller for this route, instead all editor
    // handling is done on the editor route/controler
    setupController(controller, newPost) {
      let editor = this.controllerFor('editor');
      editor.setPost(newPost);
    },

    buildRouteInfoMetadata() {
      return {
        mainClasses: ['editor-new']
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/error404", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Route.extend({
    controllerName: 'error',
    templateName: 'error',

    model() {
      return {
        status: 404
      };
    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Error',
        mainClasses: ['gh-main-white']
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/home", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Route.extend({
    beforeModel() {
      this.transitionTo('site');
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/member", ["exports", "ghost-admin/routes/authenticated", "ghost-admin/mixins/current-user-settings"], function (_exports, _authenticated, _currentUserSettings) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend(_currentUserSettings.default, {
    router: Ember.inject.service(),
    _requiresBackgroundRefresh: true,

    init() {
      this._super(...arguments);

      this.router.on('routeWillChange', transition => {
        this.showUnsavedChangesModal(transition);
      });
    },

    beforeModel() {
      this._super(...arguments);

      return this.get('session.user').then(this.transitionAuthor());
    },

    model(params) {
      this._requiresBackgroundRefresh = false;

      if (params.member_id) {
        return this.store.findRecord('member', params.member_id, {
          reload: true
        });
      } else {
        return this.store.createRecord('member');
      }
    },

    setupController(controller, member) {
      this._super(...arguments);

      if (this._requiresBackgroundRefresh) {
        controller.fetchMember.perform(member.get('id'));
      }
    },

    deactivate() {
      this._super(...arguments); // clean up newly created records and revert unsaved changes to existing


      this.controller.member.rollbackAttributes();
      this._requiresBackgroundRefresh = true;
    },

    actions: {
      save() {
        this.controller.send('save');
      }

    },

    titleToken() {
      return this.controller.get('member.name');
    },

    showUnsavedChangesModal(transition) {
      if (transition.from && transition.from.name === this.routeName && transition.targetName) {
        let {
          controller
        } = this; // member.changedAttributes is always true for new members but number of changed attrs is reliable

        let isChanged = Object.keys(controller.member.changedAttributes()).length > 0;

        if (!controller.member.isDeleted && isChanged) {
          transition.abort();
          controller.send('toggleUnsavedChangesModal', transition);
          return;
        }
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/member/new", ["exports", "ghost-admin/routes/member"], function (_exports, _member) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _member.default.extend({
    controllerName: 'member',
    templateName: 'member'
  });

  _exports.default = _default;
});
;define("ghost-admin/routes/members", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend({
    config: Ember.inject.service(),
    queryParams: {
      label: {
        refreshModel: true
      }
    },

    // redirect to posts screen if:
    // - TODO: members is disabled?
    // - logged in user isn't owner/admin
    beforeModel() {
      this._super(...arguments);

      return this.session.user.then(user => {
        if (!user.isOwnerOrAdmin) {
          return this.transitionTo('home');
        }
      });
    },

    // trigger a background load of labels for filter dropdown
    setupController(controller) {
      this._super(...arguments);

      controller.fetchMembers.perform();

      if (!controller._hasLoadedLabels) {
        this.store.query('label', {
          limit: 'all'
        }).then(() => {
          controller._hasLoadedLabels = true;
        });
      }
    },

    deactivate() {
      this._super(...arguments);

      this.controller.modalLabel && this.controller.modalLabel.rollbackAttributes();
    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Members'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/members/import", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Route.extend({});

  _exports.default = _default;
});
;define("ghost-admin/routes/pages", ["exports", "ghost-admin/routes/posts"], function (_exports, _posts) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _posts.default.extend({
    modelName: 'page',

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Pages'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/posts", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend({
    infinity: Ember.inject.service(),
    router: Ember.inject.service(),
    queryParams: {
      type: {
        refreshModel: true
      },
      author: {
        refreshModel: true
      },
      tag: {
        refreshModel: true
      },
      order: {
        refreshModel: true
      }
    },
    modelName: 'post',
    perPage: 30,

    init() {
      this._super(...arguments); // if we're already on this route and we're transiting _to_ this route
      // then the filters are being changed and we shouldn't create a new
      // browser history entry
      // see https://github.com/TryGhost/Ghost/issues/11057


      this.router.on('routeWillChange', transition => {
        if (transition.to && (this.routeName === 'posts' || this.routeName === 'pages')) {
          let toThisRoute = transition.to.find(route => route.name === this.routeName);

          if (transition.from && transition.from.name === this.routeName && toThisRoute) {
            transition.method('replace');
          }
        }
      });
    },

    model(params) {
      return this.session.user.then(user => {
        let queryParams = {};
        let filterParams = {
          tag: params.tag
        };
        let paginationParams = {
          perPageParam: 'limit',
          totalPagesParam: 'meta.pagination.pages'
        };
        Ember.assign(filterParams, this._getTypeFilters(params.type));

        if (params.type === 'featured') {
          filterParams.featured = true;
        }

        if (user.isAuthor) {
          // authors can only view their own posts
          filterParams.authors = user.slug;
        } else if (user.isContributor) {
          // Contributors can only view their own draft posts
          filterParams.authors = user.slug;
          filterParams.status = 'draft';
        } else if (params.author) {
          filterParams.authors = params.author;
        }

        let filter = this._filterString(filterParams);

        if (!Ember.isBlank(filter)) {
          queryParams.filter = filter;
        }

        if (!Ember.isBlank(params.order)) {
          queryParams.order = params.order;
        }

        let perPage = this.perPage;
        let paginationSettings = Ember.assign({
          perPage,
          startingPage: 1
        }, paginationParams, queryParams);
        return this.infinity.model(this.modelName, paginationSettings);
      });
    },

    // trigger a background load of all tags and authors for use in the filter dropdowns
    setupController(controller) {
      this._super(...arguments);

      if (!controller._hasLoadedTags) {
        this.store.query('tag', {
          limit: 'all'
        }).then(() => {
          controller._hasLoadedTags = true;
        });
      }

      this.session.user.then(user => {
        if (!user.isAuthorOrContributor && !controller._hasLoadedAuthors) {
          this.store.query('user', {
            limit: 'all'
          }).then(() => {
            controller._hasLoadedAuthors = true;
          });
        }
      });
    },

    actions: {
      queryParamsDidChange() {
        // scroll back to the top
        let contentList = document.querySelector('.content-list');

        if (contentList) {
          contentList.scrollTop = 0;
        }

        this._super(...arguments);
      }

    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Posts'
      };
    },

    _getTypeFilters(type) {
      let status = '[draft,scheduled,published]';

      switch (type) {
        case 'draft':
          status = 'draft';
          break;

        case 'published':
          status = 'published';
          break;

        case 'scheduled':
          status = 'scheduled';
          break;
      }

      return {
        status
      };
    },

    _filterString(filter) {
      return Object.keys(filter).map(key => {
        let value = filter[key];

        if (!Ember.isBlank(value)) {
          return "".concat(key, ":").concat(filter[key]);
        }
      }).compact().join('+');
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/reset", ["exports", "ghost-admin/mixins/unauthenticated-route-mixin"], function (_exports, _unauthenticatedRouteMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Route.extend(_unauthenticatedRouteMixin.default, {
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),

    beforeModel() {
      if (this.get('session.isAuthenticated')) {
        this.notifications.showAlert('You can\'t reset your password while you\'re signed in.', {
          type: 'warn',
          delayed: true,
          key: 'password.reset.signed-in'
        });
      }

      this._super(...arguments);
    },

    setupController(controller, params) {
      controller.token = params.token;
    },

    // Clear out any sensitive information
    deactivate() {
      this._super(...arguments);

      this.controller.clearData();
    },

    buildRouteInfoMetadata() {
      return {
        bodyClasses: ['unauthenticated-route']
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/settings/code-injection", ["exports", "ghost-admin/routes/authenticated", "ghost-admin/mixins/current-user-settings"], function (_exports, _authenticated, _currentUserSettings) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend(_currentUserSettings.default, {
    settings: Ember.inject.service(),

    beforeModel() {
      this._super(...arguments);

      return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());
    },

    model() {
      return this.settings.reload();
    },

    deactivate() {
      this._super(...arguments);

      this.controller.set('leaveSettingsTransition', null);
      this.controller.set('showLeaveSettingsModal', false);
    },

    actions: {
      save() {
        this.controller.send('save');
      },

      willTransition(transition) {
        let controller = this.controller;
        let settings = this.settings;
        let modelIsDirty = settings.get('hasDirtyAttributes');

        if (modelIsDirty) {
          transition.abort();
          controller.send('toggleLeaveSettingsModal', transition);
          return;
        }
      }

    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Settings - Code injection'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/settings/design", ["exports", "jquery", "ghost-admin/routes/authenticated", "ghost-admin/mixins/current-user-settings"], function (_exports, _jquery, _authenticated, _currentUserSettings) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend(_currentUserSettings.default, {
    settings: Ember.inject.service(),

    beforeModel() {
      this._super(...arguments);

      return this.get('session.user').then(this.transitionAuthor());
    },

    model() {
      return Ember.RSVP.hash({
        settings: this.settings.reload(),
        themes: this.store.findAll('theme')
      });
    },

    setupController(controller) {
      controller.set('themes', this.store.peekAll('theme'));
      this.controller.send('reset');
    },

    deactivate() {
      this._super(...arguments);

      this.controller.set('leaveSettingsTransition', null);
      this.controller.set('showLeaveSettingsModal', false);
    },

    actions: {
      save() {
        // since shortcuts are run on the route, we have to signal to the components
        // on the page that we're about to save.
        (0, _jquery.default)('.page-actions .gh-btn-blue').focus();
        this.controller.send('save');
      },

      willTransition(transition) {
        let controller = this.controller;
        let modelIsDirty = controller.dirtyAttributes;

        if (modelIsDirty) {
          transition.abort();
          controller.send('toggleLeaveSettingsModal', transition);
          return;
        }
      },

      activateTheme(theme) {
        return this.controller.send('activateTheme', theme);
      }

    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Settings - Design'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/settings/design/uploadtheme", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend({
    model() {
      return this.store.findAll('theme');
    },

    setupController(controller, model) {
      controller.set('themes', model);
    },

    actions: {
      cancel() {
        this.transitionTo('settings.design');
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/routes/settings/general", ["exports", "ghost-admin/routes/authenticated", "ghost-admin/mixins/current-user-settings"], function (_exports, _authenticated, _currentUserSettings) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend(_currentUserSettings.default, {
    config: Ember.inject.service(),
    settings: Ember.inject.service(),

    beforeModel() {
      this._super(...arguments);

      return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());
    },

    model() {
      return Ember.RSVP.hash({
        settings: this.settings.reload(),
        availableTimezones: this.get('config.availableTimezones')
      });
    },

    setupController(controller, models) {
      // reset the leave setting transition
      controller.set('showLeaveSettingsModal', false);
      controller.set('leaveSettingsTransition', null);
      controller.set('availableTimezones', models.availableTimezones);
    },

    actions: {
      save() {
        return this.controller.send('save');
      },

      reloadSettings() {
        return this.settings.reload();
      },

      willTransition(transition) {
        let controller = this.controller;
        let settings = this.settings;
        let settingsIsDirty = settings.get('hasDirtyAttributes');

        if (settingsIsDirty) {
          transition.abort();
          controller.send('toggleLeaveSettingsModal', transition);
          return;
        }
      }

    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Settings - General'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/settings/integration", ["exports", "ghost-admin/routes/authenticated", "ghost-admin/mixins/current-user-settings"], function (_exports, _authenticated, _currentUserSettings) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend(_currentUserSettings.default, {
    router: Ember.inject.service(),

    init() {
      this._super(...arguments);

      this.router.on('routeWillChange', transition => {
        this.showUnsavedChangesModal(transition);
      });
    },

    beforeModel() {
      this._super(...arguments);

      return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());
    },

    model(params, transition) {
      // use the integrations controller to fetch all integrations and pick
      // out the one we want. Allows navigation back to integrations screen
      // without a loading state
      return this.controllerFor('settings.integrations').integrationModelHook('id', params.integration_id, this, transition);
    },

    deactivate() {
      this._super(...arguments);

      this.controller.set('leaveScreenTransition', null);
      this.controller.set('showUnsavedChangesModal', false);
    },

    actions: {
      save() {
        this.controller.send('save');
      }

    },

    showUnsavedChangesModal(transition) {
      if (transition.from && transition.from.name.match(/^settings\.integration\./) && transition.targetName) {
        let {
          controller
        } = this; // check to see if we're navigating away from the custom integration
        // route - we want to allow editing webhooks without showing the
        // "unsaved changes" confirmation modal

        let isExternalRoute = // allow sub-routes of settings.integration
        !(transition.targetName || '').match(/^settings\.integration\./) // do not allow changes in integration
        // .to will be the index, so use .to.parent to get the route with the params
        || transition.to.parent.params.integration_id !== controller.integration.id;

        if (isExternalRoute && !controller.integration.isDeleted && controller.integration.hasDirtyAttributes) {
          transition.abort();
          controller.send('toggleUnsavedChangesModal', transition);
          return;
        }
      }
    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Settings - Integrations'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/settings/integration/webhooks/edit", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Route.extend({
    model(params) {
      let integration = this.modelFor('settings.integration');
      let webhook = integration.webhooks.findBy('id', params.webhook_id);
      return webhook;
    },

    deactivate() {
      this._super(...arguments);

      this.controller.reset();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/settings/integration/webhooks/new", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Route.extend({
    model() {
      let integration = this.modelFor('settings.integration');
      return this.store.createRecord('webhook', {
        integration
      });
    },

    deactivate() {
      this._super(...arguments);

      this.controller.webhook.rollbackAttributes();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/settings/integrations", ["exports", "ghost-admin/routes/authenticated", "ghost-admin/mixins/current-user-settings"], function (_exports, _authenticated, _currentUserSettings) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend(_currentUserSettings.default, {
    settings: Ember.inject.service(),

    beforeModel() {
      this._super(...arguments);

      return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());
    },

    setupController(controller) {
      // kick off the background fetch of integrations so that we can
      // show the screen immediately
      controller.fetchIntegrations.perform();
    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Settings - Integrations'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/settings/integrations/amp", ["exports", "ghost-admin/routes/authenticated", "ghost-admin/mixins/current-user-settings"], function (_exports, _authenticated, _currentUserSettings) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend(_currentUserSettings.default, {
    settings: Ember.inject.service(),

    beforeModel() {
      this._super(...arguments);

      return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor()).then(this.settings.reload());
    },

    actions: {
      save() {
        this.controller.send('save');
      },

      willTransition(transition) {
        let controller = this.controller;
        let modelIsDirty = this.settings.get('hasDirtyAttributes');

        if (modelIsDirty) {
          transition.abort();
          controller.send('toggleLeaveSettingsModal', transition);
          return;
        }
      }

    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'AMP'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/settings/integrations/new", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Route.extend({
    model() {
      return this.store.createRecord('integration');
    },

    deactivate() {
      this._super(...arguments);

      this.controller.integration.rollbackAttributes();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/settings/integrations/slack", ["exports", "ghost-admin/routes/authenticated", "ghost-admin/mixins/current-user-settings"], function (_exports, _authenticated, _currentUserSettings) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend(_currentUserSettings.default, {
    settings: Ember.inject.service(),

    beforeModel() {
      this._super(...arguments);

      return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor()).then(this.settings.reload());
    },

    actions: {
      save() {
        this.controller.send('save');
      },

      willTransition(transition) {
        let controller = this.controller;
        let settings = this.settings;
        let modelIsDirty = settings.get('hasDirtyAttributes');

        if (modelIsDirty) {
          transition.abort();
          controller.send('toggleLeaveSettingsModal', transition);
          return;
        }
      }

    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Slack'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/settings/integrations/unsplash", ["exports", "ghost-admin/routes/authenticated", "ghost-admin/mixins/current-user-settings", "ghost-admin/models/unsplash-integration"], function (_exports, _authenticated, _currentUserSettings, _unsplashIntegration) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend(_currentUserSettings.default, {
    config: Ember.inject.service(),
    settings: Ember.inject.service(),

    // reload settings to ensure we have latest values and pre-configure
    // Unsplash to be active if the server doesn't have any unsplash setting
    beforeModel() {
      this._super(...arguments);

      let {
        settings
      } = this;
      return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor()).then(this.settings.reload()).then(() => {
        if (settings.get('unsplash')) {
          return;
        } // server doesn't have any unsplash settings by default but it can provide
        // overrides via config:
        // - isActive: use as default but allow settings override
        // - applicationId: total override, no field is shown if present


        let unsplash = _unsplashIntegration.default.create({
          isActive: true
        });

        settings.set('unsplash', unsplash);
      });
    },

    actions: {
      save() {
        this.controller.send('save');
      },

      willTransition(transition) {
        let controller = this.controller;
        let modelIsDirty = controller.dirtyAttributes;

        if (modelIsDirty) {
          transition.abort();
          controller.send('toggleLeaveSettingsModal', transition);
          return;
        }
      }

    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Unsplash'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/settings/integrations/zapier", ["exports", "ghost-admin/routes/authenticated", "ghost-admin/mixins/current-user-settings"], function (_exports, _authenticated, _currentUserSettings) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend(_currentUserSettings.default, {
    beforeModel() {
      this._super(...arguments);

      return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());
    },

    model(params, transition) {
      // use the integrations controller to fetch all integrations and pick
      // out the one we want. Allows navigation back to integrations screen
      // without a loading state
      return this.controllerFor('settings.integrations').integrationModelHook('slug', 'zapier', this, transition);
    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Zapier'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/settings/labs", ["exports", "ghost-admin/routes/authenticated", "ghost-admin/mixins/current-user-settings"], function (_exports, _authenticated, _currentUserSettings) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend(_currentUserSettings.default, {
    settings: Ember.inject.service(),

    beforeModel() {
      this._super(...arguments);

      return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());
    },

    model() {
      return this.settings.reload();
    },

    resetController(controller, isExiting) {
      if (isExiting) {
        controller.reset();
      }
    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Settings - Labs'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/setup", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Route.extend({
    ghostPaths: Ember.inject.service(),
    session: Ember.inject.service(),
    ajax: Ember.inject.service(),
    config: Ember.inject.service(),

    // use the beforeModel hook to check to see whether or not setup has been
    // previously completed.  If it has, stop the transition into the setup page.
    beforeModel() {
      this._super(...arguments);

      if (this.get('session.isAuthenticated')) {
        return this.transitionTo('home');
      }

      let authUrl = this.get('ghostPaths.url').api('authentication', 'setup'); // check the state of the setup process via the API

      return this.ajax.request(authUrl).then(result => {
        let [setup] = result.setup;

        if (setup.status) {
          return this.transitionTo('signin');
        } else {
          let controller = this.controllerFor('setup/two');

          if (setup.title) {
            controller.set('blogTitle', setup.title.replace(/&apos;/gim, '\''));
          }

          if (setup.name) {
            controller.set('name', setup.name.replace(/&apos;/gim, '\''));
          }

          if (setup.email) {
            controller.set('email', setup.email);
          }
        }
      });
    },

    deactivate() {
      this._super(...arguments);

      this.controllerFor('setup/two').set('password', '');
    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Setup',
        bodyClasses: ['unauthenticated-route'],
        mainClasses: ['gh-main-white']
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/setup/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Route.extend({
    beforeModel() {
      this._super(...arguments);

      this.transitionTo('setup.one');
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/setup/three", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Route.extend({
    beforeModel() {
      this._super(...arguments);

      if (!this.controllerFor('setup.two').get('blogCreated')) {
        this.transitionTo('setup.two');
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/signin", ["exports", "ember-data", "ghost-admin/mixins/unauthenticated-route-mixin"], function (_exports, _emberData, _unauthenticatedRouteMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // TODO: remove usage of Ember Data's private `Errors` class when refactoring validations
  // eslint-disable-next-line
  const {
    Errors
  } = _emberData.default;

  const defaultModel = function defaultModel() {
    return Ember.Object.create({
      identification: '',
      password: '',
      errors: Errors.create()
    });
  };

  var _default = Ember.Route.extend(_unauthenticatedRouteMixin.default, {
    model() {
      return defaultModel();
    },

    // the deactivate hook is called after a route has been exited.
    deactivate() {
      let controller = this.controllerFor('signin');

      this._super(...arguments); // clear the properties that hold the credentials when we're no longer on the signin screen


      controller.set('signin', defaultModel());
    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Sign In',
        bodyClasses: ['unauthenticated-route']
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/signout", ["exports", "ghost-admin/routes/authenticated"], function (_exports, _authenticated) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend({
    notifications: Ember.inject.service(),

    afterModel()
    /*model, transition*/
    {
      this.notifications.clearAll();
      this.session.invalidate();
    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Sign Out'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/signup", ["exports", "ember-data", "ghost-admin/mixins/unauthenticated-route-mixin", "ghost-admin/mixins/validation-engine"], function (_exports, _emberData, _unauthenticatedRouteMixin, _validationEngine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // TODO: remove usage of Ember Data's private `Errors` class when refactoring validations
  // eslint-disable-next-line
  const {
    Promise
  } = Ember.RSVP;
  const {
    Errors
  } = _emberData.default;

  var _default = Ember.Route.extend(_unauthenticatedRouteMixin.default, {
    ghostPaths: Ember.inject.service(),
    notifications: Ember.inject.service(),
    session: Ember.inject.service(),
    ajax: Ember.inject.service(),
    config: Ember.inject.service(),

    beforeModel() {
      if (this.get('session.isAuthenticated')) {
        this.notifications.showAlert('You need to sign out to register as a new user.', {
          type: 'warn',
          delayed: true,
          key: 'signup.create.already-authenticated'
        });
      }

      this._super(...arguments);
    },

    model(params) {
      let SignupDetails = Ember.Object.extend(_validationEngine.default, {
        validationType: 'signup'
      });
      let signupDetails = SignupDetails.create();
      let re = /^(?:[A-Za-z0-9_-]{4})*(?:[A-Za-z0-9_-]{2}|[A-Za-z0-9_-]{3})?$/;
      let email, tokenText;
      return new Promise(resolve => {
        if (!re.test(params.token)) {
          this.notifications.showAlert('Invalid token.', {
            type: 'error',
            delayed: true,
            key: 'signup.create.invalid-token'
          });
          return resolve(this.transitionTo('signin'));
        }

        tokenText = atob(params.token);
        email = tokenText.split('|')[1]; // leave e-mail blank even though we get it from the token because
        // we need the user to type it in for Chrome to remember the
        // email/password combo properly

        signupDetails.set('email', '');
        signupDetails.set('token', params.token);
        signupDetails.set('errors', Errors.create());
        let authUrl = this.get('ghostPaths.url').api('authentication', 'invitation');
        return this.ajax.request(authUrl, {
          dataType: 'json',
          data: {
            email
          }
        }).then(response => {
          if (response && response.invitation && response.invitation[0].valid === false) {
            this.notifications.showAlert('The invitation does not exist or is no longer valid.', {
              type: 'warn',
              delayed: true,
              key: 'signup.create.invalid-invitation'
            });
            return resolve(this.transitionTo('signin'));
          } // set blogTitle, so password validation has access to it


          signupDetails.set('blogTitle', this.get('config.blogTitle'));
          resolve(signupDetails);
        }).catch(() => {
          resolve(signupDetails);
        });
      });
    },

    deactivate() {
      this._super(...arguments); // clear the properties that hold the sensitive data from the controller


      this.controllerFor('signup').get('signupDetails').setProperties({
        email: '',
        password: '',
        token: ''
      });
    },

    buildRouteInfoMetadata() {
      return {
        bodyClasses: ['unauthenticated-route']
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/site", ["exports", "ghost-admin/routes/authenticated", "fetch"], function (_exports, _authenticated, _fetch) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend({
    config: Ember.inject.service(),
    settings: Ember.inject.service(),
    ui: Ember.inject.service(),
    _hasLoggedIn: false,

    model() {
      return new Date().valueOf();
    },

    afterModel() {
      if (this.settings.get('isPrivate') && !this._hasLoggedIn) {
        let privateLoginUrl = "".concat(this.config.get('blogUrl'), "/private/?r=%2F");
        return (0, _fetch.default)(privateLoginUrl, {
          method: 'POST',
          mode: 'cors',
          redirect: 'manual',
          credentials: 'include',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
          },
          body: "password=".concat(this.settings.get('password'))
        }).then(() => {
          this._hasLoggedIn = true;
        });
      }
    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Site'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/staff/index", ["exports", "ghost-admin/routes/authenticated", "ghost-admin/mixins/current-user-settings"], function (_exports, _authenticated, _currentUserSettings) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend(_currentUserSettings.default, {
    infinity: Ember.inject.service(),
    session: Ember.inject.service(),

    model() {
      return this.session.user;
    },

    setupController(controller) {
      this._super(...arguments);

      controller.backgroundUpdate.perform();
    },

    actions: {
      reload() {
        this.controller.backgroundUpdate.perform();
      }

    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Staff'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/staff/user", ["exports", "ghost-admin/routes/authenticated", "ghost-admin/mixins/current-user-settings"], function (_exports, _authenticated, _currentUserSettings) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _authenticated.default.extend(_currentUserSettings.default, {
    model(params) {
      return this.store.queryRecord('user', {
        slug: params.user_slug,
        include: 'count.posts'
      });
    },

    afterModel(user) {
      this._super(...arguments);

      return this.get('session.user').then(currentUser => {
        let isOwnProfile = user.get('id') === currentUser.get('id');
        let isAuthorOrContributor = currentUser.get('isAuthorOrContributor');
        let isEditor = currentUser.get('isEditor');

        if (isAuthorOrContributor && !isOwnProfile) {
          this.transitionTo('staff.user', currentUser);
        } else if (isEditor && !isOwnProfile && !user.get('isAuthorOrContributor')) {
          this.transitionTo('staff');
        }
      });
    },

    serialize(model) {
      return {
        user_slug: model.get('slug')
      };
    },

    actions: {
      didTransition() {
        this.modelFor('staff.user').get('errors').clear();
      },

      save() {
        this.get('controller.save').perform();
      },

      willTransition(transition) {
        let controller = this.controller;
        let user = controller.user;
        let dirtyAttributes = controller.dirtyAttributes;
        let modelIsDirty = user.get('hasDirtyAttributes'); // always reset the password properties on the user model when leaving

        if (user) {
          user.set('password', '');
          user.set('newPassword', '');
          user.set('ne2Password', '');
        }

        if (modelIsDirty || dirtyAttributes) {
          transition.abort();
          controller.send('toggleLeaveSettingsModal', transition);
          return;
        }
      }

    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Staff - User'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/tag", ["exports", "ghost-admin/routes/authenticated", "ghost-admin/mixins/current-user-settings"], function (_exports, _authenticated, _currentUserSettings) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _authenticated.default.extend(_currentUserSettings.default, {
    router: Ember.inject.service(),
    _requiresBackgroundRefresh: true,

    init() {
      this._super(...arguments);

      this.router.on('routeWillChange', transition => {
        this.showUnsavedChangesModal(transition);
      });
    },

    beforeModel() {
      this._super(...arguments);

      return this.get('session.user').then(this.transitionAuthor());
    },

    model(params) {
      this._requiresBackgroundRefresh = false;

      if (params.tag_slug) {
        return this.store.queryRecord('tag', {
          slug: params.tag_slug
        });
      } else {
        return this.store.createRecord('tag');
      }
    },

    serialize(tag) {
      return {
        tag_slug: tag.get('slug')
      };
    },

    setupController(controller, tag) {
      this._super(...arguments);

      if (this._requiresBackgroundRefresh) {
        controller.fetchTag.perform(tag.get('slug'));
      }
    },

    deactivate() {
      this._super(...arguments); // clean up newly created records and revert unsaved changes to existing


      this.controller.tag.rollbackAttributes();
      this._requiresBackgroundRefresh = true;
    },

    actions: {
      save() {
        this.controller.send('save');
      }

    },

    showUnsavedChangesModal(transition) {
      if (transition.from && transition.from.name === this.routeName && transition.targetName) {
        let {
          controller
        } = this; // tag.changedAttributes is always true for new tags but number of changed attrs is reliable

        let isChanged = Object.keys(controller.tag.changedAttributes()).length > 0;

        if (!controller.tag.isDeleted && isChanged) {
          transition.abort();
          controller.send('toggleUnsavedChangesModal', transition);
          return;
        }
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/routes/tag/new", ["exports", "ghost-admin/routes/tag"], function (_exports, _tag) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _tag.default.extend({
    controllerName: 'tag',
    templateName: 'tag'
  });

  _exports.default = _default;
});
;define("ghost-admin/routes/tags", ["exports", "ghost-admin/routes/authenticated", "ghost-admin/mixins/current-user-settings", "ghost-admin/mixins/shortcuts-route"], function (_exports, _authenticated, _currentUserSettings, _shortcutsRoute) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _authenticated.default.extend(_currentUserSettings.default, _shortcutsRoute.default, {
    queryParams: {
      type: {
        refreshModel: true,
        replace: true
      }
    },
    shortcuts: null,

    init() {
      this._super(...arguments);

      this.shortcuts = {
        c: 'newTag'
      };
    },

    // authors aren't allowed to manage tags
    beforeModel() {
      this._super(...arguments);

      return this.get('session.user').then(this.transitionAuthor());
    },

    // set model to a live array so all tags are shown and created/deleted tags
    // are automatically added/removed. Also load all tags in the background,
    // pausing to show the loading spinner if no tags have been loaded yet
    model() {
      let promise = this.store.query('tag', {
        limit: 'all',
        include: 'count.posts'
      });
      let tags = this.store.peekAll('tag');

      if (this.store.peekAll('tag').get('length') === 0) {
        return promise.then(() => tags);
      } else {
        return tags;
      }
    },

    actions: {
      newTag() {
        this.transitionTo('tag.new');
      }

    },

    buildRouteInfoMetadata() {
      return {
        titleToken: 'Tags'
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/-default", ["exports", "@ember-data/serializer/json"], function (_exports, _json) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _json.default;
    }
  });
});
;define("ghost-admin/serializers/-json-api", ["exports", "@ember-data/serializer/json-api"], function (_exports, _jsonApi) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _jsonApi.default;
    }
  });
});
;define("ghost-admin/serializers/-rest", ["exports", "@ember-data/serializer/rest"], function (_exports, _rest) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _rest.default;
    }
  });
});
;define("ghost-admin/serializers/action", ["exports", "ghost-admin/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _application.default.extend({
    attrs: {
      createdAtUTC: {
        key: 'created_at'
      }
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/api-key", ["exports", "ghost-admin/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    attrs: {
      lastSeenAtUTC: {
        key: 'last_seen_at'
      },
      createdAtUTC: {
        key: 'created_at'
      },
      updatedAtUTC: {
        key: 'updated_at'
      }
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/application", ["exports", "@ember-data/serializer/rest", "ember-inflector"], function (_exports, _rest, _emberInflector) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _rest.default.extend({
    // hacky method for getting access to meta data for single-resource responses
    // https://github.com/emberjs/data/pull/4077#issuecomment-200780097
    // TODO: review once the record links and meta RFC lands
    // https://github.com/emberjs/rfcs/blob/master/text/0332-ember-data-record-links-and-meta.md
    extractMeta(store, typeClass) {
      let meta = this._super(...arguments);

      typeClass.___meta = meta;
      return meta;
    },

    serialize()
    /*snapshot, options*/
    {
      let json = this._super(...arguments); // don't send attributes that are updated automatically on the server


      delete json.created_by;
      delete json.updated_by;
      return json;
    },

    serializeIntoHash(hash, type, record, options) {
      // Our API expects an id on the posted object
      options = options || {};
      options.includeId = true; // We have a plural root in the API

      let root = (0, _emberInflector.pluralize)(type.modelName);
      let data = this.serialize(record, options);
      hash[root] = [data];
    },

    keyForAttribute(attr) {
      return Ember.String.decamelize(attr);
    },

    keyForRelationship(key, typeClass, method) {
      let transform = method === 'serialize' ? Ember.String.underscore : Ember.String.camelize;

      if (typeClass === 'belongsTo' && !key.match(/(Id|By)$/)) {
        let transformed = "".concat(transform(key), "_id");
        return transformed;
      }

      return transform(key);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/email", ["exports", "ghost-admin/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _application.default.extend({
    attrs: {
      createdAtUTC: {
        key: 'created_at'
      },
      updatedAtUTC: {
        key: 'updated_at'
      },
      submittedAtUTC: {
        key: 'submitted_at'
      }
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/integration", ["exports", "ghost-admin/serializers/application", "@ember-data/serializer/rest"], function (_exports, _application, _rest) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend(_rest.EmbeddedRecordsMixin, {
    attrs: {
      apiKeys: {
        embedded: 'always'
      },
      webhooks: {
        embedded: 'always'
      },
      createdAtUTC: {
        key: 'created_at'
      },
      updatedAtUTC: {
        key: 'updated_at'
      }
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/invite", ["exports", "ghost-admin/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    attrs: {
      createdAtUTC: {
        key: 'created_at'
      },
      updatedAtUTC: {
        key: 'updated_at'
      }
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/label", ["exports", "ghost-admin/serializers/application", "ember-inflector"], function (_exports, _application, _emberInflector) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _application.default.extend({
    attrs: {
      createdAtUTC: {
        key: 'created_at'
      },
      updatedAtUTC: {
        key: 'updated_at'
      }
    },

    serialize()
    /*snapshot, options*/
    {
      let json = this._super(...arguments); // Properties that exist on the model but we don't want sent in the payload


      delete json.count;
      return json;
    },

    // if we use `queryRecord` ensure we grab the first record to avoid
    // DS.SERIALIZER.REST.QUERYRECORD-ARRAY-RESPONSE deprecations
    normalizeResponse(store, primaryModelClass, payload, id, requestType) {
      if (requestType === 'queryRecord') {
        let singular = primaryModelClass.modelName;
        let plural = (0, _emberInflector.pluralize)(singular);

        if (payload[plural]) {
          payload[singular] = payload[plural][0];
          delete payload[plural];
        }
      }

      return this._super(...arguments);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/member", ["exports", "ghost-admin/serializers/application", "@ember-data/serializer/rest"], function (_exports, _application, _rest) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _application.default.extend(_rest.EmbeddedRecordsMixin, {
    attrs: {
      createdAtUTC: {
        key: 'created_at'
      },
      labels: {
        embedded: 'always'
      }
    },

    serialize()
    /*snapshot, options*/
    {
      let json = this._super(...arguments); // Properties that exist on the model but we don't want sent in the payload


      delete json.stripe;
      delete json.geolocation; // Normalize properties

      json.name = json.name || '';
      json.note = json.note || '';
      return json;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/notification", ["exports", "ghost-admin/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    attrs: {
      key: {
        key: 'location'
      }
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/page", ["exports", "ghost-admin/serializers/post"], function (_exports, _post) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _post.default.extend({
    serialize()
    /*snapshot, options*/
    {
      let json = this._super(...arguments); // Properties that exist on the model but we don't want sent in the payload


      delete json.email_subject;
      delete json.send_email_when_published;
      delete json.email_id;
      delete json.email;
      return json;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/post", ["exports", "ghost-admin/serializers/application", "@ember-data/serializer/rest", "ember-inflector"], function (_exports, _application, _rest, _emberInflector) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _application.default.extend(_rest.EmbeddedRecordsMixin, {
    // settings for the EmbeddedRecordsMixin.
    attrs: {
      authors: {
        embedded: 'always'
      },
      tags: {
        embedded: 'always'
      },
      publishedAtUTC: {
        key: 'published_at'
      },
      createdAtUTC: {
        key: 'created_at'
      },
      updatedAtUTC: {
        key: 'updated_at'
      },
      email: {
        embedded: 'always'
      }
    },

    normalizeSingleResponse(store, primaryModelClass, payload) {
      let root = this.keyForAttribute(primaryModelClass.modelName);
      let pluralizedRoot = (0, _emberInflector.pluralize)(primaryModelClass.modelName);

      if (payload[pluralizedRoot]) {
        payload[root] = payload[pluralizedRoot][0];
        delete payload[pluralizedRoot];
      }

      return this._super(...arguments);
    },

    normalizeArrayResponse() {
      return this._super(...arguments);
    },

    serialize()
    /*snapshot, options*/
    {
      let json = this._super(...arguments); // Inserted locally as a convenience.


      delete json.author_id; // Read-only virtual properties

      delete json.uuid;
      delete json.url;
      delete json.send_email_when_published; // Deprecated property (replaced with data.authors)

      delete json.author;

      if (json.visibility === null) {
        delete json.visibility;
      }

      return json;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/role", ["exports", "ghost-admin/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    attrs: {
      createdAtUTC: {
        key: 'created_at'
      },
      updatedAtUTC: {
        key: 'updated_at'
      }
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/setting", ["exports", "ghost-admin/serializers/application", "ember-inflector"], function (_exports, _application, _emberInflector) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    serializeIntoHash(hash, type, record, options) {
      // Settings API does not want ids
      options = options || {};
      options.includeId = false;
      let root = (0, _emberInflector.pluralize)(type.modelName);
      let data = this.serialize(record, options);
      let payload = [];
      delete data.id;
      Object.keys(data).forEach(k => {
        payload.push({
          key: k,
          value: data[k]
        });
      });
      hash[root] = payload;
    },

    normalizeArrayResponse(store, primaryModelClass, _payload, id, requestType) {
      let payload = {
        settings: [this._extractObjectFromArrayPayload(_payload)]
      };
      return this._super(store, primaryModelClass, payload, id, requestType);
    },

    normalizeSingleResponse(store, primaryModelClass, _payload, id, requestType) {
      let payload = {
        setting: this._extractObjectFromArrayPayload(_payload)
      };
      return this._super(store, primaryModelClass, payload, id, requestType);
    },

    _extractObjectFromArrayPayload(_payload) {
      let payload = {
        id: '0'
      };

      _payload.settings.forEach(setting => {
        payload[setting.key] = setting.value;
      });

      return payload;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/tag", ["exports", "ghost-admin/serializers/application", "ember-inflector"], function (_exports, _application, _emberInflector) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _application.default.extend({
    attrs: {
      createdAtUTC: {
        key: 'created_at'
      },
      updatedAtUTC: {
        key: 'updated_at'
      }
    },

    serialize()
    /*snapshot, options*/
    {
      let json = this._super(...arguments); // Properties that exist on the model but we don't want sent in the payload


      delete json.count;
      return json;
    },

    // if we use `queryRecord` ensure we grab the first record to avoid
    // DS.SERIALIZER.REST.QUERYRECORD-ARRAY-RESPONSE deprecations
    normalizeResponse(store, primaryModelClass, payload, id, requestType) {
      if (requestType === 'queryRecord') {
        let singular = primaryModelClass.modelName;
        let plural = (0, _emberInflector.pluralize)(singular);

        if (payload[plural]) {
          payload[singular] = payload[plural][0];
          delete payload[plural];
        }
      }

      return this._super(...arguments);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/theme", ["exports", "ghost-admin/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    primaryKey: 'name'
  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/user", ["exports", "ghost-admin/serializers/application", "@ember-data/serializer/rest", "ember-inflector"], function (_exports, _application, _rest, _emberInflector) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend(_rest.EmbeddedRecordsMixin, {
    attrs: {
      roles: {
        embedded: 'always'
      },
      lastLoginUTC: {
        key: 'last_seen'
      },
      createdAtUTC: {
        key: 'created_at'
      },
      updatedAtUTC: {
        key: 'updated_at'
      }
    },

    extractSingle(store, primaryType, payload) {
      let root = this.keyForAttribute(primaryType.modelName);
      let pluralizedRoot = (0, _emberInflector.pluralize)(primaryType.modelName);
      payload[root] = payload[pluralizedRoot][0];
      delete payload[pluralizedRoot];
      return this._super(...arguments);
    },

    normalizeSingleResponse(store, primaryModelClass, payload) {
      let root = this.keyForAttribute(primaryModelClass.modelName);
      let pluralizedRoot = (0, _emberInflector.pluralize)(primaryModelClass.modelName);

      if (payload[pluralizedRoot]) {
        payload[root] = payload[pluralizedRoot][0];
        delete payload[pluralizedRoot];
      }

      return this._super(...arguments);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/serializers/webhook", ["exports", "ghost-admin/serializers/application"], function (_exports, _application) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _application.default.extend({
    attrs: {
      lastTriggeredAtUTC: {
        key: 'last_triggered_at'
      },
      createdAtUTC: {
        key: 'created_at'
      },
      updatedAtUTC: {
        key: 'updated_at'
      }
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/services/ajax", ["exports", "ember-ajax/services/ajax", "ghost-admin/config/environment", "ember-ajax/errors"], function (_exports, _ajax, _environment, _errors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isVersionMismatchError = isVersionMismatchError;
  _exports.isServerUnreachableError = isServerUnreachableError;
  _exports.isRequestEntityTooLargeError = isRequestEntityTooLargeError;
  _exports.isUnsupportedMediaTypeError = isUnsupportedMediaTypeError;
  _exports.isMaintenanceError = isMaintenanceError;
  _exports.isThemeValidationError = isThemeValidationError;
  _exports.isHostLimitError = isHostLimitError;
  _exports.default = _exports.HostLimitError = _exports.ThemeValidationError = _exports.MaintenanceError = _exports.UnsupportedMediaTypeError = _exports.RequestEntityTooLargeError = _exports.ServerUnreachableError = _exports.VersionMismatchError = void 0;
  const JSON_CONTENT_TYPE = 'application/json';
  const GHOST_REQUEST = /\/ghost\/api\//;

  function isJSONContentType(header) {
    if (!header || Ember.isNone(header)) {
      return false;
    }

    return header.indexOf(JSON_CONTENT_TYPE) === 0;
  }
  /* Version mismatch error */


  class VersionMismatchError extends _errors.AjaxError {
    constructor(payload) {
      super(payload, 'API server is running a newer version of Ghost, please upgrade.');
    }

  }

  _exports.VersionMismatchError = VersionMismatchError;

  function isVersionMismatchError(errorOrStatus, payload) {
    if ((0, _errors.isAjaxError)(errorOrStatus)) {
      return errorOrStatus instanceof VersionMismatchError;
    } else {
      return Ember.get(payload || {}, 'errors.firstObject.type') === 'VersionMismatchError';
    }
  }
  /* Server unreachable error */


  class ServerUnreachableError extends _errors.AjaxError {
    constructor(payload) {
      super(payload, 'Server was unreachable');
    }

  }

  _exports.ServerUnreachableError = ServerUnreachableError;

  function isServerUnreachableError(error) {
    if ((0, _errors.isAjaxError)(error)) {
      return error instanceof ServerUnreachableError;
    } else {
      return error === 0 || error === '0';
    }
  }
  /* Request entity too large error */


  class RequestEntityTooLargeError extends _errors.AjaxError {
    constructor(payload) {
      super(payload, 'Request is larger than the maximum file size the server allows');
    }

  }

  _exports.RequestEntityTooLargeError = RequestEntityTooLargeError;

  function isRequestEntityTooLargeError(errorOrStatus) {
    if ((0, _errors.isAjaxError)(errorOrStatus)) {
      return errorOrStatus instanceof RequestEntityTooLargeError;
    } else {
      return errorOrStatus === 413;
    }
  }
  /* Unsupported media type error */


  class UnsupportedMediaTypeError extends _errors.AjaxError {
    constructor(payload) {
      super(payload, 'Request contains an unknown or unsupported file type.');
    }

  }

  _exports.UnsupportedMediaTypeError = UnsupportedMediaTypeError;

  function isUnsupportedMediaTypeError(errorOrStatus) {
    if ((0, _errors.isAjaxError)(errorOrStatus)) {
      return errorOrStatus instanceof UnsupportedMediaTypeError;
    } else {
      return errorOrStatus === 415;
    }
  }
  /* Maintenance error */


  class MaintenanceError extends _errors.AjaxError {
    constructor(payload) {
      super(payload, 'Ghost is currently undergoing maintenance, please wait a moment then retry.');
    }

  }

  _exports.MaintenanceError = MaintenanceError;

  function isMaintenanceError(errorOrStatus) {
    if ((0, _errors.isAjaxError)(errorOrStatus)) {
      return errorOrStatus instanceof MaintenanceError;
    } else {
      return errorOrStatus === 503;
    }
  }
  /* Theme validation error */


  class ThemeValidationError extends _errors.AjaxError {
    constructor(payload) {
      super(payload, 'Theme is not compatible or contains errors.');
    }

  }

  _exports.ThemeValidationError = ThemeValidationError;

  function isThemeValidationError(errorOrStatus, payload) {
    if ((0, _errors.isAjaxError)(errorOrStatus)) {
      return errorOrStatus instanceof ThemeValidationError;
    } else {
      return Ember.get(payload || {}, 'errors.firstObject.type') === 'ThemeValidationError';
    }
  }
  /* Host limit reached/exceeded error */


  class HostLimitError extends _errors.AjaxError {
    constructor(payload) {
      super(payload, 'A hosting plan limit was reached or exceeded.');
    }

  }

  _exports.HostLimitError = HostLimitError;

  function isHostLimitError(errorOrStatus, payload) {
    if ((0, _errors.isAjaxError)(errorOrStatus)) {
      return errorOrStatus instanceof HostLimitError;
    } else {
      return Ember.get(payload || {}, 'errors.firstObject.type') === 'HostLimitError';
    }
  }
  /* end: custom error types */


  let ajaxService = _ajax.default.extend({
    session: Ember.inject.service(),
    // flag to tell our ESA authenticator not to try an invalidate DELETE request
    // because it's been triggered by this service's 401 handling which means the
    // DELETE would fail and get stuck in an infinite loop
    // TODO: find a more elegant way to handle this
    skipSessionDeletion: false,

    get headers() {
      return {
        'X-Ghost-Version': _environment.default.APP.version,
        'App-Pragma': 'no-cache'
      };
    },

    init() {
      this._super(...arguments);

      if (this.isTesting === undefined) {
        this.isTesting = _environment.default.environment === 'test';
      }
    },

    // ember-ajax recognises `application/vnd.api+json` as a JSON-API request
    // and formats appropriately, we want to handle `application/json` the same
    _makeRequest(hash) {
      if (isJSONContentType(hash.contentType) && hash.type !== 'GET') {
        if (typeof hash.data === 'object') {
          hash.data = JSON.stringify(hash.data);
        }
      }

      hash.withCredentials = true;
      return this._super(hash);
    },

    handleResponse(status, headers, payload, request) {
      if (this.isVersionMismatchError(status, headers, payload)) {
        return new VersionMismatchError(payload);
      } else if (this.isServerUnreachableError(status, headers, payload)) {
        return new ServerUnreachableError(payload);
      } else if (this.isRequestEntityTooLargeError(status, headers, payload)) {
        return new RequestEntityTooLargeError(payload);
      } else if (this.isUnsupportedMediaTypeError(status, headers, payload)) {
        return new UnsupportedMediaTypeError(payload);
      } else if (this.isMaintenanceError(status, headers, payload)) {
        return new MaintenanceError(payload);
      } else if (this.isThemeValidationError(status, headers, payload)) {
        return new ThemeValidationError(payload);
      } else if (this.isHostLimitError(status, headers, payload)) {
        return new HostLimitError(payload);
      }

      let isGhostRequest = GHOST_REQUEST.test(request.url);
      let isAuthenticated = this.get('session.isAuthenticated');
      let isUnauthorized = this.isUnauthorizedError(status, headers, payload);

      if (isAuthenticated && isGhostRequest && isUnauthorized) {
        this.skipSessionDeletion = true;
        this.session.invalidate();
      }

      return this._super(...arguments);
    },

    normalizeErrorResponse(status, headers, payload) {
      if (payload && typeof payload === 'object') {
        let errors = payload.error || payload.errors || payload.message || undefined;

        if (errors) {
          if (!Ember.isArray(errors)) {
            errors = [errors];
          }

          payload.errors = errors.map(function (error) {
            if (typeof error === 'string') {
              return {
                message: error
              };
            } else {
              return error;
            }
          });
        }
      }

      return this._super(status, headers, payload);
    },

    isVersionMismatchError(status, headers, payload) {
      return isVersionMismatchError(status, payload);
    },

    isServerUnreachableError(status) {
      return isServerUnreachableError(status);
    },

    isRequestEntityTooLargeError(status) {
      return isRequestEntityTooLargeError(status);
    },

    isUnsupportedMediaTypeError(status) {
      return isUnsupportedMediaTypeError(status);
    },

    isMaintenanceError(status, headers, payload) {
      return isMaintenanceError(status, payload);
    },

    isThemeValidationError(status, headers, payload) {
      return isThemeValidationError(status, payload);
    },

    isHostLimitError(status, headers, payload) {
      return isHostLimitError(status, payload);
    }

  }); // we need to reopen so that internal methods use the correct contentType


  ajaxService.reopen({
    contentType: 'application/json; charset=UTF-8'
  });
  var _default = ajaxService;
  _exports.default = _default;
});
;define("ghost-admin/services/clock", ["exports", "ghost-admin/config/environment", "moment"], function (_exports, _environment, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const ONE_SECOND = 1000; // Creates a clock service to run intervals.

  var _default = Ember.Service.extend({
    second: null,
    minute: null,
    hour: null,

    init() {
      this._super(...arguments);

      this.tick();
    },

    tick() {
      let now = (0, _moment.default)().utc();
      this.setProperties({
        second: now.seconds(),
        minute: now.minutes(),
        hour: now.hours()
      });

      if (_environment.default.environment !== 'test') {
        Ember.run.later(() => {
          this.tick();
        }, ONE_SECOND);
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/config", ["exports", "@tryghost/timezone-data"], function (_exports, _timezoneData) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // ember-cli-shims doesn't export _ProxyMixin
  const {
    _ProxyMixin
  } = Ember;

  var _default = Ember.Service.extend(_ProxyMixin, {
    ajax: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    session: Ember.inject.service(),
    content: null,

    init() {
      this._super(...arguments);

      this.content = {};
    },

    fetch() {
      let promises = [];
      promises.push(this.fetchUnauthenticated());

      if (this.session.isAuthenticated) {
        promises.push(this.fetchAuthenticated());
      }

      return Ember.RSVP.all(promises);
    },

    fetchUnauthenticated() {
      let siteUrl = this.ghostPaths.url.api('site');
      return this.ajax.request(siteUrl).then(({
        site
      }) => {
        // normalize url to non-trailing-slash
        site.blogUrl = site.url.replace(/\/$/, '');
        site.blogTitle = site.title;
        delete site.url;
        delete site.title;
        Object.assign(this.content, site);
      }).then(() => {
        this.notifyPropertyChange('content');
      });
    },

    fetchAuthenticated() {
      let configUrl = this.ghostPaths.url.api('config');
      return this.ajax.request(configUrl).then(({
        config
      }) => {
        Object.assign(this.content, config);
      }).then(() => {
        this.notifyPropertyChange('content');
      });
    },

    availableTimezones: Ember.computed(function () {
      return Ember.RSVP.resolve(_timezoneData.default);
    }),
    blogDomain: Ember.computed('blogUrl', function () {
      let blogUrl = this.get('blogUrl');
      let blogDomain = blogUrl.replace(/^https?:\/\//, '').replace(/\/?$/, '');
      return blogDomain;
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/services/cookies", ["exports", "ember-cookies/services/cookies"], function (_exports, _cookies) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _cookies.default;
  _exports.default = _default;
});
;define("ghost-admin/services/custom-views", ["exports", "ghost-admin/mixins/validation-engine", "@ember-decorators/object", "ember-concurrency-decorators"], function (_exports, _validationEngine, _object, _emberConcurrencyDecorators) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const VIEW_COLORS = ['midgrey', 'blue', 'green', 'red', 'teal', 'purple', 'yellow', 'orange', 'pink'];
  const CustomView = Ember.Object.extend(_validationEngine.default, {
    validationType: 'customView',
    name: '',
    route: '',
    color: '',
    filter: null,
    isNew: false,
    isDefault: false,

    init() {
      this._super(...arguments);

      if (!this.filter) {
        this.filter = {};
      }

      if (!this.color) {
        this.color = VIEW_COLORS[Math.floor(Math.random() * VIEW_COLORS.length)];
      }
    },

    // convert to POJO so we don't store any client-specific objects in any
    // stringified JSON settings fields
    toJSON() {
      return {
        name: this.name,
        route: this.route,
        color: this.color,
        filter: this.filter
      };
    }

  });
  const DEFAULT_VIEWS = [{
    route: 'posts',
    name: 'Drafts',
    color: 'midgrey',
    icon: 'pencil',
    filter: {
      type: 'draft'
    }
  }, {
    route: 'posts',
    name: 'Scheduled',
    color: 'midgrey',
    icon: 'clockface',
    filter: {
      type: 'scheduled'
    }
  }, {
    route: 'posts',
    name: 'Published',
    color: 'midgray',
    icon: 'published-post',
    filter: {
      type: 'published'
    }
  }].map(view => {
    return CustomView.create(Object.assign({}, view, {
      isDefault: true
    }));
  });

  let isFilterEqual = function (filterA, filterB) {
    let aProps = Object.getOwnPropertyNames(filterA);
    let bProps = Object.getOwnPropertyNames(filterB);

    if (aProps.length !== bProps.length) {
      return false;
    }

    for (let i = 0; i < aProps.length; i++) {
      let key = aProps[i];

      if (filterA[key] !== filterB[key]) {
        return false;
      }
    }

    return true;
  };

  let isViewEqual = function (viewA, viewB) {
    return viewA.route === viewB.route && isFilterEqual(viewA.filter, viewB.filter);
  };

  let CustomViewsService = (_dec = (0, _object.observes)('session.isAuthenticated', 'session.user.accessibility'), (_class = (_temp = class CustomViewsService extends Ember.Service {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "router", _descriptor, this);

      _initializerDefineProperty(this, "session", _descriptor2, this);

      _initializerDefineProperty(this, "viewList", _descriptor3, this);

      _initializerDefineProperty(this, "showFormModal", _descriptor4, this);

      this.updateViewList();
    } // eslint-disable-next-line ghost/ember/no-observers


    async updateViewList() {
      // avoid fetching user before authenticated otherwise the 403 can fire
      // during authentication and cause errors during setup/signin
      if (!this.session.isAuthenticated) {
        return;
      }

      let user = await this.session.user;
      let views = JSON.parse(user.get('accessibility') || '{}').views;
      views = Ember.isArray(views) ? views : [];
      let viewList = []; // contributors can only see their own draft posts so it doesn't make
      // sense to show them default views which change the status/type filter

      if (!user.isContributor) {
        viewList.push(...DEFAULT_VIEWS);
      }

      viewList.push(...views.map(view => {
        return CustomView.create(view);
      }));
      this.viewList = viewList;
    }

    toggleFormModal() {
      this.showFormModal = !this.showFormModal;
    }

    *saveViewTask(view) {
      yield view.validate(); // perform some ad-hoc validation of duplicate names because ValidationEngine doesn't support it

      let duplicateView = this.viewList.find(existingView => {
        return existingView.route === view.route && existingView.name.trim().toLowerCase() === view.name.trim().toLowerCase() && !isFilterEqual(existingView.filter, view.filter);
      });

      if (duplicateView) {
        view.errors.add('name', 'Has already been used');
        view.hasValidated.pushObject('name');
        view.invalidate();
        return false;
      } // remove an older version of the view from our views list
      // - we don't allow editing the filter and route+filter combos are unique
      // - we create a new instance of a view from an existing one when editing to act as a "scratch" view


      let matchingView = this.viewList.find(existingView => isViewEqual(existingView, view));

      if (matchingView) {
        this.viewList.replace(this.viewList.indexOf(matchingView), 1, [view]);
      } else {
        this.viewList.push(view);
      } // rebuild the "views" array in our user settings json string


      yield this._saveViewSettings();
      view.set('isNew', false);
      return view;
    }

    *deleteViewTask(view) {
      let matchingView = this.viewList.find(existingView => isViewEqual(existingView, view));

      if (matchingView && !matchingView.isDefault) {
        this.viewList.removeObject(matchingView);
        yield this._saveViewSettings();
        return true;
      }
    }

    get availableColors() {
      return VIEW_COLORS;
    }

    get forPosts() {
      return this.viewList.filter(view => view.route === 'posts');
    }

    get forPages() {
      return this.viewList.filter(view => view.route === 'pages');
    }

    get activeView() {
      if (!this.router.currentRoute) {
        return undefined;
      }

      return this.findView(this.router.currentRouteName, this.router.currentRoute.queryParams);
    }

    findView(routeName, queryParams) {
      let _routeName = routeName.replace(/_loading$/, '');

      return this.viewList.find(view => {
        return view.route === _routeName && isFilterEqual(view.filter, queryParams);
      });
    }

    newView() {
      return CustomView.create({
        isNew: true,
        route: this.router.currentRouteName,
        filter: this.router.currentRoute.queryParams
      });
    }

    editView() {
      return CustomView.create(this.activeView || this.newView());
    }

    async _saveViewSettings() {
      let user = await this.session.user;
      let userSettings = JSON.parse(user.get('accessibility')) || {};
      userSettings.views = this.viewList.reject(view => view.isDefault).map(view => view.toJSON());
      user.set('accessibility', JSON.stringify(userSettings));
      return user.save();
    }

  }, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "router", [Ember.inject.service], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "session", [Ember.inject.service], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "viewList", [Ember._tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "showFormModal", [Ember._tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class.prototype, "updateViewList", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "updateViewList"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleFormModal", [Ember._action], Object.getOwnPropertyDescriptor(_class.prototype, "toggleFormModal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "saveViewTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "saveViewTask"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "deleteViewTask", [_emberConcurrencyDecorators.task], Object.getOwnPropertyDescriptor(_class.prototype, "deleteViewTask"), _class.prototype)), _class));
  _exports.default = CustomViewsService;
});
;define("ghost-admin/services/drag-coordinator", ["exports", "ember-drag-drop/services/drag-coordinator"], function (_exports, _dragCoordinator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _dragCoordinator.default;
  _exports.default = _default;
});
;define("ghost-admin/services/dropdown", ["exports", "jquery", "ghost-admin/mixins/body-event-listener"], function (_exports, _jquery, _bodyEventListener) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  // This is used by the dropdown initializer to manage closing & toggling
  var _default = Ember.Service.extend(Ember.Evented, _bodyEventListener.default, {
    bodyClick(event) {
      let dropdownSelector = '.ember-basic-dropdown-trigger, .ember-basic-dropdown-content';

      if ((0, _jquery.default)(event.target).closest(dropdownSelector).length <= 0) {
        this.closeDropdowns();
      }
    },

    closeDropdowns() {
      this.trigger('close');
    },

    toggleDropdown(dropdownName, dropdownButton) {
      this.trigger('toggle', {
        target: dropdownName,
        button: dropdownButton
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/ember-load-config", ["exports", "ember-load/services/ember-load-config", "ghost-admin/config/environment"], function (_exports, _emberLoadConfig, _environment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const userConfig = _environment.default['ember-load'] || {};

  var _default = _emberLoadConfig.default.extend({
    loadingIndicatorClass: userConfig.loadingIndicatorClass
  });

  _exports.default = _default;
});
;define("ghost-admin/services/event-bus", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Service.extend(Ember.Evented, {
    publish() {
      return this.trigger(...arguments);
    },

    subscribe() {
      return this.on(...arguments);
    },

    unsubscribe() {
      return this.off(...arguments);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/feature", ["exports", "jquery"], function (_exports, _jquery) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.feature = feature;
  _exports.default = void 0;

  function feature(name, options = {}) {
    let {
      user,
      onChange
    } = options;
    let watchedProps = user ? ["accessibility.".concat(name)] : ["config.".concat(name), "labs.".concat(name)];
    return Ember.computed.apply(Ember, watchedProps.concat({
      get() {
        let enabled = false;

        if (user) {
          enabled = this.get("accessibility.".concat(name));
        } else if (this.get("config.".concat(name))) {
          enabled = this.get("config.".concat(name));
        } else {
          enabled = this.get("labs.".concat(name)) || false;
        }

        if (options.developer) {
          enabled = enabled && this.get('config.enableDeveloperExperiments');
        }

        return enabled;
      },

      set(key, value) {
        this.update(key, value, options);

        if (onChange) {
          // value must be passed here because the value isn't set until
          // the setter function returns
          this.get(onChange).bind(this)(value);
        }

        return value;
      }

    }));
  }

  var _default = Ember.Service.extend({
    store: Ember.inject.service(),
    config: Ember.inject.service(),
    session: Ember.inject.service(),
    settings: Ember.inject.service(),
    notifications: Ember.inject.service(),
    lazyLoader: Ember.inject.service(),
    members: feature('members'),
    nightShift: feature('nightShift', {
      user: true,
      onChange: '_setAdminTheme'
    }),
    _user: null,
    labs: Ember.computed('settings.labs', function () {
      let labs = this.get('settings.labs');

      try {
        return JSON.parse(labs) || {};
      } catch (e) {
        return {};
      }
    }),
    accessibility: Ember.computed('_user.accessibility', function () {
      let accessibility = this.get('_user.accessibility');

      try {
        return JSON.parse(accessibility) || {};
      } catch (e) {
        return {};
      }
    }),

    fetch() {
      return Ember.RSVP.hash({
        settings: this.settings.fetch(),
        user: this.get('session.user')
      }).then(({
        user
      }) => {
        this.set('_user', user);
        return this._setAdminTheme().then(() => true);
      });
    },

    update(key, value, options = {}) {
      let serviceProperty = options.user ? 'accessibility' : 'labs';
      let model = this.get(options.user ? '_user' : 'settings');
      let featureObject = this.get(serviceProperty); // set the new key value for either the labs property or the accessibility property

      Ember.set(featureObject, key, value); // update the 'labs' or 'accessibility' key of the model

      model.set(serviceProperty, JSON.stringify(featureObject));
      return model.save().then(() => {
        // return the labs key value that we get from the server
        this.notifyPropertyChange(serviceProperty);
        return this.get("".concat(serviceProperty, ".").concat(key));
      }).catch(error => {
        model.rollbackAttributes();
        this.notifyPropertyChange(serviceProperty); // we'll always have an errors object unless we hit a
        // validation error

        if (!error) {
          throw new Ember.Error("Validation of the feature service ".concat(options.user ? 'user' : 'settings', " model failed when updating ").concat(serviceProperty, "."));
        }

        this.notifications.showAPIError(error);
        return this.get("".concat(serviceProperty, ".").concat(key));
      });
    },

    _setAdminTheme(enabled) {
      let nightShift = enabled;

      if (typeof nightShift === 'undefined') {
        nightShift = enabled || this.nightShift;
      }

      return this.lazyLoader.loadStyle('dark', 'assets/ghost-dark.css', true).then(() => {
        (0, _jquery.default)('link[title=dark]').prop('disabled', !nightShift);
        (0, _jquery.default)('link[title=light]').prop('disabled', nightShift);
      }).catch(() => {
        //TODO: Also disable toggle from settings and Labs hover
        (0, _jquery.default)('link[title=dark]').prop('disabled', true);
        (0, _jquery.default)('link[title=light]').prop('disabled', false);
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/ghost-paths", ["exports", "ghost-admin/utils/ghost-paths"], function (_exports, _ghostPaths) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Service.extend((0, _ghostPaths.default)());

  _exports.default = _default;
});
;define("ghost-admin/services/in-viewport", ["exports", "ember-in-viewport/services/in-viewport"], function (_exports, _inViewport) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _inViewport.default;
    }
  });
});
;define("ghost-admin/services/infinity", ["exports", "ember-infinity/services/infinity"], function (_exports, _infinity) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _infinity.default;
    }
  });
});
;define("ghost-admin/services/koenig-drag-drop-handler", ["exports", "koenig-editor/services/koenig-drag-drop-handler"], function (_exports, _koenigDragDropHandler) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigDragDropHandler.default;
    }
  });
});
;define("ghost-admin/services/koenig-ui", ["exports", "koenig-editor/services/koenig-ui"], function (_exports, _koenigUi) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _koenigUi.default;
    }
  });
});
;define("ghost-admin/services/lazy-loader", ["exports", "ghost-admin/config/environment"], function (_exports, _environment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Service.extend({
    ajax: Ember.inject.service(),
    ghostPaths: Ember.inject.service(),
    // This is needed so we can disable it in unit tests
    testing: undefined,
    scriptPromises: null,

    init() {
      this._super(...arguments);

      this.scriptPromises = {};

      if (this.testing === undefined) {
        this.testing = _environment.default.environment === 'test';
      }
    },

    loadScript(key, url) {
      if (this.testing) {
        return Ember.RSVP.resolve();
      }

      if (this.scriptPromises[key]) {
        return this.scriptPromises[key];
      }

      let scriptPromise = new Ember.RSVP.Promise((resolve, reject) => {
        let {
          adminRoot
        } = this.ghostPaths;
        let script = document.createElement('script');
        script.type = 'text/javascript';
        script.async = true;
        script.src = "".concat(adminRoot).concat(url);
        let el = document.getElementsByTagName('script')[0];
        el.parentNode.insertBefore(script, el);
        script.addEventListener('load', () => {
          resolve();
        });
        script.addEventListener('error', () => {
          reject(new Error("".concat(url, " failed to load")));
        });
      });
      this.scriptPromises[key] = scriptPromise;
      return scriptPromise;
    },

    loadStyle(key, url, alternate = false) {
      if (this.testing || document.querySelector("#".concat(key, "-styles"))) {
        return Ember.RSVP.resolve();
      }

      return new Ember.RSVP.Promise((resolve, reject) => {
        let link = document.createElement('link');
        link.id = "".concat(key, "-styles");
        link.rel = alternate ? 'alternate stylesheet' : 'stylesheet';
        link.href = "".concat(this.ghostPaths.adminRoot).concat(url);

        link.onload = () => {
          link.onload = null;

          if (alternate) {
            // If stylesheet is alternate and we disable the stylesheet before injecting into the DOM,
            // the onload handler never gets called. Thus, we should disable the link after it has finished loading
            link.disabled = true;
          }

          resolve();
        };

        link.onerror = reject;

        if (alternate) {
          link.title = key;
        }

        document.querySelector('head').appendChild(link);
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/liquid-fire-transitions", ["exports", "liquid-wormhole/services/liquid-fire-transitions"], function (_exports, _liquidFireTransitions) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidFireTransitions.default;
    }
  });
});
;define("ghost-admin/services/liquid-wormhole", ["exports", "liquid-wormhole/services/liquid-wormhole"], function (_exports, _liquidWormhole) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _liquidWormhole.default;
    }
  });
});
;define("ghost-admin/services/media-queries", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const MEDIA_QUERIES = {
    maxWidth600: '(max-width: 600px)',
    isMobile: '(max-width: 800px)',
    maxWidth900: '(max-width: 900px)',
    maxWidth1000: '(max-width: 1000px)'
  };

  var _default = Ember.Service.extend(Ember.Evented, {
    init() {
      this._super(...arguments);

      this._handlers = [];
      this.loadQueries(MEDIA_QUERIES);
    },

    loadQueries(queries) {
      Object.keys(queries).forEach(key => {
        this.loadQuery(key, queries[key]);
      });
    },

    loadQuery(key, queryString) {
      let query = window.matchMedia(queryString);
      this.set(key, query.matches);
      let handler = Ember.run.bind(this, () => {
        let lastValue = this.get(key);
        let newValue = query.matches;

        if (lastValue !== newValue) {
          this.set(key, newValue);
          this.trigger('change', key, newValue);
        }
      });
      query.addListener(handler);

      this._handlers.push([query, handler]);
    },

    willDestroy() {
      this._handlers.forEach(([query, handler]) => {
        query.removeListener(handler);
      });

      this._super(...arguments);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/media", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  // dummy service to account for not having the ember-responsive dependency
  // available for ember-light-table (we don't use it so no need for the dep)
  // see https://github.com/offirgolan/ember-light-table/issues/576
  var _default = Ember.Service.extend({});

  _exports.default = _default;
});
;define("ghost-admin/services/moment", ["exports", "ember-moment/services/moment", "ghost-admin/config/environment"], function (_exports, _moment, _environment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const {
    get
  } = Ember;

  var _default = _moment.default.extend({
    defaultFormat: get(_environment.default, 'moment.outputFormat')
  });

  _exports.default = _default;
});
;define("ghost-admin/services/navigation", ["exports", "@ember-decorators/object"], function (_exports, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _dec, _class, _descriptor, _descriptor2, _temp;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  const DEFAULT_SETTINGS = {
    expanded: {
      posts: true
    }
  };
  let NavigationService = (_dec = (0, _object.observes)('session.isAuthenticated', 'session.user.accessibility'), (_class = (_temp = class NavigationService extends Ember.Service {
    constructor() {
      super(...arguments);

      _initializerDefineProperty(this, "session", _descriptor, this);

      _initializerDefineProperty(this, "settings", _descriptor2, this);

      this.updateSettings();
    } // eslint-disable-next-line ghost/ember/no-observers


    async updateSettings() {
      // avoid fetching user before authenticated otherwise the 403 can fire
      // during authentication and cause errors during setup/signin
      if (!this.session.isAuthenticated) {
        return;
      }

      let user = await this.session.user;
      let userSettings = JSON.parse(user.get('accessibility')) || {};
      this.settings = userSettings.navigation || Object.assign({}, DEFAULT_SETTINGS);
    }

    async toggleExpansion(key) {
      if (!this.settings.expanded) {
        this.settings.expanded = {};
      } // set is still needed here because we're not tracking deep keys
      // and Ember picks up that our templates are dependent on them and
      // complains. TODO: can we avoid set?


      Ember.set(this.settings.expanded, key, !this.settings.expanded[key]);
      return await this._saveNavigationSettings();
    }

    async _saveNavigationSettings() {
      let user = await this.session.user;
      let userSettings = JSON.parse(user.get('accessibility'));
      userSettings.navigation = this.settings;
      user.set('accessibility', JSON.stringify(userSettings));
      return user.save();
    }

  }, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "session", [Ember.inject.service], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "settings", [Ember._tracked], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class.prototype, "updateSettings", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "updateSettings"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleExpansion", [Ember._action], Object.getOwnPropertyDescriptor(_class.prototype, "toggleExpansion"), _class.prototype)), _class));
  _exports.default = NavigationService;
});
;define("ghost-admin/services/notifications", ["exports", "ghost-admin/services/ajax"], function (_exports, _ajax) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  // Notification keys take the form of "noun.verb.message", eg:
  //
  // "invite.resend.api-error"
  // "user.invite.already-invited"
  //
  // The "noun.verb" part will be used as the "key base" in duplicate checks
  // to avoid stacking of multiple error messages whilst leaving enough
  // specificity to re-use keys for i18n lookups
  var _default = Ember.Service.extend({
    delayedNotifications: null,
    content: null,

    init() {
      this._super(...arguments);

      this.delayedNotifications = Ember.A();
      this.content = Ember.A();
    },

    upgradeStatus: Ember.inject.service(),
    alerts: Ember.computed.filter('content', function (notification) {
      let status = Ember.get(notification, 'status');
      return status === 'alert';
    }),
    notifications: Ember.computed.filter('content', function (notification) {
      let status = Ember.get(notification, 'status');
      return status === 'notification';
    }),

    handleNotification(message, delayed) {
      // If this is an alert message from the server, treat it as html safe
      if (message.constructor.modelName === 'notification' && message.get('status') === 'alert') {
        message.set('message', Ember.String.htmlSafe(message.get('message')));
      }

      if (!Ember.get(message, 'status')) {
        Ember.set(message, 'status', 'notification');
      } // close existing duplicate alerts/notifications to avoid stacking


      if (Ember.get(message, 'key')) {
        this._removeItems(Ember.get(message, 'status'), Ember.get(message, 'key'));
      } // close existing alerts/notifications which have the same text to avoid stacking


      let newText = Ember.get(message, 'message').string || Ember.get(message, 'message');
      this.set('content', this.content.reject(notification => {
        let existingText = Ember.get(notification, 'message').string || Ember.get(notification, 'message');
        return existingText === newText;
      }));

      if (!delayed) {
        this.content.pushObject(message);
      } else {
        this.delayedNotifications.pushObject(message);
      }
    },

    showAlert(message, options) {
      options = options || {};
      this.handleNotification({
        message,
        status: 'alert',
        description: options.description,
        icon: options.icon,
        type: options.type,
        key: options.key,
        actions: options.actions
      }, options.delayed);
    },

    showNotification(message, options) {
      options = options || {};
      this.handleNotification({
        message,
        status: 'notification',
        description: options.description,
        icon: options.icon,
        type: options.type,
        key: options.key,
        actions: options.actions
      }, options.delayed);
    },

    showAPIError(resp, options) {
      // handle "global" errors
      if ((0, _ajax.isVersionMismatchError)(resp)) {
        return this.upgradeStatus.requireUpgrade();
      } else if ((0, _ajax.isMaintenanceError)(resp)) {
        return this.upgradeStatus.maintenanceAlert();
      } // loop over ember-ajax errors object


      if (resp && resp.payload && Ember.isArray(resp.payload.errors)) {
        return resp.payload.errors.forEach(error => {
          this._showAPIError(error, options);
        });
      }

      this._showAPIError(resp, options);
    },

    _showAPIError(resp, options) {
      options = options || {};
      options.type = options.type || 'error'; // if possible use the title to get a unique key
      // - we only show one alert for each key so if we get multiple errors
      //   only the last one will be shown

      if (!options.key && !Ember.isBlank(Ember.get(resp, 'title'))) {
        options.key = Ember.String.dasherize(Ember.get(resp, 'title'));
      }

      options.key = ['api-error', options.key].compact().join('.');
      let msg = options.defaultErrorText || 'There was a problem on the server, please try again.';

      if (resp instanceof String) {
        msg = resp;
      } else if (!Ember.isBlank(Ember.get(resp, 'detail'))) {
        msg = resp.detail;
      } else if (!Ember.isBlank(Ember.get(resp, 'message'))) {
        msg = resp.message;
      }

      if (!Ember.isBlank(Ember.get(resp, 'context'))) {
        msg = "".concat(msg, " ").concat(Ember.get(resp, 'context'));
      }

      this.showAlert(msg, options);
    },

    displayDelayed() {
      this.delayedNotifications.forEach(message => {
        this.content.pushObject(message);
      });
      this.set('delayedNotifications', []);
    },

    closeNotification(notification) {
      let content = this.content;

      if (notification.constructor.modelName === 'notification') {
        notification.deleteRecord();
        notification.save().finally(() => {
          content.removeObject(notification);
        });
      } else {
        content.removeObject(notification);
      }
    },

    closeNotifications(key) {
      this._removeItems('notification', key);
    },

    closeAlerts(key) {
      this._removeItems('alert', key);
    },

    clearAll() {
      this.content.clear();
    },

    _removeItems(status, key) {
      if (key) {
        let keyBase = this._getKeyBase(key); // TODO: keys should only have . special char but we should
        // probably use a better regexp escaping function/polyfill


        let escapedKeyBase = keyBase.replace('.', '\\.');
        let keyRegex = new RegExp("^".concat(escapedKeyBase));
        this.set('content', this.content.reject(item => {
          let itemKey = Ember.get(item, 'key');
          let itemStatus = Ember.get(item, 'status');
          return itemStatus === status && itemKey && itemKey.match(keyRegex);
        }));
      } else {
        this.set('content', this.content.rejectBy('status', status));
      }
    },

    // take a key and return the first two elements, eg:
    // "invite.revoke.failed" => "invite.revoke"
    _getKeyBase(key) {
      return key.split('.').slice(0, 2).join('.');
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/power-calendar", ["exports", "ember-power-calendar/services/power-calendar"], function (_exports, _powerCalendar) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _powerCalendar.default;
    }
  });
});
;define("ghost-admin/services/resize-detector", ["exports", "element-resize-detector"], function (_exports, _elementResizeDetector) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Service.extend({
    init() {
      this._super(...arguments);

      this.detector = (0, _elementResizeDetector.default)({
        strategy: 'scroll'
      });
    },

    setup(selector, callback) {
      let element = document.querySelector(selector);

      if (!element) {
        // eslint-disable-next-line
        console.error("service:resize-detector - could not find element matching ".concat(selector));
      }

      this.detector.listenTo(element, callback);
    },

    teardown(selector, callback) {
      let element = document.querySelector(selector);

      if (element) {
        this.detector.removeListener(element, callback);
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/session", ["exports", "ember-simple-auth/services/session"], function (_exports, _session) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _session.default.extend({
    dataStore: Ember.inject.service('store'),
    // SessionService.store already exists
    user: Ember.computed(function () {
      return this.dataStore.queryRecord('user', {
        id: 'me'
      });
    }),

    authenticate() {
      // ensure any cached this.user value is removed and re-fetched
      this.notifyPropertyChange('user');
      return this._super(...arguments);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/settings", ["exports", "ghost-admin/mixins/validation-engine"], function (_exports, _validationEngine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  // ember-cli-shims doesn't export _ProxyMixin
  const {
    _ProxyMixin
  } = Ember;

  var _default = Ember.Service.extend(_ProxyMixin, _validationEngine.default, {
    store: Ember.inject.service(),
    // will be set to the single Settings model, it's a reference so any later
    // changes to the settings object in the store will be reflected
    content: null,
    validationType: 'setting',
    _loadingPromise: null,
    // this is an odd case where we only want to react to changes that we get
    // back from the API rather than local updates
    settledIcon: '',

    // the settings API endpoint is a little weird as it's singular and we have
    // to pass in all types - if we ever fetch settings without all types then
    // save we have problems with the missing settings being removed or reset
    _loadSettings() {
      if (!this._loadingPromise) {
        this._loadingPromise = this.store.queryRecord('setting', {
          type: 'blog,theme,private,members,bulk_email'
        }).then(settings => {
          this._loadingPromise = null;
          return settings;
        });
      }

      return this._loadingPromise;
    },

    fetch() {
      if (!this.content) {
        return this.reload();
      } else {
        return Ember.RSVP.resolve(this);
      }
    },

    reload() {
      return this._loadSettings().then(settings => {
        this.set('content', settings);
        this.set('settledIcon', Ember.get(settings, 'icon'));
        return this;
      });
    },

    save() {
      let settings = this.content;

      if (!settings) {
        return false;
      }

      return settings.save().then(settings => {
        this.set('settledIcon', Ember.get(settings, 'icon'));
        return settings;
      });
    },

    rollbackAttributes() {
      return this.content.rollbackAttributes();
    },

    changedAttributes() {
      return this.content.changedAttributes();
    },

    parseSubscriptionSettings(settingsString) {
      try {
        return JSON.parse(settingsString);
      } catch (e) {
        return {
          allowSelfSignup: true,
          fromAddress: 'noreply',
          paymentProcessors: [{
            adapter: 'stripe',
            config: {
              secret_token: '',
              public_token: '',
              product: {
                name: this.settings.get('title')
              },
              plans: [{
                name: 'Monthly',
                currency: 'usd',
                interval: 'month',
                amount: ''
              }, {
                name: 'Yearly',
                currency: 'usd',
                interval: 'year',
                amount: ''
              }]
            }
          }]
        };
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/slug-generator", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const {
    resolve
  } = Ember.RSVP;

  var _default = Ember.Service.extend({
    ghostPaths: Ember.inject.service(),
    ajax: Ember.inject.service(),

    generateSlug(slugType, textToSlugify) {
      let url;

      if (!textToSlugify) {
        return resolve('');
      }

      url = this.get('ghostPaths.url').api('slugs', slugType, encodeURIComponent(textToSlugify));
      return this.ajax.request(url).then(response => {
        let [firstSlug] = response.slugs;
        let {
          slug
        } = firstSlug;
        return slug;
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/store", ["exports", "ember-data/store"], function (_exports, _store) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _store.default;
    }
  });
});
;define("ghost-admin/services/text-measurer", ["exports", "ember-text-measurer/services/text-measurer"], function (_exports, _textMeasurer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _textMeasurer.default;
    }
  });
});
;define("ghost-admin/services/tour", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Service.extend(Ember.Evented, {
    ghostPaths: Ember.inject.service(),
    session: Ember.inject.service(),
    // this service is responsible for managing tour item visibility and syncing
    // the viewed state with the server
    //
    // tour items need to be centrally defined here so that we have a single
    // source of truth for marking all tour items as viewed
    //
    // a <GhTourItem @trobberId="unique-id"/> component can be inserted in any template,
    // this will use the tour service to grab content and determine visibility
    // with the component in control of rendering the throbber/controlling the
    // modal - this allows the component lifecycle hooks to perform automatic
    // display/cleanup when the relevant UI is visible.
    viewed: null,
    // IDs should **NOT** be changed if they have been part of a release unless
    // the re-display of the throbber should be forced. In that case it may be
    // useful to add a version number eg. `my-feature` -> `my-feature-v2`.
    // Format is as follows:
    //
    // {
    //     id: 'test',
    //     title: 'This is a test',
    //     message: 'This is a test of our <strong>feature tour</strong> feature'
    // }
    //
    // TODO: it may be better to keep this configuration elsewhere to keep the
    // service clean. Eventually we'll want apps to be able to register their
    // own throbbers and tour content
    throbbers: null,

    init() {
      this._super(...arguments);

      let adminUrl = "".concat(window.location.origin).concat(this.get('ghostPaths.url').admin());
      let adminDisplayUrl = adminUrl.replace("".concat(window.location.protocol, "//"), '');
      this.viewed = [];
      this.throbbers = [{
        id: 'getting-started',
        title: 'Getting started with Ghost',
        message: "Welcome to Ghost Admin! From here you can browse your site, manage your content, and edit your settings.<br><br>You can always login to Ghost Admin by visiting <a href=\"".concat(adminUrl, "\" target=\"_blank\">").concat(adminDisplayUrl, "</a>")
      }, {
        id: 'using-the-editor',
        title: 'Using the Ghost editor',
        message: 'Ghost uses Markdown to allow you to write and format content quickly and easily. This toolbar also helps! Hit the <strong>?</strong> icon for more editor shortcuts.'
      }, {
        id: 'featured-post',
        title: 'Setting a featured post',
        message: 'Depending on your theme, featured posts receive special styling to make them stand out as a particularly important or emphasised story.'
      }, {
        id: 'upload-a-theme',
        title: 'Customising your publication',
        message: 'Using custom themes you can completely control the look and feel of your site to suit your brand. Here\'s a full guide to help: <strong><a href="https://ghost.org/docs/api/handlebars-themes/" target="_blank">https://ghost.org/docs/api/handlebars-themes/</a></strong>'
      }];
    },

    _activeThrobbers: Ember.computed('viewed.[]', 'throbbers.[]', function () {
      // return throbbers that haven't been viewed
      let viewed = this.viewed;
      let throbbers = this.throbbers;
      return throbbers.reject(throbber => viewed.includes(throbber.id));
    }),

    // retrieve the IDs of the viewed throbbers from the server, always returns
    // a promise
    fetchViewed() {
      return this.get('session.user').then(user => {
        let viewed = user.get('tour') || [];
        this.set('viewed', viewed);
        return viewed;
      });
    },

    // save the list of viewed throbbers to the server overwriting the
    // entire list
    syncViewed() {
      let viewed = this.viewed;
      return this.get('session.user').then(user => {
        user.set('tour', viewed);
        return user.save();
      });
    },

    // returns throbber content for a given ID only if that throbber hasn't been
    // viewed. Used by the <GhTourItem /> component to determine visibility
    activeThrobber(id) {
      let activeThrobbers = this._activeThrobbers;
      return activeThrobbers.findBy('id', id);
    },

    // when a throbber is opened the component will call this method to mark
    // it as viewed and sync with the server. Always returns a promise
    markThrobberAsViewed(id) {
      let viewed = this.viewed;

      if (!viewed.includes(id)) {
        viewed.pushObject(id);
        this.trigger('viewed', id);
        return this.syncViewed();
      } else {
        return Ember.RSVP.resolve(true);
      }
    },

    // opting-out will use the list of IDs defined in this file making it the
    // single-source-of-truth and allowing future client updates to control when
    // new UI should be surfaced through tour items
    optOut() {
      let allThrobberIds = this.throbbers.mapBy('id');
      this.set('viewed', allThrobberIds);
      this.trigger('optOut');
      return this.syncViewed();
    },

    // this is not used anywhere at the moment but it's useful to use via ember
    // inspector as a reset mechanism
    reEnable() {
      this.set('viewed', []);
      return this.syncViewed();
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/ui", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function collectMetadataClasses(transition, prop) {
    let oldClasses = [];
    let newClasses = [];
    let {
      from,
      to
    } = transition;

    while (from) {
      oldClasses = oldClasses.concat(Ember.get(from, "metadata.".concat(prop)) || []);
      from = from.parent;
    }

    while (to) {
      newClasses = newClasses.concat(Ember.get(to, "metadata.".concat(prop)) || []);
      to = to.parent;
    }

    return {
      oldClasses,
      newClasses
    };
  }

  function updateBodyClasses(transition) {
    let {
      body
    } = document;
    let {
      oldClasses,
      newClasses
    } = collectMetadataClasses(transition, 'bodyClasses');
    oldClasses.forEach(oldClass => {
      body.classList.remove(oldClass);
    });
    newClasses.forEach(newClass => {
      body.classList.add(newClass);
    });
  }

  var _default = Ember.Service.extend({
    config: Ember.inject.service(),
    dropdown: Ember.inject.service(),
    mediaQueries: Ember.inject.service(),
    router: Ember.inject.service(),
    isFullScreen: false,
    showMobileMenu: false,
    showSettingsMenu: false,
    mainClass: '',
    hasSideNav: Ember.computed.not('isSideNavHidden'),
    isMobile: Ember.computed.reads('mediaQueries.isMobile'),
    isSideNavHidden: Ember.computed.or('isFullScreen', 'isMobile'),

    init() {
      this._super(...arguments);

      this.router.on('routeDidChange', transition => {
        updateBodyClasses(transition);
        this.updateDocumentTitle();
        let {
          newClasses: mainClasses
        } = collectMetadataClasses(transition, 'mainClasses');
        this.set('mainClass', mainClasses.join(' '));
      });
    },

    closeMenus() {
      this.dropdown.closeDropdowns();
      this.setProperties({
        showSettingsMenu: false,
        showMobileMenu: false
      });
    },

    closeMobileMenu() {
      this.set('showMobileMenu', false);
    },

    openMobileMenu() {
      this.set('showMobileMenu', true);
    },

    openSettingsMenu() {
      this.set('showSettingsMenu', true);
    },

    updateDocumentTitle() {
      let {
        currentRoute
      } = this.router;
      let tokens = [];

      while (currentRoute) {
        let titleToken = Ember.get(currentRoute, 'metadata.titleToken');

        if (typeof titleToken === 'function') {
          titleToken = titleToken();
        }

        if (titleToken) {
          tokens.unshift(titleToken);
        }

        currentRoute = currentRoute.parent;
      }

      let blogTitle = this.config.get('blogTitle');

      if (!Ember.isEmpty(tokens)) {
        window.document.title = "".concat(tokens.join(' - '), " - ").concat(blogTitle);
      } else {
        window.document.title = blogTitle;
      }
    },

    actions: {
      closeMenus() {
        this.closeMenus();
      },

      closeMobileMenu() {
        this.closeMobileMenu();
      },

      openMobileMenu() {
        this.openMobileMenu();
      },

      openSettingsMenu() {
        this.openSettingsMenu();
      },

      setMainClass(cls) {
        this.set('mainClass', cls);
      }

    }
  });

  _exports.default = _default;
});
;define("ghost-admin/services/unsplash", ["exports", "fetch", "ember-concurrency"], function (_exports, _fetch, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const API_URL = 'https://api.unsplash.com';
  const API_VERSION = 'v1';
  const DEBOUNCE_MS = 600;

  var _default = Ember.Service.extend({
    config: Ember.inject.service(),
    settings: Ember.inject.service(),
    columnCount: 3,
    columns: null,
    error: '',
    photos: null,
    searchTerm: '',
    _columnHeights: null,
    _pagination: null,
    applicationId: '8672af113b0a8573edae3aa3713886265d9bb741d707f6c01a486cde8c278980',
    isLoading: Ember.computed.or('_search.isRunning', '_loadingTasks.isRunning'),

    init() {
      this._super(...arguments);

      this._reset();

      this.loadNew();
    },

    loadNew() {
      this._reset();

      return this._loadNew.perform();
    },

    loadNextPage() {
      // protect against scroll trigger firing when the photos are reset
      if (this.get('_search.isRunning')) {
        return;
      }

      if (Ember.isEmpty(this.photos)) {
        return this._loadNew.perform();
      }

      if (this._pagination.next) {
        return this._loadNextPage.perform();
      } // TODO: return error?


      return Ember.RSVP.reject();
    },

    updateSearch(term) {
      if (term === this.searchTerm) {
        return;
      }

      this.set('searchTerm', term);

      this._reset();

      if (term) {
        return this._search.perform(term);
      } else {
        return this._loadNew.perform();
      }
    },

    retryLastRequest() {
      return this._retryLastRequest.perform();
    },

    changeColumnCount(newColumnCount) {
      if (newColumnCount !== this.columnCount) {
        this.set('columnCount', newColumnCount);

        this._resetColumns();
      }
    },

    // let Unsplash know that the photo was inserted
    // https://medium.com/unsplash/unsplash-api-guidelines-triggering-a-download-c39b24e99e02
    triggerDownload(photo) {
      if (photo.links.download_location) {
        this._makeRequest(photo.links.download_location, {
          ignoreErrors: true
        });
      }
    },

    actions: {
      updateSearch(term) {
        return this.updateSearch(term);
      }

    },
    _loadingTasks: (0, _emberConcurrency.taskGroup)().drop(),
    _loadNew: (0, _emberConcurrency.task)(function* () {
      let url = "".concat(API_URL, "/photos?per_page=30");
      yield this._makeRequest(url);
    }).group('_loadingTasks'),
    _loadNextPage: (0, _emberConcurrency.task)(function* () {
      yield this._makeRequest(this._pagination.next);
    }).group('_loadingTasks'),
    _retryLastRequest: (0, _emberConcurrency.task)(function* () {
      yield this._makeRequest(this._lastRequestUrl);
    }).group('_loadingTasks'),
    _search: (0, _emberConcurrency.task)(function* (term) {
      yield (0, _emberConcurrency.timeout)(DEBOUNCE_MS);
      let url = "".concat(API_URL, "/search/photos?query=").concat(term, "&per_page=30");
      yield this._makeRequest(url);
    }).restartable(),

    _addPhotosFromResponse(response) {
      let photos = response.results || response;
      photos.forEach(photo => this._addPhoto(photo));
    },

    _addPhoto(photo) {
      // pre-calculate ratio for later use
      photo.ratio = photo.height / photo.width; // add to general photo list

      this.photos.pushObject(photo); // add to least populated column

      this._addPhotoToColumns(photo);
    },

    _addPhotoToColumns(photo) {
      let min = Math.min(...this._columnHeights);

      let columnIndex = this._columnHeights.indexOf(min); // use a fixed width when calculating height to compensate for different
      // overall image sizes


      this._columnHeights[columnIndex] += 300 * photo.ratio;
      this.columns[columnIndex].pushObject(photo);
    },

    _reset() {
      this.set('photos', []);
      this._pagination = {};

      this._resetColumns();
    },

    _resetColumns() {
      let columns = [];
      let columnHeights = []; // pre-fill column arrays based on columnCount

      for (let i = 0; i < this.columnCount; i += 1) {
        columns[i] = [];
        columnHeights[i] = 0;
      }

      this.set('columns', columns);
      this._columnHeights = columnHeights;

      if (!Ember.isEmpty(this.photos)) {
        this.photos.forEach(photo => {
          this._addPhotoToColumns(photo);
        });
      }
    },

    _makeRequest(url, _options = {}) {
      let defaultOptions = {
        ignoreErrors: false
      };
      let headers = {};
      let options = {};
      Ember.assign(options, defaultOptions, _options); // clear any previous error

      this.set('error', ''); // store the url so it can be retried if needed

      this._lastRequestUrl = url;
      headers.Authorization = "Client-ID ".concat(this.applicationId);
      headers['Accept-Version'] = API_VERSION;
      headers['App-Pragma'] = 'no-cache';
      headers['X-Unsplash-Cache'] = true;
      return (0, _fetch.default)(url, {
        headers
      }).then(response => this._checkStatus(response)).then(response => this._extractPagination(response)).then(response => response.json()).then(response => this._addPhotosFromResponse(response)).catch(() => {
        // if the error text isn't already set then we've get a connection error from `fetch`
        if (!options.ignoreErrors && !this.error) {
          this.set('error', 'Uh-oh! Trouble reaching the Unsplash API, please check your connection');
        }
      });
    },

    _checkStatus(response) {
      // successful request
      if (response.status >= 200 && response.status < 300) {
        return Ember.RSVP.resolve(response);
      }

      let errorText = '';
      let responseTextPromise = Ember.RSVP.resolve();

      if (response.headers.map['content-type'] === 'application/json') {
        responseTextPromise = response.json().then(json => json.errors[0]);
      } else if (response.headers.map['content-type'] === 'text/xml') {
        responseTextPromise = response.text();
      }

      return responseTextPromise.then(responseText => {
        if (response.status === 403 && response.headers.map['x-ratelimit-remaining'] === '0') {
          // we've hit the ratelimit on the API
          errorText = 'Unsplash API rate limit reached, please try again later.';
        }

        errorText = errorText || responseText || "Error ".concat(response.status, ": Uh-oh! Trouble reaching the Unsplash API"); // set error text for display in UI

        this.set('error', errorText); // throw error to prevent further processing

        let error = new Error(errorText);
        error.response = response;
        throw error;
      });
    },

    _extractPagination(response) {
      let pagination = {};
      let linkRegex = new RegExp('<(.*)>; rel="(.*)"');
      let {
        link
      } = response.headers.map;

      if (link) {
        link.split(',').forEach(link => {
          let [, url, rel] = linkRegex.exec(link);
          pagination[rel] = url;
        });
      }

      this._pagination = pagination;
      return response;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/upgrade-status", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Service.extend({
    notifications: Ember.inject.service(),
    isRequired: false,
    message: '',

    // called when notifications are fetched during app boot for notifications
    // where the `location` is not 'top' and `custom` is false
    handleUpgradeNotification(notification) {
      let message = Ember.get(notification, 'message');
      Ember.set(this, 'message', Ember.String.htmlSafe(message));
    },

    // called when a MaintenanceError is encountered
    maintenanceAlert() {
      this.notifications.showAlert('Sorry, Ghost is currently undergoing maintenance, please wait a moment then try again.', {
        type: 'error',
        key: 'api-error.under-maintenance'
      });
    },

    // called when a VersionMismatchError is encountered
    requireUpgrade() {
      Ember.set(this, 'isRequired', true);
      this.notifications.showAlert('Ghost has been upgraded, please copy any unsaved data and refresh the page to continue.', {
        type: 'error',
        key: 'api-error.upgrade-required'
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/services/user-agent", ["exports", "ember-useragent/services/user-agent"], function (_exports, _userAgent) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _userAgent.default;
    }
  });
});
;define("ghost-admin/services/whats-new", ["exports", "fetch", "moment", "ember-concurrency"], function (_exports, _fetch, _moment, _emberConcurrency) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Service.extend({
    session: Ember.inject.service(),
    entries: null,
    changelogUrl: 'https://ghost.org/blog/',
    isShowingModal: false,
    _user: null,

    init() {
      this._super(...arguments);

      this.entries = [];
    },

    whatsNewSettings: Ember.computed('_user.accessibility', function () {
      let settingsJson = this.get('_user.accessibility') || '{}';
      let settings = JSON.parse(settingsJson);
      return settings.whatsNew;
    }),
    hasNew: Ember.computed('whatsNewSettings.lastSeenDate', 'entries.[]', function () {
      if (Ember.isEmpty(this.entries)) {
        return false;
      }

      let [latestEntry] = this.entries;
      let lastSeenDate = this.get('whatsNewSettings.lastSeenDate') || '2019-01-01 00:00:00';
      let lastSeenMoment = (0, _moment.default)(lastSeenDate);
      let latestDate = latestEntry.published_at;
      let latestMoment = (0, _moment.default)(latestDate || lastSeenDate);
      return latestMoment.isAfter(lastSeenMoment);
    }),
    showModal: Ember._action(function () {
      this.set('isShowingModal', true);
    }),
    closeModal: Ember._action(function () {
      this.set('isShowingModal', false);
      this.updateLastSeen.perform();
    }),
    fetchLatest: (0, _emberConcurrency.task)(function* () {
      try {
        // we should already be logged in at this point so lets grab the user
        // record and store it locally so that we don't have to deal with
        // session.user being a promise and causing issues with CPs
        let user = yield this.session.user;
        this.set('_user', user);
        let response = yield (0, _fetch.default)('https://ghost.org/changelog.json');

        if (!response.ok) {
          // eslint-disable-next-line
          return console.error('Failed to fetch changelog', {
            response
          });
        }

        let result = yield response.json();
        this.set('entries', result.posts || []);
        this.set('changelogUrl', result.changelogUrl);
      } catch (e) {
        console.error(e); // eslint-disable-line
      }
    }),
    updateLastSeen: (0, _emberConcurrency.task)(function* () {
      let settingsJson = this._user.accessibility || '{}';
      let settings = JSON.parse(settingsJson);
      let [latestEntry] = this.entries;

      if (!latestEntry) {
        return;
      }

      if (!settings.whatsNew) {
        settings.whatsNew = {};
      }

      settings.whatsNew.lastSeenDate = latestEntry.published_at;

      this._user.set('accessibility', JSON.stringify(settings));

      yield this._user.save();
    })
  });

  _exports.default = _default;
});
;define("ghost-admin/session-stores/application", ["exports", "ember-simple-auth/session-stores/ephemeral"], function (_exports, _ephemeral) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  // Ghost already uses a cookie to store it's session so we don't need to keep
  // track of any other peristent login state separately in Ember Simple Auth
  var _default = _ephemeral.default.extend({
    session: Ember.inject.service(),

    // when loading the app we want ESA to try fetching the currently logged
    // in user. This will succeed/fail depending on whether we have a valid
    // session cookie or not so we can use that as an indication of the session
    // being authenticated
    restore() {
      return this.session.user.then(() => {
        // provide the necessary data for internal-session to mark the
        // session as authenticated
        let data = {
          authenticated: {
            authenticator: 'authenticator:cookie'
          }
        };
        this.persist(data);
        return data;
      }).catch(() => {
        // ensure the session.user doesn't return the same rejected promise
        // after a succussful login
        this.session.notifyPropertyChange('user');
        return Ember.RSVP.reject();
      });
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/templates/-contributors", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "a+hYUVFU",
    "block": "{\"symbols\":[],\"statements\":[[7,\"article\",true],[8],[0,\"\\n    \"],[7,\"a\",true],[10,\"href\",\"https://github.com/JohnONolan\"],[10,\"title\",\"JohnONolan\"],[8],[0,\"\\n        \"],[7,\"img\",true],[10,\"src\",\"assets/img/contributors/JohnONolan.jpeg\"],[10,\"alt\",\"JohnONolan\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"article\",true],[8],[0,\"\\n    \"],[7,\"a\",true],[10,\"href\",\"https://github.com/ErisDS\"],[10,\"title\",\"ErisDS\"],[8],[0,\"\\n        \"],[7,\"img\",true],[10,\"src\",\"assets/img/contributors/ErisDS.jpeg\"],[10,\"alt\",\"ErisDS\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"article\",true],[8],[0,\"\\n    \"],[7,\"a\",true],[10,\"href\",\"https://github.com/sebgie\"],[10,\"title\",\"sebgie\"],[8],[0,\"\\n        \"],[7,\"img\",true],[10,\"src\",\"assets/img/contributors/sebgie.png\"],[10,\"alt\",\"sebgie\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"article\",true],[8],[0,\"\\n    \"],[7,\"a\",true],[10,\"href\",\"https://github.com/frantzypants\"],[10,\"title\",\"frantzypants\"],[8],[0,\"\\n        \"],[7,\"img\",true],[10,\"src\",\"assets/img/contributors/frantzypants.jpeg\"],[10,\"alt\",\"frantzypants\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"article\",true],[8],[0,\"\\n    \"],[7,\"a\",true],[10,\"href\",\"https://github.com/cobbspur\"],[10,\"title\",\"cobbspur\"],[8],[0,\"\\n        \"],[7,\"img\",true],[10,\"src\",\"assets/img/contributors/cobbspur.jpeg\"],[10,\"alt\",\"cobbspur\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"article\",true],[8],[0,\"\\n    \"],[7,\"a\",true],[10,\"href\",\"https://github.com/kevinansfield\"],[10,\"title\",\"kevinansfield\"],[8],[0,\"\\n        \"],[7,\"img\",true],[10,\"src\",\"assets/img/contributors/kevinansfield.jpeg\"],[10,\"alt\",\"kevinansfield\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"article\",true],[8],[0,\"\\n    \"],[7,\"a\",true],[10,\"href\",\"https://github.com/GeorginaLusby\"],[10,\"title\",\"GeorginaLusby\"],[8],[0,\"\\n        \"],[7,\"img\",true],[10,\"src\",\"assets/img/contributors/GeorginaLusby.jpeg\"],[10,\"alt\",\"GeorginaLusby\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"article\",true],[8],[0,\"\\n    \"],[7,\"a\",true],[10,\"href\",\"https://github.com/AileenCGN\"],[10,\"title\",\"AileenCGN\"],[8],[0,\"\\n        \"],[7,\"img\",true],[10,\"src\",\"assets/img/contributors/AileenCGN.jpeg\"],[10,\"alt\",\"AileenCGN\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"article\",true],[8],[0,\"\\n    \"],[7,\"a\",true],[10,\"href\",\"https://github.com/kirrg001\"],[10,\"title\",\"kirrg001\"],[8],[0,\"\\n        \"],[7,\"img\",true],[10,\"src\",\"assets/img/contributors/kirrg001.jpeg\"],[10,\"alt\",\"kirrg001\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"article\",true],[8],[0,\"\\n    \"],[7,\"a\",true],[10,\"href\",\"https://github.com/disordinary\"],[10,\"title\",\"disordinary\"],[8],[0,\"\\n        \"],[7,\"img\",true],[10,\"src\",\"assets/img/contributors/disordinary.jpeg\"],[10,\"alt\",\"disordinary\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"article\",true],[8],[0,\"\\n    \"],[7,\"a\",true],[10,\"href\",\"https://github.com/acburdine\"],[10,\"title\",\"acburdine\"],[8],[0,\"\\n        \"],[7,\"img\",true],[10,\"src\",\"assets/img/contributors/acburdine.jpeg\"],[10,\"alt\",\"acburdine\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"article\",true],[8],[0,\"\\n    \"],[7,\"a\",true],[10,\"href\",\"https://github.com/dbalders\"],[10,\"title\",\"dbalders\"],[8],[0,\"\\n        \"],[7,\"img\",true],[10,\"src\",\"assets/img/contributors/dbalders.jpeg\"],[10,\"alt\",\"dbalders\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"article\",true],[8],[0,\"\\n    \"],[7,\"a\",true],[10,\"href\",\"https://github.com/felixrieseberg\"],[10,\"title\",\"felixrieseberg\"],[8],[0,\"\\n        \"],[7,\"img\",true],[10,\"src\",\"assets/img/contributors/felixrieseberg.jpeg\"],[10,\"alt\",\"felixrieseberg\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"article\",true],[8],[0,\"\\n    \"],[7,\"a\",true],[10,\"href\",\"https://github.com/jaswilli\"],[10,\"title\",\"jaswilli\"],[8],[0,\"\\n        \"],[7,\"img\",true],[10,\"src\",\"assets/img/contributors/jaswilli.jpeg\"],[10,\"alt\",\"jaswilli\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"article\",true],[8],[0,\"\\n    \"],[7,\"a\",true],[10,\"href\",\"https://github.com/halfdan\"],[10,\"title\",\"halfdan\"],[8],[0,\"\\n        \"],[7,\"img\",true],[10,\"src\",\"assets/img/contributors/halfdan.jpeg\"],[10,\"alt\",\"halfdan\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"article\",true],[8],[0,\"\\n    \"],[7,\"a\",true],[10,\"href\",\"https://github.com/kevinkucharczyk\"],[10,\"title\",\"kevinkucharczyk\"],[8],[0,\"\\n        \"],[7,\"img\",true],[10,\"src\",\"assets/img/contributors/kevinkucharczyk.jpeg\"],[10,\"alt\",\"kevinkucharczyk\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"article\",true],[8],[0,\"\\n    \"],[7,\"a\",true],[10,\"href\",\"https://github.com/mixonic\"],[10,\"title\",\"mixonic\"],[8],[0,\"\\n        \"],[7,\"img\",true],[10,\"src\",\"assets/img/contributors/mixonic.png\"],[10,\"alt\",\"mixonic\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"article\",true],[8],[0,\"\\n    \"],[7,\"a\",true],[10,\"href\",\"https://github.com/rwjblue\"],[10,\"title\",\"rwjblue\"],[8],[0,\"\\n        \"],[7,\"img\",true],[10,\"src\",\"assets/img/contributors/rwjblue.jpeg\"],[10,\"alt\",\"rwjblue\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"article\",true],[8],[0,\"\\n    \"],[7,\"a\",true],[10,\"href\",\"https://github.com/tgriesser\"],[10,\"title\",\"tgriesser\"],[8],[0,\"\\n        \"],[7,\"img\",true],[10,\"src\",\"assets/img/contributors/tgriesser.png\"],[10,\"alt\",\"tgriesser\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"article\",true],[8],[0,\"\\n    \"],[7,\"a\",true],[10,\"href\",\"https://github.com/bnookala\"],[10,\"title\",\"bnookala\"],[8],[0,\"\\n        \"],[7,\"img\",true],[10,\"src\",\"assets/img/contributors/bnookala.jpeg\"],[10,\"alt\",\"bnookala\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/-contributors.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/about", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "1ZbK26GX",
    "block": "{\"symbols\":[],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas js-settings-content\"],[8],[0,\"\\n    \"],[5,\"gh-canvas-header\",[[12,\"class\",\"gh-canvas-header\"]],[[],[]],{\"statements\":[[0,\"\\n        \"],[1,[28,\"svg-jar\",[\"ghost-logo\"],[[\"class\",\"alt\"],[\"gh-logo\",\"Ghost\"]]],false],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n    \"],[7,\"section\",true],[10,\"class\",\"view-container\"],[8],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"gh-env-details\"],[8],[0,\"\\n            \"],[7,\"ul\",true],[10,\"class\",\"gh-env-list\"],[8],[0,\"\\n                \"],[7,\"li\",true],[10,\"class\",\"gh-env-list-version\"],[8],[7,\"strong\",true],[8],[0,\"Version\"],[9],[0,\" \"],[1,[23,0,[\"config\",\"version\"]],false],[9],[0,\"\\n                \"],[7,\"li\",true],[8],[7,\"strong\",true],[8],[0,\"Environment\"],[9],[0,\" \"],[1,[23,0,[\"config\",\"environment\"]],false],[9],[0,\"\\n                \"],[7,\"li\",true],[10,\"class\",\"gh-env-list-database-type\"],[8],[7,\"strong\",true],[8],[0,\"Database\"],[9],[0,\" \"],[1,[23,0,[\"config\",\"database\"]],false],[9],[0,\"\\n                \"],[7,\"li\",true],[8],[7,\"strong\",true],[8],[0,\"Mail\"],[9],[0,\" \"],[4,\"if\",[[23,0,[\"config\",\"mail\"]]],null,{\"statements\":[[1,[23,0,[\"config\",\"mail\"]],false]],\"parameters\":[]},{\"statements\":[[0,\"Native\"]],\"parameters\":[]}],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-env-help\"],[8],[0,\"\\n                \"],[7,\"a\",true],[10,\"class\",\"gh-btn\"],[10,\"href\",\"https://ghost.org/docs/\"],[10,\"target\",\"_blank\"],[8],[7,\"span\",true],[8],[0,\"User Documentation\"],[9],[9],[0,\"\\n                \"],[7,\"a\",true],[10,\"class\",\"gh-btn\"],[10,\"href\",\"https://forum.ghost.org/\"],[10,\"target\",\"_blank\"],[8],[7,\"span\",true],[8],[0,\"Get Help With Ghost\"],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"upgradeStatus\",\"message\"]]],null,{\"statements\":[[0,\"            \"],[7,\"section\",true],[10,\"class\",\"gh-upgrade-notification\"],[8],[0,\"\\n                \"],[7,\"p\",true],[8],[0,\"\\n                    \"],[7,\"strong\",true],[8],[0,\"Update available!\"],[9],[0,\" \"],[1,[23,0,[\"upgradeStatus\",\"message\"]],false],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"gh-credits\"],[8],[0,\"\\n            \"],[7,\"h2\",true],[8],[0,\"The People Who Made it Possible\"],[9],[0,\"\\n\\n            \"],[7,\"section\",true],[10,\"class\",\"gh-contributors\"],[8],[0,\"\\n                \"],[15,\"contributors\",[]],[0,\"\\n            \"],[9],[0,\"\\n\\n            \"],[7,\"p\",true],[8],[0,\"Ghost is built by an incredible group of contributors from all over the world. Here are just a few of the people who helped create the version you’re using right now.\"],[9],[0,\"\\n\\n            \"],[7,\"a\",true],[10,\"class\",\"gh-btn gh-btn-blue\"],[10,\"href\",\"https://ghost.org/docs/concepts/contributing/\"],[10,\"target\",\"_blank\"],[8],[7,\"span\",true],[8],[0,\"Find out how you can get involved\"],[9],[9],[0,\"\\n\\n        \"],[9],[0,\"\\n\\n        \"],[7,\"footer\",true],[10,\"class\",\"gh-copyright-info\"],[8],[0,\"\\n            Copyright © 2013 – \"],[1,[23,0,[\"copyrightYear\"]],false],[0,\" Ghost Foundation, released under the \"],[7,\"a\",true],[10,\"href\",\"https://github.com/TryGhost/Ghost/blob/master/LICENSE\"],[10,\"target\",\"_blank\"],[8],[0,\"MIT license\"],[9],[0,\".\\n            \"],[7,\"br\",true],[8],[9],[0,\"\\n            \"],[7,\"a\",true],[10,\"href\",\"https://ghost.org/\"],[10,\"target\",\"_blank\"],[8],[0,\"Ghost\"],[9],[0,\" is a registered trademark of \"],[7,\"a\",true],[10,\"href\",\"https://ghost.org/trademark/\"],[10,\"target\",\"_blank\"],[8],[0,\"Ghost Foundation Ltd\"],[9],[0,\".\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":true}",
    "meta": {
      "moduleName": "ghost-admin/templates/about.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/application-error", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "b0NE2RhA",
    "block": "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"class\",\"gh-view\"],[8],[0,\"\\n    \"],[7,\"section\",true],[10,\"class\",\"error-content error-404 js-error-container\"],[8],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"error-details\"],[8],[0,\"\\n            \"],[7,\"img\",true],[10,\"class\",\"error-ghost\"],[10,\"src\",\"assets/img/404-ghost@2x.png\"],[10,\"srcset\",\"assets/img/404-ghost.png 1x, assets/img/404-ghost@2x.png 2x\"],[8],[9],[0,\"\\n            \"],[7,\"section\",true],[10,\"class\",\"error-message\"],[8],[0,\"\\n                \"],[7,\"h1\",true],[10,\"class\",\"error-code\"],[8],[1,[23,0,[\"model\",\"code\"]],false],[9],[0,\"\\n                \"],[7,\"h2\",true],[10,\"class\",\"error-description\"],[8],[0,\"\\n                    \"],[1,[28,\"or\",[[23,0,[\"model\",\"payload\",\"errors\",\"firstObject\",\"message\"]],[23,0,[\"model\",\"message\"]]],null],false],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[5,\"ember-load-remover\",[],[[],[]]],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/application-error.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/application", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "pl4Jpq0o",
    "block": "{\"symbols\":[],\"statements\":[[5,\"gh-app\",[],[[\"@showSettingsMenu\"],[[23,0,[\"ui\",\"showSettingsMenu\"]]]],{\"statements\":[[0,\"\\n    \"],[5,\"gh-skip-link\",[],[[\"@anchor\"],[\".gh-main\"]],{\"statements\":[[0,\"Skip to main content\"]],\"parameters\":[]}],[0,\"\\n\\n    \"],[5,\"gh-alerts\",[],[[],[]]],[0,\"\\n\\n    \"],[7,\"div\",true],[11,\"class\",[29,[\"gh-viewport \",[28,\"if\",[[23,0,[\"ui\",\"showSettingsMenu\"]],\"settings-menu-expanded\"],null],\" \",[28,\"if\",[[23,0,[\"ui\",\"showMobileMenu\"]],\"mobile-menu-expanded\"],null]]]],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showNavMenu\"]]],null,{\"statements\":[[0,\"            \"],[5,\"gh-nav-menu\",[],[[\"@icon\"],[[23,0,[\"settings\",\"settledIcon\"]]]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n        \"],[7,\"main\",true],[11,\"class\",[29,[\"gh-main \",[23,0,[\"ui\",\"mainClass\"]]]]],[10,\"role\",\"main\"],[8],[0,\"\\n            \"],[1,[22,\"outlet\"],false],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[5,\"gh-notifications\",[],[[],[]]],[0,\"\\n\\n        \"],[5,\"gh-content-cover\",[],[[],[]]],[0,\"\\n\\n        \"],[5,\"gh-mobile-nav-bar\",[],[[],[]]],[0,\"\\n\\n        \"],[5,\"gh-whats-new\",[],[[],[]]],[0,\"\\n    \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"customViews\",\"showFormModal\"]]],null,{\"statements\":[[0,\"        \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@close\",\"@modifier\"],[\"custom-view-form\",[23,0,[\"customViews\",\"toggleFormModal\"]],\"action narrow\"]]],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]}],[0,\"\\n\\n\"],[5,\"ember-load-remover\",[],[[],[]]]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/application.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/billing", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "aNnfKgAz",
    "block": "{\"symbols\":[],\"statements\":[[5,\"gh-billing-iframe\",[],[[\"@guid\"],[[23,0,[\"guid\"]]]],{\"statements\":[],\"parameters\":[]}],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/billing.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/aspect-ratio-box", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "JNhQHzNi",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"unless\",[[23,0,[\"isResizing\"]]],null,{\"statements\":[[14,1],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/aspect-ratio-box.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/draggable-object-target", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "4/od8akg",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[24,[\"enableClicking\"]]],null,{\"statements\":[[0,\"  \"],[7,\"a\",false],[12,\"href\",\"#\"],[3,\"action\",[[23,0,[]],\"acceptForDrop\"]],[8],[0,\"\\n    \"],[14,1],[0,\"\\n  \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"  \"],[14,1],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/draggable-object-target.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/draggable-object", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "FgtLEP2z",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[24,[\"enableClicking\"]]],null,{\"statements\":[[0,\"  \"],[7,\"a\",false],[12,\"href\",\"#\"],[3,\"action\",[[23,0,[]],\"selectForDrag\"]],[8],[0,\"\\n    \"],[14,1],[0,\"\\n  \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"  \"],[14,1],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/draggable-object.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-activating-list-item", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "R18YVXnD",
    "block": "{\"symbols\":[\"@linkClasses\",\"&default\"],\"statements\":[[5,\"link-to\",[],[[\"@route\",\"@alternateActive\",\"@class\"],[[23,0,[\"route\"]],[28,\"action\",[[23,0,[]],\"setActive\"],null],[23,1,[]]]],{\"statements\":[[1,[23,0,[\"title\"]],false],[14,2]],\"parameters\":[]}],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-activating-list-item.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-alert", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "TNVRXUbY",
    "block": "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"class\",\"gh-alert-content\"],[8],[0,\"\\n    \"],[1,[24,[\"message\",\"message\"]],false],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"button\",false],[12,\"class\",\"gh-alert-close\"],[12,\"data-test-button\",\"close-notification\"],[3,\"action\",[[23,0,[]],\"closeNotification\"]],[8],[0,\"\\n    \"],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-alert.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-alerts", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "2TbIZNOI",
    "block": "{\"symbols\":[\"message\"],\"statements\":[[4,\"each\",[[23,0,[\"messages\"]]],null,{\"statements\":[[0,\"    \"],[5,\"gh-alert\",[],[[\"@message\"],[[23,1,[]]]]],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-alerts.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-app", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "b7ZC0c3/",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-app.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-billing-iframe", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "0Ikpu5V+",
    "block": "{\"symbols\":[],\"statements\":[[7,\"iframe\",true],[10,\"id\",\"billing-frame\"],[10,\"class\",\"billing-frame\"],[11,\"src\",[23,0,[\"billingEndpoint\"]]],[10,\"frameborder\",\"0\"],[10,\"allowtransparency\",\"true\"],[8],[9],[0,\"\\n\\n\"],[7,\"style\",true],[8],[0,\"\\n.billing-frame {\\n    position: absolute;\\n    top: 0;\\n    right: 0;\\n    bottom: 0;\\n    left: 0;\\n    width: 100%;\\n    height: 100%;\\n    border: none;\\n    transform: translate3d(0, 0, 0);\\n}\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-billing-iframe.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-blog-url", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "DRfXwC8W",
    "block": "{\"symbols\":[],\"statements\":[[1,[23,0,[\"config\",\"blogUrl\"]],true]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-blog-url.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-canvas-header", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "t1bQRfSZ",
    "block": "{\"symbols\":[\"&attrs\",\"&default\"],\"statements\":[[7,\"header\",false],[13,1],[3,\"did-insert\",[[28,\"action\",[[23,0,[]],\"initScrollWatch\"],null]]],[3,\"will-destroy\",[[28,\"action\",[[23,0,[]],\"clearScrollWatch\"],null]]],[8],[0,\"\\n    \"],[14,2],[0,\"\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-canvas-header.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-cm-editor", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "qlOLLQ4+",
    "block": "{\"symbols\":[],\"statements\":[[5,\"gh-textarea\",[],[[\"@class\",\"@value\",\"@input\"],[[28,\"concat\",[\"gh-cm-editor-textarea \",[23,0,[\"textareaClass\"]]],null],[28,\"readonly\",[[23,0,[\"_value\"]]],null],[28,\"action\",[[23,0,[]],\"updateFromTextarea\"],[[\"value\"],[\"target.value\"]]]]]],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-cm-editor.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-contentfilter", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "dXnjz+Yw",
    "block": "{\"symbols\":[\"order\",\"tag\",\"author\",\"type\",\"@selectedTag\",\"@availableTags\",\"@onTagChange\",\"@selectedAuthor\",\"@availableAuthors\",\"@onAuthorChange\",\"@selectedType\",\"@availableTypes\",\"@onTypeChange\",\"&attrs\",\"@selectedOrder\",\"@availableOrders\",\"@onOrderChange\"],\"statements\":[[7,\"div\",false],[12,\"class\",\"gh-contentfilter\"],[13,14],[8],[0,\"\\n\"],[4,\"unless\",[[23,0,[\"session\",\"user\",\"isContributor\"]]],null,{\"statements\":[[0,\"    \"],[5,\"power-select\",[[12,\"data-test-type-select\",\"true\"]],[[\"@selected\",\"@options\",\"@searchEnabled\",\"@onChange\",\"@tagName\",\"@classNames\",\"@triggerClass\",\"@dropdownClass\",\"@matchTriggerWidth\"],[[23,11,[]],[23,12,[]],false,[23,13,[]],\"div\",[28,\"concat\",[\"gh-contentfilter-menu gh-contentfilter-type \",[28,\"if\",[[23,11,[\"value\"]],\"gh-contentfilter-selected\"],null]],null],\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",false]],{\"statements\":[[0,\"\\n        \"],[4,\"if\",[[23,4,[\"name\"]]],null,{\"statements\":[[1,[23,4,[\"name\"]],false]],\"parameters\":[]},{\"statements\":[[7,\"span\",true],[10,\"class\",\"red\"],[8],[0,\"Unknown type\"],[9]],\"parameters\":[]}],[0,\"\\n    \"]],\"parameters\":[4]}],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"unless\",[[23,0,[\"session\",\"user\",\"isAuthorOrContributor\"]]],null,{\"statements\":[[0,\"    \"],[5,\"power-select\",[[12,\"data-test-author-select\",\"true\"]],[[\"@selected\",\"@options\",\"@searchField\",\"@onChange\",\"@tagName\",\"@classNames\",\"@triggerClass\",\"@dropdownClass\",\"@searchPlaceholder\",\"@matchTriggerWidth\"],[[23,8,[]],[23,9,[]],\"name\",[23,10,[]],\"div\",[28,\"concat\",[\"gh-contentfilter-menu gh-contentfilter-author \",[28,\"if\",[[23,8,[\"slug\"]],\"gh-contentfilter-selected\"],null]],null],\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",\"Search authors\",false]],{\"statements\":[[0,\"\\n        \"],[4,\"if\",[[23,3,[\"name\"]]],null,{\"statements\":[[1,[23,3,[\"name\"]],false]],\"parameters\":[]},{\"statements\":[[7,\"span\",true],[10,\"class\",\"red\"],[8],[0,\"Unknown author\"],[9]],\"parameters\":[]}],[0,\"\\n    \"]],\"parameters\":[3]}],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"unless\",[[23,0,[\"session\",\"user\",\"isContributor\"]]],null,{\"statements\":[[0,\"    \"],[5,\"power-select\",[[12,\"data-test-tag-select\",\"true\"]],[[\"@selected\",\"@options\",\"@searchField\",\"@onChange\",\"@tagName\",\"@classNames\",\"@triggerClass\",\"@dropdownClass\",\"@searchPlaceholder\",\"@matchTriggerWidth\",\"@optionsComponent\"],[[23,5,[]],[23,6,[]],\"name\",[23,7,[]],\"div\",[28,\"concat\",[\"gh-contentfilter-menu gh-contentfilter-tag \",[28,\"if\",[[23,5,[\"slug\"]],\"gh-contentfilter-selected\"],null]],null],\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",\"Search tags\",false,\"power-select-vertical-collection-options\"]],{\"statements\":[[0,\"\\n        \"],[4,\"if\",[[23,2,[\"name\"]]],null,{\"statements\":[[1,[23,2,[\"name\"]],false]],\"parameters\":[]},{\"statements\":[[7,\"span\",true],[10,\"class\",\"red\"],[8],[0,\"Unknown tag\"],[9]],\"parameters\":[]}],[0,\"\\n    \"]],\"parameters\":[2]}],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    \"],[5,\"power-select\",[],[[\"@selected\",\"@options\",\"@searchEnabled\",\"@onChange\",\"@tagName\",\"@classNames\",\"@triggerClass\",\"@dropdownClass\",\"@matchTriggerWidth\",\"@data-test-order-select\"],[[23,15,[]],[23,16,[]],false,[23,17,[]],\"div\",\"gh-contentfilter-menu gh-contentfilter-sort\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown\",false,\"true\"]],{\"statements\":[[0,\"\\n        \"],[4,\"if\",[[23,1,[\"name\"]]],null,{\"statements\":[[1,[23,1,[\"name\"]],false]],\"parameters\":[]},{\"statements\":[[7,\"span\",true],[10,\"class\",\"red\"],[8],[0,\"Unknown\"],[9]],\"parameters\":[]}],[0,\"\\n    \"]],\"parameters\":[1]}],[0,\"\\n\\n\"],[4,\"if\",[[28,\"and\",[[28,\"eq\",[[23,0,[\"router\",\"currentRouteName\"]],\"posts\"],null],[28,\"or\",[[23,11,[\"value\"]],[23,8,[\"slug\"]],[23,5,[\"slug\"]],[23,15,[\"value\"]]],null],[28,\"not\",[[23,0,[\"customViews\",\"activeView\",\"isDefault\"]]],null]],null]],null,{\"statements\":[[0,\"        \"],[7,\"div\",true],[10,\"class\",\"dropdown gh-contentfilter-menu gh-contentfilter-actions\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"customViews\",\"activeView\"]]],null,{\"statements\":[[0,\"                \"],[7,\"button\",false],[12,\"class\",\"gh-contentfilter-menu-trigger gh-contentfilter-button\"],[12,\"title\",\"Edit current view...\"],[12,\"data-test-button\",\"edit-view\"],[12,\"type\",\"button\"],[3,\"on\",[\"click\",[23,0,[\"customViews\",\"toggleFormModal\"]]]],[8],[0,\"\\n                    \"],[1,[28,\"svg-jar\",[\"edit-view\"],null],false],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                \"],[7,\"button\",false],[12,\"class\",\"gh-contentfilter-menu-trigger gh-contentfilter-button\"],[12,\"title\",\"Save as view...\"],[12,\"data-test-button\",\"add-view\"],[12,\"type\",\"button\"],[3,\"on\",[\"click\",[23,0,[\"customViews\",\"toggleFormModal\"]]]],[8],[0,\"\\n                    \"],[1,[28,\"svg-jar\",[\"add-view\"],null],false],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-contentfilter.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-custom-view-title", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "Ug+pnmUi",
    "block": "{\"symbols\":[\"@query\",\"@title\"],\"statements\":[[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n    \"],[5,\"link-to\",[],[[\"@route\",\"@query\"],[[23,0,[\"router\",\"currentRouteName\"]],[23,1,[]]]],{\"statements\":[[1,[28,\"or\",[[23,2,[]],\"No @title provided\"],null],false]],\"parameters\":[]}],[0,\"\\n\"],[4,\"if\",[[23,0,[\"customViews\",\"activeView\"]]],null,{\"statements\":[[0,\"        \"],[7,\"span\",true],[8],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[9],[0,\"\\n        \"],[7,\"span\",true],[10,\"class\",\"truncate\"],[8],[1,[23,0,[\"customViews\",\"activeView\",\"name\"]],false],[9],[0,\"\\n\"]],\"parameters\":[]},null],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-custom-view-title.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-date-time-picker", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "j6gbLu5L",
    "block": "{\"symbols\":[\"dp\"],\"statements\":[[7,\"div\",true],[10,\"class\",\"gh-date-time-picker\"],[8],[0,\"\\n    \"],[5,\"power-datepicker\",[],[[\"@selected\",\"@center\",\"@onSelect\",\"@renderInPlace\",\"@disabled\"],[[23,0,[\"_date\"]],[23,0,[\"_date\"]],[28,\"action\",[[23,0,[]],\"setDate\"],[[\"value\"],[\"date\"]]],true,[23,0,[\"disabled\"]]]],{\"statements\":[[0,\"\\n        \"],[6,[23,1,[\"Trigger\"]],[[12,\"data-test-date-time-picker-datepicker\",\"true\"]],[[\"@tabindex\"],[\"-1\"]],{\"statements\":[[0,\"\\n            \"],[7,\"div\",true],[11,\"class\",[29,[\"gh-date-time-picker-date \",[28,\"if\",[[23,0,[\"dateError\"]],\"error\"],null]]]],[8],[0,\"\\n                \"],[7,\"input\",false],[12,\"placeholder\",[23,0,[\"dateFormat\"]]],[12,\"value\",[28,\"readonly\",[[23,0,[\"dateValue\"]]],null]],[12,\"disabled\",[23,0,[\"disabled\"]]],[12,\"data-test-date-time-picker-date-input\",\"\"],[12,\"type\",\"text\"],[3,\"on\",[\"input\",[28,\"fn\",[[23,0,[\"onDateInput\"]],[23,1,[]]],null]]],[3,\"on\",[\"blur\",[23,0,[\"onDateBlur\"]]]],[3,\"on\",[\"keydown\",[28,\"fn\",[[23,0,[\"onDateKeydown\"]],[23,1,[]]],null]]],[8],[9],[0,\"\\n                \"],[1,[28,\"svg-jar\",[\"calendar\"],null],false],[0,\"\\n            \"],[9],[0,\"\\n        \"]],\"parameters\":[]}],[0,\"\\n        \"],[6,[23,1,[\"Content\"]],[[12,\"class\",\"dropdown-menu\"]],[[],[]],{\"statements\":[[0,\"\\n            \"],[6,[23,1,[\"Nav\"]],[],[[],[]]],[0,\"\\n            \"],[6,[23,1,[\"Days\"]],[],[[\"@minDate\",\"@maxDate\",\"@weekdayFormat\"],[[23,0,[\"_minDate\"]],[23,0,[\"_maxDate\"]],\"min\"]]],[0,\"\\n        \"]],\"parameters\":[]}],[0,\"\\n    \"]],\"parameters\":[1]}],[0,\"\\n\\n    \"],[7,\"div\",true],[11,\"class\",[29,[\"gh-date-time-picker-time \",[28,\"if\",[[23,0,[\"hasError\"]],\"error\"],null]]]],[8],[0,\"\\n        \"],[7,\"input\",false],[12,\"value\",[23,0,[\"_time\"]]],[12,\"disabled\",[23,0,[\"disabled\"]]],[12,\"oninput\",[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"_time\"]]],null]],[[\"value\"],[\"target.value\"]]]],[12,\"onblur\",[28,\"action\",[[23,0,[]],\"setTime\",[23,0,[\"_time\"]]],null]],[12,\"data-test-date-time-picker-time-input\",\"\"],[12,\"type\",\"text\"],[3,\"did-insert\",[[23,0,[\"registerTimeInput\"]]]],[8],[9],[0,\"\\n        \"],[7,\"small\",true],[10,\"class\",\"gh-date-time-picker-timezone\"],[8],[0,\"(\"],[1,[23,0,[\"timezone\"]],false],[0,\")\"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[4,\"if\",[[23,0,[\"hasError\"]]],null,{\"statements\":[[0,\"    \"],[7,\"div\",true],[10,\"class\",\"gh-date-time-picker-error\"],[10,\"data-test-date-time-picker-error\",\"\"],[8],[1,[23,0,[\"dateError\"]],false],[1,[23,0,[\"timeError\"]],false],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-date-time-picker.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-editor-post-status", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "NAdSjepR",
    "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[23,0,[\"_isSaving\"]]],null,{\"statements\":[[0,\"    Saving...\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[28,\"or\",[[23,0,[\"post\",\"isPublished\"]],[23,0,[\"post\",\"pastScheduledTime\"]]],null]],null,{\"statements\":[[0,\"    Published\\n\"],[4,\"if\",[[28,\"or\",[[28,\"eq\",[[23,0,[\"post\",\"email\",\"status\"]],\"submitting\"],null],[28,\"eq\",[[23,0,[\"post\",\"email\",\"status\"]],\"submitting\"],null]],null]],null,{\"statements\":[[0,\"        and sending to \"],[1,[28,\"pluralize\",[[23,0,[\"post\",\"email\",\"emailCount\"]],\"member\"],null],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[28,\"eq\",[[23,0,[\"post\",\"email\",\"status\"]],\"submitted\"],null]],null,{\"statements\":[[0,\"        and sent to \"],[1,[28,\"pluralize\",[[23,0,[\"post\",\"email\",\"emailCount\"]],\"member\"],null],false],[0,\"\\n    \"]],\"parameters\":[]},null]],\"parameters\":[]}]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,0,[\"post\",\"isScheduled\"]]],null,{\"statements\":[[4,\"if\",[[23,0,[\"countdown\"]]],null,{\"statements\":[[0,\"        \"],[7,\"time\",true],[11,\"datetime\",[29,[[23,0,[\"post\",\"publishedAtUTC\"]]]]],[10,\"class\",\"ml1 green f8\"],[10,\"data-test-schedule-countdown\",\"\"],[8],[0,\"\\n            Scheduled to be published \"],[1,[28,\"if\",[[23,0,[\"post\",\"sendEmailWhenPublished\"]],\"and sent\"],null],false],[0,\" \"],[1,[23,0,[\"countdown\"]],false],[0,\".\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"        Scheduled\\n\"]],\"parameters\":[]}]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,0,[\"post\",\"isNew\"]]],null,{\"statements\":[[0,\"    New\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    Draft\\n\"]],\"parameters\":[]}]],\"parameters\":[]}]],\"parameters\":[]}]],\"parameters\":[]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-editor-post-status.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-editor", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "filLLpwf",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1,[[28,\"hash\",null,[[\"headerClass\",\"headerHeight\",\"isDraggedOver\",\"isFullScreen\",\"droppedFiles\",\"uploadedImageUrls\",\"imageMimeTypes\",\"imageExtensions\",\"toggleFullScreen\",\"togglePreview\",\"toggleSplitScreen\",\"uploadComplete\",\"uploadCancelled\",\"uploadImages\"],[[23,0,[\"headerClass\"]],[23,0,[\"headerHeight\"]],[23,0,[\"isDraggedOver\"]],[23,0,[\"isFullScreen\"]],[23,0,[\"droppedFiles\"]],[23,0,[\"uploadedImageUrls\"]],[23,0,[\"imageMimeTypes\"]],[23,0,[\"imageExtensions\"]],[28,\"action\",[[23,0,[]],\"toggleFullScreen\"],null],[28,\"action\",[[23,0,[]],\"togglePreview\"],null],[28,\"action\",[[23,0,[]],\"toggleSplitScreen\"],null],[28,\"action\",[[23,0,[]],\"uploadComplete\"],null],[28,\"action\",[[23,0,[]],\"uploadCancelled\"],null],[28,\"action\",[[23,0,[]],\"uploadImages\"],null]]]]]],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-editor.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-error-message", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "mSWi4YAY",
    "block": "{\"symbols\":[\"&attrs\"],\"statements\":[[7,\"p\",false],[12,\"class\",\"response\"],[12,\"hidden\",[28,\"if\",[[23,0,[\"message\"]],false,true],null]],[13,1],[8],[0,\"\\n    \"],[1,[23,0,[\"message\"]],false],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-error-message.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-feature-flag", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "2BJLEuKa",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[7,\"input\",true],[11,\"checked\",[23,0,[\"value\"]]],[11,\"disabled\",[23,0,[\"disabled\"]]],[11,\"id\",[23,0,[\"for\"]]],[11,\"name\",[23,0,[\"name\"]]],[11,\"onclick\",[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"value\"]]],null]],[[\"value\"],[\"target.checked\"]]]],[10,\"type\",\"checkbox\"],[8],[9],[0,\"\\n\"],[7,\"span\",true],[10,\"class\",\"input-toggle-component\"],[8],[9],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-feature-flag.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-file-upload", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "5WO6E1XN",
    "block": "{\"symbols\":[],\"statements\":[[7,\"input\",true],[10,\"class\",\"gh-input gh-input-file q\"],[10,\"data-url\",\"upload\"],[10,\"name\",\"importfile\"],[11,\"accept\",[29,[[23,0,[\"acceptEncoding\"]]]]],[10,\"type\",\"file\"],[8],[9],[0,\"\\n\"],[7,\"button\",false],[12,\"id\",\"startupload\"],[12,\"class\",\"gh-btn gh-btn-hover-blue\"],[12,\"disabled\",[23,0,[\"uploadButtonDisabled\"]]],[12,\"type\",\"submit\"],[3,\"action\",[[23,0,[]],\"upload\"]],[8],[0,\"\\n    \"],[7,\"span\",true],[8],[1,[23,0,[\"uploadButtonText\"]],false],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-file-upload.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-file-uploader", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "qkL6/5jU",
    "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[23,0,[\"file\"]]],null,{\"statements\":[[4,\"if\",[[23,0,[\"failureMessage\"]]],null,{\"statements\":[[0,\"        \"],[7,\"div\",true],[10,\"class\",\"failed\"],[8],[1,[23,0,[\"failureMessage\"]],false],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[7,\"div\",true],[10,\"class\",\"progress-container\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"progress\"],[8],[0,\"\\n            \"],[7,\"div\",true],[11,\"class\",[29,[\"bar \",[28,\"if\",[[23,0,[\"failureMessage\"]],\"fail\"],null]]]],[11,\"style\",[23,0,[\"progressStyle\"]]],[8],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[4,\"if\",[[23,0,[\"failureMessage\"]]],null,{\"statements\":[[0,\"        \"],[7,\"button\",false],[12,\"class\",\"gh-btn gh-btn-green\"],[12,\"data-test-upload-try-again-button\",\"\"],[3,\"action\",[[23,0,[]],\"reset\"]],[8],[7,\"span\",true],[8],[0,\"Try Again\"],[9],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[7,\"div\",true],[10,\"class\",\"upload-form\"],[8],[0,\"\\n        \"],[5,\"gh-file-input\",[],[[\"@multiple\",\"@alt\",\"@action\",\"@accept\"],[false,[23,0,[\"labelText\"]],[28,\"action\",[[23,0,[]],\"fileSelected\"],null],[23,0,[\"accept\"]]]],{\"statements\":[[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"description\"],[8],[1,[23,0,[\"labelText\"]],false],[9],[0,\"\\n        \"]],\"parameters\":[]}],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-file-uploader.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-fullscreen-modal", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "scXD+hGz",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[5,\"liquid-wormhole\",[],[[\"@class\"],[\"fullscreen-modal-container\"]],{\"statements\":[[0,\"\\n    \"],[7,\"div\",false],[12,\"class\",\"fullscreen-modal-background\"],[3,\"action\",[[23,0,[]],\"clickOverlay\"]],[8],[9],[0,\"\\n    \"],[7,\"div\",true],[11,\"class\",[23,0,[\"modalClasses\"]]],[8],[0,\"\\n\"],[4,\"if\",[[25,1]],null,{\"statements\":[[0,\"          \"],[14,1],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"          \"],[1,[28,\"component\",[[23,0,[\"modalPath\"]]],[[\"model\",\"confirm\",\"closeModal\"],[[23,0,[\"model\"]],[28,\"action\",[[23,0,[]],\"confirm\"],null],[28,\"action\",[[23,0,[]],\"close\"],null]]]],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"    \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-fullscreen-modal.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-image-uploader-with-preview", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "t46Ptk9J",
    "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[23,0,[\"image\"]]],null,{\"statements\":[[0,\"    \"],[7,\"div\",true],[10,\"class\",\"gh-image-uploader -with-image\"],[8],[0,\"\\n        \"],[7,\"div\",true],[8],[7,\"img\",true],[11,\"src\",[23,0,[\"image\"]]],[8],[9],[9],[0,\"\\n        \"],[7,\"a\",false],[12,\"class\",\"image-cancel\"],[12,\"title\",\"Delete\"],[3,\"action\",[[23,0,[]],\"remove\"]],[8],[0,\"\\n            \"],[1,[28,\"svg-jar\",[\"trash\"],null],false],[0,\"\\n            \"],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Delete\"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[5,\"gh-image-uploader\",[],[[\"@text\",\"@altText\",\"@allowUnsplash\",\"@update\",\"@uploadStarted\",\"@uploadFinished\"],[[23,0,[\"text\"]],[23,0,[\"altText\"]],[23,0,[\"allowUnsplash\"]],[28,\"action\",[[23,0,[]],\"update\"],null],[28,\"action\",[[23,0,[]],\"uploadStarted\"],null],[28,\"action\",[[23,0,[]],\"uploadFinished\"],null]]]],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-image-uploader-with-preview.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-image-uploader", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "+bJLrn4S",
    "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[23,0,[\"file\"]]],null,{\"statements\":[[4,\"if\",[[23,0,[\"failureMessage\"]]],null,{\"statements\":[[0,\"        \"],[7,\"div\",true],[10,\"class\",\"failed\"],[8],[1,[23,0,[\"failureMessage\"]],false],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[7,\"div\",true],[10,\"class\",\"progress-container\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"progress\"],[8],[0,\"\\n            \"],[7,\"div\",true],[11,\"class\",[29,[\"bar \",[28,\"if\",[[23,0,[\"failureMessage\"]],\"fail\"],null]]]],[11,\"style\",[23,0,[\"progressStyle\"]]],[8],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[4,\"if\",[[23,0,[\"failureMessage\"]]],null,{\"statements\":[[0,\"        \"],[7,\"button\",false],[12,\"class\",\"gh-btn gh-btn-green\"],[3,\"action\",[[23,0,[]],\"reset\"]],[8],[7,\"span\",true],[8],[0,\"Try Again\"],[9],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[7,\"div\",true],[10,\"class\",\"upload-form\"],[8],[0,\"\\n        \"],[5,\"gh-file-input\",[],[[\"@multiple\",\"@alt\",\"@action\",\"@accept\"],[false,[23,0,[\"description\"]],[28,\"action\",[[23,0,[]],\"fileSelected\"],null],[23,0,[\"accept\"]]]],{\"statements\":[[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-btn gh-btn-outline\"],[10,\"data-test-file-input-description\",\"\"],[8],[7,\"span\",true],[8],[1,[23,0,[\"description\"]],false],[9],[9],[0,\"\\n        \"]],\"parameters\":[]}],[0,\"\\n\\n\"],[4,\"if\",[[28,\"and\",[[23,0,[\"allowUnsplash\"]],[23,0,[\"settings\",\"unsplash\",\"isActive\"]]],null]],null,{\"statements\":[[0,\"            \"],[7,\"div\",false],[12,\"class\",\"gh-image-uploader-unsplash\"],[3,\"action\",[[23,0,[]],[28,\"toggle\",[\"_showUnsplash\",[23,0,[]]],null]]],[8],[0,\"\\n                \"],[1,[28,\"svg-jar\",[\"unsplash\"],null],false],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n\"],[4,\"if\",[[23,0,[\"_showUnsplash\"]]],null,{\"statements\":[[0,\"    \"],[5,\"gh-unsplash\",[],[[\"@select\",\"@close\"],[[28,\"action\",[[23,0,[]],\"addUnsplashPhoto\"],null],[28,\"action\",[[23,0,[]],[28,\"toggle\",[\"_showUnsplash\",[23,0,[]]],null]],null]]]],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-image-uploader.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-infinity-loader", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "h7s24iaB",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[25,1]],null,{\"statements\":[[0,\"    \"],[14,1,[[23,0,[\"infinityModelContent\"]]]],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,0,[\"isDoneLoading\"]]],null,{\"statements\":[],\"parameters\":[]},{\"statements\":[[0,\"        \"],[7,\"div\",true],[10,\"class\",\"gh-loading-spinner\"],[8],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-infinity-loader.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-koenig-editor", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "xjSw4G53",
    "block": "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"class\",\"gh-koenig-editor-pane flex flex-column mih-100\"],[11,\"onmousedown\",[28,\"action\",[[23,0,[]],\"trackMousedown\"],null]],[11,\"onmouseup\",[28,\"action\",[[23,0,[]],\"focusEditor\"],null]],[8],[0,\"\\n    \"],[5,\"gh-textarea\",[[12,\"data-test-editor-title-input\",true]],[[\"@class\",\"@placeholder\",\"@tabindex\",\"@autoExpand\",\"@value\",\"@input\",\"@focus-out\",\"@keyDown\",\"@didCreateTextarea\"],[\"gh-editor-title\",[23,0,[\"titlePlaceholder\"]],\"1\",\".gh-koenig-editor\",[28,\"readonly\",[[23,0,[\"title\"]]],null],[28,\"action\",[[23,0,[]],\"onTitleChange\"],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"onTitleFocusOut\"],null],[28,\"action\",[[23,0,[]],\"onTitleKeydown\"],null],[28,\"action\",[[23,0,[]],\"onTitleCreated\"],null]]]],[0,\"\\n\\n    \"],[5,\"koenig-editor\",[],[[\"@mobiledoc\",\"@placeholder\",\"@autofocus\",\"@spellcheck\",\"@onChange\",\"@didCreateEditor\",\"@cursorDidExitAtTop\",\"@headerOffset\",\"@dropTargetSelector\",\"@scrollContainerSelector\",\"@scrollOffsetTopSelector\",\"@scrollOffsetBottomSelector\",\"@wordCountDidChange\"],[[23,0,[\"body\"]],[23,0,[\"bodyPlaceholder\"]],[23,0,[\"bodyAutofocus\"]],true,[28,\"action\",[[23,0,[]],\"onBodyChange\"],null],[28,\"action\",[[23,0,[]],\"onEditorCreated\"],null],[28,\"action\",[[23,0,[]],\"focusTitle\"],null],[23,0,[\"headerOffset\"]],\".gh-koenig-editor-pane\",[23,0,[\"scrollContainerSelector\"]],[23,0,[\"scrollOffsetTopSelector\"]],[23,0,[\"scrollOffsetBottomSelector\"]],[28,\"action\",[[23,0,[]],[23,0,[\"onWordCountChange\"]]],null]]]],[0,\"\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-koenig-editor.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-link-to-custom-views-index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "VR7Lumqg",
    "block": "{\"symbols\":[\"@route\",\"&attrs\",\"&default\"],\"statements\":[[5,\"link-to\",[[13,2],[3,\"did-insert\",[[23,0,[\"watchRouterEvents\"]]]],[3,\"will-destroy\",[[23,0,[\"unwatchRouterEvents\"]]]]],[[\"@route\",\"@query\",\"@current-when\"],[[23,1,[]],[23,0,[\"resetQuery\"]],[23,0,[\"isActive\"]]]],{\"statements\":[[0,\"\\n    \"],[14,3],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-link-to-custom-views-index.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-loading-list", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "Q3PA56Ws",
    "block": "{\"symbols\":[],\"statements\":[[7,\"ol\",true],[10,\"class\",\"gh-list loading\"],[8],[0,\"\\n    \"],[7,\"li\",true],[10,\"class\",\"gh-list-row header\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-list-header\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"bg-lightgrey w20 h3\"],[8],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"li\",true],[10,\"class\",\"gh-list-row loading\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-list-data gh-list-loadingcell\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-list-loading-title\"],[8],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-list-loading-detail\"],[8],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"li\",true],[10,\"class\",\"gh-list-row loading\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-list-data gh-list-loadingcell\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-list-loading-title\"],[8],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-list-loading-detail\"],[8],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"li\",true],[10,\"class\",\"gh-list-row loading\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-list-data gh-list-loadingcell\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-list-loading-title\"],[8],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-list-loading-detail\"],[8],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-loading-list.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-loading-spinner", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "ovOoKfgf",
    "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[23,0,[\"showSpinner\"]]],null,{\"statements\":[[0,\"    \"],[7,\"div\",true],[10,\"class\",\"gh-loading-content\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-loading-spinner\"],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-loading-spinner.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-markdown-editor", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "MX/udXlv",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1,[[28,\"hash\",null,[[\"editor\",\"isFullScreen\",\"isSplitScreen\",\"focus\"],[[28,\"component\",[\"gh-simplemde\"],[[\"value\",\"placeholder\",\"autofocus\",\"onChange\",\"onFocus\",\"onBlur\",\"onEditorInit\",\"options\"],[[23,0,[\"markdown\"]],[23,0,[\"placeholder\"]],[23,0,[\"autofocus\"]],[28,\"action\",[[23,0,[]],\"updateMarkdown\"],null],[28,\"action\",[[23,0,[]],\"updateFocusState\",true],null],[28,\"action\",[[23,0,[]],\"updateFocusState\",false],null],[28,\"action\",[[23,0,[]],\"setEditor\"],null],[23,0,[\"simpleMDEOptions\"]]]]],[23,0,[\"_isFullScreen\"]],[23,0,[\"_isSplitScreen\"]],[28,\"action\",[[23,0,[]],\"focusEditor\"],null]]]]]],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"style\",\"display:none\"],[8],[0,\"\\n    \"],[5,\"gh-file-input\",[],[[\"@multiple\",\"@action\",\"@accept\"],[true,[28,\"action\",[[23,0,[]],[23,0,[\"onImageFilesSelected\"]]],null],[23,0,[\"imageMimeTypes\"]]]]],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"_showUnsplash\"]]],null,{\"statements\":[[0,\"    \"],[5,\"gh-unsplash\",[],[[\"@select\",\"@close\"],[[28,\"action\",[[23,0,[]],\"insertUnsplashPhoto\"],null],[28,\"action\",[[23,0,[]],\"toggleUnsplash\"],null]]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showMarkdownHelp\"]]],null,{\"statements\":[[0,\"    \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@close\",\"@modifier\"],[\"markdown-help\",[28,\"action\",[[23,0,[]],\"toggleMarkdownHelp\"],null],\"wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-markdown-editor.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-member-avatar", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "lsIlun0I",
    "block": "{\"symbols\":[\"@containerClass\",\"@sizeClass\",\"@member\"],\"statements\":[[7,\"figure\",true],[11,\"class\",[29,[\"gh-member-gravatar \",[23,1,[]]]]],[8],[0,\"\\n    \"],[7,\"div\",true],[11,\"class\",[29,[\"gh-member-initials flex items-center justify-center br-100 \",[23,1,[]]]]],[11,\"style\",[23,0,[\"backgroundStyle\"]]],[8],[0,\"\\n        \"],[7,\"span\",true],[11,\"class\",[29,[\"gh-member-avatar-label \",[28,\"or\",[[23,2,[]],\"gh-member-list-avatar\"],null]]]],[8],[1,[23,0,[\"initials\"]],false],[9],[0,\"\\n    \"],[9],[0,\"\\n    \"],[7,\"img\",true],[10,\"class\",\"gh-member-avatar-image\"],[11,\"src\",[28,\"gravatar\",[[23,3,[\"email\"]]],[[\"size\"],[180]]]],[8],[9],[0,\"\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-member-avatar.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-member-label-input", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "NrjfIytb",
    "block": "{\"symbols\":[],\"statements\":[[5,\"gh-token-input\",[],[[\"@extra\",\"@onChange\",\"@onCreate\",\"@options\",\"@renderInPlace\",\"@selected\",\"@showCreateWhen\",\"@triggerId\"],[[28,\"hash\",null,[[\"tokenComponent\"],[\"gh-token-input/label-token\"]]],[28,\"action\",[[23,0,[]],\"updateLabels\"],null],[28,\"action\",[[23,0,[]],\"createLabel\"],null],[23,0,[\"availableLabels\"]],true,[22,\"selectedLabels\"],[28,\"action\",[[23,0,[]],\"hideCreateOptionOnMatchingLabel\"],null],[23,0,[\"triggerId\"]]]]],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-member-label-input.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-member-settings-form", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "cKJkUGme",
    "block": "{\"symbols\":[\"subscription\"],\"statements\":[[7,\"div\",true],[10,\"class\",\"flex items-stretch mt2\"],[8],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"flex-auto br4 shadow-1 bg-grouped-table mt2 flex flex-column justify-between items-stretch gh-member-settings-primary mr6\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"pa5 pb0 pt4\"],[8],[0,\"\\n            \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\",\"@classNames\"],[[23,0,[\"member\",\"errors\"]],[23,0,[\"member\",\"hasValidated\"]],\"name\",\"max-width\"]],{\"statements\":[[0,\"\\n                \"],[7,\"label\",true],[10,\"for\",\"member-name\"],[8],[0,\"Name\"],[9],[0,\"\\n                \"],[5,\"gh-text-input\",[],[[\"@id\",\"@name\",\"@value\",\"@tabindex\",\"@focus-out\"],[\"member-name\",\"name\",[23,0,[\"scratchMember\",\"name\"]],\"1\",[28,\"action\",[[23,0,[]],\"setProperty\",\"name\",[23,0,[\"scratchMember\",\"name\"]]],null]]]],[0,\"\\n                \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[24,[\"member\",\"errors\"]],\"name\"]]],[0,\"\\n            \"]],\"parameters\":[]}],[0,\"\\n\\n            \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\",\"@classNames\"],[[23,0,[\"member\",\"errors\"]],[23,0,[\"member\",\"hasValidated\"]],\"email\",\"max-width\"]],{\"statements\":[[0,\"\\n                \"],[7,\"label\",true],[10,\"for\",\"member-email\"],[8],[0,\"Email\"],[9],[0,\"\\n                \"],[5,\"gh-text-input\",[],[[\"@value\",\"@id\",\"@name\",\"@tabindex\",\"@autocapitalize\",\"@autocorrect\",\"@autocomplete\",\"@focus-out\"],[[23,0,[\"scratchMember\",\"email\"]],\"member-email\",\"email\",\"2\",\"off\",\"off\",\"off\",[28,\"action\",[[23,0,[]],\"setProperty\",\"email\",[23,0,[\"scratchMember\",\"email\"]]],null]]]],[0,\"\\n                \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"member\",\"errors\"]],\"email\"]]],[0,\"\\n            \"]],\"parameters\":[]}],[0,\"\\n        \"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"pa5 pt5 pb6 bt b--whitegrey\"],[8],[0,\"\\n            \"],[5,\"gh-form-group\",[],[[\"@classNames\"],[\"gh-members-subscribed-checkbox mb0\"]],{\"statements\":[[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"flex justify-between items-center\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[8],[0,\"\\n                        \"],[7,\"h4\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Subscribed to newsletter\"],[9],[0,\"\\n                        \"],[7,\"p\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"If disabled, member will \"],[7,\"em\",true],[8],[0,\"not\"],[9],[0,\" receive newsletter emails\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"for-switch\"],[8],[0,\"\\n                        \"],[7,\"label\",true],[10,\"class\",\"switch\"],[10,\"for\",\"subscribed-checkbox\"],[8],[0,\"\\n                            \"],[5,\"input\",[],[[\"@checked\",\"@type\",\"@id\",\"@name\"],[[23,0,[\"member\",\"subscribed\"]],\"checkbox\",\"subscribed-checkbox\",\"subscribed\"]]],[0,\"\\n                            \"],[7,\"span\",true],[10,\"class\",\"input-toggle-component\"],[8],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"]],\"parameters\":[]}],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"flex-auto br4 shadow-1 bg-grouped-table mt2 flex flex-column items-stretch gh-member-settings-secondary\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"pa5 pt4\"],[8],[0,\"\\n            \"],[5,\"gh-form-group\",[],[[],[]],{\"statements\":[[0,\"\\n                \"],[7,\"label\",true],[10,\"for\",\"label-input\"],[8],[0,\"Labels\"],[9],[0,\"\\n                \"],[5,\"gh-member-label-input\",[],[[\"@member\",\"@triggerId\"],[[23,0,[\"member\"]],\"label-input\"]]],[0,\"\\n            \"]],\"parameters\":[]}],[0,\"\\n            \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\",\"@classNames\"],[[23,0,[\"member\",\"errors\"]],[23,0,[\"member\",\"hasValidated\"]],\"note\",\"mb0\"]],{\"statements\":[[0,\"\\n                \"],[7,\"label\",true],[10,\"for\",\"member-note\"],[8],[0,\"Note \"],[7,\"span\",true],[10,\"class\",\"midgrey-l2 fw4\"],[8],[0,\"(not visible to member)\"],[9],[9],[0,\"\\n                \"],[5,\"gh-textarea\",[],[[\"@id\",\"@name\",\"@class\",\"@tabindex\",\"@value\",\"@focus-out\"],[\"member-note\",\"note\",\"gh-member-details-textarea\",\"3\",[23,0,[\"scratchMember\",\"note\"]],[28,\"action\",[[23,0,[]],\"setProperty\",\"note\",[23,0,[\"scratchMember\",\"note\"]]],null]]]],[0,\"\\n                \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"member\",\"errors\"]],\"note\"]]],[0,\"\\n                \"],[7,\"p\",true],[8],[0,\" Maximum: \"],[7,\"b\",true],[8],[0,\"500\"],[9],[0,\" characters. You’ve used\\n                    \"],[1,[28,\"gh-count-down-characters\",[[23,0,[\"scratchMember\",\"note\"]],500],null],false],[9],[0,\"\\n            \"]],\"parameters\":[]}],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[4,\"if\",[[24,[\"canShowStripeInfo\"]]],null,{\"statements\":[[7,\"h4\",true],[10,\"class\",\"midlightgrey f-small fw5 ttu mt12\"],[8],[0,\"Stripe info\"],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"isLoading\"]]],null,{\"statements\":[[0,\"    \"],[7,\"div\",true],[10,\"class\",\"pa20 br4 shadow-1 bg-grouped-table mt2\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex justify-center flex-auto\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-loading-spinner\"],[8],[0,\" \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[7,\"div\",true],[10,\"class\",\"br4 shadow-1 bg-grouped-table mt2\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"subscriptions\"]]],null,{\"statements\":[[4,\"if\",[[23,0,[\"hasMultipleSubscriptions\"]]],null,{\"statements\":[[0,\"                \"],[7,\"div\",true],[10,\"class\",\"pa2 flex flex-column flex-row-ns items-center justify-center f7 fw5 bg-whitegrey-l2 bb b--whitegrey br4 br--top\"],[8],[0,\"\\n                    \"],[1,[28,\"svg-jar\",[\"info\"],[[\"class\"],[\"gh-member-info-icon mr2 fill-darkgrey\"]]],false],[0,\" Member has multiple Stripe subscriptions\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"each\",[[23,0,[\"subscriptions\"]]],null,{\"statements\":[[0,\"                \"],[7,\"section\",true],[10,\"class\",\"gh-member-stripe-info pa5 pb0 pt4 flex flex-column flex-row-ns items-start justify-between\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"flex items-start w-100\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"w-50 flex-auto mr8\"],[8],[0,\"\\n                            \"],[7,\"h4\",true],[10,\"class\",\"f8 fw6\"],[8],[0,\"Customer\"],[9],[0,\"\\n                            \"],[7,\"table\",true],[10,\"class\",\"gh-member-stripe-table\"],[8],[0,\"\\n                                \"],[7,\"tr\",true],[8],[0,\"\\n                                    \"],[7,\"td\",true],[10,\"class\",\"gh-member-stripe-label\"],[8],[0,\"Stripe customer ID\"],[9],[0,\"\\n                                    \"],[7,\"td\",true],[10,\"class\",\"gh-member-stripe-data\"],[8],[0,\"\\n                                        \"],[7,\"a\",true],[11,\"href\",[29,[\"https://dashboard.stripe.com/customers/\",[23,1,[\"customer\",\"id\"]]]]],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener\"],[10,\"data-tooltip\",\"View on Stripe\"],[8],[0,\"\\n                                            \"],[1,[23,1,[\"customer\",\"id\"]],false],[0,\"\\n                                        \"],[9],[0,\"\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                                \"],[7,\"tr\",true],[8],[0,\"\\n                                    \"],[7,\"td\",true],[10,\"class\",\"gh-member-stripe-label\"],[8],[0,\"Name\"],[9],[0,\"\\n                                    \"],[7,\"td\",true],[10,\"class\",\"gh-member-stripe-data\"],[8],[0,\"\\n\"],[4,\"if\",[[23,1,[\"customer\",\"name\"]]],null,{\"statements\":[[0,\"                                            \"],[1,[23,1,[\"customer\",\"name\"]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                            \"],[7,\"span\",true],[10,\"class\",\"midlightgrey-l2\"],[8],[0,\"No name\"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                                \"],[7,\"tr\",true],[8],[0,\"\\n                                    \"],[7,\"td\",true],[10,\"class\",\"gh-member-stripe-label\"],[8],[0,\"Email\"],[9],[0,\"\\n                                    \"],[7,\"td\",true],[10,\"class\",\"gh-member-stripe-data\"],[8],[0,\"\\n\"],[4,\"if\",[[23,1,[\"customer\",\"email\"]]],null,{\"statements\":[[0,\"                                            \"],[1,[23,1,[\"customer\",\"email\"]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                            \"],[7,\"span\",true],[10,\"class\",\"midlightgrey-l2\"],[8],[0,\"No email\"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                                \"],[7,\"tr\",true],[8],[0,\"\\n                                    \"],[7,\"td\",true],[10,\"class\",\"gh-member-stripe-label\"],[8],[0,\"Customer since\"],[9],[0,\"\\n                                    \"],[7,\"td\",true],[10,\"class\",\"gh-member-stripe-data\"],[8],[0,\"\\n\"],[4,\"if\",[[23,1,[\"startDate\"]]],null,{\"statements\":[[0,\"                                            \"],[1,[23,1,[\"startDate\"]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                            \"],[7,\"span\",true],[10,\"class\",\"midlightgrey-l2\"],[8],[0,\"No data\"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n\\n                        \"],[7,\"div\",true],[10,\"class\",\"w-50 flex-auto\"],[8],[0,\"\\n                            \"],[7,\"h4\",true],[10,\"class\",\"f8 fw6\"],[8],[0,\"Subscription\"],[9],[0,\"\\n                            \"],[7,\"table\",true],[10,\"class\",\"gh-member-stripe-table\"],[8],[0,\"\\n                                \"],[7,\"tr\",true],[8],[0,\"\\n                                    \"],[7,\"td\",true],[10,\"class\",\"gh-member-stripe-label\"],[8],[0,\"Stripe subscription ID\"],[9],[0,\"\\n                                    \"],[7,\"td\",true],[10,\"class\",\"gh-member-stripe-data\"],[8],[0,\"\\n                                        \"],[7,\"a\",true],[11,\"href\",[29,[\"https://dashboard.stripe.com/subscriptions/\",[23,1,[\"id\"]]]]],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener\"],[10,\"data-tooltip\",\"View on Stripe\"],[8],[0,\"\\n                                            \"],[1,[23,1,[\"id\"]],false],[0,\"\\n                                        \"],[9],[0,\"\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                                \"],[7,\"tr\",true],[8],[0,\"\\n                                    \"],[7,\"td\",true],[10,\"class\",\"gh-member-stripe-label\"],[8],[0,\"Plan\"],[9],[0,\"\\n                                    \"],[7,\"td\",true],[10,\"class\",\"gh-member-stripe-data\"],[8],[0,\"\\n                                        \"],[1,[23,1,[\"plan\",\"nickname\"]],false],[0,\"\\n                                        \"],[7,\"span\",true],[10,\"class\",\"midgrey\"],[8],[0,\"(\"],[1,[23,1,[\"amount\"]],false],[0,\"\\n                                            \"],[7,\"span\",true],[10,\"class\",\"ttu\"],[8],[1,[23,1,[\"plan\",\"currency\"]],false],[9],[0,\"/\"],[1,[23,1,[\"plan\",\"interval\"]],false],[0,\")\\n                                        \"],[9],[0,\"\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                                \"],[7,\"tr\",true],[8],[0,\"\\n                                    \"],[7,\"td\",true],[10,\"class\",\"gh-member-stripe-label\"],[8],[0,\"Status\"],[9],[0,\"\\n                                    \"],[7,\"td\",true],[10,\"class\",\"gh-member-stripe-data\"],[8],[0,\"\\n\"],[4,\"if\",[[23,1,[\"cancelAtPeriodEnd\"]]],null,{\"statements\":[[0,\"                                            \"],[7,\"span\",true],[10,\"class\",\"gh-member-cancels-on-label\"],[8],[0,\"Cancels on \"],[1,[23,1,[\"validUntil\"]],false],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                            \"],[7,\"span\",true],[10,\"class\",\"gh-member-stripe-status\"],[8],[1,[23,1,[\"status\"]],false],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                                \"],[7,\"tr\",true],[8],[0,\"\\n                                    \"],[7,\"td\",true],[10,\"class\",\"gh-member-stripe-label\"],[8],[0,\"Next renewal date\"],[9],[0,\"\\n                                    \"],[7,\"td\",true],[10,\"class\",\"gh-member-stripe-data\"],[8],[0,\"\\n\"],[4,\"if\",[[23,1,[\"cancelAtPeriodEnd\"]]],null,{\"statements\":[[0,\"                                            No further renewal\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                            \"],[1,[23,1,[\"validUntil\"]],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[1]},null]],\"parameters\":[]},{\"statements\":[[0,\"            \"],[7,\"div\",true],[10,\"class\",\"pa20\"],[8],[0,\"\\n                \"],[7,\"p\",true],[10,\"class\",\"ma0 pa0 tc midgrey\"],[8],[0,\"Member doesn't have an active Stripe subscription\"],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"        \"],[7,\"div\",true],[10,\"class\",\"pa5 pb0 pt4 flex flex-column justify-between bt b--whitegrey\"],[8],[0,\"\\n            \"],[5,\"gh-form-group\",[],[[\"@classNames\"],[\"gh-members-comped-checkbox\"]],{\"statements\":[[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"flex justify-between items-center\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[8],[0,\"\\n                        \"],[7,\"h4\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Complimentary premium plan\"],[9],[0,\"\\n                        \"],[7,\"p\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"If enabled, member will be placed onto a free of charge premium subscription\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"for-switch\"],[8],[0,\"\\n                        \"],[7,\"label\",true],[10,\"class\",\"switch\"],[10,\"for\",\"comped-checkbox\"],[8],[0,\"\\n                            \"],[5,\"input\",[],[[\"@checked\",\"@type\",\"@id\",\"@name\"],[[23,0,[\"member\",\"comped\"]],\"checkbox\",\"comped-checkbox\",\"comped\"]]],[0,\"\\n                            \"],[7,\"span\",true],[10,\"class\",\"input-toggle-component\"],[8],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"]],\"parameters\":[]}],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-member-settings-form.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-members-chart", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "qdSETnOg",
    "block": "{\"symbols\":[\"range\"],\"statements\":[[7,\"div\",true],[10,\"class\",\"flex justify-between mb6 items-stretch gh-members-chart-wrapper\"],[8],[0,\"\\n\\n\"],[0,\"    \"],[7,\"div\",true],[10,\"class\",\"flex-auto bg-white br3 shadow-1 bg-grouped-table mr6 gh-members-chart-box\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex justify-between items-center gh-members-chart-header\"],[8],[0,\"\\n            \"],[7,\"h2\",true],[10,\"class\",\"f-small ttu midgrey fw5 mb0\"],[8],[0,\"Total members\"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-contentfilter\"],[8],[0,\"\\n                    \"],[5,\"power-select\",[[12,\"data-test-type-select\",\"true\"]],[[\"@selected\",\"@options\",\"@searchEnabled\",\"@onChange\",\"@tagName\",\"@classNames\",\"@triggerClass\",\"@dropdownClass\",\"@matchTriggerWidth\"],[[23,0,[\"selectedRange\"]],[23,0,[\"availableRange\"]],false,[28,\"action\",[[23,0,[]],\"changeDateRange\"],null],\"div\",\"gh-contentfilter-menu gh-contentfilter-type\",\"gh-contentfilter-menu-trigger\",\"gh-contentfilter-menu-dropdown gh-members-chart-dropdown\",false]],{\"statements\":[[0,\"\\n                        \"],[1,[23,1,[\"name\"]],false],[0,\"\\n                    \"]],\"parameters\":[1]}],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-members-chart-container\"],[8],[0,\"\\n            \"],[5,\"ember-chart\",[],[[\"@type\",\"@options\",\"@data\",\"@height\"],[\"LineWithLine\",[23,0,[\"subData\",\"chartData\",\"options\"]],[23,0,[\"subData\",\"chartData\",\"data\"]],300]]],[0,\"\\n        \"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex justify-between pa4 pt0 pb2 nt1\"],[8],[0,\"\\n            \"],[7,\"span\",true],[10,\"class\",\"f8 midlightgrey\"],[8],[1,[23,0,[\"subData\",\"startDateLabel\"]],false],[9],[0,\"\\n            \"],[7,\"span\",true],[10,\"class\",\"f8 midlightgrey\"],[8],[0,\"Today\"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n\"],[0,\"    \"],[7,\"div\",true],[10,\"class\",\"flex flex-column justify-between gh-members-chart-summary bg-white br3 shadow-1 bg-grouped-table\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex-auto flex flex-column justify-center items-start pa4 bb b--whitegrey\"],[8],[0,\"\\n            \"],[7,\"h3\",true],[10,\"class\",\"f-small ttu midgrey fw5\"],[8],[0,\"Total Members\"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-members-chart-summary-data\"],[8],[1,[23,0,[\"subData\",\"totalSubs\"]],false],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex-auto flex flex-column justify-center items-start pa4 bb b--whitegrey\"],[8],[0,\"\\n\"],[4,\"if\",[[28,\"eq\",[[23,0,[\"range\"]],\"all-time\"],null]],null,{\"statements\":[[0,\"                \"],[7,\"h3\",true],[10,\"class\",\"f-small ttu midgrey fw5\"],[8],[0,\"All time signups\"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                \"],[7,\"h3\",true],[10,\"class\",\"f-small ttu midgrey fw5\"],[8],[0,\"Signed up in the last \"],[1,[23,0,[\"range\"]],false],[0,\" days\"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"            \"],[7,\"div\",true],[10,\"class\",\"gh-members-chart-summary-data\"],[8],[1,[23,0,[\"subData\",\"totalSubsInRange\"]],false],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex-auto flex flex-column justify-center items-start pa4\"],[8],[0,\"\\n            \"],[7,\"h3\",true],[10,\"class\",\"f-small ttu midgrey fw5\"],[8],[0,\"Signed up today\"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-members-chart-summary-data\"],[8],[1,[23,0,[\"subData\",\"totalSubsToday\"]],false],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-members-chart.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-members-contentfilter", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "2YCaJdU1",
    "block": "{\"symbols\":[\"label\",\"@onLabelEdit\",\"@selectedLabel\",\"@onLabelChange\",\"@availableLabels\",\"@onLabelAdd\"],\"statements\":[[7,\"span\",true],[10,\"class\",\"dropdown dropdown-topmenu\"],[8],[0,\"\\n    \"],[5,\"gh-dropdown-button\",[],[[\"@dropdownName\",\"@classNames\",\"@title\",\"@data-test-user-actions\"],[\"members-label-menu\",\"gh-btn gh-btn-white gh-btn-filter first\",\"Member Labels\",\"true\"]],{\"statements\":[[0,\"\\n        \"],[7,\"span\",true],[11,\"class\",[29,[\"nudge-bottom--1 \",[28,\"if\",[[23,3,[\"slug\"]],\"blue fw6\"],null],\" gh-btn-filter-maxwidth\"]]],[11,\"title\",[29,[[23,3,[\"name\"]]]]],[8],[0,\"\\n            \"],[7,\"span\",true],[8],[1,[23,3,[\"name\"]],false],[9],[0,\"\\n            \"],[1,[28,\"svg-jar\",[\"arrow-down-stroke\"],[[\"class\"],[\"w2 h2 stroke-midgrey ml1\"]]],false],[0,\"\\n        \"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n    \"],[5,\"gh-dropdown\",[],[[\"@name\",\"@tagName\",\"@classNames\"],[\"members-label-menu\",\"div\",\"dropdown-menu dropdown-triangle-top-right dropdown-action\"]],{\"statements\":[[0,\"\\n        \"],[7,\"ul\",true],[10,\"class\",\"dropdown-content\"],[8],[0,\"\\n\"],[4,\"each\",[[23,5,[]]],null,{\"statements\":[[0,\"                \"],[7,\"li\",true],[11,\"class\",[29,[[28,\"if\",[[28,\"eq\",[[23,3,[\"name\"]],[23,1,[\"name\"]]],null],\"selected\"],null]]]],[8],[0,\"\\n                    \"],[7,\"a\",true],[8],[0,\"\\n                        \"],[7,\"span\",false],[12,\"class\",\"dropdown-label\"],[12,\"title\",[29,[[23,1,[\"name\"]]]]],[3,\"on\",[\"click\",[28,\"fn\",[[23,4,[]],[23,1,[]]],null]]],[8],[1,[23,1,[\"name\"]],false],[0,\" \"],[9],[0,\"\\n\"],[4,\"if\",[[23,1,[\"slug\"]]],null,{\"statements\":[[0,\"                            \"],[7,\"span\",false],[12,\"class\",\"dropdown-action-icon\"],[3,\"on\",[\"click\",[28,\"fn\",[[23,2,[]],[23,1,[\"slug\"]]],null]]],[8],[0,\" \"],[1,[28,\"svg-jar\",[\"pen\"],null],false],[0,\" \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"        \"],[9],[0,\"\\n        \"],[7,\"ul\",true],[10,\"class\",\"dropdown-footer\"],[8],[0,\"\\n            \"],[7,\"li\",true],[8],[0,\"\\n                \"],[7,\"a\",false],[3,\"on\",[\"click\",[28,\"fn\",[[23,6,[]]],null]]],[8],[0,\"\\n                    \"],[7,\"span\",true],[8],[0,\"\\n                        \"],[1,[28,\"svg-jar\",[\"add\"],null],false],[0,\"\\n                        Add Label\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-members-contentfilter.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-members-lab-setting", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "yIxIvZO5",
    "block": "{\"symbols\":[\"region\"],\"statements\":[[7,\"div\",true],[10,\"class\",\"flex flex-column b--whitegrey bt\"],[8],[0,\"\\n\\n    \"],[7,\"section\",true],[10,\"class\",\"bb b--whitegrey pa5\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex justify-between\"],[8],[0,\"\\n            \"],[7,\"div\",true],[8],[0,\"\\n                \"],[7,\"h4\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Connect to Stripe\"],[9],[0,\"\\n                \"],[7,\"p\",true],[10,\"class\",\"gh-setting-desc pa0 ma0\"],[8],[0,\"Configure API keys to create subscriptions and take payments\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[8],[0,\"\\n                \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-toggle-membersstripe\",\"\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],[28,\"toggle\",[\"membersStripeOpen\",[23,0,[]]],null]]],[8],[7,\"span\",true],[8],[1,[28,\"if\",[[23,0,[\"membersStripeOpen\"]],\"Close\",\"Expand\"],null],false],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n\"],[4,\"liquid-if\",[[23,0,[\"membersStripeOpen\"]]],null,{\"statements\":[[0,\"            \"],[7,\"div\",true],[10,\"class\",\"flex flex-column flex-row-l items-start justify-between mb4 mt6\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"w-100 w-50-l\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"mb4\"],[8],[0,\"\\n                        \"],[7,\"label\",true],[10,\"class\",\"fw6 f8\"],[8],[0,\"Stripe Publishable key\"],[9],[0,\"\\n                        \"],[5,\"gh-text-input\",[],[[\"@type\",\"@value\",\"@input\",\"@class\"],[\"password\",[28,\"readonly\",[[23,0,[\"subscriptionSettings\",\"stripeConfig\",\"public_token\"]]],null],[28,\"action\",[[23,0,[]],\"setSubscriptionSettings\",\"public_token\"],null],\"mt1 password\"]]],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"nudge-top--3\"],[8],[0,\"\\n                        \"],[7,\"label\",true],[10,\"class\",\"fw6 f8 mt4\"],[8],[0,\"Stripe Secret key\"],[9],[0,\"\\n                        \"],[5,\"gh-text-input\",[],[[\"@type\",\"@value\",\"@input\",\"@class\"],[\"password\",[28,\"readonly\",[[23,0,[\"subscriptionSettings\",\"stripeConfig\",\"secret_token\"]]],null],[28,\"action\",[[23,0,[]],\"setSubscriptionSettings\",\"secret_token\"],null],\"mt1 password\"]]],[0,\"\\n                        \"],[7,\"a\",true],[10,\"href\",\"https://dashboard.stripe.com/account/apikeys\"],[10,\"target\",\"_blank\"],[10,\"class\",\"mt1 fw4 f8\"],[8],[0,\"\\n                            Find your Stripe API keys here »\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"ml0 ml5-l mt6\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-members-stripe-info\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"gh-members-stripe-info-header\"],[8],[0,\"\\n                            \"],[7,\"h4\",true],[8],[0,\"How you get paid\"],[9],[0,\"\\n                            \"],[1,[28,\"svg-jar\",[\"stripe-verified-partner-badge\"],[[\"class\"],[\"gh-members-stripe-badge\"]]],false],[0,\"\\n                        \"],[9],[0,\"\\n                        \"],[7,\"p\",true],[10,\"class\",\"f8 mt2 mb0\"],[8],[0,\"\\n                            Stripe is our exclusive direct payments partner.\"],[7,\"br\",true],[8],[9],[0,\"\\n                            Ghost collects \"],[7,\"strong\",true],[8],[0,\"no fees\"],[9],[0,\" on any payments! If you don’t have a Stripe account yet, you can \"],[7,\"a\",true],[10,\"href\",\"https://stripe.com\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener\"],[10,\"class\",\"gh-members-stripe-link\"],[8],[0,\"sign up here\"],[9],[0,\".\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[9],[0,\"\\n\\n    \"],[7,\"section\",true],[10,\"class\",\"bb b--whitegrey pa5\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex justify-between\"],[8],[0,\"\\n            \"],[7,\"div\",true],[8],[0,\"\\n                \"],[7,\"h4\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Subscription pricing\"],[9],[0,\"\\n                \"],[7,\"p\",true],[10,\"class\",\"gh-setting-desc pa0 ma0\"],[8],[0,\"Set monthly and yearly recurring subscription prices\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[8],[0,\"\\n                \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-toggle-memberspricing\",\"\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],[28,\"toggle\",[\"membersPricingOpen\",[23,0,[]]],null]]],[8],[7,\"span\",true],[8],[1,[28,\"if\",[[23,0,[\"membersPricingOpen\"]],\"Close\",\"Expand\"],null],false],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n\"],[4,\"liquid-if\",[[23,0,[\"membersPricingOpen\"]]],null,{\"statements\":[[0,\"            \"],[7,\"div\",true],[10,\"class\",\"w-100 w-50-l flex flex-column flex-row-ns mt8\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"w-100\"],[8],[0,\"\\n                    \"],[5,\"gh-form-group\",[],[[\"@class\"],[\"for-select\"]],{\"statements\":[[0,\"\\n                        \"],[7,\"label\",true],[10,\"class\",\"fw6 f8\"],[10,\"for\",\"currency\"],[8],[0,\"Plan currency\"],[9],[0,\"\\n                        \"],[7,\"span\",true],[10,\"class\",\"gh-select mt1\"],[8],[0,\"\\n                            \"],[1,[28,\"one-way-select\",[[23,0,[\"selectedCurrency\"]]],[[\"id\",\"name\",\"options\",\"optionValuePath\",\"optionLabelPath\",\"update\"],[\"currency\",\"currency\",[28,\"readonly\",[[23,0,[\"currencies\"]]],null],\"value\",\"label\",[28,\"action\",[[23,0,[]],\"setSubscriptionSettings\",\"currency\"],null]]]],false],[0,\"\\n                            \"],[1,[28,\"svg-jar\",[\"arrow-down-small\"],null],false],[0,\"\\n                        \"],[9],[0,\"\\n                    \"]],\"parameters\":[]}],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"w-100 w-50-l flex flex-column flex-row-ns\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"w-100 w-50-ns mr3-ns\"],[8],[0,\"\\n                    \"],[5,\"gh-form-group\",[],[[],[]],{\"statements\":[[0,\"\\n                    \"],[7,\"label\",true],[10,\"class\",\"fw6 f8\"],[8],[0,\"Monthly price\"],[9],[0,\"\\n\\n                    \"],[7,\"div\",true],[10,\"class\",\"flex items-center justify-center mt1 gh-input-group gh-labs-price-label\"],[8],[0,\"\\n                        \"],[5,\"gh-text-input\",[],[[\"@value\",\"@type\",\"@input\"],[[28,\"readonly\",[[23,0,[\"subscriptionSettings\",\"stripeConfig\",\"plans\",\"monthly\",\"amount\"]]],null],\"number\",[28,\"action\",[[23,0,[]],\"setSubscriptionSettings\",\"month\"],null]]]],[0,\"\\n                        \"],[7,\"span\",true],[10,\"class\",\"gh-input-append\"],[8],[7,\"span\",true],[10,\"class\",\"ttu\"],[8],[1,[23,0,[\"subscriptionSettings\",\"stripeConfig\",\"plans\",\"monthly\",\"currency\"]],false],[9],[0,\"/month\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"]],\"parameters\":[]}],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"w-100 w-50-ns ml2-ns\"],[8],[0,\"\\n                    \"],[5,\"gh-form-group\",[],[[\"@class\"],[\"description-container\"]],{\"statements\":[[0,\"\\n                    \"],[7,\"label\",true],[10,\"class\",\"fw6 f8\"],[8],[0,\"Yearly price\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"flex items-center justify-center mt1 gh-input-group gh-labs-price-label\"],[8],[0,\"\\n                        \"],[5,\"gh-text-input\",[],[[\"@value\",\"@type\",\"@input\"],[[28,\"readonly\",[[23,0,[\"subscriptionSettings\",\"stripeConfig\",\"plans\",\"yearly\",\"amount\"]]],null],\"number\",[28,\"action\",[[23,0,[]],\"setSubscriptionSettings\",\"year\"],null]]]],[0,\"\\n                        \"],[7,\"span\",true],[10,\"class\",\"gh-input-append\"],[8],[7,\"span\",true],[10,\"class\",\"ttu\"],[8],[1,[23,0,[\"subscriptionSettings\",\"stripeConfig\",\"plans\",\"yearly\",\"currency\"]],false],[9],[0,\"/year\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"]],\"parameters\":[]}],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[9],[0,\"\\n\\n    \"],[7,\"section\",true],[10,\"class\",\"bb b--whitegrey pa5\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex justify-between\"],[8],[0,\"\\n            \"],[7,\"div\",true],[8],[0,\"\\n                \"],[7,\"h4\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Allow free member signup\"],[9],[0,\"\\n                \"],[7,\"p\",true],[10,\"class\",\"gh-setting-desc pa0 ma0\"],[8],[0,\"If disabled, members can only be signed up via payment checkout or API integration\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"for-switch\"],[8],[0,\"\\n                    \"],[7,\"label\",false],[12,\"class\",\"switch\"],[12,\"for\",\"members-allow-self-signup\"],[3,\"action\",[[23,0,[]],\"setSubscriptionSettings\",\"allowSelfSignup\"],[[\"bubbles\"],[\"false\"]]],[8],[0,\"\\n                        \"],[7,\"input\",true],[11,\"checked\",[23,0,[\"subscriptionSettings\",\"allowSelfSignup\"]]],[10,\"class\",\"gh-input\"],[11,\"onclick\",[28,\"action\",[[23,0,[]],\"setSubscriptionSettings\",\"allowSelfSignup\"],null]],[10,\"data-test-checkbox\",\"members-allow-self-signup\"],[10,\"type\",\"checkbox\"],[8],[9],[0,\"\\n                        \"],[7,\"span\",true],[10,\"class\",\"input-toggle-component mt1\"],[8],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"section\",true],[10,\"class\",\"bb b--whitegrey pa5\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex justify-between\"],[8],[0,\"\\n            \"],[7,\"div\",true],[8],[0,\"\\n                \"],[7,\"h4\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Default post access\"],[9],[0,\"\\n                \"],[7,\"p\",true],[10,\"class\",\"gh-setting-desc pa0 ma0\"],[8],[0,\"When a new post is created, who should have access to it?\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[8],[0,\"\\n                \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-toggle-memberspostaccess\",\"\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],[28,\"toggle\",[\"membersPostAccessOpen\",[23,0,[]]],null]]],[8],[7,\"span\",true],[8],[1,[28,\"if\",[[23,0,[\"membersPostAccessOpen\"]],\"Close\",\"Expand\"],null],false],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n\"],[4,\"liquid-if\",[[23,0,[\"membersPostAccessOpen\"]]],null,{\"statements\":[[0,\"        \"],[7,\"div\",true],[10,\"class\",\"flex flex-column w-50 flex mt8\"],[8],[0,\"\\n            \"],[7,\"div\",false],[12,\"class\",[29,[\"gh-radio \",[28,\"if\",[[28,\"eq\",[[24,[\"settings\",\"defaultContentVisibility\"]],\"public\"],null],\"active\"],null]]]],[3,\"action\",[[23,0,[]],\"setDefaultContentVisibility\",\"public\"],[[\"on\"],[\"click\"]]],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-radio-button\"],[10,\"data-test-publishmenu-unpublished-option\",\"\"],[8],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-radio-content\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-radio-label\"],[8],[0,\"Public\"],[7,\"br\",true],[8],[9],[0,\"\\n                    \"],[7,\"small\",true],[10,\"class\",\"midgrey\"],[8],[0,\"All site visitors to your site, no login required\"],[9],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\\n            \"],[7,\"div\",false],[12,\"class\",[29,[\"gh-radio \",[28,\"if\",[[28,\"eq\",[[24,[\"settings\",\"defaultContentVisibility\"]],\"members\"],null],\"active\"],null]]]],[3,\"action\",[[23,0,[]],\"setDefaultContentVisibility\",\"members\"],[[\"on\"],[\"click\"]]],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-radio-button\"],[10,\"data-test-publishmenu-published-option\",\"\"],[8],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-radio-content\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-radio-label\"],[8],[0,\"Members only\"],[7,\"br\",true],[8],[9],[0,\"\\n                    \"],[7,\"small\",true],[10,\"class\",\"midgrey\"],[8],[0,\"All logged-in members\"],[9],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\\n            \"],[7,\"div\",false],[12,\"class\",[29,[\"gh-radio \",[28,\"if\",[[28,\"eq\",[[24,[\"settings\",\"defaultContentVisibility\"]],\"paid\"],null],\"active\"],null]]]],[3,\"action\",[[23,0,[]],\"setDefaultContentVisibility\",\"paid\"],[[\"on\"],[\"click\"]]],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-radio-button\"],[10,\"data-test-publishmenu-published-option\",\"\"],[8],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-radio-content\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-radio-label\"],[8],[0,\"Paid-members only\"],[7,\"br\",true],[8],[9],[0,\"\\n                    \"],[7,\"small\",true],[10,\"class\",\"midgrey\"],[8],[0,\"Only logged-in members with an active Stripe subscription\"],[9],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[9],[0,\"\\n\\n    \"],[7,\"section\",true],[10,\"class\",\"bb b--whitegrey pa5\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex justify-between\"],[8],[0,\"\\n            \"],[7,\"div\",true],[8],[0,\"\\n                \"],[7,\"h4\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Email settings\"],[9],[0,\"\\n                \"],[7,\"p\",true],[10,\"class\",\"gh-setting-desc pa0 ma0\"],[8],[0,\"Customise signup, signin and subscription emails\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[8],[0,\"\\n                \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-toggle-membersemail\",\"\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],[28,\"toggle\",[\"membersEmailOpen\",[23,0,[]]],null]]],[8],[7,\"span\",true],[8],[1,[28,\"if\",[[23,0,[\"membersEmailOpen\"]],\"Close\",\"Expand\"],null],false],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n\"],[4,\"liquid-if\",[[23,0,[\"membersEmailOpen\"]]],null,{\"statements\":[[0,\"        \"],[7,\"div\",true],[10,\"class\",\"flex flex-column w-100 w-50-l flex mt8\"],[8],[0,\"\\n            \"],[5,\"gh-form-group\",[],[[],[]],{\"statements\":[[0,\"\\n                \"],[7,\"label\",true],[10,\"class\",\"fw6 f8\"],[8],[0,\"From Address\"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"flex items-center justify-center mt1 gh-input-group\"],[8],[0,\"\\n                    \"],[5,\"gh-text-input\",[],[[\"@value\",\"@input\",\"@class\"],[[28,\"readonly\",[[23,0,[\"subscriptionSettings\",\"fromAddress\"]]],null],[28,\"action\",[[23,0,[]],\"setSubscriptionSettings\",\"fromAddress\"],null],\"w20\"]]],[0,\"\\n                    \"],[7,\"span\",true],[10,\"class\",\"gh-input-append\"],[8],[0,\" @\"],[1,[23,0,[\"blogDomain\"]],false],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"f8 fw4 midgrey mt1\"],[8],[0,\"Your members will receive system emails from this address\"],[9],[0,\"\\n            \"]],\"parameters\":[]}],[0,\"\\n\\n\"],[4,\"unless\",[[23,0,[\"hasBulkEmailConfig\"]]],null,{\"statements\":[[0,\"                \"],[7,\"div\",true],[10,\"class\",\"flex items-center\"],[8],[0,\"\\n                    \"],[5,\"gh-form-group\",[],[[\"@class\"],[\"gh-labs-mailgun-region\"]],{\"statements\":[[0,\"\\n                        \"],[7,\"label\",true],[10,\"class\",\"fw6 f8\"],[8],[0,\"Mailgun region\"],[9],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"mt1\"],[8],[0,\"\\n                            \"],[5,\"power-select\",[],[[\"@options\",\"@selected\",\"@onChange\",\"@searchEnabled\"],[[23,0,[\"mailgunRegions\"]],[23,0,[\"mailgunRegion\"]],[28,\"action\",[[23,0,[]],\"setBulkEmailRegion\"],null],false]],{\"statements\":[[0,\"\\n                                \"],[1,[23,1,[\"flag\"]],false],[0,\" \"],[1,[23,1,[\"name\"]],false],[0,\"\\n                            \"]],\"parameters\":[1]}],[0,\"\\n                        \"],[9],[0,\"\\n                    \"]],\"parameters\":[]}],[0,\"\\n                    \"],[5,\"gh-form-group\",[],[[],[]],{\"statements\":[[0,\"\\n                        \"],[7,\"label\",true],[10,\"class\",\"fw6 f8\"],[8],[0,\"Mailgun domain\"],[9],[0,\"\\n                        \"],[5,\"gh-text-input\",[],[[\"@value\",\"@input\",\"@class\"],[[28,\"readonly\",[[23,0,[\"bulkEmailSettings\",\"domain\"]]],null],[28,\"action\",[[23,0,[]],\"setBulkEmailSettings\",\"domain\"],null],\"mt1\"]]],[0,\"\\n                    \"]],\"parameters\":[]}],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"nt5 mb5\"],[8],[0,\"\\n                    \"],[7,\"a\",true],[10,\"href\",\"https://app.mailgun.com/app/sending/domains\"],[10,\"target\",\"_blank\"],[10,\"class\",\"mt1 fw4 f8\"],[8],[0,\"\\n                        Find your Mailgun region and domain here »\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[5,\"gh-form-group\",[],[[],[]],{\"statements\":[[0,\"\\n                    \"],[7,\"label\",true],[10,\"class\",\"fw6 f8\"],[8],[0,\"Mailgun API key\"],[9],[0,\"\\n                    \"],[5,\"gh-text-input\",[],[[\"@type\",\"@value\",\"@input\",\"@class\",\"@autocomplete\"],[\"password\",[28,\"readonly\",[[23,0,[\"bulkEmailSettings\",\"apiKey\"]]],null],[28,\"action\",[[23,0,[]],\"setBulkEmailSettings\",\"apiKey\"],null],\"mt1 password\",\"new-password\"]]],[0,\"\\n                    \"],[7,\"a\",true],[10,\"href\",\"https://app.mailgun.com/app/account/security/api_keys\"],[10,\"target\",\"_blank\"],[10,\"class\",\"mt1 fw4 f8\"],[8],[0,\"\\n                        Find your Mailgun API keys here »\\n                    \"],[9],[0,\"\\n                \"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[9],[0,\"\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-members-lab-setting.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-members-list-item", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "Jtz9B4Qu",
    "block": "{\"symbols\":[\"@member\",\"&attrs\"],\"statements\":[[7,\"li\",false],[12,\"class\",\"gh-list-row gh-members-list-item\"],[13,2],[8],[0,\"\\n    \"],[5,\"link-to\",[[12,\"title\",\"Member details\"],[12,\"class\",\"gh-list-data gh-members-list-basic\"]],[[\"@route\",\"@model\"],[\"member\",[23,1,[]]]],{\"statements\":[[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex items-center\"],[8],[0,\"\\n            \"],[5,\"gh-member-avatar\",[],[[\"@member\",\"@containerClass\"],[[23,1,[]],\"w9 h9 mr3\"]]],[0,\"\\n            \"],[7,\"div\",true],[8],[0,\"\\n                \"],[7,\"h3\",true],[11,\"class\",[29,[\"ma0 pa0 gh-members-list-name \",[28,\"if\",[[28,\"not\",[[23,1,[\"name\"]]],null],\"gh-members-name-noname\"],null]]]],[8],[1,[28,\"or\",[[23,1,[\"name\"]],[23,1,[\"email\"]]],null],false],[9],[0,\"\\n\"],[4,\"if\",[[23,1,[\"name\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"p\",true],[10,\"class\",\"ma0 pa0 middarkgrey f8 gh-members-list-email\"],[8],[1,[23,1,[\"email\"]],false],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n    \"],[5,\"link-to\",[[12,\"title\",\"Member details\"],[12,\"class\",[29,[\"gh-list-data gh-members-list-geolocation gh-list-cellwidth-20 nowrap middarkgrey f8 \",[28,\"if\",[[28,\"not\",[[23,1,[\"name\"]]],null],\"gh-members-geolocation-noname\"],null]]]]],[[\"@route\",\"@model\"],[\"member\",[23,1,[]]]],{\"statements\":[[0,\"\\n\"],[4,\"if\",[[23,1,[\"geolocation\"]]],null,{\"statements\":[[4,\"if\",[[28,\"eq\",[[23,1,[\"geolocation\",\"country_code\"]],\"US\"],null]],null,{\"statements\":[[0,\"                \"],[1,[23,1,[\"geolocation\",\"region\"]],false],[0,\", US\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                \"],[1,[23,1,[\"geolocation\",\"country\"]],false],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},{\"statements\":[[0,\"            \"],[7,\"span\",true],[10,\"class\",\"midlightgrey\"],[8],[0,\"Unknown\"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"    \"]],\"parameters\":[]}],[0,\"\\n\\n    \"],[5,\"link-to\",[[12,\"title\",\"Member details\"],[12,\"class\",[29,[\"gh-list-data gh-members-list-subscribed-at gh-list-cellwidth-20 nowrap middarkgrey f8 \",[28,\"if\",[[28,\"not\",[[23,1,[\"name\"]]],null],\"gh-members-subscribed-noname\"],null]]]]],[[\"@route\",\"@model\"],[\"member\",[23,1,[]]]],{\"statements\":[[0,\"\\n        \"],[1,[28,\"moment-format\",[[23,1,[\"createdAtUTC\"]],\"MMM DD, YYYY\"],null],false],[0,\" \"],[7,\"span\",true],[10,\"class\",\"midlightgrey\"],[8],[0,\"(\"],[1,[23,0,[\"memberSince\"]],false],[0,\")\"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n    \"],[5,\"link-to\",[[12,\"title\",\"Member details\"],[12,\"class\",\"gh-list-data gh-list-cellwidth-chevron gh-members-list-chevron\"]],[[\"@route\",\"@model\"],[\"member\",[23,1,[]]]],{\"statements\":[[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex items-center justify-end w-100 h-100\"],[8],[0,\"\\n            \"],[7,\"span\",true],[10,\"class\",\"nr2\"],[8],[1,[28,\"svg-jar\",[\"arrow-right\"],[[\"class\"],[\"w6 h6 fill-midgrey pa1\"]]],false],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-members-list-item.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-members-no-members", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "9dGTnPV2",
    "block": "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"class\",\"flex flex-column items-stretch\"],[8],[0,\"\\n\"],[0,\"    \"],[7,\"button\",true],[10,\"class\",\"gh-btn gh-btn-green\"],[11,\"onclick\",[28,\"action\",[[23,0,[]],\"addYourself\"],null]],[8],[0,\"\\n        \"],[7,\"span\",true],[8],[0,\"Add yourself as a member to test\"],[9],[0,\"\\n    \"],[9],[0,\"\\n    \\n    \"],[7,\"div\",true],[10,\"class\",\"flex flex-column items-stretch mt8 pt8 pb10 bt b--lightgrey-d1\"],[8],[0,\"\\n        \"],[5,\"link-to\",[[12,\"class\",\"gh-btn gh-btn-outline mb3\"]],[[\"@route\"],[\"member.new\"]],{\"statements\":[[0,\"\\n            \"],[7,\"span\",true],[8],[0,\"Manually add a member\"],[9],[0,\"\\n        \"]],\"parameters\":[]}],[0,\"\\n        \\n        \"],[5,\"link-to\",[[12,\"class\",\"gh-btn gh-btn-outline\"]],[[\"@route\"],[\"members.import\"]],{\"statements\":[[0,\"\\n            \"],[7,\"span\",true],[8],[0,\"Import members from CSV\"],[9],[0,\"\\n        \"]],\"parameters\":[]}],[0,\"\\n    \"],[9],[0,\"\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-members-no-members.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-mobile-nav-bar", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "cDMx+9sf",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[5,\"link-to\",[[12,\"data-test-mobile-nav\",\"new-post\"]],[[\"@route\",\"@model\"],[\"editor.new\",\"post\"]],{\"statements\":[[1,[28,\"svg-jar\",[\"pen\"],null],false],[0,\"New post\"]],\"parameters\":[]}],[0,\"\\n\"],[4,\"if\",[[28,\"eq\",[[23,0,[\"router\",\"currentRouteName\"]],\"posts\"],null]],null,{\"statements\":[[0,\"    \"],[5,\"link-to\",[[12,\"data-test-mobile-nav\",\"posts\"]],[[\"@route\",\"@query\",\"@classNames\"],[\"posts\",[28,\"hash\",null,[[\"type\"],[null]]],\"active\"]],{\"statements\":[[1,[28,\"svg-jar\",[\"content\"],null],false],[0,\"Posts\"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[5,\"link-to\",[],[[\"@route\"],[\"posts\"]],{\"statements\":[[1,[28,\"svg-jar\",[\"content\"],[[\"data-test-mobile-nav\"],[\"posts\"]]],false],[0,\"Posts\"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[]}],[5,\"link-to\",[[12,\"data-test-mobile-nav\",\"staff\"]],[[\"@route\",\"@classNames\"],[\"staff\",\"gh-nav-main-users\"]],{\"statements\":[[1,[28,\"svg-jar\",[\"account-group\"],null],false],[0,\"Staff\"]],\"parameters\":[]}],[0,\"\\n\"],[7,\"div\",false],[12,\"class\",\"gh-mobile-nav-bar-more\"],[3,\"action\",[[23,0,[]],\"openMobileMenu\"],[[\"target\",\"data-test-mobile-nav\"],[[23,0,[\"ui\"]],\"more\"]]],[8],[1,[28,\"svg-jar\",[\"icon\"],[[\"class\"],[\"icon-gh\"]]],false],[0,\"More\"],[9],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-mobile-nav-bar.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-mobiledoc", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "TbZ2Miax",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-mobiledoc.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-modal-dialog", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "CYb0nXqL",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[7,\"div\",false],[12,\"class\",\"modal-container js-modal-container\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[0,\"\\n    \"],[7,\"article\",true],[11,\"class\",[29,[[22,\"klass\"],\" js-modal\"]]],[8],[0,\"\\n        \"],[7,\"section\",false],[12,\"class\",\"modal-content\"],[3,\"action\",[[23,0,[]],\"noBubble\"],[[\"bubbles\",\"preventDefault\"],[false,false]]],[8],[0,\"\\n            \"],[4,\"if\",[[24,[\"title\"]]],null,{\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header\"],[8],[7,\"h1\",true],[8],[1,[22,\"title\"],false],[9],[9]],\"parameters\":[]},null],[0,\"\\n            \"],[4,\"if\",[[24,[\"showClose\"]]],null,{\"statements\":[[7,\"a\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9]],\"parameters\":[]},null],[0,\"\\n            \"],[7,\"section\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n                \"],[14,1],[0,\"\\n            \"],[9],[0,\"\\n\"],[4,\"if\",[[24,[\"confirm\"]]],null,{\"statements\":[[0,\"            \"],[7,\"footer\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n\"],[0,\"                \"],[7,\"button\",false],[12,\"class\",[29,[[22,\"rejectButtonClass\"],\" btn-minor\"]]],[12,\"data-test-modal-reject-button\",\"\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],\"confirm\",\"reject\"]],[8],[1,[24,[\"confirm\",\"reject\",\"text\"]],false],[9],[7,\"button\",false],[12,\"class\",[29,[[22,\"acceptButtonClass\"]]]],[12,\"data-test-modal-accept-button\",\"\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],\"confirm\",\"accept\"]],[8],[1,[24,[\"confirm\",\"accept\",\"text\"]],false],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"div\",true],[10,\"class\",\"modal-background js-modal-background\"],[8],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-modal-dialog.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-nav-menu", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "40YGqVgo",
    "block": "{\"symbols\":[\"dropdown\",\"menuItem\",\"menuItem\",\"view\"],\"statements\":[[7,\"header\",true],[10,\"class\",\"gh-nav-menu\"],[8],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-nav-menu-details\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-nav-menu-icon\"],[11,\"style\",[23,0,[\"iconStyle\"]]],[8],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-nav-menu-details-blog\"],[8],[1,[23,0,[\"config\",\"blogTitle\"]],false],[9],[0,\"\\n    \"],[9],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-nav-menu-search\"],[8],[0,\"\\n        \"],[7,\"button\",false],[12,\"class\",\"gh-nav-btn-search\"],[12,\"title\",\"Search site (Ctrl/⌘ + K)\"],[3,\"action\",[[23,0,[]],\"toggleSearchModal\"]],[8],[7,\"span\",true],[8],[1,[28,\"svg-jar\",[\"search\"],[[\"class\"],[\"w4 h4 fill-midgrey\"]]],false],[9],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"showSearchModal\"]]],null,{\"statements\":[[0,\"    \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@close\",\"@modifier\"],[\"search\",[28,\"action\",[[23,0,[]],\"toggleSearchModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[7,\"section\",true],[10,\"class\",\"gh-nav-body\"],[8],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-nav-top\"],[8],[0,\"\\n        \"],[7,\"ul\",true],[10,\"class\",\"gh-nav-list gh-nav-main\"],[8],[0,\"\\n            \"],[7,\"li\",true],[10,\"class\",\"relative\"],[8],[0,\"\\n                \"],[7,\"span\",false],[3,\"action\",[[23,0,[]],\"transitionToOrRefreshSite\"],[[\"on\"],[\"click\"]]],[8],[0,\"\\n                    \"],[5,\"link-to\",[[12,\"data-test-nav\",\"site\"]],[[\"@route\",\"@current-when\",\"@preventDefault\"],[\"site\",[23,0,[\"isOnSite\"]],false]],{\"statements\":[[0,\"\\n                        \"],[1,[28,\"svg-jar\",[\"house\"],null],false],[0,\" View site\\n                    \"]],\"parameters\":[]}],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"a\",true],[11,\"href\",[29,[[23,0,[\"config\",\"blogUrl\"]],\"/\"]]],[10,\"class\",\"gh-secondary-action\"],[10,\"title\",\"Open site in new tab\"],[10,\"target\",\"_blank\"],[8],[0,\"\\n                    \"],[7,\"span\",true],[8],[1,[28,\"svg-jar\",[\"expand\"],null],false],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[7,\"ul\",true],[10,\"class\",\"gh-nav-list gh-nav-manage\"],[8],[0,\"\\n            \"],[7,\"li\",true],[10,\"class\",\"gh-nav-list-h\"],[8],[0,\"Manage\"],[9],[0,\"\\n            \"],[7,\"li\",true],[10,\"class\",\"gh-nav-list-new relative\"],[8],[0,\"\\n                \"],[5,\"gh-link-to-custom-views-index\",[[12,\"data-test-nav\",\"posts\"]],[[\"@route\",\"@query\"],[\"posts\",[28,\"reset-query-params\",[\"posts\"],null]]],{\"statements\":[[1,[28,\"svg-jar\",[\"posts\"],null],false],[0,\"Posts\"]],\"parameters\":[]}],[0,\"\\n                \"],[5,\"link-to\",[[12,\"data-test-nav\",\"new-story\"]],[[\"@route\",\"@model\",\"@classNames\",\"@alt\",\"@title\"],[\"editor.new\",\"post\",\"gh-secondary-action gh-nav-new-post\",\"New post\",\"New post\"]],{\"statements\":[[7,\"span\",true],[8],[1,[28,\"svg-jar\",[\"add-stroke\"],null],false],[9]],\"parameters\":[]}],[0,\"\\n\"],[4,\"if\",[[23,0,[\"customViews\",\"forPosts\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"button\",false],[12,\"class\",[29,[\"absolute left-3 top-2 z-9999 flex items-center pl2 h4 gh-nav-button-expand \",[28,\"if\",[[23,0,[\"navigation\",\"settings\",\"expanded\",\"posts\"]],\"expanded\"],null]]]],[12,\"type\",\"button\"],[3,\"on\",[\"click\",[28,\"fn\",[[23,0,[\"navigation\",\"toggleExpansion\"]],\"posts\"],null]]],[8],[0,\"\\n                        \"],[1,[28,\"svg-jar\",[[28,\"if\",[[23,0,[\"navigation\",\"settings\",\"expanded\",\"posts\"]],\"arrow-down-stroke\",\"arrow-right-stroke\"],null]],null],false],[0,\"\\n                    \"],[9],[0,\"\\n\"],[4,\"liquid-if\",[[23,0,[\"navigation\",\"settings\",\"expanded\",\"posts\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"ul\",true],[10,\"class\",\"gh-nav-view-list\"],[8],[0,\"\\n\"],[4,\"each\",[[23,0,[\"customViews\",\"forPosts\"]]],null,{\"statements\":[[0,\"                                \"],[7,\"li\",true],[8],[0,\"\\n                                    \"],[5,\"link-to\",[[12,\"data-test-nav-custom\",[29,[[23,4,[\"route\"]],\"-\",[23,4,[\"name\"]]]]],[12,\"title\",[29,[[23,4,[\"name\"]]]]]],[[\"@route\",\"@query\"],[\"posts\",[28,\"reset-query-params\",[\"posts\",[23,4,[\"filter\"]]],null]]],{\"statements\":[[0,\"\\n\"],[0,\"                                        \"],[7,\"span\",true],[11,\"class\",[29,[\"flex items-center svg-\",[23,4,[\"color\"]]]]],[8],[0,\"\\n\"],[4,\"if\",[[23,4,[\"icon\"]]],null,{\"statements\":[[0,\"                                                \"],[1,[28,\"svg-jar\",[[28,\"or\",[[23,4,[\"icon\"]],\"post\"],null]],null],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                                \"],[7,\"span\",true],[10,\"class\",\"circle\"],[8],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                                        \"],[9],[0,\"\\n                                        \"],[7,\"span\",true],[10,\"class\",\"gh-nav-viewname\"],[8],[1,[23,4,[\"name\"]],false],[9],[0,\"\\n                                    \"]],\"parameters\":[]}],[0,\"\\n                                \"],[9],[0,\"\\n\"]],\"parameters\":[4]},null],[0,\"                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"            \"],[9],[0,\"\\n            \"],[7,\"li\",true],[8],[0,\"\\n\"],[4,\"if\",[[28,\"eq\",[[23,0,[\"router\",\"currentRouteName\"]],\"pages\"],null]],null,{\"statements\":[[0,\"                    \"],[5,\"link-to\",[[12,\"data-test-nav\",\"pages\"]],[[\"@route\",\"@query\",\"@classNames\"],[\"pages\",[28,\"hash\",null,[[\"type\",\"author\",\"tag\",\"order\"],[null,null,null,null]]],\"active\"]],{\"statements\":[[1,[28,\"svg-jar\",[\"page\"],null],false],[0,\"Pages\"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                    \"],[5,\"link-to\",[[12,\"data-test-nav\",\"pages\"]],[[\"@route\"],[\"pages\"]],{\"statements\":[[1,[28,\"svg-jar\",[\"page\"],null],false],[0,\"Pages\"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[]}],[0,\"            \"],[9],[0,\"\\n\"],[4,\"if\",[[28,\"gh-user-can-admin\",[[23,0,[\"session\",\"user\"]]],null]],null,{\"statements\":[[0,\"                \"],[7,\"li\",true],[8],[5,\"link-to\",[[12,\"data-test-nav\",\"tags\"]],[[\"@route\"],[\"tags\"]],{\"statements\":[[1,[28,\"svg-jar\",[\"tag\"],null],false],[0,\"Tags\"]],\"parameters\":[]}],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"if\",[[28,\"and\",[[23,0,[\"feature\",\"members\"]],[28,\"gh-user-can-admin\",[[23,0,[\"session\",\"user\"]]],null]],null]],null,{\"statements\":[[0,\"                \"],[7,\"li\",true],[8],[0,\"\\n                    \"],[5,\"link-to\",[[12,\"data-test-nav\",\"members\"]],[[\"@route\",\"@current-when\",\"@query\"],[\"members\",\"members member\",[28,\"hash\",null,[[\"label\"],[null]]]]],{\"statements\":[[1,[28,\"svg-jar\",[\"members\"],null],false],[0,\"Members\"]],\"parameters\":[]}],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[7,\"li\",true],[8],[5,\"link-to\",[[12,\"data-test-nav\",\"staff\"]],[[\"@route\"],[\"staff\"]],{\"statements\":[[1,[28,\"svg-jar\",[\"staff\"],null],false],[0,\"Staff\"]],\"parameters\":[]}],[9],[0,\"\\n        \"],[9],[0,\"\\n\"],[4,\"if\",[[28,\"gh-user-can-admin\",[[23,0,[\"session\",\"user\"]]],null]],null,{\"statements\":[[0,\"            \"],[7,\"ul\",true],[10,\"class\",\"gh-nav-list gh-nav-settings\"],[8],[0,\"\\n                \"],[7,\"li\",true],[10,\"class\",\"gh-nav-list-h\"],[8],[0,\"Settings\"],[9],[0,\"\\n                \"],[7,\"li\",true],[8],[5,\"link-to\",[[12,\"data-test-nav\",\"settings\"]],[[\"@route\"],[\"settings.general\"]],{\"statements\":[[1,[28,\"svg-jar\",[\"settings\"],null],false],[0,\"General\"]],\"parameters\":[]}],[9],[0,\"\\n                \"],[7,\"li\",true],[8],[5,\"link-to\",[[12,\"data-test-nav\",\"design\"]],[[\"@route\"],[\"settings.design\"]],{\"statements\":[[1,[28,\"svg-jar\",[\"paintbrush\"],null],false],[0,\"Design\"]],\"parameters\":[]}],[9],[0,\"\\n                \"],[7,\"li\",true],[8],[5,\"link-to\",[[12,\"data-test-nav\",\"code-injection\"]],[[\"@route\"],[\"settings.code-injection\"]],{\"statements\":[[1,[28,\"svg-jar\",[\"brackets\"],null],false],[0,\"Code injection\"]],\"parameters\":[]}],[9],[0,\"\\n                \"],[7,\"li\",true],[8],[5,\"link-to\",[[12,\"data-test-nav\",\"integrations\"]],[[\"@route\",\"@current-when\"],[\"settings.integrations\",[23,0,[\"isIntegrationRoute\"]]]],{\"statements\":[[1,[28,\"svg-jar\",[\"modules\"],null],false],[0,\"Integrations\"]],\"parameters\":[]}],[9],[0,\"\\n                \"],[7,\"li\",true],[10,\"class\",\"relative\"],[8],[0,\"\\n                    \"],[7,\"button\",false],[12,\"class\",\"gh-secondary-action\"],[12,\"title\",\"Toggle Night shift\"],[3,\"action\",[[23,0,[]],[28,\"toggle\",[\"nightShift\",[23,0,[\"feature\"]]],null]]],[8],[0,\"\\n                        \"],[7,\"span\",true],[8],[1,[28,\"svg-jar\",[\"nightshift\"],null],false],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[5,\"link-to\",[[12,\"data-test-nav\",\"labs\"]],[[\"@route\"],[\"settings.labs\"]],{\"statements\":[[1,[28,\"svg-jar\",[\"labs\"],null],false],[0,\"Labs\"]],\"parameters\":[]}],[0,\"\\n                \"],[9],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showBilling\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"li\",true],[10,\"class\",\"relative\"],[8],[0,\"\\n                        \"],[5,\"link-to\",[[12,\"data-test-nav\",\"billing\"]],[[\"@route\"],[\"billing\"]],{\"statements\":[[0,\"\\n                            \"],[1,[28,\"svg-jar\",[\"house\"],null],false],[0,\" View billing\\n                        \"]],\"parameters\":[]}],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showMenuExtension\"]]],null,{\"statements\":[[0,\"            \"],[7,\"ul\",true],[10,\"class\",\"gh-nav-list gh-nav-settings\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"config\",\"clientExtensions\",\"menu\",\"title\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"li\",true],[10,\"class\",\"gh-nav-list-h\"],[8],[1,[23,0,[\"config\",\"clientExtensions\",\"menu\",\"title\"]],false],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"each\",[[23,0,[\"config\",\"clientExtensions\",\"menu\",\"items\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"li\",true],[8],[0,\"\\n                        \"],[7,\"a\",true],[11,\"href\",[29,[[23,3,[\"href\"]]]]],[10,\"target\",\"_blank\"],[8],[1,[28,\"svg-jar\",[[23,3,[\"icon\"]]],null],false],[1,[23,3,[\"text\"]],false],[9],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[3]},null],[0,\"            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showScriptExtension\"]]],null,{\"statements\":[[0,\"            \"],[1,[23,0,[\"config\",\"clientExtensions\",\"script\",\"container\"]],true],[0,\"\\n            \"],[7,\"script\",true],[11,\"src\",[29,[[23,0,[\"config\",\"clientExtensions\",\"script\",\"src\"]]]]],[8],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[9],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-nav-bottom\"],[8],[0,\"\\n        \"],[5,\"gh-basic-dropdown\",[],[[\"@horizontalPosition\",\"@verticalPosition\",\"@calculatePosition\"],[\"left\",\"top\",[23,0,[\"userDropdownPosition\"]]]],{\"statements\":[[0,\"\\n            \"],[6,[23,1,[\"Trigger\"]],[[12,\"class\",\"flex items-center outline-0 pointer space-between pa2 pl4 pr3\"]],[[],[]],{\"statements\":[[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"flex-auto flex items-center\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-user-avatar relative\"],[11,\"style\",[28,\"background-image-style\",[[23,0,[\"session\",\"user\",\"profileImageUrl\"]]],null]],[8],[0,\"\\n                        \"],[4,\"if\",[[23,0,[\"whatsNew\",\"hasNew\"]]],null,{\"statements\":[[7,\"span\",true],[10,\"class\",\"absolute dib bg-blue ba b--white br-100 gh-whats-new-badge-account\"],[8],[9]],\"parameters\":[]},null],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"flex flex-column items-start justify-center\"],[8],[0,\"\\n                        \"],[7,\"span\",true],[11,\"class\",[29,[\"gh-user-name \",[28,\"if\",[[23,0,[\"session\",\"user\",\"name\"]],\"mb1\"],null]]]],[11,\"title\",[29,[[23,0,[\"session\",\"user\",\"name\"]]]]],[8],[1,[23,0,[\"session\",\"user\",\"name\"]],false],[9],[0,\"\\n                        \"],[7,\"span\",true],[10,\"class\",\"gh-user-email\"],[11,\"title\",[29,[[23,0,[\"session\",\"user\",\"email\"]]]]],[8],[1,[23,0,[\"session\",\"user\",\"email\"]],false],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[1,[28,\"svg-jar\",[\"arrow-down\"],[[\"class\"],[\"w3 mr1 fill-darkgrey\"]]],false],[0,\"\\n            \"]],\"parameters\":[]}],[0,\"\\n\\n            \"],[6,[23,1,[\"Content\"]],[[12,\"class\",\"gh-nav-menu-dropdown\"]],[[],[]],{\"statements\":[[0,\"\\n                \"],[7,\"ul\",false],[12,\"class\",\"dropdown-menu dropdown-triangle-top\"],[12,\"role\",\"menu\"],[3,\"action\",[[23,0,[]],[23,1,[\"actions\",\"close\"]]],[[\"on\",\"preventDefault\"],[\"click\",false]]],[8],[0,\"\\n                    \"],[7,\"li\",true],[10,\"role\",\"presentation\"],[8],[0,\"\\n                        \"],[5,\"link-to\",[[12,\"data-test-nav\",\"about\"]],[[\"@route\",\"@classNames\",\"@role\",\"@tabindex\"],[\"about\",\"dropdown-item\",\"menuitem\",\"-1\"]],{\"statements\":[[0,\"\\n                            \"],[1,[28,\"svg-jar\",[\"store\"],null],false],[0,\" About Ghost\\n                        \"]],\"parameters\":[]}],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"li\",true],[10,\"role\",\"presentation\"],[8],[0,\"\\n                        \"],[7,\"button\",false],[12,\"class\",\"dropdown-item\"],[12,\"role\",\"menuitem\"],[12,\"tabindex\",\"-1\"],[3,\"on\",[\"click\",[23,0,[\"whatsNew\",\"showModal\"]]]],[8],[0,\"\\n                            \"],[1,[28,\"svg-jar\",[\"gift\"],null],false],[0,\" What's new?\\n\"],[4,\"if\",[[23,0,[\"whatsNew\",\"hasNew\"]]],null,{\"statements\":[[0,\"                                \"],[7,\"div\",true],[10,\"class\",\"flex-grow-1 flex justify-end\"],[8],[7,\"span\",true],[10,\"class\",\"dib w2 h2 top-0 right-0 bg-blue br-100\"],[8],[9],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"li\",true],[10,\"class\",\"divider\"],[8],[9],[0,\"\\n                    \"],[7,\"li\",true],[10,\"role\",\"presentation\"],[8],[0,\"\\n                        \"],[5,\"link-to\",[[12,\"data-test-nav\",\"user-profile\"]],[[\"@route\",\"@model\",\"@classNames\",\"@role\",\"@tabindex\"],[\"staff.user\",[23,0,[\"session\",\"user\",\"slug\"]],\"dropdown-item\",\"menuitem\",\"-1\"]],{\"statements\":[[0,\"\\n                            \"],[1,[28,\"svg-jar\",[\"user-circle\"],null],false],[0,\" Your Profile\\n                        \"]],\"parameters\":[]}],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"li\",true],[10,\"role\",\"presentation\"],[8],[0,\"\\n                        \"],[7,\"a\",true],[10,\"class\",\"dropdown-item\"],[10,\"role\",\"menuitem\"],[10,\"tabindex\",\"-1\"],[10,\"href\",\"https://ghost.org/docs/\"],[10,\"target\",\"_blank\"],[8],[0,\"\\n                            \"],[1,[28,\"svg-jar\",[\"ambulance\"],null],false],[0,\" Support Center\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"li\",true],[10,\"role\",\"presentation\"],[8],[0,\"\\n                        \"],[7,\"a\",true],[10,\"class\",\"dropdown-item\"],[10,\"role\",\"menuitem\"],[10,\"tabindex\",\"-1\"],[10,\"target\",\"_blank\"],[10,\"href\",\"https://twitter.com/intent/tweet?text=%40Ghost+Hi%21+Can+you+help+me+with+&related=Ghost\"],[10,\"onclick\",\"window.open(this.href, 'twitter-share', 'width=550,height=235');return false;\"],[8],[0,\"\\n                            \"],[1,[28,\"svg-jar\",[\"twitter\"],null],false],[0,\" Tweet @Ghost!\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"li\",true],[10,\"role\",\"presentation\"],[8],[0,\"\\n                        \"],[7,\"a\",true],[10,\"class\",\"dropdown-item\"],[10,\"role\",\"menuitem\"],[10,\"tabindex\",\"-1\"],[10,\"href\",\"https://ghost.org/faq/using-ghost/\"],[10,\"target\",\"_blank\"],[8],[0,\"\\n                            \"],[1,[28,\"svg-jar\",[\"book-open\"],null],false],[0,\" How to Use Ghost\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"li\",true],[10,\"class\",\"divider\"],[8],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"showDropdownExtension\"]]],null,{\"statements\":[[4,\"each\",[[23,0,[\"config\",\"clientExtensions\",\"dropdown\",\"items\"]]],null,{\"statements\":[[4,\"if\",[[23,2,[\"divider\"]]],null,{\"statements\":[[0,\"                                \"],[7,\"li\",true],[10,\"class\",\"divider\"],[8],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                \"],[7,\"li\",true],[10,\"role\",\"presentation\"],[8],[0,\"\\n                                    \"],[7,\"a\",true],[11,\"href\",[29,[[23,2,[\"href\"]]]]],[10,\"target\",\"_blank\"],[11,\"class\",[29,[\"dropdown-item \",[23,2,[\"classes\"]]]]],[10,\"role\",\"menuitem\"],[10,\"tabindex\",\"-1\"],[8],[0,\"\\n                                        \"],[1,[28,\"svg-jar\",[[23,2,[\"icon\"]]],null],false],[0,\" \"],[1,[23,2,[\"text\"]],false],[0,\"\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[2]},null]],\"parameters\":[]},null],[0,\"\\n                    \"],[7,\"li\",true],[10,\"role\",\"presentation\"],[8],[0,\"\\n                        \"],[5,\"link-to\",[],[[\"@route\",\"@classNames\",\"@role\",\"@tabindex\"],[\"signout\",\"dropdown-item user-menu-signout\",\"menuitem\",\"-1\"]],{\"statements\":[[0,\"\\n                            \"],[1,[28,\"svg-jar\",[\"signout\"],null],false],[0,\" Sign Out\\n                        \"]],\"parameters\":[]}],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"]],\"parameters\":[]}],[0,\"\\n        \"]],\"parameters\":[1]}],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[5,\"gh-tour-item\",[],[[\"@throbberId\",\"@target\",\"@throbberAttachment\",\"@popoverTriangleClass\",\"@throbberOffset\"],[\"getting-started\",\".gh-nav-main\",\"middle right\",\"left-top\",\"0px 0px\"]]]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-nav-menu.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-navitem", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "90WyVP3A",
    "block": "{\"symbols\":[],\"statements\":[[4,\"unless\",[[23,0,[\"navItem\",\"isNew\"]]],null,{\"statements\":[[0,\"    \"],[7,\"span\",true],[10,\"class\",\"gh-blognav-grab\"],[8],[0,\"\\n        \"],[1,[28,\"svg-jar\",[\"grab\"],null],false],[0,\"\\n        \"],[7,\"span\",true],[10,\"class\",\"sr-only\"],[8],[0,\"Reorder\"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[7,\"div\",true],[10,\"class\",\"gh-blognav-line\"],[8],[0,\"\\n    \"],[5,\"gh-validation-status-container\",[],[[\"@tagName\",\"@class\",\"@errors\",\"@property\",\"@hasValidated\"],[\"span\",\"gh-blognav-label\",[23,0,[\"navItem\",\"errors\"]],\"label\",[23,0,[\"navItem\",\"hasValidated\"]]]],{\"statements\":[[0,\"\\n        \"],[5,\"gh-trim-focus-input\",[[12,\"data-test-input\",\"label\"]],[[\"@shouldFocus\",\"@placeholder\",\"@value\",\"@input\",\"@keyPress\",\"@focus-out\"],[[23,0,[\"navItem\",\"last\"]],\"Label\",[28,\"readonly\",[[23,0,[\"navItem\",\"label\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"navItem\",\"label\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"clearLabelErrors\"],null],[28,\"action\",[[23,0,[]],\"updateLabel\",[23,0,[\"navItem\",\"label\"]]],null]]]],[0,\"\\n        \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"label\"]],[[\"@errors\",\"@property\"],[[23,0,[\"navItem\",\"errors\"]],\"label\"]]],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n    \"],[5,\"gh-validation-status-container\",[],[[\"@tagName\",\"@class\",\"@errors\",\"@property\",\"@hasValidated\"],[\"span\",\"gh-blognav-url\",[23,0,[\"navItem\",\"errors\"]],\"url\",[23,0,[\"navItem\",\"hasValidated\"]]]],{\"statements\":[[0,\"\\n        \"],[5,\"gh-navitem-url-input\",[[12,\"data-test-input\",\"url\"]],[[\"@baseUrl\",\"@isNew\",\"@url\",\"@update\",\"@clearErrors\"],[[23,0,[\"baseUrl\"]],[23,0,[\"navItem\",\"isNew\"]],[28,\"readonly\",[[23,0,[\"navItem\",\"url\"]]],null],[28,\"action\",[[23,0,[]],\"updateUrl\"],null],[28,\"action\",[[23,0,[]],\"clearUrlErrors\"],null]]]],[0,\"\\n        \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"url\"]],[[\"@errors\",\"@property\"],[[23,0,[\"navItem\",\"errors\"]],\"url\"]]],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"navItem\",\"isNew\"]]],null,{\"statements\":[[0,\"    \"],[7,\"button\",false],[12,\"class\",\"gh-blognav-add\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],\"addItem\",[23,0,[\"navItem\"]]]],[8],[0,\"\\n        \"],[1,[28,\"svg-jar\",[\"add\"],null],false],[7,\"span\",true],[10,\"class\",\"sr-only\"],[8],[0,\"Add\"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[7,\"button\",false],[12,\"class\",\"gh-blognav-delete\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],\"deleteItem\",[23,0,[\"navItem\"]]]],[8],[0,\"\\n        \"],[1,[28,\"svg-jar\",[\"trash\"],null],false],[7,\"span\",true],[10,\"class\",\"sr-only\"],[8],[0,\"Delete\"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-navitem.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-notification", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "lLk2+fP9",
    "block": "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"class\",\"gh-notification-icon\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"message\",\"icon\"]]],null,{\"statements\":[[0,\"        \"],[1,[28,\"svg-jar\",[[23,0,[\"message\",\"icon\"]]],null],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[28,\"eq\",[[23,0,[\"message\",\"type\"]],\"success\"],null]],null,{\"statements\":[[0,\"            \"],[1,[28,\"svg-jar\",[\"check-circle\"],null],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[28,\"eq\",[[23,0,[\"message\",\"type\"]],\"error\"],null]],null,{\"statements\":[[0,\"            \"],[1,[28,\"svg-jar\",[\"warning-stroke\"],null],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[28,\"eq\",[[23,0,[\"message\",\"type\"]],\"warn\"],null]],null,{\"statements\":[[0,\"            \"],[1,[28,\"svg-jar\",[\"warning-stroke\"],null],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"            \"],[1,[28,\"svg-jar\",[\"check-circle\"],null],false],[0,\"\\n        \"]],\"parameters\":[]}]],\"parameters\":[]}]],\"parameters\":[]}]],\"parameters\":[]}],[9],[0,\"\\n\"],[7,\"div\",true],[10,\"class\",\"gh-notification-content\"],[10,\"data-test-text\",\"notification-content\"],[8],[0,\"\\n    \"],[7,\"span\",true],[10,\"class\",\"gh-notification-title\"],[8],[1,[23,0,[\"message\",\"message\"]],false],[9],[0,\"\\n    \\n\"],[4,\"if\",[[23,0,[\"message\",\"description\"]]],null,{\"statements\":[[0,\"        \"],[7,\"p\",true],[8],[1,[23,0,[\"message\",\"description\"]],false],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"message\",\"actions\"]]],null,{\"statements\":[[0,\"        \"],[7,\"span\",true],[10,\"class\",\"gh-notification-actions\"],[8],[1,[23,0,[\"message\",\"actions\"]],false],[9],[0,\"\\n\"]],\"parameters\":[]},null],[9],[0,\"\\n\"],[7,\"button\",false],[12,\"class\",\"gh-notification-close\"],[12,\"data-test-button\",\"close-notification\"],[3,\"action\",[[23,0,[]],\"closeNotification\"]],[8],[0,\"\\n    \"],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-notification.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-notifications", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "2fPoaFgS",
    "block": "{\"symbols\":[\"message\"],\"statements\":[[4,\"each\",[[23,0,[\"messages\"]]],null,{\"statements\":[[0,\"    \"],[5,\"gh-notification\",[],[[\"@message\"],[[23,1,[]]]]],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-notifications.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-post-settings-menu", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "JQzGZRab",
    "block": "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"class\",\"settings-menu-container\"],[8],[0,\"\\n    \"],[7,\"div\",true],[10,\"id\",\"entry-controls\"],[8],[0,\"\\n        \"],[7,\"div\",true],[11,\"class\",[29,[[28,\"if\",[[23,0,[\"isViewingSubview\"]],\"settings-menu-pane-out-left\",\"settings-menu-pane-in\"],null],\" settings-menu settings-menu-pane\"]]],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"settings-menu-header\"],[8],[0,\"\\n                \"],[7,\"h4\",true],[8],[1,[28,\"capitalize\",[[23,0,[\"post\",\"displayName\"]]],null],false],[0,\" settings\"],[9],[0,\"\\n                \"],[7,\"button\",false],[12,\"class\",\"close settings-menu-header-action\"],[12,\"data-test-close-settings-menu\",\"\"],[3,\"action\",[[23,0,[]],\"closeMenus\"],[[\"target\"],[[23,0,[\"ui\"]]]]],[8],[0,\"\\n                    \"],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"settings-menu-content\"],[8],[0,\"\\n                \"],[5,\"gh-image-uploader-with-preview\",[],[[\"@image\",\"@text\",\"@allowUnsplash\",\"@update\",\"@remove\"],[[23,0,[\"post\",\"featureImage\"]],[28,\"concat\",[\"Upload \",[23,0,[\"post\",\"displayName\"]],\" image\"],null],true,[28,\"action\",[[23,0,[]],\"setCoverImage\"],null],[28,\"action\",[[23,0,[]],\"clearCoverImage\"],null]]]],[0,\"\\n                \"],[7,\"form\",true],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"form-group\"],[8],[0,\"\\n                    \"],[7,\"label\",true],[10,\"for\",\"url\"],[8],[1,[28,\"capitalize\",[[23,0,[\"post\",\"displayName\"]]],null],false],[0,\" URL\"],[9],[0,\"\\n\"],[4,\"unless\",[[23,0,[\"post\",\"isNew\"]]],null,{\"statements\":[[4,\"if\",[[23,0,[\"post\",\"isPublished\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"a\",true],[10,\"class\",\"post-view-link\"],[10,\"target\",\"_blank\"],[11,\"href\",[29,[[23,0,[\"post\",\"url\"]]]]],[8],[0,\"\\n                            View \"],[1,[23,0,[\"post\",\"displayName\"]],false],[0,\" \"],[1,[28,\"svg-jar\",[\"external\"],null],false],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        \"],[7,\"a\",true],[10,\"class\",\"post-view-link\"],[10,\"target\",\"_blank\"],[11,\"href\",[29,[[23,0,[\"post\",\"previewUrl\"]]]]],[8],[0,\"\\n                            Preview \"],[1,[28,\"svg-jar\",[\"external\"],null],false],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-input-icon gh-icon-link\"],[8],[0,\"\\n                        \"],[1,[28,\"svg-jar\",[\"link\"],null],false],[0,\"\\n                        \"],[5,\"gh-text-input\",[],[[\"@class\",\"@id\",\"@name\",\"@value\",\"@input\",\"@focus-out\",\"@stopEnterKeyDownPropagation\"],[\"post-setting-slug\",\"url\",\"post-setting-slug\",[28,\"readonly\",[[23,0,[\"slugValue\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"slugValue\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"updateSlug\",[23,0,[\"slugValue\"]]],null],true]]],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[5,\"gh-url-preview\",[],[[\"@slug\",\"@tagName\",\"@classNames\"],[[23,0,[\"slugValue\"]],\"p\",\"description\"]]],[0,\"\\n                \"],[9],[0,\"\\n\\n                \"],[7,\"div\",true],[10,\"class\",\"form-group\"],[8],[0,\"\\n\"],[4,\"if\",[[28,\"or\",[[23,0,[\"post\",\"isDraft\"]],[23,0,[\"post\",\"isPublished\"]],[23,0,[\"post\",\"pastScheduledTime\"]]],null]],null,{\"statements\":[[0,\"                        \"],[7,\"label\",true],[8],[0,\"Publish date\"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        \"],[7,\"label\",true],[8],[0,\"Scheduled date\"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                    \"],[5,\"gh-date-time-picker\",[],[[\"@date\",\"@time\",\"@setDate\",\"@setTime\",\"@errors\",\"@dateErrorProperty\",\"@timeErrorProperty\",\"@maxDate\",\"@disabled\",\"@isActive\"],[[23,0,[\"post\",\"publishedAtBlogDate\"]],[23,0,[\"post\",\"publishedAtBlogTime\"]],[28,\"action\",[[23,0,[]],\"setPublishedAtBlogDate\"],null],[28,\"action\",[[23,0,[]],\"setPublishedAtBlogTime\"],null],[23,0,[\"post\",\"errors\"]],\"publishedAtBlogDate\",\"publishedAtBlogTime\",\"now\",[23,0,[\"post\",\"isScheduled\"]],[28,\"and\",[[23,0,[\"showSettingsMenu\"]],[28,\"not\",[[23,0,[\"isViewingSubview\"]]],null]],null]]]],[0,\"\\n\"],[4,\"unless\",[[28,\"or\",[[23,0,[\"post\",\"isDraft\"]],[23,0,[\"post\",\"isPublished\"]],[23,0,[\"post\",\"pastScheduledTime\"]]],null]],null,{\"statements\":[[0,\"                    \"],[7,\"p\",true],[8],[0,\"Use the publish menu to re-schedule\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                \"],[9],[0,\"\\n\\n\"],[4,\"unless\",[[23,0,[\"session\",\"user\",\"isContributor\"]]],null,{\"statements\":[[0,\"                \"],[7,\"div\",true],[10,\"class\",\"form-group\"],[8],[0,\"\\n                    \"],[7,\"label\",true],[10,\"for\",\"tag-input\"],[8],[0,\"Tags\"],[9],[0,\"\\n                    \"],[5,\"gh-psm-tags-input\",[],[[\"@post\",\"@triggerId\"],[[23,0,[\"post\"]],\"tag-input\"]]],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"feature\",\"members\"]]],null,{\"statements\":[[4,\"if\",[[23,0,[\"showVisibilityInput\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"div\",true],[10,\"class\",\"form-group\"],[8],[0,\"\\n                            \"],[7,\"label\",true],[10,\"for\",\"visibility-input\"],[8],[0,\"Post access\"],[9],[0,\"\\n                            \"],[5,\"gh-psm-visibility-input\",[],[[\"@post\",\"@triggerId\"],[[23,0,[\"post\"]],\"visibility-input\"]]],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"\\n\\n                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"post\",\"errors\"]],[23,0,[\"post\",\"hasValidated\"]],\"customExcerpt\"]],{\"statements\":[[0,\"\\n                    \"],[7,\"label\",true],[10,\"for\",\"custom-excerpt\"],[8],[0,\"Excerpt\"],[9],[0,\"\\n                    \"],[5,\"gh-textarea\",[[12,\"data-test-field\",\"custom-excerpt\"]],[[\"@class\",\"@id\",\"@name\",\"@value\",\"@input\",\"@focus-out\",\"@stopEnterKeyDownPropagation\"],[\"post-setting-custom-excerpt\",\"custom-excerpt\",\"post-setting-custom-excerpt\",[28,\"readonly\",[[23,0,[\"customExcerptScratch\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"customExcerptScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"setCustomExcerpt\",[23,0,[\"customExcerptScratch\"]]],null],\"true\"]]],[0,\"\\n                    \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"custom-excerpt\"]],[[\"@errors\",\"@property\"],[[23,0,[\"post\",\"errors\"]],\"customExcerpt\"]]],[0,\"\\n                \"]],\"parameters\":[]}],[0,\"\\n\\n\"],[4,\"unless\",[[23,0,[\"session\",\"user\",\"isAuthorOrContributor\"]]],null,{\"statements\":[[0,\"                    \"],[5,\"gh-form-group\",[[12,\"data-test-input\",\"authors\"]],[[\"@class\",\"@errors\",\"@hasValidated\",\"@property\"],[\"for-select\",[23,0,[\"post\",\"errors\"]],[23,0,[\"post\",\"hasValidated\"]],\"authors\"]],{\"statements\":[[0,\"\\n                        \"],[7,\"label\",true],[10,\"for\",\"author-list\"],[8],[0,\"Authors\"],[9],[0,\"\\n                        \"],[5,\"gh-psm-authors-input\",[],[[\"@selectedAuthors\",\"@updateAuthors\",\"@triggerId\"],[[23,0,[\"post\",\"authors\"]],[28,\"action\",[[23,0,[]],\"changeAuthors\"],null],\"author-list\"]]],[0,\"\\n                        \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"authors\"]],[[\"@errors\",\"@property\"],[[23,0,[\"post\",\"errors\"]],\"authors\"]]],[0,\"\\n                    \"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n                \"],[7,\"ul\",true],[10,\"class\",\"nav-list nav-list-block\"],[8],[0,\"\\n                    \"],[7,\"li\",false],[12,\"class\",\"nav-list-item\"],[12,\"data-test-button\",\"meta-data\"],[3,\"action\",[[23,0,[]],\"showSubview\",\"meta-data\"]],[8],[0,\"\\n                        \"],[7,\"button\",true],[10,\"type\",\"button\"],[8],[0,\"\\n                            \"],[7,\"b\",true],[8],[0,\"Meta data\"],[9],[0,\"\\n                            \"],[7,\"span\",true],[8],[0,\"Extra content for search engines\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                        \"],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"li\",false],[12,\"class\",\"nav-list-item\"],[12,\"data-test-button\",\"twitter-data\"],[3,\"action\",[[23,0,[]],\"showSubview\",\"twitter-data\"]],[8],[0,\"\\n                        \"],[7,\"button\",true],[10,\"type\",\"button\"],[8],[0,\"\\n                            \"],[7,\"b\",true],[8],[0,\"Twitter card\"],[9],[0,\"\\n                            \"],[7,\"span\",true],[8],[0,\"Customise structured data for Twitter\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                        \"],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"li\",false],[12,\"class\",\"nav-list-item\"],[12,\"data-test-button\",\"facebook-data\"],[3,\"action\",[[23,0,[]],\"showSubview\",\"facebook-data\"]],[8],[0,\"\\n                        \"],[7,\"button\",true],[10,\"type\",\"button\"],[8],[0,\"\\n                            \"],[7,\"b\",true],[8],[0,\"Facebook card\"],[9],[0,\"\\n                            \"],[7,\"span\",true],[8],[0,\"Customise Open Graph data\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                        \"],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n                    \"],[9],[0,\"\\n\"],[4,\"if\",[[28,\"and\",[[23,0,[\"feature\",\"members\"]],[28,\"eq\",[[23,0,[\"post\",\"displayName\"]],\"post\"],null],[23,0,[\"session\",\"user\",\"isOwnerOrAdmin\"]]],null]],null,{\"statements\":[[0,\"                        \"],[7,\"li\",false],[12,\"class\",\"nav-list-item\"],[12,\"data-test-button\",\"email-settings\"],[3,\"action\",[[23,0,[]],\"showSubview\",\"email-settings\"]],[8],[0,\"\\n                            \"],[7,\"button\",true],[10,\"type\",\"button\"],[8],[0,\"\\n                                \"],[7,\"b\",true],[8],[0,\"Email newsletter\"],[9],[0,\"\\n                                \"],[7,\"span\",true],[8],[0,\"Customise email settings\"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                            \"],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                    \"],[7,\"li\",false],[12,\"class\",\"nav-list-item\"],[12,\"data-test-button\",\"codeinjection\"],[3,\"action\",[[23,0,[]],\"showSubview\",\"codeinjection\"]],[8],[0,\"\\n                        \"],[7,\"button\",true],[10,\"type\",\"button\"],[8],[0,\"\\n                            \"],[7,\"b\",true],[8],[0,\"Code injection\"],[9],[0,\"\\n                            \"],[7,\"span\",true],[8],[0,\"Add styles/scripts to the header & footer\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                        \"],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n\\n\"],[4,\"unless\",[[23,0,[\"session\",\"user\",\"isAuthorOrContributor\"]]],null,{\"statements\":[[0,\"                \"],[7,\"div\",true],[10,\"class\",\"form-group for-checkbox\"],[8],[0,\"\\n                    \"],[7,\"label\",false],[12,\"class\",\"checkbox\"],[12,\"for\",\"featured\"],[3,\"action\",[[23,0,[]],\"toggleFeatured\"],[[\"bubbles\"],[\"false\"]]],[8],[0,\"\\n                        \"],[7,\"input\",true],[11,\"checked\",[23,0,[\"post\",\"featured\"]]],[10,\"class\",\"gh-input post-settings-featured\"],[11,\"onclick\",[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"post\",\"featured\"]]],null]],[[\"value\"],[\"target.checked\"]]]],[10,\"data-test-checkbox\",\"featured\"],[10,\"type\",\"checkbox\"],[8],[9],[0,\"\\n                        \"],[7,\"span\",true],[10,\"class\",\"input-toggle-component\"],[8],[9],[0,\"\\n                        \"],[7,\"p\",true],[8],[0,\"Feature this \"],[1,[23,0,[\"post\",\"displayName\"]],false],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n                \"],[5,\"gh-psm-template-select\",[],[[\"@post\",\"@onTemplateSelect\"],[[23,0,[\"post\"]],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"post\",\"customTemplate\"]]],null]],null]]]],[0,\"\\n\\n\"],[4,\"unless\",[[23,0,[\"post\",\"isNew\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"button\",false],[12,\"class\",\"gh-btn gh-btn-hover-red gh-btn-icon settings-menu-delete-button\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],\"deletePost\"]],[8],[7,\"span\",true],[8],[1,[28,\"svg-jar\",[\"trash\"],null],false],[0,\" Delete \"],[1,[23,0,[\"post\",\"displayName\"]],false],[9],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[7,\"div\",true],[11,\"class\",[29,[[28,\"if\",[[23,0,[\"isViewingSubview\"]],\"settings-menu-pane-in\",\"settings-menu-pane-out-right\"],null],\" settings-menu settings-menu-pane\"]]],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"active\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"isViewingSubview\"]]],null,{\"statements\":[[4,\"if\",[[28,\"eq\",[[23,0,[\"subview\"]],\"meta-data\"],null]],null,{\"statements\":[[0,\"                        \"],[7,\"div\",true],[10,\"class\",\"settings-menu-header subview\"],[8],[0,\"\\n                            \"],[7,\"button\",false],[12,\"class\",\"back settings-menu-header-action\"],[12,\"data-test-button\",\"close-psm-subview\"],[3,\"action\",[[23,0,[]],\"closeSubview\"]],[8],[1,[28,\"svg-jar\",[\"arrow-left\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Back\"],[9],[9],[0,\"\\n                            \"],[7,\"h4\",true],[8],[0,\"Meta data\"],[9],[0,\"\\n                            \"],[7,\"div\",true],[10,\"style\",\"width:23px;\"],[8],[9],[0,\"\\n                        \"],[9],[0,\"\\n\\n                        \"],[7,\"div\",true],[10,\"class\",\"settings-menu-content\"],[8],[0,\"\\n                            \"],[7,\"form\",false],[3,\"action\",[[23,0,[]],\"discardEnter\"],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n                                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"post\",\"errors\"]],[23,0,[\"post\",\"hasValidated\"]],\"metaTitle\"]],{\"statements\":[[0,\"\\n                                    \"],[7,\"label\",true],[10,\"for\",\"meta-title\"],[8],[0,\"Meta title\"],[9],[0,\"\\n                                    \"],[5,\"gh-text-input\",[[12,\"data-test-field\",\"meta-title\"]],[[\"@class\",\"@id\",\"@name\",\"@value\",\"@input\",\"@focus-out\",\"@stopEnterKeyDownPropagation\"],[\"post-setting-meta-title\",\"meta-title\",\"post-setting-meta-title\",[28,\"readonly\",[[23,0,[\"metaTitleScratch\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"metaTitleScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"setMetaTitle\",[23,0,[\"metaTitleScratch\"]]],null],true]]],[0,\"\\n                                    \"],[7,\"p\",true],[8],[0,\"Recommended: \"],[7,\"b\",true],[8],[0,\"70\"],[9],[0,\" characters. You’ve used \"],[1,[28,\"gh-count-down-characters\",[[23,0,[\"metaTitleScratch\"]],70],null],false],[9],[0,\"\\n                                    \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"post\",\"errors\"]],\"meta-title\"]]],[0,\"\\n                                \"]],\"parameters\":[]}],[0,\"\\n\\n                                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"post\",\"errors\"]],[23,0,[\"post\",\"hasValidated\"]],\"metaDescription\"]],{\"statements\":[[0,\"\\n                                    \"],[7,\"label\",true],[10,\"for\",\"meta-description\"],[8],[0,\"Meta description\"],[9],[0,\"\\n                                    \"],[5,\"gh-textarea\",[[12,\"data-test-field\",\"meta-description\"]],[[\"@class\",\"@id\",\"@name\",\"@value\",\"@input\",\"@focus-out\",\"@stopEnterKeyDownPropagation\"],[\"post-setting-meta-description\",\"meta-description\",\"post-setting-meta-description\",[28,\"readonly\",[[23,0,[\"metaDescriptionScratch\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"metaDescriptionScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"setMetaDescription\",[23,0,[\"metaDescriptionScratch\"]]],null],\"true\"]]],[0,\"\\n                                    \"],[7,\"p\",true],[8],[0,\"Recommended: \"],[7,\"b\",true],[8],[0,\"156\"],[9],[0,\" characters. You’ve used \"],[1,[28,\"gh-count-down-characters\",[[23,0,[\"metaDescriptionScratch\"]],156],null],false],[9],[0,\"\\n                                    \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"post\",\"errors\"]],\"meta-description\"]]],[0,\"\\n                                \"]],\"parameters\":[]}],[0,\"\\n\\n                                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"post\",\"errors\"]],[23,0,[\"post\",\"hasValidated\"]],\"canonicalUrl\"]],{\"statements\":[[0,\"\\n                                    \"],[7,\"label\",true],[10,\"for\",\"canonicalUrl\"],[8],[0,\"Canonical URL\"],[9],[0,\"\\n                                    \"],[5,\"gh-text-input\",[[12,\"data-test-field\",\"canonicalUrl\"]],[[\"@class\",\"@name\",\"@value\",\"@input\",\"@focus-out\",\"@stopEnterKeyDownPropagation\"],[\"post-setting-canonicalUrl\",\"post-setting-canonicalUrl\",[28,\"readonly\",[[23,0,[\"canonicalUrlScratch\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"canonicalUrlScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"setCanonicalUrl\",[23,0,[\"canonicalUrlScratch\"]]],null],\"true\"]]],[0,\"\\n                                    \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"post\",\"errors\"]],\"canonicalUrl\"]]],[0,\"\\n                                \"]],\"parameters\":[]}],[0,\"\\n\\n                                \"],[7,\"div\",true],[10,\"class\",\"form-group\"],[8],[0,\"\\n                                    \"],[7,\"label\",true],[8],[0,\"Search Engine Result Preview\"],[9],[0,\"\\n                                    \"],[7,\"div\",true],[10,\"class\",\"seo-preview\"],[8],[0,\"\\n                                        \"],[7,\"div\",true],[10,\"class\",\"seo-preview-title\"],[8],[1,[28,\"truncate\",[[23,0,[\"seoTitle\"]],70],null],false],[9],[0,\"\\n                                        \"],[7,\"div\",true],[10,\"class\",\"seo-preview-link\"],[8],[1,[28,\"truncate\",[[23,0,[\"seoURL\"]],70],null],false],[9],[0,\"\\n                                        \"],[7,\"div\",true],[10,\"class\",\"seo-preview-description\"],[8],[1,[28,\"truncate\",[[23,0,[\"seoDescription\"]],300],null],false],[9],[0,\"\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[28,\"eq\",[[23,0,[\"subview\"]],\"twitter-data\"],null]],null,{\"statements\":[[0,\"                        \"],[7,\"div\",true],[10,\"class\",\"settings-menu-header subview\"],[8],[0,\"\\n                            \"],[7,\"button\",false],[12,\"class\",\"back settings-menu-header-action\"],[12,\"data-test-button\",\"close-psm-subview\"],[3,\"action\",[[23,0,[]],\"closeSubview\"]],[8],[1,[28,\"svg-jar\",[\"arrow-left\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Back\"],[9],[9],[0,\"\\n                            \"],[7,\"h4\",true],[8],[0,\"Twitter card\"],[9],[0,\"\\n                            \"],[7,\"div\",true],[10,\"style\",\"width:23px;\"],[8],[9],[0,\"\\n                        \"],[9],[0,\"\\n\\n                        \"],[7,\"div\",true],[10,\"class\",\"settings-menu-content\"],[8],[0,\"\\n\\n                            \"],[7,\"form\",false],[3,\"action\",[[23,0,[]],\"discardEnter\"],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n                                \"],[5,\"gh-image-uploader-with-preview\",[],[[\"@image\",\"@text\",\"@allowUnsplash\",\"@update\",\"@remove\"],[[23,0,[\"post\",\"twitterImage\"]],\"Add Twitter image\",true,[28,\"action\",[[23,0,[]],\"setTwitterImage\"],null],[28,\"action\",[[23,0,[]],\"clearTwitterImage\"],null]]]],[0,\"\\n                                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"post\",\"errors\"]],[23,0,[\"post\",\"hasValidated\"]],\"twitterTitle\"]],{\"statements\":[[0,\"\\n                                    \"],[7,\"label\",true],[10,\"for\",\"twitter-title\"],[8],[0,\"Twitter title\"],[9],[0,\"\\n                                    \"],[5,\"gh-text-input\",[[12,\"data-test-field\",\"twitter-title\"]],[[\"@class\",\"@id\",\"@name\",\"@placeholder\",\"@value\",\"@input\",\"@focus-out\",\"@stopEnterKeyDownPropagation\"],[\"post-setting-twitter-title\",\"twitter-title\",\"post-setting-twitter-title\",[28,\"truncate\",[[23,0,[\"twitterTitle\"]],40],null],[28,\"readonly\",[[23,0,[\"twitterTitleScratch\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"twitterTitleScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"setTwitterTitle\",[23,0,[\"twitterTitleScratch\"]]],null],true]]],[0,\"\\n                                    \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"twitter-title\"]],[[\"@errors\",\"@property\"],[[23,0,[\"post\",\"errors\"]],\"twitterTitle\"]]],[0,\"\\n                                \"]],\"parameters\":[]}],[0,\"\\n\\n                                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"post\",\"errors\"]],[23,0,[\"post\",\"hasValidated\"]],\"twitterDescription\"]],{\"statements\":[[0,\"\\n                                    \"],[7,\"label\",true],[10,\"for\",\"twitter-description\"],[8],[0,\"Twitter description\"],[9],[0,\"\\n                                    \"],[5,\"gh-textarea\",[[12,\"data-test-field\",\"twitter-description\"]],[[\"@class\",\"@id\",\"@name\",\"@placeholder\",\"@stopEnterKeyDownPropagation\",\"@value\",\"@input\",\"@focus-out\"],[\"post-setting-twitter-description\",\"twitter-description\",\"post-setting-twitter-description\",[28,\"truncate\",[[23,0,[\"twitterDescription\"]],155],null],\"true\",[28,\"readonly\",[[23,0,[\"twitterDescriptionScratch\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"twitterDescriptionScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"setTwitterDescription\",[23,0,[\"twitterDescriptionScratch\"]]],null]]]],[0,\"\\n                                    \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"twitter-description\"]],[[\"@errors\",\"@property\"],[[23,0,[\"post\",\"errors\"]],\"twitterDescription\"]]],[0,\"\\n                                \"]],\"parameters\":[]}],[0,\"\\n\\n                                \"],[7,\"div\",true],[10,\"class\",\"form-group\"],[8],[0,\"\\n                                    \"],[7,\"label\",true],[8],[0,\"Preview\"],[9],[0,\"\\n                                    \"],[7,\"div\",true],[10,\"class\",\"gh-twitter-preview\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"twitterImage\"]]],null,{\"statements\":[[0,\"                                        \"],[7,\"div\",true],[10,\"class\",\"gh-twitter-preview-image\"],[11,\"style\",[28,\"background-image-style\",[[23,0,[\"twitterImage\"]]],null]],[8],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                                        \"],[7,\"div\",true],[10,\"class\",\"gh-twitter-preview-content\"],[8],[0,\"\\n                                            \"],[7,\"div\",true],[10,\"class\",\"gh-twitter-preview-title\"],[8],[1,[23,0,[\"twitterTitle\"]],false],[9],[0,\"\\n                                            \"],[7,\"div\",true],[10,\"class\",\"gh-twitter-preview-description\"],[8],[1,[28,\"truncate\",[[23,0,[\"twitterDescription\"]],155],null],false],[9],[0,\"\\n                                            \"],[7,\"div\",true],[10,\"class\",\"gh-twitter-preview-footer\"],[8],[0,\"\\n                                                \"],[7,\"div\",true],[10,\"class\",\"gh-twitter-preview-footer-left\"],[8],[0,\"\\n                                                    \"],[1,[23,0,[\"config\",\"blogDomain\"]],false],[0,\"\\n                                                \"],[9],[0,\"\\n                                                \"],[7,\"div\",true],[10,\"class\",\"gh-twitter-preview-footer-right\"],[8],[0,\"\\n                                                \"],[9],[0,\"\\n                                            \"],[9],[0,\"\\n                                        \"],[9],[0,\"\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[28,\"eq\",[[23,0,[\"subview\"]],\"email-settings\"],null]],null,{\"statements\":[[0,\"                        \"],[5,\"gh-post-settings-menu/email\",[],[[\"@post\",\"@savePostTask\",\"@toggleEmailPreviewModal\",\"@close\"],[[23,0,[\"post\"]],[23,0,[\"savePost\"]],[23,0,[\"toggleEmailPreviewModal\"]],[28,\"action\",[[23,0,[]],\"closeSubview\"],null]]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[28,\"eq\",[[23,0,[\"subview\"]],\"facebook-data\"],null]],null,{\"statements\":[[0,\"                        \"],[7,\"div\",true],[10,\"class\",\"settings-menu-header subview\"],[8],[0,\"\\n                            \"],[7,\"button\",false],[12,\"class\",\"back settings-menu-header-action\"],[12,\"data-test-button\",\"close-psm-subview\"],[3,\"action\",[[23,0,[]],\"closeSubview\"]],[8],[1,[28,\"svg-jar\",[\"arrow-left\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Back\"],[9],[9],[0,\"\\n                            \"],[7,\"h4\",true],[8],[0,\"Facebook card\"],[9],[0,\"\\n                            \"],[7,\"div\",true],[10,\"style\",\"width:23px;\"],[8],[9],[0,\"\\n                        \"],[9],[0,\"\\n\\n                        \"],[7,\"div\",true],[10,\"class\",\"settings-menu-content\"],[8],[0,\"\\n                            \"],[7,\"form\",false],[3,\"action\",[[23,0,[]],\"discardEnter\"],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n                                \"],[5,\"gh-image-uploader-with-preview\",[],[[\"@image\",\"@text\",\"@allowUnsplash\",\"@update\",\"@remove\"],[[23,0,[\"post\",\"ogImage\"]],\"Add Facebook image\",true,[28,\"action\",[[23,0,[]],\"setOgImage\"],null],[28,\"action\",[[23,0,[]],\"clearOgImage\"],null]]]],[0,\"\\n                                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"post\",\"errors\"]],[23,0,[\"post\",\"hasValidated\"]],\"ogTitle\"]],{\"statements\":[[0,\"\\n                                    \"],[7,\"label\",true],[10,\"for\",\"og-title\"],[8],[0,\"Facebook title\"],[9],[0,\"\\n                                    \"],[5,\"gh-text-input\",[[12,\"data-test-field\",\"og-title\"]],[[\"@class\",\"@id\",\"@name\",\"@placeholder\",\"@value\",\"@input\",\"@focus-out\",\"@stopEnterKeyDownPropagation\"],[\"post-setting-og-title\",\"og-title\",\"post-setting-og-title\",[28,\"truncate\",[[23,0,[\"facebookTitle\"]],40],null],[28,\"readonly\",[[23,0,[\"ogTitleScratch\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"ogTitleScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"setOgTitle\",[23,0,[\"ogTitleScratch\"]]],null],true]]],[0,\"\\n                                    \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"og-title\"]],[[\"@errors\",\"@property\"],[[23,0,[\"post\",\"errors\"]],\"ogTitle\"]]],[0,\"\\n                                \"]],\"parameters\":[]}],[0,\"\\n\\n                                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"post\",\"errors\"]],[23,0,[\"post\",\"hasValidated\"]],\"ogDescription\"]],{\"statements\":[[0,\"\\n                                    \"],[7,\"label\",true],[10,\"for\",\"og-description\"],[8],[0,\"Facebook description\"],[9],[0,\"\\n                                    \"],[5,\"gh-textarea\",[[12,\"data-test-field\",\"og-description\"]],[[\"@class\",\"@id\",\"@name\",\"@placeholder\",\"@value\",\"@input\",\"@focus-out\",\"@stopEnterKeyDownPropagation\"],[\"post-setting-og-description\",\"og-description\",\"post-setting-og-description\",[28,\"truncate\",[[23,0,[\"facebookDescription\"]],160],null],[28,\"readonly\",[[23,0,[\"ogDescriptionScratch\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"ogDescriptionScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"setOgDescription\",[23,0,[\"ogDescriptionScratch\"]]],null],\"true\"]]],[0,\"\\n                                    \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"og-description\"]],[[\"@errors\",\"@property\"],[[23,0,[\"post\",\"errors\"]],\"ogDescription\"]]],[0,\"\\n                                \"]],\"parameters\":[]}],[0,\"\\n\\n                                \"],[7,\"div\",true],[10,\"class\",\"form-group\"],[8],[0,\"\\n                                    \"],[7,\"label\",true],[8],[0,\"Preview\"],[9],[0,\"\\n                                    \"],[7,\"div\",true],[10,\"class\",\"gh-og-preview\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"facebookImage\"]]],null,{\"statements\":[[0,\"                                        \"],[7,\"div\",true],[10,\"class\",\"gh-og-preview-image\"],[11,\"style\",[28,\"background-image-style\",[[23,0,[\"facebookImage\"]]],null]],[8],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                                        \"],[7,\"div\",true],[10,\"class\",\"gh-og-preview-content\"],[8],[0,\"\\n                                            \"],[7,\"div\",true],[10,\"class\",\"gh-og-preview-title\"],[8],[1,[28,\"truncate\",[[23,0,[\"facebookTitle\"]],88],null],false],[9],[0,\"\\n                                            \"],[7,\"div\",true],[10,\"class\",\"gh-og-preview-description\"],[8],[1,[28,\"truncate\",[[23,0,[\"facebookDescription\"]],300],null],false],[9],[0,\"\\n                                            \"],[7,\"div\",true],[10,\"class\",\"gh-og-preview-footer\"],[8],[0,\"\\n                                                \"],[7,\"div\",true],[10,\"class\",\"gh-og-preview-footer-left\"],[8],[0,\"\\n                                                    \"],[1,[23,0,[\"config\",\"blogDomain\"]],false],[0,\" \"],[7,\"span\",true],[10,\"class\",\"gh-og-preview-footer-left-divider\"],[8],[0,\"|\"],[9],[0,\" by \"],[7,\"span\",true],[10,\"class\",\"gh-og-preview-footer-author\"],[8],[1,[28,\"author-names\",[[23,0,[\"post\",\"authors\"]]],null],false],[9],[0,\"\\n                                                \"],[9],[0,\"\\n                                                \"],[7,\"div\",true],[10,\"class\",\"gh-og-preview-footer-right\"],[8],[0,\"\\n                                                \"],[9],[0,\"\\n                                            \"],[9],[0,\"\\n                                        \"],[9],[0,\"\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[28,\"eq\",[[23,0,[\"subview\"]],\"codeinjection\"],null]],null,{\"statements\":[[0,\"                        \"],[7,\"div\",true],[10,\"class\",\"settings-menu-header subview\"],[8],[0,\"\\n                            \"],[7,\"button\",false],[12,\"class\",\"back settings-menu-header-action\"],[12,\"data-test-button\",\"close-psm-subview\"],[3,\"action\",[[23,0,[]],\"closeSubview\"]],[8],[1,[28,\"svg-jar\",[\"arrow-left\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Back\"],[9],[9],[0,\"\\n                            \"],[7,\"h4\",true],[8],[0,\"Code injection\"],[9],[0,\"\\n                            \"],[7,\"div\",true],[10,\"style\",\"width:23px;\"],[8],[9],[0,\"\\n                        \"],[9],[0,\"\\n\\n                        \"],[7,\"div\",true],[10,\"class\",\"settings-menu-content settings-menu-content-codeinjection\"],[8],[0,\"\\n                            \"],[7,\"form\",false],[3,\"action\",[[23,0,[]],\"discardEnter\"],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n                                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"post\",\"errors\"]],[23,0,[\"post\",\"hasValidated\"]],\"codeinjectionHead\"]],{\"statements\":[[0,\"\\n                                    \"],[7,\"label\",true],[10,\"for\",\"codeinjection-head\"],[8],[1,[28,\"capitalize\",[[23,0,[\"post\",\"displayName\"]]],null],false],[0,\" header \"],[7,\"code\",true],[8],[0,\"{{ghost_head}}\"],[9],[9],[0,\"\\n                                    \"],[5,\"gh-cm-editor\",[[12,\"data-test-field\",\"codeinjection-head\"]],[[\"@value\",\"@id\",\"@class\",\"@name\",\"@focusOut\",\"@stopEnterKeyDownPropagation\",\"@update\"],[[23,0,[\"codeinjectionHeadScratch\"]],\"post-setting-codeinjection-head\",\"post-setting-codeinjection\",\"post-setting-codeinjection-head\",[28,\"action\",[[23,0,[]],\"setHeaderInjection\",[23,0,[\"codeinjectionHeadScratch\"]]],null],\"true\",[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"codeinjectionHeadScratch\"]]],null]],null]]]],[0,\"\\n                                    \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"codeinjection-head\"]],[[\"@errors\",\"@property\"],[[23,0,[\"post\",\"errors\"]],\"codeinjectionHead\"]]],[0,\"\\n                                \"]],\"parameters\":[]}],[0,\"\\n\\n                                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"post\",\"errors\"]],[23,0,[\"post\",\"hasValidated\"]],\"codeinjectionFoot\"]],{\"statements\":[[0,\"\\n                                    \"],[7,\"label\",true],[10,\"for\",\"codeinjection-foot\"],[8],[1,[28,\"capitalize\",[[23,0,[\"post\",\"displayName\"]]],null],false],[0,\" footer \"],[7,\"code\",true],[8],[0,\"{{ghost_foot}}\"],[9],[9],[0,\"\\n                                    \"],[5,\"gh-cm-editor\",[[12,\"data-test-field\",\"codeinjection-foot\"]],[[\"@value\",\"@id\",\"@class\",\"@name\",\"@focusOut\",\"@stopEnterKeyDownPropagation\",\"@update\"],[[23,0,[\"codeinjectionFootScratch\"]],\"post-setting-codeinjection-foot\",\"post-setting-codeinjection\",\"post-setting-codeinjection-foot\",[28,\"action\",[[23,0,[]],\"setFooterInjection\",[23,0,[\"codeinjectionFootScratch\"]]],null],\"true\",[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"codeinjectionFootScratch\"]]],null]],null]]]],[0,\"\\n                                    \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"codeinjection-foot\"]],[[\"@errors\",\"@property\"],[[23,0,[\"post\",\"errors\"]],\"codeinjectionFoot\"]]],[0,\"\\n                                \"]],\"parameters\":[]}],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"_showThrobbers\"]]],null,{\"statements\":[[4,\"unless\",[[23,0,[\"session\",\"user\",\"isAuthorOrContributor\"]]],null,{\"statements\":[[0,\"        \"],[5,\"gh-tour-item\",[],[[\"@throbberId\",\"@target\",\"@throbberAttachment\",\"@throbberOffset\",\"@popoverTriangleClass\"],[\"featured-post\",\"label[for='featured'] p\",\"middle middle\",\"0px -20px\",\"bottom-right\"]]],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-post-settings-menu.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-post-settings-menu/email", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "+69Gu98A",
    "block": "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"class\",\"settings-menu-header subview\"],[8],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"back settings-menu-header-action\"],[12,\"data-test-button\",\"close-psm-subview\"],[3,\"on\",[\"click\",[23,0,[\"close\"]]]],[8],[1,[28,\"svg-jar\",[\"arrow-left\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Back\"],[9],[9],[0,\"\\n    \"],[7,\"h4\",true],[8],[0,\"Email newsletter\"],[9],[0,\"\\n    \"],[7,\"div\",true],[10,\"style\",\"width:23px;\"],[8],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"settings-menu-content settings-menu-email\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"post\",\"email\",\"isSuccess\"]]],null,{\"statements\":[[0,\"        \"],[7,\"div\",true],[10,\"class\",\"ba b--whitegrey bg-white br3\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"flex pa5 pt4 pb4 items-center bb b--whitegrey\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"w16 flex flex-column items-center\"],[8],[0,\"\\n                    \"],[7,\"span\",true],[10,\"class\",\"db mr4 mt3\"],[8],[1,[28,\"svg-jar\",[\"send-email\"],[[\"class\"],[\"w7 h7 stroke-darkgrey\"]]],false],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"flex flex-column justify-center\"],[8],[0,\"\\n                    \"],[7,\"p\",true],[10,\"class\",\"ma0 pa0 midgrey\"],[8],[0,\"Post was sent by email to\"],[9],[0,\"\\n                    \"],[7,\"p\",true],[10,\"class\",\"ma0 pa0 f5 lh-solid\"],[8],[1,[28,\"pluralize\",[[23,0,[\"post\",\"email\",\"emailCount\"]],\"member\"],null],false],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"pa5 pt3 pb3 f7 bb b--whitegrey\"],[8],[0,\"\\n                \"],[7,\"table\",true],[10,\"class\",\"ma0\"],[10,\"style\",\"table-layout: fixed\"],[8],[0,\"\\n                    \"],[7,\"tbody\",true],[8],[0,\"\\n                        \"],[7,\"tr\",true],[8],[0,\"\\n                            \"],[7,\"td\",true],[10,\"class\",\"pa1 pl0 fw7 f8 w16 v-top lh-copy\"],[8],[0,\"Subject:\"],[9],[0,\"\\n                            \"],[7,\"td\",true],[10,\"class\",\"pa1 pa0 word-wrap midgrey v-top lh-copy\"],[8],[1,[23,0,[\"post\",\"email\",\"subject\"]],false],[9],[0,\"\\n                        \"],[9],[0,\"\\n                        \"],[7,\"tr\",true],[8],[0,\"\\n                            \"],[7,\"td\",true],[10,\"class\",\"pa1 pl0 fw7 f8 w16 nowrap v-top lh-copy\"],[8],[0,\"Sent:\"],[9],[0,\"\\n                            \"],[7,\"td\",true],[10,\"class\",\"pa1 pa0 word-wrap midgrey v-top lh-copy\"],[8],[1,[28,\"gh-format-post-time\",[[23,0,[\"post\",\"email\",\"createdAtUTC\"]]],null],false],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"pa5 pt3 pb3\"],[8],[0,\"\\n                \"],[7,\"p\",true],[10,\"class\",\"ma0 pa0\"],[8],[7,\"button\",false],[12,\"class\",\"blue\"],[3,\"on\",[\"click\",[23,0,[\"toggleEmailPreview\"]]]],[8],[0,\"View sent email\"],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[28,\"or\",[[23,0,[\"retryEmail\",\"isRunning\"]],[23,0,[\"post\",\"email\",\"isFailure\"]]],null]],null,{\"statements\":[[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"ba b--whitegrey bg-white br3 gh-box-error-border\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"flex pa5 pt4 pb4 items-center bb b--whitegrey\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"w16 flex flex-column items-center\"],[8],[0,\"\\n                    \"],[7,\"span\",true],[10,\"class\",\"db mr4 mt3\"],[8],[1,[28,\"svg-jar\",[\"warning\"],[[\"class\"],[\"w7 h7 fill-red\"]]],false],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"flex flex-column justify-center\"],[8],[0,\"\\n                    \"],[7,\"p\",true],[10,\"class\",\"ma0 pa0 midgrey\"],[8],[0,\"Post failed to send to\"],[9],[0,\"\\n                    \"],[7,\"p\",true],[10,\"class\",\"ma0 pa0 f5 lh-solid\"],[8],[1,[28,\"pluralize\",[[23,0,[\"post\",\"email\",\"emailCount\"]],\"member\"],null],false],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"pa5 pt3 pb3 f7 bb b--whitegrey\"],[8],[0,\"\\n                \"],[7,\"p\",true],[10,\"class\",\"mb2 lh-copy\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"session\",\"user\",\"isOwner\"]]],null,{\"statements\":[[0,\"                        Email failed to send when publishing this post. Please \"],[5,\"link-to\",[],[[\"@route\"],[\"settings.labs\"]],{\"statements\":[[0,\"check your Mailgun configuration\"]],\"parameters\":[]}],[0,\" if the error persists.\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        Email failed to send when publishing this post. Please check your Mailgun configuration if the error persists.\\n\"]],\"parameters\":[]}],[0,\"                \"],[9],[0,\"\\n                \"],[7,\"p\",true],[10,\"class\",\"ma0 pa0\"],[8],[0,\"\\n                    \"],[7,\"table\",true],[10,\"class\",\"ma0\"],[10,\"style\",\"table-layout: fixed\"],[8],[0,\"\\n                        \"],[7,\"tbody\",true],[8],[0,\"\\n                            \"],[7,\"tr\",true],[8],[0,\"\\n                                \"],[7,\"td\",true],[10,\"class\",\"pa1 pl0 fw7 f8 w16 v-top lh-copy\"],[8],[0,\"Error:\"],[9],[0,\"\\n                                \"],[7,\"td\",true],[10,\"class\",\"pa1 pl0 word-wrap midgrey v-top lh-copy\"],[8],[1,[23,0,[\"post\",\"email\",\"error\"]],false],[9],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"pa5 pt3 pb3 f7 bb b--whitegrey\"],[8],[0,\"\\n                \"],[7,\"table\",true],[10,\"class\",\"ma0\"],[10,\"style\",\"table-layout: fixed\"],[8],[0,\"\\n                    \"],[7,\"tbody\",true],[8],[0,\"\\n                        \"],[7,\"tr\",true],[8],[0,\"\\n                            \"],[7,\"td\",true],[10,\"class\",\"pa1 pl0 fw7 f8 w16 v-top lh-copy\"],[8],[0,\"Subject:\"],[9],[0,\"\\n                            \"],[7,\"td\",true],[10,\"class\",\"pa1 pl0 truncate midgrey v-top lh-copy\"],[8],[1,[23,0,[\"post\",\"email\",\"subject\"]],false],[9],[0,\"\\n                        \"],[9],[0,\"\\n                        \"],[7,\"tr\",true],[8],[0,\"\\n                            \"],[7,\"td\",true],[10,\"class\",\"pa1 pl0 fw7 f8 w16 nowrap v-top lh-copy\"],[8],[0,\"Tried:\"],[9],[0,\"\\n                            \"],[7,\"td\",true],[10,\"class\",\"pa1 pl0 truncate midgrey v-top lh-copy\"],[8],[1,[28,\"gh-format-post-time\",[[23,0,[\"post\",\"email\",\"createdAtUTC\"]]],null],false],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"pa5 pt3 pb3 flex justify-between items center\"],[8],[0,\"\\n                \"],[7,\"button\",false],[12,\"class\",\"blue\"],[3,\"on\",[\"click\",[23,0,[\"toggleEmailPreview\"]]]],[8],[0,\"View email\"],[9],[0,\"\\n                \"],[5,\"gh-task-button\",[[12,\"data-test-button\",\"retry-email\"]],[[\"@buttonText\",\"@runningText\",\"@task\",\"@class\"],[\"Retry send\",\"Sending...\",[23,0,[\"retryEmail\"]],\"gh-btn gh-btn-icon\"]]],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,0,[\"mailgunError\"]]],null,{\"statements\":[[0,\"            \"],[7,\"p\",true],[10,\"class\",\"gh-box gh-box-warning settings-menu-mailgun-warning\"],[8],[0,\"\\n                \"],[1,[28,\"svg-jar\",[\"info\"],[[\"class\"],[\"w5 h5 fill-yellow nl1\"]]],false],[0,\"\\n                You need to configure Mailgun in \"],[5,\"link-to\",[[12,\"data-test-nav\",\"labs\"]],[[\"@route\"],[\"settings.labs\"]],{\"statements\":[[0,\"Labs → Members settings\"]],\"parameters\":[]}],[0,\" to enable email newsletters.\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n        \"],[7,\"form\",false],[3,\"action\",[[23,0,[]],\"discardEnter\"],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n            \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"post\",\"errors\"]],[23,0,[\"post\",\"hasValidated\"]],\"emailSubject\"]],{\"statements\":[[0,\"\\n                \"],[7,\"label\",true],[10,\"for\",\"og-title\"],[8],[0,\"Subject\"],[9],[0,\"\\n                \"],[5,\"gh-text-input\",[[12,\"data-test-field\",\"email-subject\"]],[[\"@class\",\"@id\",\"@name\",\"@placeholder\",\"@value\",\"@input\",\"@focus-out\",\"@stopEnterKeyDownPropagation\",\"@disabled\"],[\"post-setting-email-subject\",\"email-subject\",\"post-setting-email-subject\",[28,\"truncate\",[[23,0,[\"emailSubject\"]],40],null],[28,\"readonly\",[[23,0,[\"emailSubjectScratch\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"emailSubjectScratch\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"setEmailSubject\",[23,0,[\"emailSubjectScratch\"]]],null],true,[23,0,[\"mailgunError\"]]]]],[0,\"\\n                \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"email-subject\"]],[[\"@errors\",\"@property\"],[[23,0,[\"post\",\"errors\"]],\"emailSubject\"]]],[0,\"\\n            \"]],\"parameters\":[]}],[0,\"\\n\\n            \"],[7,\"div\",true],[10,\"class\",\"form-group\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"flex\"],[8],[0,\"\\n                    \"],[7,\"label\",true],[10,\"class\",\"nowrap flex-auto\"],[8],[0,\"Test email\"],[9],[0,\"\\n                    \"],[7,\"button\",false],[12,\"class\",\"gh-btn gh-btn-link settings-menu-email-button\"],[12,\"data-test-button\",\"toggle-email-preview\"],[12,\"type\",\"button\"],[3,\"on\",[\"click\",[23,0,[\"toggleEmailPreview\"]]]],[8],[0,\"\\n                        \"],[7,\"span\",true],[10,\"class\",\"blue\"],[8],[0,\"\\n                            Preview in browser\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n\\n                \"],[7,\"div\",true],[11,\"class\",[29,[[28,\"if\",[[23,0,[\"mailgunError\"]],\"disabled\"],null]]]],[8],[0,\"\\n                    \"],[5,\"gh-text-input\",[[12,\"data-test-field\",\"email-test\"]],[[\"@class\",\"@id\",\"@name\",\"@placeholder\",\"@value\",\"@stopEnterKeyDownPropagation\",\"@disabled\"],[\"post-setting-email-test\",\"email-test\",\"post-setting-email-test\",\"noreply@example.com\",[23,0,[\"testEmailAddress\"]],true,[23,0,[\"mailgunError\"]]]]],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"sendTestEmailError\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"div\",true],[10,\"class\",\"error\"],[8],[7,\"p\",true],[10,\"class\",\"response\"],[8],[1,[23,0,[\"sendTestEmailError\"]],false],[9],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n                    \"],[5,\"gh-task-button\",[[12,\"data-test-send-test-mail\",\"true\"]],[[\"@buttonText\",\"@task\",\"@successText\",\"@runningText\",\"@class\",\"@disabled\"],[\"Send test email\",[23,0,[\"sendTestEmail\"]],\"Email sent\",\"Sending...\",\"gh-btn w-100 mt2 gh-btn-icon\",[23,0,[\"mailgunError\"]]]]],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"]],\"parameters\":[]}]],\"parameters\":[]}],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-post-settings-menu/email.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-posts-list-item", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "Ex6RCLZo",
    "block": "{\"symbols\":[],\"statements\":[[5,\"link-to\",[[12,\"class\",\"permalink gh-list-data gh-post-list-featured\"]],[[\"@route\",\"@models\",\"@title\"],[\"editor.edit\",[28,\"array\",[[23,0,[\"post\",\"displayName\"]],[23,0,[\"post\",\"id\"]]],null],\"Edit this post\"]],{\"statements\":[[0,\"\\n\"],[4,\"if\",[[23,0,[\"isFeatured\"]]],null,{\"statements\":[[0,\"        \"],[7,\"span\",true],[10,\"data-tooltip\",\"Featured\"],[10,\"class\",\"dib pl1 pr1 nr1 nl1\"],[8],[1,[28,\"svg-jar\",[\"star-filled\"],[[\"class\"],[\"fill-blue w3 h3\"]]],false],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]}],[0,\"\\n\\n\"],[5,\"link-to\",[[12,\"class\",\"permalink gh-list-data gh-post-list-title\"]],[[\"@route\",\"@models\",\"@title\"],[\"editor.edit\",[28,\"array\",[[23,0,[\"post\",\"displayName\"]],[23,0,[\"post\",\"id\"]]],null],\"Edit this post\"]],{\"statements\":[[0,\"\\n    \"],[7,\"h3\",true],[10,\"class\",\"gh-content-entry-title\"],[8],[0,\"\\n        \"],[1,[23,0,[\"post\",\"title\"]],false],[0,\"\\n    \"],[9],[0,\"\\n    \"],[7,\"p\",true],[8],[0,\"\\n        \"],[7,\"span\",true],[10,\"class\",\"gh-content-entry-meta\"],[8],[0,\"\\n            By \"],[7,\"span\",true],[10,\"class\",\"midgrey-l2 fw5\"],[8],[1,[23,0,[\"authorNames\"]],false],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"primaryTag\"]]],null,{\"statements\":[[0,\"                in \"],[7,\"span\",true],[10,\"class\",\"midgrey-l2 fw5\"],[8],[1,[23,0,[\"primaryTag\"]],false],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"isScheduled\"]]],null,{\"statements\":[[0,\"                – \"],[7,\"span\",true],[10,\"class\",\"gh-schedule-time\"],[8],[0,\"Scheduled to be published and sent \"],[1,[28,\"gh-format-post-time\",[[23,0,[\"post\",\"publishedAtUTC\"]]],[[\"scheduled\"],[true]]],false],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n\\n\"],[5,\"link-to\",[[12,\"class\",\"permalink gh-list-data gh-post-list-status\"]],[[\"@route\",\"@models\",\"@title\"],[\"editor.edit\",[28,\"array\",[[23,0,[\"post\",\"displayName\"]],[23,0,[\"post\",\"id\"]]],null],\"Edit this post\"]],{\"statements\":[[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"flex items-center\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"isScheduled\"]]],null,{\"statements\":[[0,\"        \"],[7,\"span\",true],[10,\"class\",\"gh-content-status-draft gh-badge nowrap\"],[8],[0,\"\\n            Scheduled\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"isDraft\"]]],null,{\"statements\":[[0,\"        \"],[7,\"span\",true],[10,\"class\",\"gh-content-status-draft gh-badge gh-badge-purple nowrap\"],[8],[0,\"\\n            Draft\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[28,\"and\",[[23,0,[\"isPublished\"]],[28,\"not\",[[23,0,[\"post\",\"page\"]]],null]],null]],null,{\"statements\":[[0,\"        \"],[7,\"span\",true],[10,\"class\",\"gh-content-status-published nowrap\"],[10,\"title\",\"Post has been sent by email\"],[8],[0,\"\\n            Published\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"session\",\"user\",\"isOwnerOrAdmin\"]]],null,{\"statements\":[[4,\"if\",[[28,\"or\",[[23,0,[\"post\",\"email\"]],[28,\"and\",[[23,0,[\"post\",\"isScheduled\"]],[23,0,[\"post\",\"sendEmailWhenPublished\"]]],null]],null]],null,{\"statements\":[[4,\"if\",[[28,\"eq\",[[23,0,[\"post\",\"email\",\"status\"]],\"failed\"],null]],null,{\"statements\":[[0,\"                    \"],[7,\"span\",true],[10,\"data-tooltip\",\"Failed to send post by email\"],[10,\"class\",\"gh-content-status-emailed error\"],[8],[0,\"\\n                        \"],[1,[28,\"svg-jar\",[\"send-email\"],[[\"class\"],[\"stroke-red\"]]],false],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,0,[\"isScheduled\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"span\",true],[10,\"data-tooltip\",\"To be sent by email\"],[10,\"class\",\"gh-content-status-emailed scheduled\"],[8],[0,\"\\n                            \"],[1,[28,\"svg-jar\",[\"send-email\"],[[\"class\"],[\"stroke-green-d2\"]]],false],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        \"],[7,\"span\",true],[10,\"data-tooltip\",\"Sent by email\"],[10,\"class\",\"gh-content-status-emailed\"],[8],[0,\"\\n                            \"],[1,[28,\"svg-jar\",[\"send-email\"],[[\"class\"],[\"stroke-midgrey\"]]],false],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]}]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"    \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n\\n\"],[5,\"link-to\",[[12,\"class\",\"permalink gh-list-data gh-post-list-updated\"]],[[\"@route\",\"@models\",\"@title\"],[\"editor.edit\",[28,\"array\",[[23,0,[\"post\",\"displayName\"]],[23,0,[\"post\",\"id\"]]],null],\"Edit this post\"]],{\"statements\":[[0,\"\\n    \"],[7,\"span\",true],[10,\"class\",\"nowrap\"],[8],[1,[28,\"gh-format-post-time\",[[23,0,[\"post\",\"updatedAtUTC\"]]],[[\"draft\"],[true]]],false],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-posts-list-item.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-profile-image", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "Ts9cBVvp",
    "block": "{\"symbols\":[],\"statements\":[[7,\"figure\",true],[10,\"class\",\"account-image\"],[8],[0,\"\\n\\n\"],[4,\"unless\",[[23,0,[\"previewDataURL\"]]],null,{\"statements\":[[0,\"        \"],[7,\"div\",true],[10,\"class\",\"placeholder-img\"],[11,\"style\",[23,0,[\"placeholderStyle\"]]],[8],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"id\",\"account-image\"],[10,\"class\",\"gravatar-img\"],[11,\"style\",[23,0,[\"avatarStyle\"]]],[8],[0,\"\\n            \"],[7,\"span\",true],[10,\"class\",\"sr-only\"],[8],[0,\"User image\"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"previewDataURL\"]]],null,{\"statements\":[[0,\"        \"],[7,\"img\",true],[11,\"src\",[23,0,[\"previewDataURL\"]]],[10,\"class\",\"gravatar-img\"],[8],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    \"],[7,\"span\",true],[10,\"class\",\"edit-account-image\"],[11,\"onclick\",[28,\"action\",[[23,0,[]],\"openFileDialog\"],null]],[10,\"role\",\"button\"],[8],[0,\"\\n        \"],[1,[28,\"svg-jar\",[\"photos\"],null],false],[0,\"\\n        \"],[7,\"span\",true],[10,\"class\",\"sr-only\"],[8],[0,\"Upload an image\"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[5,\"gh-file-input\",[],[[\"@alt\",\"@name\",\"@multiple\",\"@action\",\"@accept\"],[null,\"uploadimage\",false,[28,\"action\",[[23,0,[]],\"imageSelected\"],null],[23,0,[\"imageMimeTypes\"]]]]],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-profile-image.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-progress-bar", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "tpJP2UZ8",
    "block": "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"class\",\"gh-progress-container\"],[8],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-progress-container-progress\"],[8],[0,\"\\n        \"],[7,\"div\",true],[11,\"class\",[29,[\"gh-progress-bar \",[28,\"if\",[[23,0,[\"isError\"]],\"-error\"],null]]]],[11,\"style\",[23,0,[\"progressStyle\"]]],[10,\"data-test-progress-bar\",\"\"],[11,\"data-test-progress-width\",[23,0,[\"percentage\"]]],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-progress-bar.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-psm-authors-input", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "6InHjqh4",
    "block": "{\"symbols\":[],\"statements\":[[5,\"gh-token-input\",[],[[\"@options\",\"@selected\",\"@onChange\",\"@allowCreation\",\"@renderInPlace\",\"@triggerId\"],[[23,0,[\"availableAuthors\"]],[23,0,[\"selectedAuthors\"]],[28,\"action\",[[23,0,[]],\"updateAuthors\"],null],false,true,[23,0,[\"triggerId\"]]]]]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-psm-authors-input.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-psm-tags-input", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "xqFRzm9E",
    "block": "{\"symbols\":[],\"statements\":[[5,\"gh-token-input\",[],[[\"@extra\",\"@onChange\",\"@onCreate\",\"@options\",\"@renderInPlace\",\"@selected\",\"@showCreateWhen\",\"@triggerId\"],[[28,\"hash\",null,[[\"tokenComponent\"],[\"gh-token-input/tag-token\"]]],[28,\"action\",[[23,0,[]],\"updateTags\"],null],[28,\"action\",[[23,0,[]],\"createTag\"],null],[23,0,[\"availableTags\"]],true,[23,0,[\"post\",\"tags\"]],[28,\"action\",[[23,0,[]],\"hideCreateOptionOnMatchingTag\"],null],[23,0,[\"triggerId\"]]]]],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-psm-tags-input.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-psm-template-select", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "mvcHMRrB",
    "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[23,0,[\"customTemplates\"]]],null,{\"statements\":[[0,\"    \"],[7,\"div\",true],[10,\"class\",\"form-group for-select\"],[10,\"data-test-custom-template-form\",\"\"],[8],[0,\"\\n        \"],[7,\"label\",true],[10,\"for\",\"author-list\"],[8],[0,\"Template\"],[9],[0,\"\\n        \"],[7,\"span\",true],[10,\"class\",\"gh-input-icon gh-icon-user\"],[8],[0,\"\\n            \"],[1,[28,\"svg-jar\",[\"file-text-document\"],null],false],[0,\"\\n            \"],[7,\"span\",true],[11,\"class\",[29,[\"gh-select \",[28,\"if\",[[23,0,[\"matchedSlugTemplate\"]],\"disabled\"],null]]]],[8],[0,\"\\n                \"],[5,\"one-way-select\",[[12,\"data-test-select\",\"custom-template\"]],[[\"@value\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@update\",\"@disabled\"],[[23,0,[\"selectedTemplate\"]],[23,0,[\"customTemplates\"]],\"filename\",\"name\",[28,\"action\",[[23,0,[]],\"selectTemplate\"],null],[23,0,[\"matchedSlugTemplate\"]]]]],[0,\"\\n                \"],[1,[28,\"svg-jar\",[\"arrow-down-small\"],null],false],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"],[4,\"if\",[[23,0,[\"matchedSlugTemplate\"]]],null,{\"statements\":[[0,\"            \"],[7,\"p\",true],[8],[0,\"Post URL matches \"],[1,[23,0,[\"matchedSlugTemplate\",\"filename\"]],false],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-psm-template-select.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-psm-visibility-input", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "Fz/HW8KJ",
    "block": "{\"symbols\":[],\"statements\":[[7,\"span\",true],[10,\"class\",\"gh-select\"],[8],[0,\"\\n    \"],[5,\"one-way-select\",[],[[\"@value\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@optionTargetPath\",\"@update\"],[[23,0,[\"selectedVisibility\"]],[23,0,[\"availableVisibilities\"]],\"name\",\"label\",\"name\",[28,\"action\",[[23,0,[]],\"updateVisibility\"],null]]]],[0,\"\\n    \"],[1,[28,\"svg-jar\",[\"arrow-down-small\"],null],false],[0,\"\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-psm-visibility-input.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-publishmenu-draft", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "MXVPDnzh",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"gh-publishmenu-heading\"],[8],[0,\"Ready to publish your \"],[1,[23,0,[\"post\",\"displayName\"]],false],[0,\"?\"],[9],[0,\"\\n\"],[7,\"section\",true],[10,\"class\",\"gh-publishmenu-content\"],[8],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-section\"],[8],[0,\"\\n        \"],[7,\"div\",false],[12,\"class\",[29,[\"gh-publishmenu-radio \",[28,\"if\",[[28,\"eq\",[[23,0,[\"saveType\"]],\"publish\"],null],\"active\"],null]]]],[3,\"action\",[[23,0,[]],\"setSaveType\",\"publish\"],[[\"on\"],[\"click\"]]],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-button\"],[10,\"data-test-publishmenu-published-option\",\"\"],[8],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-content\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-label\"],[8],[0,\"Set it live now\"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-desc\"],[8],[0,\"Publish this \"],[1,[23,0,[\"post\",\"displayName\"]],false],[0,\" immediately\"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[7,\"div\",false],[12,\"class\",[29,[\"gh-publishmenu-radio \",[28,\"if\",[[28,\"eq\",[[23,0,[\"saveType\"]],\"schedule\"],null],\"active\"],null]]]],[3,\"action\",[[23,0,[]],\"setSaveType\",\"schedule\"],[[\"on\"],[\"click\"]]],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-button\"],[10,\"data-test-publishmenu-scheduled-option\",\"\"],[8],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-content\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-label\"],[8],[0,\"Schedule it for later\"],[9],[0,\"\\n                \"],[5,\"gh-date-time-picker\",[],[[\"@date\",\"@time\",\"@setDate\",\"@setTime\",\"@setTypedDateError\",\"@errors\",\"@dateErrorProperty\",\"@timeErrorProperty\",\"@minDate\",\"@isActive\"],[[23,0,[\"post\",\"publishedAtBlogDate\"]],[23,0,[\"post\",\"publishedAtBlogTime\"]],[28,\"action\",[[23,0,[]],\"setDate\"],null],[28,\"action\",[[23,0,[]],\"setTime\"],null],[23,0,[\"setTypedDateError\"]],[23,0,[\"post\",\"errors\"]],\"publishedAtBlogDate\",\"publishedAtBlogTime\",[23,0,[\"_minDate\"]],[28,\"eq\",[[23,0,[\"saveType\"]],\"schedule\"],null]]]],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-desc\"],[8],[0,\"Set automatic future publish date\"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[28,\"and\",[[23,0,[\"canSendEmail\"]],[24,[\"showSendEmail\"]]],null]],null,{\"statements\":[[0,\"        \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-section\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio gh-publishmenu-email\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"backgroundLoader\",\"isRunning\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"div\",true],[10,\"class\",\"gh-loading-spinner\"],[10,\"style\",\"zoom: 50%\"],[8],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                    \"],[7,\"div\",true],[11,\"class\",[29,[\"gh-publishmenu-email-label \",[28,\"if\",[[23,0,[\"disableEmailOption\"]],\"pe-none\"],null]]]],[8],[0,\"\\n                        \"],[7,\"label\",true],[11,\"class\",[29,[\"gh-publishmenu-radio-label \",[28,\"if\",[[23,0,[\"disableEmailOption\"]],\"midgrey\"],null]]]],[10,\"for\",\"email-when-published-checkbox\"],[8],[0,\"Send by email\"],[9],[0,\"\\n\"],[4,\"if\",[[28,\"or\",[[23,0,[\"memberCount\"]],[23,0,[\"session\",\"user\",\"isEditor\"]]],null]],null,{\"statements\":[[0,\"                            \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-desc\"],[8],[0,\"Deliver post to members\"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                            \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-desc\"],[8],[0,\"You haven't got any members\"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                    \"],[9],[0,\"\\n                    \"],[7,\"div\",true],[11,\"class\",[29,[\"for-switch small \",[28,\"if\",[[23,0,[\"disableEmailOption\"]],\"pe-none\"],null]]]],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"switch container\"],[10,\"for\",\"email-when-published-checkbox\"],[8],[0,\"\\n                            \"],[5,\"input\",[],[[\"@checked\",\"@type\",\"@id\",\"@name\",\"@disabled\"],[[23,0,[\"sendEmailWhenPublished\"]],\"checkbox\",\"email-when-published-checkbox\",\"email-when-published\",[23,0,[\"disableEmailOption\"]]]]],[0,\"\\n                            \"],[7,\"span\",false],[12,\"class\",\"input-toggle-component gh-publishmenu-email-checkbox\"],[3,\"on\",[\"click\",[28,\"toggle\",[\"sendEmailWhenPublished\",[23,0,[]]],null]]],[8],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[9],[0,\"\\n\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-publishmenu-draft.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-publishmenu-published", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "OiMXF2qE",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"gh-publishmenu-heading\"],[8],[0,\"Update \"],[1,[24,[\"post\",\"displayName\"]],false],[0,\" status\"],[9],[0,\"\\n\"],[7,\"section\",true],[10,\"class\",\"gh-publishmenu-content gh-publishmenu-section\"],[8],[0,\"\\n    \"],[7,\"div\",false],[12,\"class\",[29,[\"gh-publishmenu-radio \",[28,\"if\",[[28,\"eq\",[[23,0,[\"saveType\"]],\"draft\"],null],\"active\"],null]]]],[3,\"action\",[[23,0,[]],[23,0,[\"setSaveType\"]],\"draft\"],[[\"on\"],[\"click\"]]],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-button\"],[10,\"data-test-publishmenu-unpublished-option\",\"\"],[8],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-content\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-label\"],[8],[0,\"Unpublished\"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-desc\"],[8],[0,\"Revert this \"],[1,[24,[\"post\",\"displayName\"]],false],[0,\" to a private draft\"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n    \"],[7,\"div\",false],[12,\"class\",[29,[\"gh-publishmenu-radio \",[28,\"if\",[[28,\"eq\",[[23,0,[\"saveType\"]],\"publish\"],null],\"active\"],null]]]],[3,\"action\",[[23,0,[]],[23,0,[\"setSaveType\"]],\"publish\"],[[\"on\"],[\"click\"]]],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-button\"],[10,\"data-test-publishmenu-published-option\",\"\"],[8],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-content\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-label\"],[8],[0,\"Published\"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-desc\"],[8],[0,\"Display this \"],[1,[24,[\"post\",\"displayName\"]],false],[0,\" publicly\"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-publishmenu-published.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-publishmenu-scheduled", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "gv7rcyk+",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"gh-publishmenu-heading\"],[8],[0,\"Will be published in \"],[1,[23,0,[\"timeToPublished\"]],false],[9],[0,\"\\n\"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-content\"],[8],[0,\"\\n    \"],[7,\"section\",true],[10,\"class\",\"gh-publishmenu-section\"],[8],[0,\"\\n        \"],[7,\"div\",false],[12,\"class\",[29,[\"gh-publishmenu-radio \",[28,\"if\",[[28,\"eq\",[[23,0,[\"saveType\"]],\"draft\"],null],\"active\"],null]]]],[3,\"action\",[[23,0,[]],\"setSaveType\",\"draft\"],[[\"on\"],[\"click\"]]],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-button\"],[10,\"data-test-publishmenu-draft-option\",\"\"],[8],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-content\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-label\"],[8],[0,\"Revert to draft\"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-desc\"],[8],[0,\"Do not publish\"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[7,\"div\",false],[12,\"class\",[29,[\"gh-publishmenu-radio \",[28,\"if\",[[28,\"eq\",[[23,0,[\"saveType\"]],\"schedule\"],null],\"active\"],null]]]],[3,\"action\",[[23,0,[]],\"setSaveType\",\"schedule\"],[[\"on\"],[\"click\"]]],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-button\"],[10,\"data-test-publishmenu-scheduled-option\",\"\"],[8],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-content\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-label\"],[8],[0,\"Schedule for later\"],[9],[0,\"\\n                \"],[5,\"gh-date-time-picker\",[],[[\"@date\",\"@time\",\"@setDate\",\"@setTime\",\"@setTypedDateError\",\"@errors\",\"@dateErrorProperty\",\"@timeErrorProperty\",\"@minDate\",\"@isActive\"],[[23,0,[\"post\",\"publishedAtBlogDate\"]],[23,0,[\"post\",\"publishedAtBlogTime\"]],[28,\"action\",[[23,0,[]],\"setDate\"],null],[28,\"action\",[[23,0,[]],\"setTime\"],null],[23,0,[\"setTypedDateError\"]],[23,0,[\"post\",\"errors\"]],\"publishedAtBlogDate\",\"publishedAtBlogTime\",[23,0,[\"_minDate\"]],[28,\"eq\",[[23,0,[\"saveType\"]],\"schedule\"],null]]]],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-desc\"],[8],[0,\"Set automatic future publish date\"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[4,\"if\",[[24,[\"showSendEmail\"]]],null,{\"statements\":[[4,\"unless\",[[23,0,[\"post\",\"email\"]]],null,{\"statements\":[[0,\"            \"],[7,\"section\",true],[10,\"class\",\"gh-publishmenu-section\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio gh-publishmenu-email\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"backgroundLoader\",\"isRunning\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"div\",true],[10,\"class\",\"gh-loading-spinner\"],[10,\"style\",\"zoom: 50%\"],[8],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                    \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-email-label\"],[8],[0,\"\\n                        \"],[7,\"label\",true],[10,\"class\",\"gh-publishmenu-radio-label pe-none midgrey\"],[10,\"for\",\"email-when-published-checkbox\"],[8],[0,\"Send by email\"],[9],[0,\"\\n\"],[4,\"if\",[[28,\"or\",[[23,0,[\"memberCount\"]],[23,0,[\"session\",\"user\",\"isEditor\"]]],null]],null,{\"statements\":[[0,\"                        \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-desc\"],[8],[0,\"Deliver post to members\"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        \"],[7,\"div\",true],[10,\"class\",\"gh-publishmenu-radio-desc\"],[8],[0,\"You haven't got any members\"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                    \"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"for-switch small pe-none\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"switch container\"],[10,\"for\",\"email-when-published-checkbox\"],[8],[0,\"\\n                            \"],[5,\"input\",[],[[\"@checked\",\"@type\",\"@id\",\"@name\",\"@disabled\"],[[23,0,[\"post\",\"sendEmailWhenPublished\"]],\"checkbox\",\"email-when-published-checkbox\",\"email-when-published\",[23,0,[\"disableEmailOption\"]]]]],[0,\"\\n                            \"],[7,\"span\",false],[12,\"class\",\"input-toggle-component gh-publishmenu-email-checkbox\"],[3,\"on\",[\"click\",[28,\"toggle\",[\"sendEmailWhenPublished\",[23,0,[]]],null]]],[8],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-publishmenu-scheduled.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-publishmenu", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "defZZRDG",
    "block": "{\"symbols\":[\"dd\"],\"statements\":[[5,\"basic-dropdown\",[],[[\"@verticalPosition\",\"@onOpen\",\"@onClose\"],[\"below\",[28,\"action\",[[23,0,[]],\"open\"],null],[28,\"action\",[[23,0,[]],\"close\"],null]]],{\"statements\":[[0,\"\\n    \"],[6,[23,1,[\"Trigger\"]],[[12,\"class\",\"gh-btn gh-btn-outline gh-publishmenu-trigger\"]],[[],[]],{\"statements\":[[0,\"\\n        \"],[7,\"span\",true],[10,\"data-test-publishmenu-trigger\",\"\"],[8],[1,[23,0,[\"triggerText\"]],false],[0,\" \"],[1,[28,\"svg-jar\",[\"arrow-down\"],null],false],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n    \"],[6,[23,1,[\"Content\"]],[[12,\"class\",\"gh-publishmenu-dropdown\"]],[[],[]],{\"statements\":[[0,\"\\n\"],[4,\"if\",[[28,\"eq\",[[23,0,[\"displayState\"]],\"published\"],null]],null,{\"statements\":[[0,\"            \"],[5,\"gh-publishmenu-published\",[],[[\"@post\",\"@saveType\",\"@setSaveType\",\"@backgroundTask\"],[[23,0,[\"post\"]],[23,0,[\"saveType\"]],[28,\"action\",[[23,0,[]],\"setSaveType\"],null],[23,0,[\"backgroundTask\"]]]]],[0,\"\\n\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[28,\"eq\",[[23,0,[\"displayState\"]],\"scheduled\"],null]],null,{\"statements\":[[0,\"            \"],[5,\"gh-publishmenu-scheduled\",[],[[\"@post\",\"@saveType\",\"@isClosing\",\"@memberCount\",\"@setSaveType\",\"@setTypedDateError\"],[[23,0,[\"post\"]],[23,0,[\"saveType\"]],[23,0,[\"isClosing\"]],[23,0,[\"memberCount\"]],[28,\"action\",[[23,0,[]],\"setSaveType\"],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"typedDateError\"]]],null]],null]]]],[0,\"\\n\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"            \"],[5,\"gh-publishmenu-draft\",[],[[\"@post\",\"@saveType\",\"@setSaveType\",\"@setTypedDateError\",\"@backgroundTask\",\"@memberCount\",\"@sendEmailWhenPublished\"],[[23,0,[\"post\"]],[23,0,[\"saveType\"]],[28,\"action\",[[23,0,[]],\"setSaveType\"],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"typedDateError\"]]],null]],null],[23,0,[\"backgroundTask\"]],[23,0,[\"memberCount\"]],[23,0,[\"sendEmailWhenPublished\"]]]]],[0,\"\\n        \"]],\"parameters\":[]}]],\"parameters\":[]}],[0,\"\\n\"],[0,\"        \"],[7,\"footer\",true],[10,\"class\",\"gh-publishmenu-footer\"],[8],[0,\"\\n            \"],[7,\"button\",false],[12,\"class\",\"gh-btn gh-btn-outline gh-btn-link\"],[12,\"data-test-publishmenu-cancel\",\"\"],[3,\"on\",[\"click\",[28,\"action\",[[23,0,[]],[23,1,[\"actions\",\"close\"]]],null]]],[8],[0,\"\\n                \"],[7,\"span\",true],[8],[0,\"Cancel\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[5,\"gh-task-button\",[[12,\"data-test-publishmenu-save\",\"true\"]],[[\"@buttonText\",\"@task\",\"@taskArgs\",\"@successText\",\"@runningText\",\"@class\"],[[23,0,[\"buttonText\"]],[23,0,[\"save\"]],[28,\"hash\",null,[[\"dropdown\"],[[23,1,[]]]]],[23,0,[\"successText\"]],[23,0,[\"runningText\"]],\"gh-btn gh-btn-blue gh-publishmenu-button gh-btn-icon\"]]],[0,\"\\n        \"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[1]}],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"showEmailConfirmationModal\"]]],null,{\"statements\":[[0,\"    \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"confirm-email-send\",[28,\"hash\",null,[[\"memberCount\",\"isScheduled\",\"paidOnly\",\"retryEmailSend\"],[[23,0,[\"memberCount\"]],[28,\"eq\",[[23,0,[\"saveType\"]],\"schedule\"],null],[28,\"eq\",[[23,0,[\"post\",\"visibility\"]],\"paid\"],null],[23,0,[\"retryEmailSend\"]]]]],[23,0,[\"confirmEmailSend\"]],[23,0,[\"closeEmailConfirmationModal\"]],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-publishmenu.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-scroll-trigger", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "R7hi/VFS",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-scroll-trigger.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-search-input-trigger", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "Lqq6ACaV",
    "block": "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"class\",\"ember-power-select-search\"],[11,\"onmousedown\",[28,\"action\",[[23,0,[]],\"captureMouseDown\"],null]],[8],[0,\"\\n    \"],[1,[28,\"svg-jar\",[\"search\"],[[\"class\"],[\"gh-nav-search-icon\"]]],false],[0,\"\\n    \"],[7,\"input\",true],[10,\"autocomplete\",\"off\"],[10,\"autocorrect\",\"off\"],[10,\"autocapitalize\",\"off\"],[10,\"autofocus\",\"true\"],[11,\"value\",[28,\"if\",[[23,0,[\"extra\",\"labelPath\"]],[28,\"get\",[[24,[\"selected\"]],[23,0,[\"extra\",\"labelPath\"]]],null],[24,[\"selected\"]]],null]],[10,\"spellcheck\",\"false\"],[10,\"role\",\"combobox\"],[11,\"placeholder\",[22,\"placeholder\"]],[11,\"oninput\",[28,\"action\",[[23,0,[]],\"search\"],[[\"value\"],[\"target.value\"]]]],[11,\"onmousedown\",[28,\"action\",[[23,0,[]],\"captureMouseDown\"],null]],[11,\"onkeydown\",[28,\"action\",[[23,0,[]],\"handleKeydown\"],null]],[11,\"onkeyup\",[28,\"action\",[[23,0,[]],\"handleKeyup\"],null]],[10,\"type\",\"search\"],[8],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-search-input-trigger.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-search-input", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "6Evbz1w1",
    "block": "{\"symbols\":[\"name\",\"select\"],\"statements\":[[5,\"power-select\",[],[[\"@search\",\"@onChange\",\"@placeholder\",\"@searchEnabled\",\"@triggerComponent\",\"@renderInPlace\",\"@loadingMessage\"],[[28,\"action\",[[23,0,[]],\"search\"],null],[28,\"action\",[[23,0,[]],\"openSelected\"],null],\"Search site...\",false,\"gh-search-input-trigger\",true,\"Loading\"]],{\"statements\":[[0,\"\\n    \"],[1,[28,\"highlighted-text\",[[23,1,[\"title\"]],[23,2,[\"searchText\"]]],null],false],[0,\"\\n\"]],\"parameters\":[1,2]}],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-search-input.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-simplemde", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "yO92g7Kg",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-simplemde.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-site-iframe", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "l994dLyI",
    "block": "{\"symbols\":[],\"statements\":[[7,\"iframe\",true],[10,\"id\",\"site-frame\"],[10,\"class\",\"site-frame\"],[11,\"src\",[29,[[23,0,[\"config\",\"blogUrl\"]],\"/\"]]],[10,\"frameborder\",\"0\"],[10,\"allowtransparency\",\"true\"],[8],[9],[0,\"\\n\\n\"],[7,\"style\",true],[8],[0,\"\\n.site-frame {\\n    position: absolute;\\n    top: 0;\\n    right: 0;\\n    bottom: 0;\\n    left: 0;\\n    width: 100%;\\n    height: 100%;\\n    border: none;\\n    transform: translate3d(0, 0, 0);\\n}\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-site-iframe.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-tag-settings-form", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "CV7UVb+3",
    "block": "{\"symbols\":[],\"statements\":[[7,\"h4\",true],[10,\"class\",\"midlightgrey f-small fw5 ttu\"],[8],[0,\"Basic settings\"],[9],[0,\"\\n\"],[7,\"div\",true],[10,\"class\",\"pa5 pt4 br4 shadow-1 bg-grouped-table mt2 flex flex-column flex-row-ns items-start justify-between gh-tag-basic-settings-form\"],[8],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"order-1 flex flex-column items-start mr5 w-100 w-50-m w-two-thirds-l\"],[8],[0,\"\\n        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"tag\",\"errors\"]],[23,0,[\"tag\",\"hasValidated\"]],\"name\"]],{\"statements\":[[0,\"\\n            \"],[7,\"label\",true],[10,\"for\",\"tag-name\"],[8],[0,\"Name\"],[9],[0,\"\\n            \"],[5,\"gh-text-input\",[],[[\"@id\",\"@name\",\"@value\",\"@tabindex\",\"@focus-out\"],[\"tag-name\",\"name\",[23,0,[\"scratchTag\",\"name\"]],\"1\",[28,\"action\",[[23,0,[]],\"setProperty\",\"name\",[23,0,[\"scratchTag\",\"name\"]]],null]]]],[0,\"\\n            \"],[7,\"p\",true],[10,\"class\",\"description\"],[8],[0,\"\\n                Start with # to create internal tags\\n                \"],[7,\"a\",true],[10,\"href\",\"https://ghost.org/docs/concepts/tags/#internal-tag\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noreferrer\"],[8],[0,\"Learn more\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"tag\",\"errors\"]],\"name\"]]],[0,\"\\n        \"]],\"parameters\":[]}],[0,\"\\n\\n        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"tag\",\"errors\"]],[23,0,[\"tag\",\"hasValidated\"]],\"slug\"]],{\"statements\":[[0,\"\\n            \"],[7,\"label\",true],[10,\"for\",\"tag-slug\"],[8],[0,\"Slug\"],[9],[0,\"\\n            \"],[5,\"gh-text-input\",[],[[\"@value\",\"@id\",\"@name\",\"@tabindex\",\"@focus-out\"],[[23,0,[\"scratchTag\",\"slug\"]],\"tag-slug\",\"slug\",\"2\",[28,\"action\",[[23,0,[]],\"setProperty\",\"slug\",[23,0,[\"scratchTag\",\"slug\"]]],null]]]],[0,\"\\n            \"],[5,\"gh-url-preview\",[],[[\"@prefix\",\"@slug\",\"@tagName\",\"@classNames\"],[\"tag\",[23,0,[\"scratchTag\",\"slug\"]],\"p\",\"description\"]]],[0,\"\\n            \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"activeTag\",\"errors\"]],\"slug\"]]],[0,\"\\n        \"]],\"parameters\":[]}],[0,\"\\n\\n        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"tag\",\"errors\"]],[23,0,[\"tag\",\"hasValidated\"]],\"description\"]],{\"statements\":[[0,\"\\n            \"],[7,\"label\",true],[10,\"for\",\"tag-description\"],[8],[0,\"Description\"],[9],[0,\"\\n            \"],[5,\"gh-textarea\",[],[[\"@id\",\"@name\",\"@class\",\"@tabindex\",\"@value\",\"@focus-out\"],[\"tag-description\",\"description\",\"gh-tag-details-textarea\",\"3\",[23,0,[\"scratchTag\",\"description\"]],[28,\"action\",[[23,0,[]],\"setProperty\",\"description\",[23,0,[\"scratchTag\",\"description\"]]],null]]]],[0,\"\\n            \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"tag\",\"errors\"]],\"description\"]]],[0,\"\\n            \"],[7,\"p\",true],[8],[0,\"Maximum: \"],[7,\"b\",true],[8],[0,\"500\"],[9],[0,\" characters. You’ve used \"],[1,[28,\"gh-count-down-characters\",[[23,0,[\"scratchTag\",\"description\"]],500],null],false],[9],[0,\"\\n        \"]],\"parameters\":[]}],[0,\"\\n    \"],[9],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"order-0 mb6 mb0-ns order-2-ns w-100 w-50-m w-third-l\"],[8],[0,\"\\n        \"],[7,\"label\",true],[10,\"for\",\"tag-image\"],[8],[0,\"Tag image\"],[9],[0,\"\\n        \"],[5,\"gh-image-uploader-with-preview\",[],[[\"@image\",\"@text\",\"@class\",\"@allowUnsplash\",\"@update\",\"@remove\"],[[23,0,[\"tag\",\"featureImage\"]],\"Upload tag image\",\"gh-tag-image-uploader\",true,[28,\"action\",[[23,0,[]],\"setCoverImage\"],null],[28,\"action\",[[23,0,[]],\"clearCoverImage\"],null]]]],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"h4\",true],[10,\"class\",\"midlightgrey f-small fw5 ttu mt15\"],[8],[0,\"Meta data\"],[9],[0,\"\\n\"],[7,\"div\",true],[10,\"class\",\"pa5 pt4 br4 shadow-1 bg-grouped-table mt2 flex flex-column flex-row-ns items-start justify-between\"],[8],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"flex flex-column items-start mr5 w-100 w-50-m w-two-thirds-l\"],[8],[0,\"\\n        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"tag\",\"errors\"]],[23,0,[\"tag\",\"hasValidated\"]],\"metaTitle\"]],{\"statements\":[[0,\"\\n            \"],[7,\"label\",true],[10,\"for\",\"meta-title\"],[8],[0,\"Meta Title\"],[9],[0,\"\\n            \"],[5,\"gh-text-input\",[],[[\"@id\",\"@name\",\"@placeholder\",\"@tabindex\",\"@value\",\"@focus-out\"],[\"meta-title\",\"metaTitle\",[23,0,[\"scratchTag\",\"name\"]],\"4\",[23,0,[\"scratchTag\",\"metaTitle\"]],[28,\"action\",[[23,0,[]],\"setProperty\",\"metaTitle\",[23,0,[\"scratchTag\",\"metaTitle\"]]],null]]]],[0,\"\\n            \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"tag\",\"errors\"]],\"metaTitle\"]]],[0,\"\\n            \"],[7,\"p\",true],[8],[0,\"Recommended: \"],[7,\"b\",true],[8],[0,\"70\"],[9],[0,\" characters. You’ve used \"],[1,[28,\"gh-count-down-characters\",[[23,0,[\"scratchTag\",\"metaTitle\"]],70],null],false],[9],[0,\"\\n        \"]],\"parameters\":[]}],[0,\"\\n\\n        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"tag\",\"errors\"]],[23,0,[\"tag\",\"hasValidated\"]],\"metaDescription\"]],{\"statements\":[[0,\"\\n            \"],[7,\"label\",true],[10,\"for\",\"meta-description\"],[8],[0,\"Meta Description\"],[9],[0,\"\\n            \"],[5,\"gh-textarea\",[],[[\"@id\",\"@name\",\"@class\",\"@placeholder\",\"@tabindex\",\"@value\",\"@focus-out\"],[\"meta-description\",\"metaDescription\",\"gh-tag-details-textarea\",[23,0,[\"scratchTag\",\"description\"]],\"5\",[23,0,[\"scratchTag\",\"metaDescription\"]],[28,\"action\",[[23,0,[]],\"setProperty\",\"metaDescription\",[23,0,[\"scratchTag\",\"metaDescription\"]]],null]]]],[0,\"\\n            \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"tag\",\"errors\"]],\"metaDescription\"]]],[0,\"\\n            \"],[7,\"p\",true],[8],[0,\"Recommended: \"],[7,\"b\",true],[8],[0,\"156\"],[9],[0,\" characters. You’ve used \"],[1,[28,\"gh-count-down-characters\",[[23,0,[\"scratchTag\",\"metaDescription\"]],156],null],false],[9],[0,\"\\n        \"]],\"parameters\":[]}],[0,\"\\n    \"],[9],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"w-100 w-50-m w-third-l\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"form-group\"],[8],[0,\"\\n            \"],[7,\"label\",true],[8],[0,\"Search Engine Result Preview\"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"seo-preview\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"seo-preview-title\"],[8],[1,[23,0,[\"seoTitle\"]],false],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"seo-preview-link\"],[8],[1,[23,0,[\"seoURL\"]],false],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"seo-preview-description\"],[8],[1,[23,0,[\"seoDescription\"]],false],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-tag-settings-form.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-tags-list-item", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "vahZQwFx",
    "block": "{\"symbols\":[],\"statements\":[[5,\"link-to\",[[12,\"class\",\"gh-list-data gh-tag-list-title gh-list-cellwidth-70\"]],[[\"@route\",\"@model\",\"@title\"],[\"tag\",[22,\"tag\"],\"Edit tag\"]],{\"statements\":[[0,\"\\n    \"],[7,\"h3\",true],[10,\"class\",\"gh-tag-list-name\"],[8],[0,\"\\n        \"],[1,[23,0,[\"tag\",\"name\"]],false],[0,\"\\n    \"],[9],[0,\"\\n\"],[4,\"if\",[[23,0,[\"description\"]]],null,{\"statements\":[[0,\"        \"],[7,\"p\",true],[10,\"class\",\"ma0 pa0 f8 midgrey gh-tag-list-description\"],[8],[0,\"\\n            \"],[1,[23,0,[\"description\"]],false],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]}],[0,\"\\n\\n\"],[5,\"link-to\",[[12,\"class\",\"gh-list-data middarkgrey f8 gh-tag-list-slug gh-list-cellwidth-10\"]],[[\"@route\",\"@model\",\"@title\"],[\"tag\",[22,\"tag\"],\"Edit tag\"]],{\"statements\":[[0,\"\\n    \"],[7,\"span\",true],[11,\"title\",[29,[[23,0,[\"slug\"]]]]],[8],[1,[23,0,[\"slug\"]],false],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"postsCount\"]]],null,{\"statements\":[[0,\"    \"],[5,\"link-to\",[[12,\"class\",\"gh-list-data blue gh-tag-list-posts-count gh-list-cellwidth-10 f8\"]],[[\"@route\",\"@query\",\"@title\"],[\"posts\",[28,\"hash\",null,[[\"type\",\"author\",\"tag\",\"order\"],[null,null,[24,[\"tag\",\"slug\"]],null]]],[28,\"concat\",[\"List posts tagged with '\",[23,0,[\"tag\",\"name\"]],\"'\"],null]]],{\"statements\":[[0,\"\\n        \"],[7,\"span\",true],[10,\"class\",\"nowrap\"],[8],[1,[23,0,[\"postsLabel\"]],false],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[5,\"link-to\",[[12,\"class\",\"gh-list-data gh-tag-list-posts-count gh-list-cellwidth-10\"]],[[\"@route\",\"@model\",\"@title\"],[\"tag\",[22,\"tag\"],\"Edit tag\"]],{\"statements\":[[0,\"\\n        \"],[7,\"span\",true],[10,\"class\",\"nowrap f8 midlightgrey\"],[8],[1,[23,0,[\"postsLabel\"]],false],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n\"],[5,\"link-to\",[[12,\"class\",\"gh-list-data gh-list-cellwidth-10 gh-tag-list-chevron\"]],[[\"@route\",\"@model\",\"@title\"],[\"tag\",[22,\"tag\"],\"Edit tag\"]],{\"statements\":[[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"flex items-center justify-end w-100 h-100\"],[8],[0,\"\\n        \"],[7,\"span\",true],[10,\"class\",\"nr2\"],[8],[1,[28,\"svg-jar\",[\"arrow-right\"],[[\"class\"],[\"w6 h6 fill-midgrey pa1\"]]],false],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-tags-list-item.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-tags-management-container", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "mYNXJqYz",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1,[[23,0,[]]]],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-tags-management-container.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-task-button", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "dJ1hlS/h",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[25,1]],null,{\"statements\":[[0,\"    \"],[14,1,[[28,\"hash\",null,[[\"isIdle\",\"isRunning\",\"isSuccess\",\"isFailure\"],[[23,0,[\"isIdle\"]],[23,0,[\"isRunning\"]],[23,0,[\"isSuccess\"]],[23,0,[\"isFailure\"]]]]]]],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[7,\"span\",true],[8],[0,\"\\n    \"],[4,\"if\",[[23,0,[\"isRunning\"]]],null,{\"statements\":[[1,[28,\"svg-jar\",[\"spinner\"],[[\"class\"],[\"gh-icon-spinner\"]]],false],[1,[23,0,[\"runningText\"]],false]],\"parameters\":[]},null],[0,\"\\n    \"],[4,\"if\",[[23,0,[\"isIdle\"]]],null,{\"statements\":[[1,[23,0,[\"buttonText\"]],false]],\"parameters\":[]},null],[0,\"\\n    \"],[4,\"if\",[[23,0,[\"isSuccess\"]]],null,{\"statements\":[[1,[28,\"svg-jar\",[\"check-circle\"],null],false],[0,\" \"],[1,[23,0,[\"successText\"]],false]],\"parameters\":[]},null],[0,\"\\n    \"],[4,\"if\",[[23,0,[\"isFailure\"]]],null,{\"statements\":[[1,[28,\"svg-jar\",[\"retry\"],null],false],[0,\" \"],[1,[23,0,[\"failureText\"]],false]],\"parameters\":[]},null],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-task-button.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-text-input", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "bcnUwlAB",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-text-input.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-theme-error-li", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "aZ3zH2YM",
    "block": "{\"symbols\":[\"failure\"],\"statements\":[[7,\"a\",false],[12,\"href\",\"\"],[12,\"class\",\"theme-validation-toggle-details\"],[12,\"data-test-toggle-details\",\"\"],[3,\"action\",[[23,0,[]],\"toggleDetails\"]],[8],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"theme-validation-type-label\"],[8],[9],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"flex items-center flex-auto\"],[8],[0,\"\\n        \"],[7,\"h4\",true],[10,\"class\",\"theme-validation-rule-text\"],[8],[0,\"\\n            \"],[1,[23,0,[\"error\",\"rule\"]],true],[0,\"\\n        \"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"theme-validation-rule-icon\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showDetails\"]]],null,{\"statements\":[[0,\"                \"],[1,[28,\"svg-jar\",[\"arrow-down\"],null],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                \"],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"showDetails\"]]],null,{\"statements\":[[0,\"    \"],[7,\"p\",true],[10,\"class\",\"theme-validation-details\"],[8],[0,\"\\n        \"],[1,[23,0,[\"error\",\"details\"]],true],[0,\"\\n    \"],[9],[0,\"\\n\"],[4,\"if\",[[23,0,[\"error\",\"failures\"]]],null,{\"statements\":[[0,\"        \"],[7,\"div\",true],[10,\"class\",\"theme-validation-list\"],[8],[0,\"\\n            \"],[7,\"h6\",true],[8],[0,\"Affected files:\"],[9],[0,\"\\n            \"],[7,\"ul\",true],[8],[0,\"\\n\"],[4,\"each\",[[23,0,[\"error\",\"failures\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"li\",true],[8],[7,\"code\",true],[8],[1,[23,1,[\"ref\"]],false],[9],[4,\"if\",[[23,1,[\"message\"]]],null,{\"statements\":[[0,\": \"],[1,[23,1,[\"message\"]],false]],\"parameters\":[]},null],[9],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-theme-error-li.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-theme-table", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "bX6v04HS",
    "block": "{\"symbols\":[\"theme\"],\"statements\":[[7,\"div\",true],[10,\"class\",\"apps-grid\"],[10,\"data-test-themes-list\",\"\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"sortedThemes\"]]],null,{\"statements\":[[0,\"\\n\"],[4,\"each\",[[23,0,[\"sortedThemes\"]]],null,{\"statements\":[[0,\"    \"],[7,\"div\",true],[10,\"class\",\"apps-grid-cell\"],[11,\"data-test-theme-id\",[29,[[23,1,[\"name\"]]]]],[11,\"data-test-theme-active\",[29,[[23,1,[\"active\"]]]]],[8],[0,\"\\n        \"],[7,\"div\",true],[11,\"class\",[29,[\"apps-card-app \",[28,\"if\",[[23,1,[\"active\"]],\"theme-list-item--active\"],null]]]],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"apps-card-left\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"apps-card-meta\"],[8],[0,\"\\n                    \"],[7,\"h3\",true],[10,\"class\",\"apps-card-app-title\"],[10,\"data-test-theme-title\",\"\"],[8],[1,[23,1,[\"label\"]],false],[9],[0,\"\\n                    \"],[7,\"p\",true],[10,\"class\",\"apps-card-app-desc\"],[10,\"data-test-theme-description\",\"\"],[8],[7,\"span\",true],[10,\"class\",\"description\"],[8],[0,\"Version \"],[1,[23,1,[\"version\"]],false],[9],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"apps-card-right\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"apps-configured\"],[8],[0,\"\\n\"],[4,\"if\",[[23,1,[\"isDeletable\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"a\",false],[12,\"href\",\"#\"],[12,\"disabled\",[23,1,[\"active\"]]],[12,\"class\",\"apps-configured-action red-hover red-bg-hover\"],[12,\"data-test-theme-delete-button\",\"\"],[3,\"action\",[[23,0,[]],[23,0,[\"deleteTheme\"]],[23,1,[]]]],[8],[0,\"Delete\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                    \"],[7,\"a\",false],[12,\"href\",\"#\"],[12,\"class\",\"apps-configured-action darkgrey-hover blue-bg-hover\"],[12,\"data-test-theme-download-button\",\"\"],[3,\"action\",[[23,0,[]],[23,0,[\"downloadTheme\"]],[23,1,[]]]],[8],[0,\"Download\"],[9],[0,\"\\n\"],[4,\"if\",[[23,1,[\"active\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"span\",true],[10,\"class\",\"gh-badge gh-badge-black apps-configured-action\"],[10,\"data-test-theme-badge\",\"\"],[8],[0,\"Active\"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        \"],[7,\"a\",false],[12,\"href\",\"#\"],[12,\"class\",\"apps-configured-action apps-configured-action-activate green-hover green-bg-hover\"],[12,\"data-test-theme-activate-button\",\"\"],[3,\"action\",[[23,0,[]],[23,0,[\"activateTheme\"]],[23,1,[\"model\"]]]],[8],[0,\"\\n                            Activate\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[7,\"div\",true],[10,\"class\",\"apps-card-app\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"apps-card-left\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"apps-card-meta\"],[8],[0,\"\\n                \"],[7,\"h3\",true],[10,\"class\",\"apps-card-app-title\"],[8],[0,\"No themes found\"],[9],[0,\"\\n                \"],[7,\"p\",true],[10,\"class\",\"apps-card-app-desc\"],[8],[7,\"span\",true],[10,\"class\",\"description\"],[8],[0,\"Please upload a theme to continue\"],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-theme-table.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-timezone-select", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "gNzE7eD3",
    "block": "{\"symbols\":[],\"statements\":[[7,\"span\",true],[10,\"class\",\"gh-select\"],[11,\"data-select-text\",[29,[[23,0,[\"selectedTimezone\",\"label\"]]]]],[10,\"tabindex\",\"0\"],[8],[0,\"\\n    \"],[5,\"one-way-select\",[],[[\"@id\",\"@name\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@value\",\"@update\"],[\"activeTimezone\",\"general[activeTimezone]\",[23,0,[\"selectableTimezones\"]],\"name\",\"label\",[23,0,[\"selectedTimezone\"]],[28,\"action\",[[23,0,[]],\"setTimezone\"],null]]]],[0,\"\\n    \"],[1,[28,\"svg-jar\",[\"arrow-down-small\"],null],false],[0,\"\\n\"],[9],[0,\"\\n\"],[4,\"if\",[[23,0,[\"hasTimezoneOverride\"]]],null,{\"statements\":[[0,\"    \"],[7,\"p\",true],[8],[0,\"Your timezone has been automatically set to \"],[1,[23,0,[\"activeTimezone\"]],false],[0,\".\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[7,\"p\",true],[8],[0,\"The local time here is currently \"],[1,[23,0,[\"localTime\"]],false],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-timezone-select.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-token-input", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "WDSAI2av",
    "block": "{\"symbols\":[\"option\",\"@class\",\"@triggerRole\",\"@ariaDescribedBy\",\"@ariaInvalid\",\"@ariaLabel\",\"@ariaLabelledBy\",\"@afterOptionsComponent\",\"@allowClear\",\"@beforeOptionsComponent\",\"@buildSelection\",\"@calculatePosition\",\"@destination\",\"@disabled\",\"@dropdownClass\",\"@extra\",\"@groupComponent\",\"@horizontalPosition\",\"@initiallyOpened\",\"@loadingMessage\",\"@matchTriggerWidth\",\"@noMatchesMessage\",\"@onClose\",\"@onInput\",\"@onOpen\",\"@placeholder\",\"@placeholderComponent\",\"@preventScroll\",\"@registerAPI\",\"@renderInPlace\",\"@required\",\"@scrollTo\",\"@searchMessage\",\"@searchPlaceholder\",\"@selected\",\"@selectedItemComponent\",\"@eventType\",\"@title\",\"@triggerClass\",\"@triggerId\",\"@verticalPosition\",\"@tabindex\"],\"statements\":[[5,\"gh-token-input/select-multiple\",[[12,\"class\",[28,\"concat\",[\"gh-token-input \",[23,2,[]]],null]],[12,\"data-test-token-input\",\"true\"]],[[\"@triggerRole\",\"@ariaDescribedBy\",\"@ariaInvalid\",\"@ariaLabel\",\"@ariaLabelledBy\",\"@afterOptionsComponent\",\"@allowClear\",\"@beforeOptionsComponent\",\"@buildSelection\",\"@calculatePosition\",\"@closeOnSelect\",\"@defaultHighlighted\",\"@destination\",\"@disabled\",\"@dropdownClass\",\"@extra\",\"@groupComponent\",\"@horizontalPosition\",\"@initiallyOpened\",\"@loadingMessage\",\"@matcher\",\"@matchTriggerWidth\",\"@noMatchesMessage\",\"@onBlur\",\"@onChange\",\"@onClose\",\"@onFocus\",\"@onInput\",\"@onKeydown\",\"@onOpen\",\"@options\",\"@optionsComponent\",\"@placeholder\",\"@placeholderComponent\",\"@preventScroll\",\"@registerAPI\",\"@renderInPlace\",\"@required\",\"@scrollTo\",\"@search\",\"@searchEnabled\",\"@searchField\",\"@searchMessage\",\"@searchPlaceholder\",\"@selected\",\"@selectedItemComponent\",\"@eventType\",\"@title\",\"@triggerClass\",\"@triggerComponent\",\"@triggerId\",\"@verticalPosition\",\"@tabindex\"],[[23,3,[]],[23,4,[]],[23,5,[]],[23,6,[]],[23,7,[]],[23,8,[]],[23,9,[]],[23,10,[]],[23,11,[]],[23,12,[]],[23,0,[\"closeOnSelect\"]],[23,0,[\"defaultHighlighted\"]],[23,13,[]],[23,14,[]],[23,15,[]],[23,16,[]],[23,17,[]],[23,18,[]],[23,19,[]],[23,20,[]],[23,0,[\"matcher\"]],[23,21,[]],[23,22,[]],[23,0,[\"handleBlur\"]],[23,0,[\"selectOrCreate\"]],[23,23,[]],[23,0,[\"handleFocus\"]],[23,24,[]],[23,0,[\"handleKeydown\"]],[23,25,[]],[23,0,[\"optionsWithoutSelected\"]],[23,0,[\"optionsComponent\"]],[23,26,[]],[23,27,[]],[23,28,[]],[23,29,[]],[23,30,[]],[23,31,[]],[23,32,[]],[23,0,[\"searchAndSuggest\"]],true,[23,0,[\"searchField\"]],[23,33,[]],[23,34,[]],[23,35,[]],[23,36,[]],[23,37,[]],[23,38,[]],[23,39,[]],[23,0,[\"triggerComponent\"]],[23,40,[]],[23,41,[]],[23,42,[]]]],{\"statements\":[[0,\"\\n\"],[4,\"if\",[[23,1,[\"__isSuggestion__\"]]],null,{\"statements\":[[0,\"        \"],[5,\"gh-token-input/suggested-option\",[],[[\"@option\"],[[23,1,[]]]]],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"        \"],[1,[28,\"get\",[[23,1,[]],[23,0,[\"labelField\"]]],null],false],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[1]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-token-input.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-token-input/label-token", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "MmXiLf1T",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-token-input/label-token.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-token-input/select-multiple", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "53zfJIz/",
    "block": "{\"symbols\":[\"option\",\"select\",\"@triggerRole\",\"@ariaDescribedBy\",\"@ariaInvalid\",\"@ariaLabel\",\"@ariaLabelledBy\",\"@afterOptionsComponent\",\"@allowClear\",\"@calculatePosition\",\"@closeOnSelect\",\"@defaultHighlighted\",\"@destination\",\"@disabled\",\"@dropdownClass\",\"@extra\",\"@groupComponent\",\"@horizontalPosition\",\"@initiallyOpened\",\"@loadingMessage\",\"@matcher\",\"@matchTriggerWidth\",\"@noMatchesMessage\",\"@onBlur\",\"@onChange\",\"@onClose\",\"@onInput\",\"@options\",\"@optionsComponent\",\"@placeholder\",\"@placeholderComponent\",\"@preventScroll\",\"@registerAPI\",\"@renderInPlace\",\"@required\",\"@scrollTo\",\"@search\",\"@searchEnabled\",\"@searchField\",\"@searchMessage\",\"@searchPlaceholder\",\"@selected\",\"@selectedItemComponent\",\"@eventType\",\"@title\",\"@tabindex\",\"@triggerId\",\"@verticalPosition\",\"&attrs\",\"&default\"],\"statements\":[[5,\"power-select\",[[13,49]],[[\"@triggerRole\",\"@ariaDescribedBy\",\"@ariaInvalid\",\"@ariaLabel\",\"@ariaLabelledBy\",\"@afterOptionsComponent\",\"@allowClear\",\"@beforeOptionsComponent\",\"@buildSelection\",\"@calculatePosition\",\"@closeOnSelect\",\"@defaultHighlighted\",\"@destination\",\"@disabled\",\"@dropdownClass\",\"@extra\",\"@groupComponent\",\"@horizontalPosition\",\"@initiallyOpened\",\"@loadingMessage\",\"@matcher\",\"@matchTriggerWidth\",\"@noMatchesMessage\",\"@onBlur\",\"@onChange\",\"@onClose\",\"@onFocus\",\"@onInput\",\"@onKeydown\",\"@onOpen\",\"@options\",\"@optionsComponent\",\"@placeholder\",\"@placeholderComponent\",\"@preventScroll\",\"@registerAPI\",\"@renderInPlace\",\"@required\",\"@scrollTo\",\"@search\",\"@searchEnabled\",\"@searchField\",\"@searchMessage\",\"@searchPlaceholder\",\"@selected\",\"@selectedItemComponent\",\"@eventType\",\"@title\",\"@triggerClass\",\"@triggerComponent\",\"@triggerId\",\"@verticalPosition\",\"@tabindex\"],[[23,3,[]],[23,4,[]],[23,5,[]],[23,6,[]],[23,7,[]],[23,8,[]],[23,9,[]],[23,0,[\"beforeOptionsComponent\"]],[23,0,[\"buildSelection\"]],[23,10,[]],[23,11,[]],[23,12,[]],[23,13,[]],[23,14,[]],[23,15,[]],[28,\"assign\",[[23,16,[]],[28,\"hash\",null,[[\"optionMouseDown\",\"optionTouchStart\"],[[23,0,[\"optionMouseDown\"]],[23,0,[\"optionTouchStart\"]]]]]],null],[23,17,[]],[23,18,[]],[23,19,[]],[23,20,[]],[23,21,[]],[23,22,[]],[23,23,[]],[23,24,[]],[23,25,[]],[23,26,[]],[23,0,[\"handleFocus\"]],[23,27,[]],[23,0,[\"handleKeydown\"]],[23,0,[\"handleOpen\"]],[23,28,[]],[23,29,[]],[23,30,[]],[23,31,[]],[23,32,[]],[23,33,[]],[23,34,[]],[23,35,[]],[23,36,[]],[23,37,[]],[23,38,[]],[23,39,[]],[23,40,[]],[23,41,[]],[23,42,[]],[23,43,[]],[23,44,[]],[23,45,[]],[23,0,[\"concatenatedTriggerClass\"]],[28,\"component\",[[23,0,[\"triggerComponent\"]]],[[\"tabindex\"],[[23,46,[]]]]],[23,47,[]],[23,48,[]],[23,0,[\"computedTabIndex\"]]]],{\"statements\":[[0,\"\\n    \"],[14,50,[[23,1,[]],[23,2,[]]]],[0,\"\\n\"]],\"parameters\":[1,2]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-token-input/select-multiple.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-token-input/suggested-option", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "cALi/Flu",
    "block": "{\"symbols\":[],\"statements\":[[1,[24,[\"option\",\"text\"]],false],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-token-input/suggested-option.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-token-input/tag-token", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "wgWdbfxd",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-token-input/tag-token.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-token-input/trigger", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "NNydLMdB",
    "block": "{\"symbols\":[\"opt\",\"idx\",\"@select\",\"@tabindex\",\"@onFocus\",\"@onBlur\",\"&default\"],\"statements\":[[5,\"sortable-objects\",[],[[\"@tagName\",\"@id\",\"@class\",\"@sortableObjectList\",\"@enableSort\",\"@useSwap\",\"@sortEndAction\"],[\"ul\",[28,\"concat\",[\"ember-power-select-multiple-options-\",[24,[\"select\",\"uniqueId\"]]],null],\"ember-power-select-multiple-options\",[24,[\"select\",\"selected\"]],true,false,[28,\"action\",[[23,0,[]],\"reorderItems\"],null]]],{\"statements\":[[0,\"\\n\"],[4,\"each\",[[24,[\"select\",\"selected\"]]],null,{\"statements\":[[4,\"component\",[[28,\"or\",[[23,0,[\"extra\",\"tokenComponent\"]],\"draggable-object\"],null]],[[\"tagName\",\"class\",\"select\",\"content\",\"idx\",\"isSortable\",\"mouseDown\",\"touchStart\"],[\"li\",\"ember-power-select-multiple-option\",[24,[\"select\"]],[28,\"readonly\",[[23,1,[]]],null],[23,2,[]],true,[28,\"action\",[[23,0,[]],\"handleOptionMouseDown\"],null],[28,\"action\",[[23,0,[]],\"handleOptionTouchStart\"],null]]],{\"statements\":[[4,\"if\",[[23,0,[\"selectedItemComponent\"]]],null,{\"statements\":[[0,\"                \"],[1,[28,\"component\",[[23,0,[\"selectedItemComponent\"]]],[[\"option\",\"select\"],[[28,\"readonly\",[[23,1,[]]],null],[28,\"readonly\",[[24,[\"select\"]]],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                \"],[14,7,[[23,1,[]],[24,[\"select\"]]]],[0,\"\\n\"]],\"parameters\":[]}],[4,\"unless\",[[24,[\"select\",\"disabled\"]]],null,{\"statements\":[[0,\"                \"],[7,\"span\",true],[10,\"role\",\"button\"],[10,\"aria-label\",\"remove element\"],[10,\"class\",\"ember-power-select-multiple-remove-btn\"],[11,\"data-selected-index\",[23,2,[]]],[8],[0,\"\\n                    \"],[1,[28,\"svg-jar\",[\"close\"],[[\"data-selected-index\"],[[23,2,[]]]]],false],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null]],\"parameters\":[1,2]},{\"statements\":[[4,\"if\",[[28,\"and\",[[24,[\"placeholder\"]],[28,\"not\",[[23,0,[\"searchEnabled\"]]],null]],null]],null,{\"statements\":[[0,\"            \"],[7,\"span\",true],[10,\"class\",\"ember-power-select-placeholder\"],[8],[1,[22,\"placeholder\"],false],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]}],[0,\"\\n\"],[4,\"if\",[[23,0,[\"searchEnabled\"]]],null,{\"statements\":[[0,\"        \"],[7,\"input\",false],[12,\"class\",\"ember-power-select-trigger-multiple-input\"],[12,\"autocomplete\",\"off\"],[12,\"autocorrect\",\"off\"],[12,\"autocapitalize\",\"off\"],[12,\"spellcheck\",\"false\"],[12,\"id\",[29,[\"ember-power-select-trigger-multiple-input-\",[23,3,[\"uniqueId\"]]]]],[12,\"value\",[23,3,[\"searchText\"]]],[12,\"aria-controls\",[23,0,[\"listboxId\"]]],[12,\"style\",[23,0,[\"triggerMultipleInputStyle\"]]],[12,\"placeholder\",[23,0,[\"maybePlaceholder\"]]],[12,\"disabled\",[23,3,[\"disabled\"]]],[12,\"tabindex\",[23,4,[]]],[12,\"type\",\"search\"],[3,\"on\",[\"focus\",[23,5,[]]]],[3,\"on\",[\"blur\",[23,6,[]]]],[3,\"on\",[\"input\",[23,0,[\"handleInput\"]]]],[3,\"on\",[\"keydown\",[23,0,[\"handleKeydown\"]]]],[3,\"did-insert\",[[23,0,[\"storeInputStyles\"]]]],[8],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]}],[0,\"\\n\"],[7,\"span\",true],[10,\"class\",\"ember-power-select-status-icon\"],[8],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-token-input/trigger.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-tour-item", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "B4gFbGo/",
    "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[23,0,[\"isVisible\"]]],null,{\"statements\":[[0,\"    \"],[5,\"liquid-tether\",[],[[\"@class\",\"@target\",\"@attachment\",\"@targetAttachment\",\"@targetOffset\"],[\"throbber-container\",[23,0,[\"target\"]],\"middle center\",[23,0,[\"throbberAttachment\"]],[23,0,[\"throbberOffset\"]]]],{\"statements\":[[0,\"\\n        \"],[7,\"a\",false],[12,\"class\",\"throbber-trigger\"],[12,\"href\",\"#\"],[12,\"id\",[23,0,[\"_throbberElementId\"]]],[3,\"action\",[[23,0,[]],\"open\"]],[8],[0,\"\\n            \"],[7,\"span\",true],[10,\"class\",\"throbber\"],[8],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"isOpen\"]]],null,{\"statements\":[[0,\"        \"],[5,\"liquid-wormhole\",[],[[\"@class\"],[\"tour-container\"]],{\"statements\":[[0,\"\\n            \"],[7,\"div\",false],[12,\"class\",\"tour-background\"],[3,\"action\",[[23,0,[]],\"close\"],[[\"on\"],[\"click\"]]],[8],[9],[0,\"\\n        \"]],\"parameters\":[]}],[0,\"\\n\\n\"],[0,\"        \"],[5,\"liquid-tether\",[],[[\"@class\",\"@target\",\"@attachment\",\"@targetAttachment\",\"@offset\"],[\"tour\",[23,0,[\"_throbberElementSelector\"]],[23,0,[\"_popoverAttachment\"]],[23,0,[\"_popoverTargetAttachment\"]],[23,0,[\"_popoverOffset\"]]]],{\"statements\":[[0,\"\\n            \"],[7,\"div\",true],[11,\"class\",[29,[\"popover-item popover-triangle-\",[23,0,[\"popoverTriangleClass\"]]]]],[8],[0,\"\\n                \"],[7,\"h3\",true],[10,\"class\",\"popover-title\"],[8],[1,[23,0,[\"_throbber\",\"title\"]],false],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"popover-body\"],[8],[0,\"\\n                    \"],[1,[23,0,[\"_throbber\",\"message\"]],true],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"footer\",true],[10,\"class\",\"popover-foot\"],[8],[0,\"\\n                    \"],[7,\"a\",false],[12,\"class\",\"tour-optout\"],[12,\"href\",\"#\"],[3,\"action\",[[23,0,[]],\"optOut\"]],[8],[0,\"Not your first time? \"],[7,\"em\",true],[8],[0,\"Skip these tips\"],[9],[9],[0,\"\\n                    \"],[7,\"a\",false],[12,\"class\",\"tour-dismiss gh-btn gh-btn-black\"],[12,\"href\",\"#\"],[3,\"action\",[[23,0,[]],\"markAsViewed\"]],[8],[7,\"span\",true],[8],[0,\"Ok, got it\"],[9],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-tour-item.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-unsplash-photo", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "x3yS9WIr",
    "block": "{\"symbols\":[],\"statements\":[[7,\"a\",true],[10,\"class\",\"gh-unsplash-photo\"],[10,\"href\",\"#\"],[11,\"onclick\",[28,\"action\",[[23,0,[]],\"zoom\"],null]],[11,\"data-unsplash-zoomed-photo\",[28,\"if\",[[23,0,[\"zoomed\"]],[23,0,[\"photo\",\"id\"]]],null]],[11,\"data-test-unsplash-photo\",[23,0,[\"photo\",\"id\"]]],[11,\"style\",[23,0,[\"style\"]]],[8],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-unsplash-photo-container\"],[11,\"style\",[23,0,[\"containerStyle\"]]],[10,\"data-test-unsplash-photo-container\",\"\"],[8],[0,\"\\n        \"],[7,\"img\",true],[11,\"src\",[23,0,[\"imageUrl\"]]],[11,\"alt\",[23,0,[\"photo\",\"description\"]]],[11,\"width\",[23,0,[\"width\"]]],[11,\"height\",[23,0,[\"height\"]]],[10,\"data-test-unsplash-photo-image\",\"\"],[8],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-unsplash-photo-overlay\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-unsplash-photo-header\"],[8],[0,\"\\n                \"],[7,\"a\",true],[10,\"class\",\"gh-unsplash-button-likes gh-unsplash-button\"],[11,\"href\",[29,[[23,0,[\"photo\",\"links\",\"html\"]],\"?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\"]]],[10,\"target\",\"_blank\"],[8],[1,[28,\"svg-jar\",[\"unsplash-heart\"],null],false],[1,[23,0,[\"photo\",\"likes\"]],false],[9],[0,\"\\n                \"],[7,\"a\",true],[10,\"class\",\"gh-unsplash-button-download gh-unsplash-button\"],[11,\"href\",[29,[[23,0,[\"photo\",\"links\",\"download\"]],\"/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit&force=true\"]]],[8],[1,[28,\"svg-jar\",[\"download\"],null],false],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-unsplash-photo-footer\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-unsplash-photo-author\"],[8],[0,\"\\n                    \"],[7,\"a\",true],[10,\"class\",\"gh-unsplash-photo-author-img\"],[11,\"href\",[29,[[23,0,[\"photo\",\"user\",\"links\",\"html\"]],\"?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\"]]],[10,\"target\",\"_blank\"],[8],[0,\"\\n                        \"],[7,\"img\",true],[11,\"src\",[29,[[23,0,[\"photo\",\"user\",\"profile_image\",\"medium\"]]]]],[8],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"a\",true],[10,\"class\",\"gh-unsplash-photo-author-name\"],[11,\"href\",[29,[[23,0,[\"photo\",\"user\",\"links\",\"html\"]],\"?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\"]]],[10,\"target\",\"_blank\"],[8],[0,\"\\n                        \"],[1,[23,0,[\"photo\",\"user\",\"name\"]],false],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"a\",true],[10,\"class\",\"gh-unsplash-button\"],[10,\"href\",\"#\"],[11,\"onclick\",[28,\"action\",[[23,0,[]],\"select\"],null]],[8],[0,\"Insert image\"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-unsplash-photo.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-unsplash", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "q24TtNnG",
    "block": "{\"symbols\":[\"photos\",\"photo\"],\"statements\":[[5,\"liquid-wormhole\",[],[[\"@class\"],[\"unsplash\"]],{\"statements\":[[0,\"\\n\"],[0,\"    \"],[7,\"div\",false],[12,\"class\",\"fullscreen-modal-background\"],[12,\"style\",\"z-index: 999\"],[3,\"action\",[[23,0,[]],\"close\"]],[8],[9],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"absolute top-8 right-8 bottom-8 left-8 br4 overflow-hidden bg-white z-9999\"],[10,\"data-unsplash\",\"\"],[8],[0,\"\\n\"],[0,\"        \"],[7,\"button\",false],[12,\"class\",\"absolute top-6 right-6\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],\"close\"]],[8],[0,\"\\n            \"],[1,[28,\"svg-jar\",[\"close\"],[[\"class\"],[\"w4 stroke-midlightgrey-l2\"]]],false],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[7,\"div\",true],[10,\"class\",\"flex flex-column h-100\"],[8],[0,\"\\n\"],[0,\"            \"],[7,\"header\",true],[10,\"class\",\"flex-shrink-0 flex flex-row-l flex-column justify-between pt6 pr8 pb6 pl8 pt10-l pr20-l pb10-l pl20-l items-center\"],[8],[0,\"\\n                \"],[7,\"h1\",true],[10,\"class\",\"flex items-center darkgrey-d2 w-100 nudge-top--4\"],[8],[0,\"\\n                    \"],[7,\"a\",true],[10,\"class\",\"dib w8 mr2\"],[10,\"href\",\"https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\"],[10,\"target\",\"_blank\"],[8],[1,[28,\"svg-jar\",[\"unsplash\"],[[\"class\"],[\"fill-darkgrey-d2\"]]],false],[9],[0,\"\\n                    Unsplash\\n                \"],[9],[0,\"\\n                \"],[7,\"span\",true],[10,\"class\",\"gh-input-icon mw88-l flex-auto w-100 mt3 mt0-l\"],[8],[0,\"\\n                    \"],[1,[28,\"svg-jar\",[\"search\"],null],false],[0,\"\\n                    \"],[5,\"gh-text-input\",[],[[\"@class\",\"@name\",\"@placeholder\",\"@tabindex\",\"@shouldFocus\",\"@autocorrect\",\"@value\",\"@input\",\"@focusIn\",\"@focus-out\"],[\"gh-unsplash-search\",\"searchKeyword\",\"Search free high-resolution photos\",\"1\",true,\"off\",[28,\"readonly\",[[23,0,[\"unsplash\",\"searchTerm\"]]],null],[28,\"action\",[[23,0,[]],\"search\"],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"setKeyScope\"],null],[28,\"action\",[[23,0,[]],\"resetKeyScope\"],null]]]],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\\n\"],[0,\"            \"],[7,\"div\",true],[10,\"class\",\"relative h-100 overflow-hidden\"],[8],[0,\"\\n\"],[0,\"                \"],[7,\"div\",true],[10,\"class\",\"overflow-auto h-100 w-100 pr8 pl8 pr20-l pl20-l\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"unsplash\",\"photos\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"section\",true],[10,\"class\",\"gh-unsplash-grid\"],[8],[0,\"\\n\"],[4,\"each\",[[23,0,[\"unsplash\",\"columns\"]]],null,{\"statements\":[[0,\"                                \"],[7,\"div\",true],[10,\"class\",\"gh-unsplash-grid-column\"],[8],[0,\"\\n\"],[4,\"each\",[[23,1,[]]],null,{\"statements\":[[0,\"                                        \"],[5,\"gh-unsplash-photo\",[],[[\"@photo\",\"@zoom\",\"@select\"],[[23,2,[]],[28,\"action\",[[23,0,[]],\"zoomPhoto\"],null],[28,\"action\",[[23,0,[]],\"select\"],null]]]],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"                                \"],[9],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[28,\"and\",[[23,0,[\"unsplash\",\"searchTerm\"]],[28,\"not\",[[23,0,[\"unsplash\",\"error\"]],[23,0,[\"unsplash\",\"isLoading\"]]],null]],null]],null,{\"statements\":[[0,\"                        \"],[7,\"section\",true],[10,\"class\",\"gh-unsplash-error h-100 flex items-center justify-center pb30\"],[8],[0,\"\\n                            \"],[7,\"div\",true],[8],[0,\"\\n                                \"],[7,\"img\",true],[10,\"class\",\"gh-unsplash-error-404\"],[10,\"src\",\"assets/img/unsplash-404.png\"],[10,\"alt\",\"No photos found\"],[8],[9],[0,\"\\n                                \"],[7,\"h4\",true],[8],[0,\"No photos found for '\"],[1,[23,0,[\"unsplash\",\"searchTerm\"]],false],[0,\"'\"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"]],\"parameters\":[]},null]],\"parameters\":[]}],[0,\"\\n\"],[4,\"if\",[[23,0,[\"unsplash\",\"error\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"section\",true],[10,\"class\",\"gh-unsplash-error h-100 flex items-center justify-center pb30\"],[8],[0,\"\\n                            \"],[7,\"div\",true],[8],[0,\"\\n                                \"],[7,\"img\",true],[10,\"class\",\"gh-unsplash-error-404\"],[10,\"src\",\"assets/img/unsplash-404.png\"],[10,\"alt\",\"Network error\"],[8],[9],[0,\"\\n                                \"],[7,\"h4\",true],[8],[1,[23,0,[\"unsplash\",\"error\"]],false],[0,\" (\"],[7,\"a\",false],[12,\"href\",\"#\"],[3,\"action\",[[23,0,[]],\"retry\"]],[8],[0,\"retry\"],[9],[0,\")\"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"unsplash\",\"isLoading\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"div\",true],[10,\"class\",\"gh-unsplash-loading h-100 flex items-center justify-center pb30\"],[8],[0,\"\\n                            \"],[7,\"div\",true],[10,\"class\",\"gh-loading-spinner\"],[8],[9],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n                    \"],[5,\"gh-scroll-trigger\",[],[[\"@enter\",\"@triggerOffset\"],[[28,\"action\",[[23,0,[]],\"loadNextPage\"],null],1000]]],[0,\"\\n                \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"zoomedPhoto\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"div\",false],[12,\"class\",\"absolute flex justify-center top-0 right-0 bottom-0 left-0 pr20 pb10 pl20 bg-white overflow-hidden\"],[3,\"action\",[[23,0,[]],\"closeZoom\"]],[8],[0,\"\\n                        \"],[5,\"gh-unsplash-photo\",[],[[\"@photo\",\"@zoomed\",\"@zoom\",\"@select\"],[[23,0,[\"zoomedPhoto\"]],true,[28,\"action\",[[23,0,[]],\"closeZoom\"],null],[28,\"action\",[[23,0,[]],\"select\"],null]]]],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n\"]],\"parameters\":[]}],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-unsplash.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-uploader", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "UCuQ82mh",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1,[[28,\"hash\",null,[[\"cancel\",\"errors\",\"files\",\"isUploading\",\"progressBar\",\"setFiles\"],[[28,\"action\",[[23,0,[]],\"cancel\"],null],[23,0,[\"errors\"]],[23,0,[\"files\"]],[23,0,[\"_uploadFiles\",\"isRunning\"]],[28,\"component\",[\"gh-progress-bar\"],[[\"percentage\"],[[23,0,[\"uploadPercentage\"]]]]],[28,\"action\",[[23,0,[]],\"setFiles\"],null]]]]]],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-uploader.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-url-preview", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "8CtMozs4",
    "block": "{\"symbols\":[],\"statements\":[[1,[23,0,[\"url\"]],false],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-url-preview.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-user-active", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "bvDPiprl",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1,[[23,0,[]]]],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-user-active.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-user-invited", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "LxNPlVBD",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1,[[23,0,[]]]],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-user-invited.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-user-list-item", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "oN1aEpNN",
    "block": "{\"symbols\":[\"role\"],\"statements\":[[7,\"div\",true],[10,\"class\",\"apps-grid-cell\"],[8],[0,\"\\n    \"],[5,\"link-to\",[[12,\"data-test-user-id\",[24,[\"user\",\"id\"]]]],[[\"@route\",\"@model\"],[\"staff.user\",[24,[\"user\",\"slug\"]]]],{\"statements\":[[0,\"\\n    \"],[7,\"article\",true],[10,\"class\",\"apps-card-app\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"apps-card-left\"],[8],[0,\"\\n            \"],[7,\"span\",true],[10,\"class\",\"user-list-item-figure\"],[11,\"style\",[28,\"background-image-style\",[[24,[\"user\",\"profileImageUrl\"]]],null]],[8],[0,\"\\n                \"],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Photo of \"],[1,[24,[\"user\",\"name\"]],false],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"apps-card-meta\"],[8],[0,\"\\n                \"],[7,\"h3\",true],[10,\"class\",\"apps-card-app-title\"],[8],[1,[24,[\"user\",\"name\"]],false],[9],[0,\"\\n                \"],[7,\"p\",true],[10,\"class\",\"apps-card-app-desc\"],[8],[0,\"Last seen: \"],[1,[24,[\"component\",\"lastLoginUTC\"]],false],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"apps-card-right\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"apps-configured\"],[8],[0,\"\\n\"],[4,\"if\",[[24,[\"user\",\"isSuspended\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"span\",true],[10,\"class\",\"gh-badge author\"],[8],[0,\"Suspended\"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[24,[\"user\",\"isLocked\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"span\",true],[10,\"class\",\"gh-badge author\"],[8],[0,\"Locked\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"unless\",[[23,0,[\"session\",\"user\",\"isAuthorOrContributor\"]]],null,{\"statements\":[[4,\"each\",[[24,[\"user\",\"roles\"]]],null,{\"statements\":[[0,\"                            \"],[7,\"span\",true],[11,\"class\",[29,[\"gh-badge \",[23,1,[\"lowerCaseName\"]]]]],[10,\"data-test-role-name\",\"\"],[8],[1,[23,1,[\"name\"]],false],[9],[0,\"\\n\"]],\"parameters\":[1]},null]],\"parameters\":[]},null]],\"parameters\":[]}],[0,\"                \"],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-user-list-item.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-view-title", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "M3TKedPN",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[7,\"button\",false],[12,\"class\",\"gh-mobilemenu-button\"],[12,\"role\",\"presentation\"],[3,\"action\",[[23,0,[]],\"openMobileMenu\"],[[\"target\"],[[23,0,[\"ui\"]]]]],[8],[1,[28,\"svg-jar\",[\"icon\"],[[\"class\"],[\"icon-gh\"]]],false],[7,\"span\",true],[10,\"class\",\"sr-only\"],[8],[0,\"Menu\"],[9],[9],[0,\"\\n\"],[14,1],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-view-title.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/gh-whats-new", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "0hm7RPgD",
    "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[23,0,[\"whatsNew\",\"isShowingModal\"]]],null,{\"statements\":[[0,\"    \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@modifier\",\"@close\"],[\"whats-new\",\"wide\",[28,\"fn\",[[23,0,[\"whatsNew\",\"closeModal\"]]],null]]]],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/gh-whats-new.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/infinity-loader", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "f3JMiiCx",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[4,\"if\",[[25,1]],null,{\"statements\":[[0,\"  \"],[14,1,[[24,[\"infinityModelContent\"]]]],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[24,[\"isDoneLoading\"]]],null,{\"statements\":[[0,\"    \"],[7,\"span\",true],[8],[1,[22,\"loadedText\"],false],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[7,\"span\",true],[8],[1,[22,\"loadingText\"],false],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/infinity-loader.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-confirm-email-send", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "eoOcyI0G",
    "block": "{\"symbols\":[],\"statements\":[[4,\"unless\",[[23,0,[\"errorMessage\"]]],null,{\"statements\":[[0,\"    \"],[7,\"header\",true],[10,\"class\",\"modal-header\"],[10,\"data-test-modal\",\"delete-user\"],[8],[0,\"\\n        \"],[7,\"h1\",true],[8],[0,\"Ready to go? Here’s what happens next\"],[9],[0,\"\\n    \"],[9],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"close\"],[12,\"title\",\"Close\"],[3,\"on\",[\"click\",[23,0,[\"closeModal\"]]]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n    \"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n        \"],[7,\"p\",true],[8],[0,\"\\n            Your post will be delivered to\\n            \"],[7,\"strong\",true],[8],[1,[23,0,[\"deliveredToMessage\"]],false],[9],[0,\"\\n            and will be published on your site\"],[4,\"if\",[[23,0,[\"model\",\"isScheduled\"]]],null,{\"statements\":[[0,\" at the scheduled time\"]],\"parameters\":[]},null],[0,\". Sound good?\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n        \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-button\",\"cancel-publish-and-email\"],[3,\"on\",[\"click\",[23,0,[\"closeModal\"]]]],[8],[0,\"\\n            \"],[7,\"span\",true],[8],[0,\"Cancel\"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[5,\"gh-task-button\",[[12,\"data-test-button\",\"confirm-publish-and-email\"]],[[\"@buttonText\",\"@runningText\",\"@task\",\"@class\"],[[28,\"if\",[[23,0,[\"model\",\"isScheduled\"]],\"Schedule\",\"Publish and send\"],null],[28,\"if\",[[23,0,[\"model\",\"isScheduled\"]],\"Scheduling...\",\"Publishing...\"],null],[23,0,[\"confirmAndCheckError\"]],\"gh-btn gh-btn-green gh-btn-icon\"]]],[0,\"\\n    \"],[9],[0,\"\\n\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[7,\"header\",true],[10,\"class\",\"modal-header\"],[10,\"data-test-modal\",\"delete-user\"],[8],[0,\"\\n        \"],[7,\"h1\",true],[8],[0,\"Failed to send email\"],[9],[0,\"\\n    \"],[9],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"close\"],[12,\"title\",\"Close\"],[3,\"on\",[\"click\",[23,0,[\"closeModal\"]]]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n    \"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"session\",\"user\",\"isOwner\"]]],null,{\"statements\":[[0,\"            \"],[7,\"p\",true],[8],[0,\"Your post has been published but the email failed to send. Please \"],[5,\"link-to\",[],[[\"@route\"],[\"settings.labs\"]],{\"statements\":[[0,\"check your Mailgun configuration\"]],\"parameters\":[]}],[0,\" if the error persists.\"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"            \"],[7,\"p\",true],[8],[0,\"Your post has been published but the email failed to send. Please check your Mailgun configuration if the error persists.\"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"        \"],[7,\"p\",true],[10,\"class\",\"mb0\"],[8],[0,\"\\n            \"],[7,\"button\",false],[12,\"class\",\"gh-btn gh-btn-text regular\"],[12,\"data-test-toggle-error\",\"\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],[28,\"toggle\",[\"errorDetailsOpen\",[23,0,[]]],null]]],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"errorDetailsOpen\"]]],null,{\"statements\":[[0,\"                \"],[1,[28,\"svg-jar\",[\"arrow-down\"],[[\"class\"],[\"nudge-top--2 w2 h2 fill-darkgrey mr1\"]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                \"],[1,[28,\"svg-jar\",[\"arrow-right\"],[[\"class\"],[\"nudge-top--1 w2 h2 fill-darkgrey mr1\"]]],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                \"],[7,\"span\",true],[8],[0,\"Error details\"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n\"],[4,\"liquid-if\",[[23,0,[\"errorDetailsOpen\"]]],null,{\"statements\":[[0,\"        \"],[7,\"p\",true],[10,\"class\",\"error gh-box gh-box-error mt3 mb3\"],[8],[0,\"\\n            \"],[1,[28,\"svg-jar\",[\"warning\"],null],false],[0,\"\\n            \"],[1,[23,0,[\"errorMessage\"]],false],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[9],[0,\"\\n\\n    \"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n        \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-button\",\"cancel-publish-and-email\"],[3,\"on\",[\"click\",[23,0,[\"closeModal\"]]]],[8],[0,\"\\n            \"],[7,\"span\",true],[8],[0,\"Close\"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[5,\"gh-task-button\",[[12,\"data-test-button\",\"retry-email\"]],[[\"@buttonText\",\"@runningText\",\"@task\",\"@class\"],[\"Retry email\",\"Sending...\",[23,0,[\"retryEmailTask\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-confirm-email-send.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-custom-view-form", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "9LVWSukv",
    "block": "{\"symbols\":[\"color\"],\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header\"],[10,\"data-test-modal\",\"custom-view-form\"],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[1,[28,\"if\",[[23,0,[\"model\",\"isNew\"]],\"New view\",\"Edit view\"],null],false],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"button\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[3,\"action\",[[23,0,[]],[28,\"optional\",[[23,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[8],[0,\"\\n    \"],[1,[28,\"svg-jar\",[\"close\"],null],false],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[7,\"fieldset\",true],[8],[0,\"\\n        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"model\",\"errors\"]],[23,0,[\"model\",\"hasValidated\"]],\"name\"]],{\"statements\":[[0,\"\\n            \"],[7,\"label\",true],[10,\"for\",\"view-name\"],[10,\"class\",\"dib fw6\"],[8],[0,\"View name\"],[9],[0,\"\\n            \"],[5,\"gh-text-input\",[[12,\"data-test-input\",\"custom-view-name\"]],[[\"@id\",\"@value\",\"@placeholder\",\"@focus-out\"],[\"view-name\",[23,0,[\"model\",\"name\"]],\"Breaking news\",[28,\"action\",[[23,0,[]],\"validate\",\"name\"],[[\"target\"],[[23,0,[\"model\"]]]]]]]],[0,\"\\n\"],[4,\"if\",[[23,0,[\"model\",\"errors\"]]],null,{\"statements\":[[0,\"                \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"custom-view-name\"]],[[\"@errors\",\"@property\"],[[23,0,[\"model\",\"errors\"]],\"name\"]]],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,0,[\"model\",\"isNew\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"p\",true],[8],[0,\"Saved views appear in the app sidebar.\"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]}],[0,\"        \"]],\"parameters\":[]}],[0,\"\\n    \"],[9],[0,\"\\n    \"],[7,\"div\",true],[8],[0,\"\\n        \"],[7,\"label\",true],[10,\"for\",\"view-name\"],[10,\"class\",\"dib fw6\"],[8],[0,\"Icon color\"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex justify-between mt3 nl1\"],[8],[0,\"\\n\"],[4,\"each\",[[23,0,[\"customViews\",\"availableColors\"]]],null,{\"statements\":[[0,\"                \"],[7,\"div\",true],[10,\"class\",\"gh-radio-color\"],[8],[0,\"\\n                    \"],[7,\"input\",false],[12,\"name\",\"view-color\"],[12,\"id\",[29,[\"view-\",[23,1,[]]]]],[12,\"checked\",[28,\"eq\",[[23,1,[]],[23,0,[\"delayedModelColor\"]]],null]],[12,\"value\",[23,1,[]]],[12,\"type\",\"radio\"],[3,\"on\",[\"change\",[28,\"action\",[[23,0,[]],\"changeColor\"],null]]],[8],[9],[0,\"\\n                    \"],[7,\"label\",true],[11,\"for\",[29,[\"view-\",[23,1,[]]]]],[8],[7,\"span\",true],[11,\"class\",[29,[\"gh-radio-color-\",[23,1,[]]]]],[8],[9],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"model\",\"isNew\"]]],null,{\"statements\":[[0,\"        \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-button\",\"cancel-custom-view-form\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[3,\"action\",[[23,0,[]],[28,\"optional\",[[23,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[8],[0,\"\\n            \"],[7,\"span\",true],[8],[0,\"Cancel\"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"        \"],[7,\"button\",false],[12,\"class\",\"gh-btn gh-btn-red gh-btn-icon\"],[12,\"data-test-button\",\"delete-custom-view\"],[3,\"on\",[\"click\",[28,\"perform\",[[23,0,[\"deleteTask\"]]],null]]],[3,\"on\",[\"mousedown\",[28,\"optional\",[[23,0,[\"noop\"]]],null]]],[8],[0,\"\\n            \"],[7,\"span\",true],[8],[1,[28,\"svg-jar\",[\"trash\"],null],false],[0,\" Delete\"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n    \"],[5,\"gh-task-button\",[[12,\"data-test-button\",\"save-custom-view\"]],[[\"@buttonText\",\"@successText\",\"@autoReset\",\"@task\",\"@taskArgs\",\"@class\"],[\"Save\",\"Saved\",true,[23,0,[\"saveTask\"]],[23,0,[\"model\"]],\"gh-btn gh-btn-green gh-btn-icon\"]]],[0,\"\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-custom-view-form.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-delete-all", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "nYWJL/Pa",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[0,\"Would you really like to delete all content from your blog?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"a\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[7,\"p\",true],[8],[0,\"This is permanent! No backups, no restores, no magic undo button. We warned you, k?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[7,\"span\",true],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n    \"],[5,\"gh-task-button\",[],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Delete\",\"Deleted\",[23,0,[\"deleteAll\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-delete-all.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-delete-integration", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "L04M+TAr",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[0,\"Are you sure?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"a\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[7,\"p\",true],[8],[0,\"\\n        Deleting this integration will remove all webhooks and api keys associated with it.\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[7,\"span\",true],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n    \"],[5,\"gh-task-button\",[],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Delete Integration\",\"Deleted\",[23,0,[\"deleteIntegration\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-delete-integration.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-delete-member", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "70v4CaW/",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[0,\"Are you sure you want to delete this member?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"a\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[7,\"p\",true],[8],[0,\"\\n        You're about to delete \\\"\"],[7,\"strong\",true],[8],[1,[28,\"or\",[[23,0,[\"member\",\"name\"]],[23,0,[\"member\",\"email\"]]],null],false],[9],[0,\"\\\". This is permanent! We warned you, k?\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[7,\"span\",true],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n    \"],[5,\"gh-task-button\",[],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Delete\",\"Deleted\",[23,0,[\"deleteMember\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],[0,\"\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-delete-member.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-delete-post", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "AHStPfgb",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[0,\"Are you sure you want to delete this \"],[1,[23,0,[\"post\",\"displayName\"]],false],[0,\"?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"a\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[7,\"p\",true],[8],[0,\"\\n        You're about to delete \\\"\"],[7,\"strong\",true],[8],[1,[23,0,[\"post\",\"title\"]],false],[9],[0,\"\\\". This is permanent! We warned you, k?\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[7,\"span\",true],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n    \"],[5,\"gh-task-button\",[],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Delete\",\"Deleted\",[23,0,[\"deletePost\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-delete-post.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-delete-tag", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "uuZnWy3N",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[0,\"Are you sure you want to delete this tag?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"a\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"tag\",\"post_count\"]]],null,{\"statements\":[[0,\"        \"],[7,\"span\",true],[10,\"class\",\"red\"],[8],[0,\"This tag is attached to \"],[1,[23,0,[\"tag\",\"count\",\"posts\"]],false],[0,\" \"],[1,[23,0,[\"postInflection\"]],false],[0,\".\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    You're about to delete \\\"\"],[7,\"strong\",true],[8],[1,[23,0,[\"tag\",\"name\"]],false],[9],[0,\"\\\". This is permanent! We warned you, k?\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[7,\"span\",true],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n    \"],[5,\"gh-task-button\",[],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Delete\",\"Deleted\",[23,0,[\"deleteTag\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-delete-tag.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-delete-theme", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "WWfUPwdm",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header\"],[10,\"data-test-delete-theme-modal\",\"\"],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[0,\"Are you sure you want to delete this\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"a\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[7,\"p\",true],[8],[0,\"You're about to delete \\\"\"],[7,\"strong\",true],[8],[1,[23,0,[\"theme\",\"label\"]],false],[9],[0,\"\\\". This is permanent! We warned you, k? Maybe \"],[7,\"a\",false],[12,\"href\",\"#\"],[3,\"action\",[[23,0,[]],[23,0,[\"download\"]]]],[8],[0,\"Download your theme before continuing\"],[9],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-cancel-button\",\"\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[7,\"span\",true],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n    \"],[5,\"gh-task-button\",[[12,\"data-test-delete-button\",\"true\"]],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Delete\",\"Deleted\",[23,0,[\"deleteTheme\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-delete-theme.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-delete-user", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "qAPZTNlV",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header\"],[10,\"data-test-modal\",\"delete-user\"],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[0,\"Are you sure you want to delete this user?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"a\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"user\",\"count\",\"posts\"]]],null,{\"statements\":[[0,\"        \"],[7,\"p\",true],[8],[0,\"\\n            \"],[7,\"strong\",true],[8],[1,[23,0,[\"user\",\"name\"]],false],[9],[0,\" and their \"],[7,\"strong\",true],[10,\"data-test-text\",\"user-post-count\"],[8],[1,[28,\"pluralize\",[[23,0,[\"user\",\"count\",\"posts\"]],\"post\"],null],false],[9],[0,\" will be permanently deleted. If you don’t want to lose these posts, you should assign them to a different author.\\n        \"],[9],[0,\"\\n        \"],[7,\"p\",true],[8],[0,\"\\n            A backup will be automatically downloaded to your device before deletion.\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"        \"],[7,\"p\",true],[8],[0,\"\\n            \"],[7,\"strong\",true],[8],[1,[23,0,[\"user\",\"name\"]],false],[9],[0,\" will be permanently deleted. A backup will be automatically downloaded to your device before deletion.\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-button\",\"cancel-delete-user\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[0,\"\\n        \"],[7,\"span\",true],[8],[0,\"Cancel\"],[9],[0,\"\\n    \"],[9],[0,\"\\n    \"],[5,\"gh-task-button\",[[12,\"data-test-button\",\"confirm-delete-user\"]],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Download backup & delete user\",\"Deleted\",[23,0,[\"deleteUser\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-delete-user.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-delete-webhook", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "xPQHbCzj",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[0,\"Are you sure?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"a\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[7,\"p\",true],[8],[0,\"\\n        Deleting this webhook may prevent the integration from functioning.\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[7,\"span\",true],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n    \"],[5,\"gh-task-button\",[],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Delete Webhook\",\"Deleted\",[23,0,[\"deleteWebhook\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],[0,\"\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-delete-webhook.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-impersonate-member", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "pylS5ZA2",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header flex justify-center\"],[8],[0,\"\\n    \"],[7,\"h1\",true],[10,\"style\",\"margin: 0;\"],[8],[0,\"Impersonate\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"a\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[3,\"action\",[[23,0,[]],[28,\"optional\",[[23,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[8],[0,\"\\n    \"],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"flex items-center justify-center mt4 mb4\"],[8],[0,\"\\n        \"],[5,\"gh-member-avatar\",[],[[\"@member\",\"@sizeClass\",\"@containerClass\"],[[23,0,[\"member\"]],[28,\"if\",[[23,0,[\"member\",\"name\"]],\"f-headline fw4 lh-zero tracked-1\",\"f-headline fw4 lh-zero tracked-1\"],null],\"w25 h25 gh-member-detail-avatar\"]]],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"p\",true],[10,\"class\",\"tc pl4 pr4\"],[8],[0,\"\\n        This is an authentication link to sign into \"],[7,\"strong\",true],[8],[1,[23,0,[\"config\",\"blogTitle\"]],false],[9],[0,\" as \"],[7,\"strong\",true],[8],[1,[23,0,[\"member\",\"email\"]],false],[9],[0,\", you can send it to them if they need it, or use it to sign into their account for customer support.\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"fieldset\",true],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-input-group\"],[8],[0,\"\\n            \"],[5,\"gh-text-input\",[],[[\"@id\",\"@name\",\"@disabled\",\"@value\"],[\"member-signin-url\",\"member-signin-url\",true,[28,\"readonly\",[[24,[\"signinUrl\"]]],null]]]],[0,\"\\n            \"],[5,\"gh-task-button\",[],[[\"@buttonText\",\"@task\",\"@successText\",\"@class\"],[\"Copy link\",[23,0,[\"copySigninUrl\"]],\"Link copied\",\"gh-btn gh-btn-blue gh-btn-icon\"]]],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[8],[0,\"\\n    \"],[7,\"p\",true],[10,\"class\",\"tc pt4 mb2\"],[8],[0,\"This link is only valid for the next \"],[7,\"strong\",true],[8],[0,\"10 minutes\"],[9],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-impersonate-member.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-import-members", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "IzqCbSMp",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header\"],[10,\"data-test-modal\",\"import-members\"],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"response\"]]],null,{\"statements\":[[0,\"            Import result\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"            Import members\\n\"]],\"parameters\":[]}],[0,\"    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"a\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-body bg-whitegrey-l2 ba b--whitegrey br3\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"response\"]]],null,{\"statements\":[[0,\"        \"],[7,\"table\",true],[10,\"class\",\"gh-members-import-results\"],[8],[0,\"\\n            \"],[7,\"tr\",true],[8],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"Imported:\"],[9],[0,\"\\n                \"],[7,\"td\",true],[10,\"align\",\"left\"],[10,\"data-test-text\",\"import-members-imported\"],[8],[1,[23,0,[\"response\",\"imported\"]],false],[9],[0,\"\\n            \"],[9],[0,\"\\n\"],[4,\"if\",[[23,0,[\"response\",\"duplicates\"]]],null,{\"statements\":[[0,\"                \"],[7,\"tr\",true],[8],[0,\"\\n                    \"],[7,\"td\",true],[8],[0,\"Duplicates:\"],[9],[0,\"\\n                    \"],[7,\"td\",true],[10,\"align\",\"left\"],[10,\"data-test-text\",\"import-members-duplicates\"],[8],[1,[23,0,[\"response\",\"duplicates\"]],false],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"if\",[[23,0,[\"response\",\"invalid\"]]],null,{\"statements\":[[0,\"                \"],[7,\"tr\",true],[8],[0,\"\\n                    \"],[7,\"td\",true],[10,\"class\",\"red\"],[8],[0,\"Invalid:\"],[9],[0,\"\\n                    \"],[7,\"td\",true],[10,\"align\",\"left\"],[10,\"data-test-text\",\"import-members-invalid\"],[10,\"class\",\"red\"],[8],[1,[23,0,[\"response\",\"invalid\"]],false],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"        \"],[5,\"gh-file-uploader\",[],[[\"@url\",\"@paramName\",\"@labelText\",\"@uploadStarted\",\"@uploadFinished\",\"@uploadSuccess\"],[[23,0,[\"uploadUrl\"]],\"membersfile\",\"Select or drag-and-drop a CSV file.\",[28,\"action\",[[23,0,[]],\"uploadStarted\"],null],[28,\"action\",[[23,0,[]],\"uploadFinished\"],null],[28,\"action\",[[23,0,[]],\"uploadSuccess\"],null]]]],[0,\"\\n\"]],\"parameters\":[]}],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[7,\"button\",false],[12,\"disabled\",[23,0,[\"closeDisabled\"]]],[12,\"class\",\"gh-btn\"],[12,\"data-test-button\",\"close-import-members\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[0,\"\\n        \"],[7,\"span\",true],[8],[4,\"if\",[[23,0,[\"response\"]]],null,{\"statements\":[[0,\"Close\"]],\"parameters\":[]},{\"statements\":[[0,\"Cancel\"]],\"parameters\":[]}],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-import-members.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-invite-new-user", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "bkv25kYn",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[0,\"Invite a New User\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"a\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[3,\"action\",[[23,0,[]],[28,\"optional\",[[23,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[8],[0,\"\\n    \"],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[7,\"fieldset\",true],[8],[0,\"\\n        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"errors\"]],[23,0,[\"hasValidated\"]],\"email\"]],{\"statements\":[[0,\"\\n            \"],[7,\"label\",true],[10,\"for\",\"new-user-email\"],[8],[0,\"Email Address\"],[9],[0,\"\\n            \"],[5,\"gh-text-input\",[],[[\"@class\",\"@id\",\"@type\",\"@placeholder\",\"@name\",\"@shouldFocus\",\"@autocapitalize\",\"@autocorrect\",\"@value\",\"@input\",\"@keyEvents\",\"@focus-out\"],[\"email\",\"new-user-email\",\"email\",\"Email Address\",\"email\",true,\"off\",\"off\",[28,\"readonly\",[[24,[\"email\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[24,[\"email\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"hash\",null,[[\"Enter\"],[[28,\"action\",[[23,0,[]],\"confirm\"],null]]]],[28,\"action\",[[23,0,[]],\"validate\",\"email\"],null]]]],[0,\"\\n            \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"errors\"]],\"email\"]]],[0,\"\\n        \"]],\"parameters\":[]}],[0,\"\\n\\n\\n        \"],[5,\"gh-form-group\",[],[[\"@class\",\"@errors\",\"@hasValidated\",\"@property\"],[\"for-select\",[23,0,[\"errors\"]],[23,0,[\"hasValidated\"]],\"role\"]],{\"statements\":[[0,\"\\n            \"],[7,\"label\",true],[10,\"for\",\"new-user-role\"],[8],[0,\"Role\"],[9],[0,\"\\n            \"],[7,\"span\",true],[10,\"class\",\"gh-select\"],[8],[0,\"\\n                \"],[5,\"one-way-select\",[],[[\"@id\",\"@name\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@value\",\"@update\"],[\"new-user-role\",\"role\",[28,\"readonly\",[[23,0,[\"roles\"]]],null],\"id\",\"name\",[23,0,[\"role\"]],[28,\"action\",[[23,0,[]],\"setRole\"],null]]]],[0,\"\\n                \"],[1,[28,\"svg-jar\",[\"arrow-down-small\"],null],false],[0,\"\\n            \"],[9],[0,\"\\n            \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"errors\"]],\"role\"]]],[0,\"\\n        \"]],\"parameters\":[]}],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[5,\"gh-task-button\",[],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\",\"@disabled\",\"@disableMouseDown\"],[\"Send invitation now\",\"Sent\",[23,0,[\"sendInvitation\"]],\"gh-btn gh-btn-green gh-btn-icon\",[23,0,[\"fetchRoles\",\"isRunning\"]],\"true\"]]],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-invite-new-user.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-leave-editor", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "OHgYyUGM",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[0,\"Are you sure you want to leave this page?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"a\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[7,\"p\",true],[8],[0,\"\\n        Hey there! It looks like you're in the middle of writing something and\\n        you haven't saved all of your content.\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"p\",true],[8],[0,\"Save before you go!\"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[7,\"span\",true],[8],[0,\"Stay\"],[9],[9],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"gh-btn gh-btn-red\"],[3,\"action\",[[23,0,[]],\"confirm\"]],[8],[7,\"span\",true],[8],[0,\"Leave\"],[9],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-leave-editor.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-leave-settings", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "nsPCZDBE",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header\"],[10,\"data-test-modal\",\"unsaved-settings\"],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[0,\"Are you sure you want to leave this page?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"a\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[7,\"p\",true],[8],[0,\"\\n        Hey there! It looks like you didn't save the changes you made.\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"p\",true],[8],[0,\"Save before you go!\"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-stay-button\",\"\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[7,\"span\",true],[8],[0,\"Stay\"],[9],[9],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"gh-btn gh-btn-red\"],[12,\"data-test-leave-button\",\"\"],[3,\"action\",[[23,0,[]],\"confirm\"]],[8],[7,\"span\",true],[8],[0,\"Leave\"],[9],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-leave-settings.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-markdown-help", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "9PLcdoG8",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[0,\"Markdown Help\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"a\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[7,\"section\",true],[10,\"class\",\"markdown-help-container\"],[8],[0,\"\\n        \"],[7,\"table\",true],[10,\"class\",\"modal-markdown-help-table\"],[8],[0,\"\\n            \"],[7,\"thead\",true],[8],[0,\"\\n            \"],[7,\"tr\",true],[8],[0,\"\\n                \"],[7,\"th\",true],[8],[0,\"Markdown\"],[9],[0,\"\\n                \"],[7,\"th\",true],[8],[0,\"Result\"],[9],[0,\"\\n                \"],[7,\"th\",true],[8],[0,\"Shortcut\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"tbody\",true],[8],[0,\"\\n            \"],[7,\"tr\",true],[8],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"**text**\"],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[7,\"strong\",true],[8],[0,\"Bold\"],[9],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"Ctrl/⌘ + B\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"tr\",true],[8],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"*text*\"],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[7,\"em\",true],[8],[0,\"Emphasize\"],[9],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"Ctrl/⌘ + I\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"tr\",true],[8],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"~~text~~\"],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[7,\"del\",true],[8],[0,\"Strike-through\"],[9],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"tr\",true],[8],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"[title](http://)\"],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[7,\"a\",true],[10,\"href\",\"#\"],[8],[0,\"Link\"],[9],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"Ctrl/⌘ + K\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"tr\",true],[8],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"`code`\"],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[7,\"code\",true],[8],[0,\"Inline Code\"],[9],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"Ctrl/⌘ + Alt + C\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"tr\",true],[8],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"![alt](http://)\"],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"Image\"],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"Ctrl/⌘ + Shift + I\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"tr\",true],[8],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"* item\"],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"List\"],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"Ctrl/⌘ + L\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"tr\",true],[8],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"1. item\"],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"Ordered List\"],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"Ctrl/⌘ + Alt + L\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"tr\",true],[8],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"> quote\"],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"Blockquote\"],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"Ctrl/⌘ + '\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"tr\",true],[8],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"==Highlight==\"],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[7,\"mark\",true],[8],[0,\"Highlight\"],[9],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"tr\",true],[8],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"# Heading\"],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"H1\"],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"tr\",true],[8],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"## Heading\"],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"H2\"],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"Ctrl/⌘ + H\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"tr\",true],[8],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"### Heading\"],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"H3\"],[9],[0,\"\\n                \"],[7,\"td\",true],[8],[0,\"Ctrl/⌘ + H (x2)\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n        For further Markdown syntax reference: \"],[7,\"a\",true],[10,\"href\",\"https://ghost.org/faq/using-the-editor/#using-markdown\"],[10,\"target\",\"_blank\"],[8],[0,\"Markdown Documentation\"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-markdown-help.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-members-label-form", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "6sQhwi3F",
    "block": "{\"symbols\":[],\"statements\":[[4,\"if\",[[23,0,[\"showDeleteLabelModal\"]]],null,{\"statements\":[[0,\"    \"],[7,\"header\",true],[10,\"class\",\"modal-header\"],[8],[0,\"\\n        \"],[7,\"h1\",true],[8],[0,\"Are you sure you want to delete this label?\"],[9],[0,\"\\n    \"],[9],[0,\"\\n    \"],[7,\"a\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n    \"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n        \"],[7,\"p\",true],[8],[0,\"\\n            You're about to delete label \\\"\"],[7,\"strong\",true],[8],[1,[23,0,[\"label\",\"name\"]],false],[9],[0,\"\\\". This is permanent! We warned you, k?\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n        \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[7,\"span\",true],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n        \"],[5,\"gh-task-button\",[],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Delete\",\"Deleted\",[23,0,[\"deleteLabel\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"\\n    \"],[7,\"header\",true],[10,\"class\",\"modal-header\"],[10,\"data-test-modal\",\"label-form\"],[8],[0,\"\\n        \"],[7,\"h1\",true],[8],[1,[28,\"if\",[[23,0,[\"label\",\"isNew\"]],\"New label\",\"Edit label\"],null],false],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[0,\"    \"],[7,\"button\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[3,\"action\",[[23,0,[]],[28,\"optional\",[[23,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[8],[0,\"\\n        \"],[1,[28,\"svg-jar\",[\"close\"],null],false],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n        \"],[7,\"fieldset\",true],[8],[0,\"\\n            \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"label\",\"errors\"]],[23,0,[\"label\",\"hasValidated\"]],\"name\"]],{\"statements\":[[0,\"\\n                \"],[7,\"label\",true],[10,\"for\",\"label-name\"],[10,\"class\",\"fw6 dib\"],[8],[0,\"Label name\"],[9],[0,\"\\n                \"],[5,\"gh-text-input\",[[12,\"data-test-input\",\"label-name\"]],[[\"@id\",\"@value\",\"@focus-out\"],[\"label-name\",[23,0,[\"label\",\"name\"]],[28,\"action\",[[23,0,[]],\"validate\",\"name\"],[[\"target\"],[[23,0,[\"label\"]]]]]]]],[0,\"\\n\"],[4,\"if\",[[23,0,[\"label\",\"errors\"]]],null,{\"statements\":[[0,\"                    \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"label-name\"]],[[\"@errors\",\"@property\"],[[23,0,[\"label\",\"errors\"]],\"name\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"]],\"parameters\":[]}],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"label\",\"isNew\"]]],null,{\"statements\":[[0,\"            \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-button\",\"cancel-label-form\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[3,\"action\",[[23,0,[]],[28,\"optional\",[[23,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[8],[0,\"\\n                \"],[7,\"span\",true],[8],[0,\"Cancel\"],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"            \"],[7,\"button\",false],[12,\"class\",\"gh-btn gh-btn-red gh-btn-icon\"],[12,\"data-test-button\",\"delete-label\"],[3,\"on\",[\"click\",[28,\"action\",[[23,0,[]],\"toggleDeleteLabelModal\"],null]]],[3,\"on\",[\"mousedown\",[28,\"optional\",[[23,0,[\"noop\"]]],null]]],[8],[0,\"\\n                \"],[7,\"span\",true],[8],[1,[28,\"svg-jar\",[\"trash\"],null],false],[0,\" Delete\"],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n        \"],[5,\"gh-task-button\",[[12,\"data-test-button\",\"save-label\"]],[[\"@buttonText\",\"@runningText\",\"@successText\",\"@autoReset\",\"@task\",\"@taskArgs\",\"@class\"],[\"Save\",\"Saving...\",\"Saved\",true,[23,0,[\"saveTask\"]],[23,0,[\"label\"]],\"gh-btn gh-btn-green gh-btn-icon\"]]],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-members-label-form.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-new-integration", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "2gQPdIPk",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header\"],[10,\"data-test-modal\",\"new-integration\"],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[0,\"New custom integration\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"button\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[3,\"action\",[[23,0,[]],[28,\"optional\",[[23,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[8],[0,\"\\n    \"],[1,[28,\"svg-jar\",[\"close\"],null],false],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[7,\"fieldset\",true],[8],[0,\"\\n        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"integration\",\"errors\"]],[23,0,[\"integration\",\"hasValidated\"]],\"name\"]],{\"statements\":[[0,\"\\n            \"],[7,\"label\",true],[10,\"for\",\"new-integration-name\"],[10,\"class\",\"fw6\"],[8],[0,\"Name\"],[9],[0,\"\\n            \"],[7,\"input\",true],[11,\"value\",[23,0,[\"integration\",\"name\"]]],[11,\"oninput\",[28,\"action\",[[23,0,[]],\"updateName\"],[[\"value\"],[\"target.value\"]]]],[10,\"id\",\"new-integration-name\"],[10,\"class\",\"gh-input mt1\"],[10,\"placeholder\",\"Integration name...\"],[10,\"name\",\"integration-name\"],[10,\"autofocus\",\"autofocus\"],[10,\"autocapitalize\",\"off\"],[10,\"autocorrect\",\"off\"],[10,\"data-test-input\",\"new-integration-name\"],[10,\"type\",\"text\"],[8],[9],[0,\"\\n            \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"new-integration-name\"]],[[\"@errors\",\"@property\"],[[23,0,[\"integration\",\"errors\"]],\"name\"]]],[0,\"\\n        \"]],\"parameters\":[]}],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-button\",\"cancel-new-integration\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[3,\"action\",[[23,0,[]],[28,\"optional\",[[23,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[8],[0,\"\\n        \"],[7,\"span\",true],[8],[0,\"Cancel\"],[9],[0,\"\\n    \"],[9],[0,\"\\n    \"],[5,\"gh-task-button\",[[12,\"data-test-button\",\"create-integration\"]],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Create\",\"Created\",[23,0,[\"createIntegration\"]],\"gh-btn gh-btn-green gh-btn-icon\"]]],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-new-integration.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-post-email-preview", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "WyOwghaV",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[11,\"class\",[29,[\"modal-header gh-pe-header \",[28,\"if\",[[28,\"eq\",[[23,0,[\"type\"]],\"desktop\"],null],\"gh-pe-header-border\"],null]]]],[10,\"data-test-modal\",\"preview-email\"],[10,\"style\",\"display:flex\"],[8],[0,\"\\n    \"],[7,\"h2\",true],[10,\"class\",\"f6 fw6\"],[8],[1,[23,0,[\"subject\"]],false],[9],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-contentfilter gh-btn-group gh-pe-btn-group\"],[10,\"style\",\"display:flex;flex-grow:1;justify-content:center\"],[8],[0,\"\\n        \"],[7,\"button\",false],[12,\"class\",[29,[\"gh-btn \",[28,\"if\",[[28,\"eq\",[[23,0,[\"type\"]],\"desktop\"],null],\"gh-btn-group-selected\"],null]]]],[3,\"action\",[[23,0,[]],\"changeType\",\"desktop\"]],[8],[7,\"span\",true],[8],[0,\"Desktop\"],[9],[9],[0,\"\\n        \"],[7,\"button\",false],[12,\"class\",[29,[\"gh-btn \",[28,\"if\",[[28,\"eq\",[[23,0,[\"type\"]],\"mobile\"],null],\"gh-btn-group-selected\"],null]]]],[3,\"action\",[[23,0,[]],\"changeType\",\"mobile\"]],[8],[7,\"span\",true],[8],[0,\"Mobile\"],[9],[9],[0,\"\\n    \"],[9],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-pe-close\"],[8],[0,\"\\n        \"],[7,\"button\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"on\",[\"click\",[23,0,[\"closeModal\"]]]],[8],[0,\"\\n            \"],[1,[28,\"svg-jar\",[\"close\"],null],false],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[4,\"if\",[[28,\"eq\",[[23,0,[\"type\"]],\"mobile\"],null]],null,{\"statements\":[[0,\"    \"],[7,\"div\",true],[10,\"class\",\"modal-body modal-preview-email-content gh-pe-mobile-container\"],[10,\"style\",\"display: flex;justify-content: center;\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-pe-mobile-bezel\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-pe-mobile-screen\"],[8],[0,\"\\n                \"],[7,\"iframe\",false],[12,\"class\",\"bn gh-pe-iframe\"],[3,\"did-insert\",[[23,0,[\"renderEmailPreview\"]]]],[8],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[28,\"eq\",[[23,0,[\"type\"]],\"desktop\"],null]],null,{\"statements\":[[0,\"    \"],[7,\"div\",true],[10,\"class\",\"modal-body modal-preview-email-content gh-pe-desktop-container\"],[8],[0,\"\\n        \"],[7,\"iframe\",false],[12,\"class\",\"bn miw-100 gh-pe-iframe\"],[12,\"style\",\"height:100%;\"],[3,\"did-insert\",[[23,0,[\"renderEmailPreview\"]]]],[8],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-post-email-preview.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-re-authenticate", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "RfPDit3F",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[0,\"Please re-authenticate\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"a\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[7,\"div\",true],[11,\"class\",[29,[\"modal-body \",[28,\"if\",[[23,0,[\"authenticationError\"]],\"error\"],null]]]],[8],[0,\"\\n\\n    \"],[7,\"form\",false],[12,\"id\",\"login\"],[12,\"class\",\"login-form\"],[12,\"method\",\"post\"],[12,\"novalidate\",\"novalidate\"],[3,\"action\",[[23,0,[]],\"confirm\"],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n        \"],[5,\"gh-validation-status-container\",[],[[\"@class\",\"@errors\",\"@property\",\"@hasValidated\"],[\"password-wrap\",[23,0,[\"errors\"]],\"password\",[23,0,[\"hasValidated\"]]]],{\"statements\":[[0,\"\\n            \"],[5,\"gh-text-input\",[],[[\"@class\",\"@type\",\"@placeholder\",\"@name\",\"@value\",\"@input\"],[\"password\",\"password\",\"Password\",\"password\",[28,\"readonly\",[[23,0,[\"password\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"password\"]]],null]],[[\"value\"],[\"target.value\"]]]]]],[0,\"\\n        \"]],\"parameters\":[]}],[0,\"\\n        \"],[7,\"div\",true],[8],[0,\"\\n            \"],[5,\"gh-task-button\",[],[[\"@buttonText\",\"@task\",\"@class\",\"@type\"],[\"Log in\",[23,0,[\"reauthenticate\"]],\"gh-btn gh-btn-blue gh-btn-icon\",\"submit\"]]],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"authenticationError\"]]],null,{\"statements\":[[0,\"     \"],[7,\"p\",true],[10,\"class\",\"response\"],[8],[1,[23,0,[\"authenticationError\"]],false],[9],[0,\"\\n\"]],\"parameters\":[]},null],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-re-authenticate.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-search", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "+//2ZtVH",
    "block": "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"class\",\"gh-nav-search-modal\"],[8],[0,\"\\n    \"],[5,\"gh-search-input\",[],[[\"@class\",\"@onSelected\"],[\"gh-nav-search-input\",[28,\"action\",[[23,0,[]],\"confirm\"],null]]]],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-search-tips\"],[8],[0,\"Open with Ctrl/⌘ + K\"],[9],[0,\"\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-search.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-suspend-user", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "qbmS1hNC",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[0,\"Are you sure you want to suspend this user?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"a\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[7,\"strong\",true],[8],[0,\"WARNING:\"],[9],[0,\" This user will no longer be able to log in but their posts will be kept.\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[7,\"span\",true],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n    \"],[5,\"gh-task-button\",[[12,\"data-test-modal-confirm\",\"true\"]],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Suspend\",\"Suspended\",[23,0,[\"suspendUser\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-suspend-user.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-theme-warnings", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "JAwYrxgu",
    "block": "{\"symbols\":[\"error\",\"error\",\"error\"],\"statements\":[[7,\"div\",true],[10,\"class\",\"theme-validation-container\"],[8],[0,\"\\n    \"],[7,\"header\",true],[10,\"class\",\"modal-header\"],[8],[0,\"\\n        \"],[7,\"h1\",true],[10,\"data-test-theme-warnings-title\",\"\"],[8],[0,\"\\n\"],[4,\"unless\",[[23,0,[\"canActivate\"]]],null,{\"statements\":[[0,\"                \"],[1,[23,0,[\"title\"]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                \"],[1,[23,0,[\"title\"]],false],[0,\" with \"],[4,\"if\",[[23,0,[\"errors\"]]],null,{\"statements\":[[0,\"errors\"]],\"parameters\":[]},{\"statements\":[[0,\"warnings\"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[]}],[0,\"        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n    \"],[7,\"a\",false],[12,\"class\",\"close\"],[12,\"href\",\"#\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n    \"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"fatalErrors\"]]],null,{\"statements\":[[0,\"            \"],[7,\"div\",true],[8],[0,\"\\n                \"],[7,\"h2\",true],[10,\"class\",\"mb0 mt4 f5 fw6 red\"],[8],[0,\"Fatal Errors\"],[9],[0,\"\\n                \"],[7,\"p\",true],[10,\"class\",\"mb2 red\"],[8],[0,\"Must-fix to activate theme\"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"ul\",true],[10,\"class\",\"pa0\"],[10,\"data-test-theme-fatal-errors\",\"\"],[8],[0,\"\\n\"],[4,\"each\",[[23,0,[\"fatalErrors\"]]],null,{\"statements\":[[0,\"                \"],[7,\"li\",true],[10,\"class\",\"theme-validation-item theme-fatal-error\"],[8],[0,\"\\n                    \"],[5,\"gh-theme-error-li\",[],[[\"@error\"],[[23,3,[]]]]],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[3]},null],[0,\"            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"errors\"]]],null,{\"statements\":[[0,\"            \"],[7,\"div\",true],[8],[0,\"\\n                \"],[7,\"h2\",true],[10,\"class\",\"mb0 mt4 f5 fw6\"],[8],[0,\"Errors\"],[9],[0,\"\\n                \"],[7,\"p\",true],[10,\"class\",\"mb2\"],[8],[0,\"Highly recommended to fix, functionality \"],[7,\"span\",true],[8],[0,\"could\"],[9],[0,\" be restricted\"],[9],[0,\"\\n            \"],[9],[0,\"\\n\\n            \"],[7,\"ul\",true],[10,\"class\",\"pa0\"],[10,\"data-test-theme-errors\",\"\"],[8],[0,\"\\n\"],[4,\"each\",[[23,0,[\"errors\"]]],null,{\"statements\":[[0,\"                \"],[7,\"li\",true],[10,\"class\",\"theme-validation-item theme-error\"],[8],[0,\"\\n                    \"],[5,\"gh-theme-error-li\",[],[[\"@error\"],[[23,2,[]]]]],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[28,\"and\",[[23,0,[\"warnings\"]],[28,\"or\",[[23,0,[\"fatalErrors\"]],[23,0,[\"errors\"]]],null]],null]],null,{\"statements\":[[0,\"            \"],[7,\"div\",true],[8],[0,\"\\n                \"],[7,\"h2\",true],[10,\"class\",\"mb0 mt4 f5 fw6\"],[8],[0,\"Warnings\"],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"if\",[[23,0,[\"warnings\"]]],null,{\"statements\":[[0,\"            \"],[7,\"ul\",true],[10,\"class\",\"pa0\"],[10,\"data-test-theme-warnings\",\"\"],[8],[0,\"\\n\"],[4,\"each\",[[23,0,[\"warnings\"]]],null,{\"statements\":[[0,\"                \"],[7,\"li\",true],[10,\"class\",\"theme-validation-item theme-warning\"],[8],[0,\"\\n                    \"],[5,\"gh-theme-error-li\",[],[[\"@error\"],[[23,1,[]]]]],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-modal-close-button\",\"\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[0,\"\\n        \"],[7,\"span\",true],[8],[0,\"Ok\"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-theme-warnings.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-transfer-owner", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "GArxbAmw",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[0,\"Transfer Ownership\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"a\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[7,\"p\",true],[8],[0,\"\\n        Are you sure you want to transfer the ownership of this blog?\\n        You will not be able to undo this action.\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[7,\"span\",true],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n    \"],[5,\"gh-task-button\",[],[[\"@buttonText\",\"@task\",\"@class\"],[\"Yep - I'm sure\",[23,0,[\"transferOwnership\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-transfer-owner.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-unsuspend-user", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "da9pAfWJ",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header\"],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[0,\"Are you sure you want to un-suspend this user?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"a\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[7,\"strong\",true],[8],[0,\"WARNING:\"],[9],[0,\" This user will be able to log in again and will have the same permissions they had previously.\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[7,\"span\",true],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n    \"],[5,\"gh-task-button\",[[12,\"data-test-modal-confirm\",\"true\"]],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Un-suspend\",\"Suspended\",[23,0,[\"unsuspendUser\"]],\"gh-btn gh-btn-red gh-btn-icon\"]]],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-unsuspend-user.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-upgrade-host-limit", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "vdXOViZX",
    "block": "{\"symbols\":[],\"statements\":[[0,\"\\n\"],[7,\"header\",true],[10,\"class\",\"modal-header\"],[10,\"data-test-modal\",\"delete-user\"],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[0,\"Upgrade your plan to continue\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"button\",false],[12,\"class\",\"close\"],[12,\"title\",\"Close\"],[3,\"on\",[\"click\",[23,0,[\"closeModal\"]]]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[7,\"p\",true],[8],[0,\"\\n        Your current plan allows you to send posts by email to up to \"],[7,\"strong\",true],[8],[1,[24,[\"upgradeMessage\",\"limit\"]],false],[9],[0,\" members, but you currently have \"],[7,\"strong\",true],[8],[1,[24,[\"upgradeMessage\",\"total\"]],false],[9],[0,\" members.\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-button\",\"cancel-upgrade\"],[3,\"on\",[\"click\",[23,0,[\"closeModal\"]]]],[8],[0,\"\\n        \"],[7,\"span\",true],[8],[0,\"Cancel\"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"button\",false],[12,\"class\",\"gh-btn gh-btn-green\"],[12,\"data-test-button\",\"upgrade-plan\"],[3,\"on\",[\"click\",[28,\"action\",[[23,0,[]],\"upgrade\"],null]]],[8],[0,\"\\n        \"],[7,\"span\",true],[8],[0,\"Upgrade\"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-upgrade-host-limit.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-upload-image", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "WxRTxdam",
    "block": "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"url\"]]],null,{\"statements\":[[0,\"        \"],[7,\"div\",true],[10,\"class\",\"gh-image-uploader -with-image\"],[8],[0,\"\\n            \"],[7,\"div\",true],[8],[7,\"img\",true],[11,\"src\",[23,0,[\"url\"]]],[8],[9],[9],[0,\"\\n            \"],[7,\"a\",false],[12,\"class\",\"image-cancel\"],[12,\"title\",\"Delete\"],[3,\"action\",[[23,0,[]],\"removeImage\"]],[8],[0,\"\\n                \"],[1,[28,\"svg-jar\",[\"trash\"],null],false],[0,\"\\n                \"],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Delete\"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"        \"],[5,\"gh-image-uploader\",[],[[\"@image\",\"@saveButton\",\"@update\",\"@uploadStarted\",\"@uploadFinished\",\"@accept\",\"@extensions\",\"@uploadUrl\",\"@paramsHash\"],[[23,0,[\"newUrl\"]],false,[28,\"action\",[[23,0,[]],\"fileUploaded\"],null],[28,\"action\",[[23,0,[]],\"isUploading\"],null],[28,\"action\",[[23,0,[]],\"isUploading\"],null],[23,0,[\"model\",\"accept\"]],[23,0,[\"model\",\"extensions\"]],[23,0,[\"model\",\"uploadUrl\"]],[23,0,[\"model\",\"paramsHas\"]]]]],[0,\"\\n\"]],\"parameters\":[]}],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[7,\"span\",true],[8],[0,\"Cancel\"],[9],[9],[0,\"\\n\"],[4,\"if\",[[23,0,[\"_isUploading\"]]],null,{\"statements\":[[0,\"        \"],[7,\"button\",true],[10,\"class\",\"gh-btn gh-btn-blue right gh-btn-icon disabled\"],[8],[7,\"span\",true],[8],[0,\"Save\"],[9],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"        \"],[5,\"gh-task-button\",[[12,\"data-test-modal-accept-button\",true]],[[\"@task\",\"@class\"],[[23,0,[\"uploadImage\"]],\"gh-btn gh-btn-blue right gh-btn-icon\"]]],[0,\"\\n\"]],\"parameters\":[]}],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-upload-image.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-upload-theme", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "nZuG62UJ",
    "block": "{\"symbols\":[\"error\",\"error\",\"error\",\"error\"],\"statements\":[[7,\"div\",true],[10,\"class\",\"theme-validation-container\"],[8],[0,\"\\n    \"],[7,\"header\",true],[10,\"class\",\"modal-header\"],[10,\"data-test-modal\",\"upload-theme\"],[8],[0,\"\\n        \"],[7,\"h1\",true],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"theme\"]]],null,{\"statements\":[[4,\"if\",[[23,0,[\"hasWarningsOrErrors\"]]],null,{\"statements\":[[0,\"                    Upload successful with \"],[4,\"if\",[[23,0,[\"validationErrors\"]]],null,{\"statements\":[[0,\"errors\"]],\"parameters\":[]},{\"statements\":[[0,\"warnings\"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                    Upload successful!\\n\"]],\"parameters\":[]}]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[28,\"or\",[[23,0,[\"validationErrors\"]],[23,0,[\"fatalValidationErrors\"]]],null]],null,{\"statements\":[[0,\"                Invalid theme\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                Upload a theme\\n            \"]],\"parameters\":[]}]],\"parameters\":[]}],[0,\"        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n    \"],[7,\"a\",false],[12,\"class\",\"close\"],[12,\"href\",\"#\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[1,[28,\"svg-jar\",[\"close\"],null],false],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Close\"],[9],[9],[0,\"\\n\\n    \"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"theme\"]]],null,{\"statements\":[[4,\"if\",[[23,0,[\"hasWarningsOrErrors\"]]],null,{\"statements\":[[0,\"                \"],[7,\"p\",true],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"canActivateTheme\"]]],null,{\"statements\":[[0,\"                        The theme \"],[7,\"strong\",true],[8],[0,\"\\\"\"],[1,[23,0,[\"themeName\"]],false],[0,\"\\\"\"],[9],[0,\" was uploaded successfully but we detected some \"],[4,\"if\",[[23,0,[\"validationErrors\"]]],null,{\"statements\":[[0,\"errors\"]],\"parameters\":[]},{\"statements\":[[0,\"warnings\"]],\"parameters\":[]}],[0,\". You are still able to activate and use the theme but it is recommended to fix these \"],[4,\"if\",[[23,0,[\"validationErrors\"]]],null,{\"statements\":[[0,\"errors\"]],\"parameters\":[]},{\"statements\":[[0,\"warnings\"]],\"parameters\":[]}],[0,\" before you do so.\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        The theme \"],[7,\"strong\",true],[8],[0,\"\\\"\"],[1,[23,0,[\"themeName\"]],false],[0,\"\\\"\"],[9],[0,\" was uploaded successfully but we detected some\\n                        \"],[4,\"if\",[[23,0,[\"validationErrors\"]]],null,{\"statements\":[[0,\"errors\"]],\"parameters\":[]},{\"statements\":[[0,\"warnings\"]],\"parameters\":[]}],[0,\".\\n\"]],\"parameters\":[]}],[0,\"                \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"validationErrors\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"div\",true],[8],[0,\"\\n                        \"],[7,\"h2\",true],[10,\"class\",\"mb0 mt4 f5 fw6\"],[8],[0,\"Errors\"],[9],[0,\"\\n                        \"],[7,\"p\",true],[10,\"class\",\"mb2\"],[8],[0,\"Highly recommended to fix, functionality \"],[7,\"strong\",true],[8],[0,\"could\"],[9],[0,\" be restricted\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"ul\",true],[10,\"class\",\"pa0\"],[8],[0,\"\\n\"],[4,\"each\",[[23,0,[\"validationErrors\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"li\",true],[10,\"class\",\"theme-validation-item theme-error\"],[8],[0,\"\\n                            \"],[5,\"gh-theme-error-li\",[],[[\"@error\"],[[23,4,[]]]]],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[4]},null],[0,\"                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"validationWarnings\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"div\",true],[8],[0,\"\\n                        \"],[7,\"h2\",true],[10,\"class\",\"mb0 mt4 f5 fw6\"],[8],[0,\"Warnings\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"ul\",true],[10,\"class\",\"pa0\"],[8],[0,\"\\n\"],[4,\"each\",[[23,0,[\"validationWarnings\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"li\",true],[10,\"class\",\"theme-validation-item theme-warning\"],[8],[0,\"\\n                            \"],[5,\"gh-theme-error-li\",[],[[\"@error\"],[[23,3,[]]]]],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[3]},null],[0,\"                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[0,\"                \"],[7,\"p\",true],[8],[0,\"\\n                    \\\"\"],[1,[23,0,[\"themeName\"]],false],[0,\"\\\" uploaded successfully.\\n                    \"],[4,\"if\",[[23,0,[\"canActivateTheme\"]]],null,{\"statements\":[[0,\"Do you want to activate it now?\"]],\"parameters\":[]},null],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,0,[\"displayOverwriteWarning\"]]],null,{\"statements\":[[0,\"            \"],[7,\"p\",true],[8],[0,\"\\n                The theme folder \"],[7,\"strong\",true],[8],[0,\"\\\"\"],[1,[23,0,[\"fileThemeName\"]],false],[0,\"\\\"\"],[9],[0,\" already exists. Do you want to overwrite it?\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[28,\"or\",[[23,0,[\"validationErrors\"]],[23,0,[\"fatalValidationErrors\"]]],null]],null,{\"statements\":[[0,\"\\n            \"],[7,\"p\",true],[8],[0,\"\\n                This theme is invalid and cannot be activated. Fix the following errors and re-upload the theme.\\n            \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"fatalValidationErrors\"]]],null,{\"statements\":[[0,\"                \"],[7,\"div\",true],[8],[0,\"\\n                    \"],[7,\"h2\",true],[10,\"class\",\"mb0 mt4 f5 fw6\"],[8],[0,\"Fatal Errors\"],[9],[0,\"\\n                    \"],[7,\"p\",true],[10,\"class\",\"mb2\"],[8],[0,\"Must-fix to activate theme\"],[9],[0,\"\\n                \"],[9],[0,\"\\n\\n                \"],[7,\"ul\",true],[10,\"class\",\"pa0\"],[8],[0,\"\\n\"],[4,\"each\",[[23,0,[\"fatalValidationErrors\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"li\",true],[10,\"class\",\"theme-validation-item theme-fatal-error\"],[8],[0,\"\\n                        \"],[5,\"gh-theme-error-li\",[],[[\"@error\"],[[23,2,[]]]]],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"validationErrors\"]]],null,{\"statements\":[[0,\"                \"],[7,\"div\",true],[8],[0,\"\\n                    \"],[7,\"h2\",true],[10,\"class\",\"mb0 mt4 f5 fw6\"],[8],[0,\"Errors\"],[9],[0,\"\\n                    \"],[7,\"p\",true],[10,\"class\",\"mb2\"],[8],[0,\"Highly recommended to fix, functionality \"],[7,\"strong\",true],[8],[0,\"could\"],[9],[0,\" be restricted\"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"ul\",true],[10,\"class\",\"pa0\"],[8],[0,\"\\n\"],[4,\"each\",[[23,0,[\"validationErrors\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"li\",true],[10,\"class\",\"theme-validation-item theme-error\"],[8],[0,\"\\n                        \"],[5,\"gh-theme-error-li\",[],[[\"@error\"],[[23,1,[]]]]],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[0,\"            \"],[5,\"gh-file-uploader\",[],[[\"@url\",\"@paramName\",\"@accept\",\"@labelText\",\"@validate\",\"@uploadStarted\",\"@uploadFinished\",\"@uploadSuccess\",\"@uploadFailed\",\"@listenTo\"],[[23,0,[\"uploadUrl\"]],\"file\",[23,0,[\"accept\"]],\"Click to select or drag-and-drop your theme zip file here.\",[28,\"action\",[[23,0,[]],\"validateTheme\"],null],[28,\"action\",[[23,0,[]],\"uploadStarted\"],null],[28,\"action\",[[23,0,[]],\"uploadFinished\"],null],[28,\"action\",[[23,0,[]],\"uploadSuccess\"],null],[28,\"action\",[[23,0,[]],\"uploadFailed\"],null],\"themeUploader\"]]],[0,\"\\n        \"]],\"parameters\":[]}]],\"parameters\":[]}]],\"parameters\":[]}],[0,\"    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[7,\"div\",true],[11,\"class\",[29,[\"flex items-center justify-between \",[28,\"if\",[[28,\"or\",[[23,0,[\"displayOverwriteWarning\"]],[23,0,[\"canActivateTheme\"]],[23,0,[\"validationErrors\"]],[23,0,[\"fatalValidationErrors\"]]],null],\"flex-auto\"],null]]]],[8],[0,\"\\n        \"],[7,\"button\",false],[12,\"disabled\",[23,0,[\"closeDisabled\"]]],[12,\"class\",\"gh-btn\"],[12,\"data-test-close-button\",\"\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[8],[0,\"\\n            \"],[7,\"span\",true],[8],[4,\"if\",[[23,0,[\"theme\"]]],null,{\"statements\":[[0,\"Close\"]],\"parameters\":[]},{\"statements\":[[0,\"Cancel\"]],\"parameters\":[]}],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex items-center\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"displayOverwriteWarning\"]]],null,{\"statements\":[[0,\"                \"],[7,\"button\",false],[12,\"class\",\"gh-btn gh-btn-red\"],[12,\"data-test-overwrite-button\",\"\"],[3,\"action\",[[23,0,[]],\"confirmOverwrite\"]],[8],[0,\"\\n                    \"],[7,\"span\",true],[8],[0,\"Overwrite\"],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"if\",[[23,0,[\"canActivateTheme\"]]],null,{\"statements\":[[0,\"                \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-activate-now-button\",\"\"],[3,\"action\",[[23,0,[]],\"activate\"]],[8],[0,\"\\n                    \"],[7,\"span\",true],[8],[0,\"Activate\"],[4,\"if\",[[23,0,[\"validationErrors\"]]],null,{\"statements\":[[0,\" with errors\"]],\"parameters\":[]},null],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"if\",[[28,\"or\",[[23,0,[\"validationErrors\"]],[23,0,[\"fatalValidationErrors\"]]],null]],null,{\"statements\":[[0,\"                \"],[7,\"button\",false],[12,\"class\",\"gh-btn gh-btn-blue ml2\"],[12,\"data-test-try-again-button\",\"\"],[3,\"action\",[[23,0,[]],\"reset\"]],[8],[0,\"\\n                    \"],[7,\"span\",true],[8],[0,\"Retry\"],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-upload-theme.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-webhook-form", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "WLH7ViKQ",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header\"],[10,\"data-test-modal\",\"webhook-form\"],[8],[0,\"\\n    \"],[7,\"h1\",true],[10,\"data-test-text\",\"title\"],[8],[1,[28,\"if\",[[23,0,[\"webhook\",\"isNew\"]],\"New\",\"Edit\"],null],false],[0,\" webhook\"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[7,\"button\",false],[12,\"class\",\"close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[3,\"action\",[[23,0,[]],[28,\"optional\",[[23,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[8],[0,\"\\n    \"],[1,[28,\"svg-jar\",[\"close\"],null],false],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-body\"],[8],[0,\"\\n    \"],[7,\"fieldset\",true],[8],[0,\"\\n        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"webhook\",\"errors\"]],[23,0,[\"webhook\",\"hasValidated\"]],\"name\"]],{\"statements\":[[0,\"\\n            \"],[7,\"label\",true],[10,\"for\",\"webhook-name\"],[10,\"class\",\"fw6\"],[8],[0,\"Name\"],[9],[0,\"\\n            \"],[5,\"gh-text-input\",[[12,\"data-test-input\",\"webhook-name\"]],[[\"@value\",\"@input\",\"@focus-out\",\"@id\",\"@name\",\"@class\",\"@placeholder\",\"@shouldFocus\",\"@autocapitalize\",\"@autocorrect\"],[[28,\"readonly\",[[23,0,[\"webhook\",\"name\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"webhook\",\"name\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"validate\",\"name\"],[[\"target\"],[[23,0,[\"webhook\"]]]]],\"webhook-name\",\"name\",\"gh-input mt1\",\"Webhook name...\",true,\"off\",\"off\"]]],[0,\"\\n            \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"webhook-name\"]],[[\"@errors\",\"@property\"],[[23,0,[\"webhook\",\"errors\"]],\"name\"]]],[0,\"\\n        \"]],\"parameters\":[]}],[0,\"\\n    \"],[9],[0,\"\\n    \"],[7,\"fieldset\",true],[8],[0,\"\\n        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"webhook\",\"errors\"]],[23,0,[\"webhook\",\"hasValidated\"]],\"event\"]],{\"statements\":[[0,\"\\n            \"],[7,\"label\",true],[10,\"for\",\"webhook-event\"],[10,\"class\",\"fw6\"],[8],[0,\"Event\"],[9],[0,\"\\n            \"],[7,\"span\",true],[10,\"class\",\"gh-select\"],[8],[0,\"\\n                \"],[5,\"one-way-select\",[[12,\"data-test-select\",\"webhook-event\"]],[[\"@value\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@optionTargetPath\",\"@groupLabelPath\",\"@class\",\"@includeBlank\",\"@prompt\",\"@update\",\"@id\",\"@name\"],[[23,0,[\"webhook\",\"event\"]],[23,0,[\"availableEvents\"]],\"event\",\"name\",\"event\",\"group\",\"mt1\",true,\"Select an event\",[28,\"action\",[[23,0,[]],\"selectEvent\"],null],\"webhook-event\",\"event\"]]],[0,\"\\n                \"],[1,[28,\"svg-jar\",[\"arrow-down-small\"],null],false],[0,\"\\n            \"],[9],[0,\"\\n            \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"webhook-event\"]],[[\"@errors\",\"@property\"],[[23,0,[\"webhook\",\"errors\"]],\"event\"]]],[0,\"\\n        \"]],\"parameters\":[]}],[0,\"\\n    \"],[9],[0,\"\\n    \"],[7,\"fieldset\",true],[8],[0,\"\\n        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"webhook\",\"errors\"]],[23,0,[\"webhook\",\"hasValidated\"]],\"targetUrl\"]],{\"statements\":[[0,\"\\n            \"],[7,\"label\",true],[10,\"for\",\"webhook-targetUrl\"],[10,\"class\",\"fw6\"],[8],[0,\"Target URL\"],[9],[0,\"\\n            \"],[5,\"gh-text-input\",[[12,\"data-test-input\",\"webhook-targetUrl\"]],[[\"@value\",\"@input\",\"@focus-out\",\"@id\",\"@name\",\"@class\",\"@placeholder\",\"@shouldFocus\",\"@autocapitalize\",\"@autocorrect\"],[[28,\"readonly\",[[23,0,[\"webhook\",\"targetUrl\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"webhook\",\"targetUrl\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"validate\",\"targetUrl\"],[[\"target\"],[[23,0,[\"webhook\"]]]]],\"webhook-targetUrl\",\"targetUrl\",\"gh-input mt1\",\"Webhook target URL...\",true,\"off\",\"off\"]]],[0,\"\\n            \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"webhook-targetUrl\"]],[[\"@errors\",\"@property\"],[[23,0,[\"webhook\",\"errors\"]],\"targetUrl\"]]],[0,\"\\n        \"]],\"parameters\":[]}],[0,\"\\n    \"],[9],[0,\"\\n\"],[4,\"if\",[[23,0,[\"config\",\"enableDeveloperExperiments\"]]],null,{\"statements\":[[0,\"        \"],[7,\"fieldset\",true],[8],[0,\"\\n            \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"webhook\",\"errors\"]],[23,0,[\"webhook\",\"hasValidated\"]],\"secret\"]],{\"statements\":[[0,\"\\n                \"],[7,\"label\",true],[10,\"for\",\"webhook-secret\"],[10,\"class\",\"fw6\"],[8],[0,\"Secret\"],[9],[0,\"\\n                \"],[5,\"gh-text-input\",[[12,\"data-test-input\",\"webhook-secret\"]],[[\"@value\",\"@oninput\",\"@focus-out\",\"@id\",\"@name\",\"@class\",\"@placeholder\",\"@shouldFocus\",\"@autocapitalize\",\"@autocorrect\"],[[28,\"readonly\",[[23,0,[\"webhook\",\"secret\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"webhook\",\"secret\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"validate\",\"secret\"],[[\"target\"],[[23,0,[\"webhook\"]]]]],\"webhook-secret\",\"secret\",\"gh-input mt1\",\"Webhook secret...\",true,\"off\",\"off\"]]],[0,\"\\n                \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"webhook-secret\"]],[[\"@errors\",\"@property\"],[[23,0,[\"webhook\",\"errors\"]],\"secret\"]]],[0,\"\\n            \"]],\"parameters\":[]}],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"if\",[[23,0,[\"error\"]]],null,{\"statements\":[[0,\"        \"],[7,\"p\",true],[10,\"class\",\"red\"],[8],[1,[23,0,[\"error\"]],false],[9],[0,\"\\n\"]],\"parameters\":[]},null],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer\"],[8],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-button\",\"cancel-webhook\"],[3,\"action\",[[23,0,[]],\"closeModal\"]],[3,\"action\",[[23,0,[]],[28,\"optional\",[[23,0,[\"noop\"]]],null]],[[\"on\"],[\"mouseDown\"]]],[8],[0,\"\\n        \"],[7,\"span\",true],[8],[0,\"Cancel\"],[9],[0,\"\\n    \"],[9],[0,\"\\n    \"],[5,\"gh-task-button\",[[12,\"data-test-button\",\"save-webhook\"]],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[[23,0,[\"buttonText\"]],[23,0,[\"successText\"]],[23,0,[\"saveWebhook\"]],\"gh-btn gh-btn-green gh-btn-icon\"]]],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-webhook-form.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/modal-whats-new", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "2skTlAaH",
    "block": "{\"symbols\":[\"entry\"],\"statements\":[[7,\"header\",true],[10,\"class\",\"modal-header gh-wn-header\"],[10,\"data-test-modal\",\"whats-new\"],[8],[0,\"\\n    \"],[7,\"img\",true],[10,\"src\",\"assets/img/whats-new-header-bg.svg\"],[10,\"class\",\"background-img\"],[8],[9],[0,\"\\n    \"],[7,\"span\",true],[8],[1,[28,\"svg-jar\",[\"gift\"],[[\"class\"],[\"w5 h5 fill-white\"]]],false],[9],[0,\"\\n    \"],[7,\"h2\",true],[8],[0,\"What's new?\"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"button\",false],[12,\"class\",\"close gh-wn-close\"],[12,\"href\",\"\"],[12,\"title\",\"Close\"],[3,\"on\",[\"click\",[23,0,[\"closeModal\"]]]],[8],[0,\"\\n    \"],[1,[28,\"svg-jar\",[\"close\"],null],false],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[10,\"class\",\"modal-body gh-wn-content\"],[8],[0,\"\\n\"],[4,\"each\",[[23,0,[\"whatsNew\",\"entries\"]]],null,{\"statements\":[[0,\"        \"],[7,\"div\",true],[10,\"class\",\"gh-wn-entry\"],[8],[0,\"\\n            \"],[7,\"h4\",true],[8],[1,[28,\"moment-format\",[[23,1,[\"published_at\"]],\"DD MMMM YYYY\"],null],false],[9],[0,\"\\n            \"],[7,\"h1\",true],[10,\"class\",\"f1 fw6 ma0 pa0 mb3\"],[8],[1,[23,1,[\"title\"]],false],[9],[0,\"\\n\"],[4,\"if\",[[23,1,[\"feature_image\"]]],null,{\"statements\":[[0,\"                \"],[7,\"img\",true],[10,\"class\",\"mb5\"],[11,\"src\",[23,1,[\"feature_image\"]]],[8],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"if\",[[23,1,[\"custom_excerpt\"]]],null,{\"statements\":[[0,\"                \"],[7,\"p\",true],[8],[1,[23,1,[\"custom_excerpt\"]],false],[9],[0,\"\\n                \"],[7,\"a\",true],[11,\"href\",[23,1,[\"url\"]]],[10,\"class\",\"dib fw6 mb6\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener noreferrer\"],[8],[0,\"Read the full post →\"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                \"],[1,[23,1,[\"html\"]],true],[0,\"\\n\"]],\"parameters\":[]}],[0,\"        \"],[9],[0,\"\\n\"]],\"parameters\":[1]},null],[9],[0,\"\\n\"],[7,\"div\",true],[10,\"class\",\"modal-footer gh-wn-footer\"],[8],[0,\"\\n    \"],[7,\"a\",true],[11,\"href\",[23,0,[\"whatsNew\",\"changelogUrl\"]]],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener noreferrer\"],[8],[0,\"\\n        See all past updates\\n    \"],[9],[0,\"\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/modal-whats-new.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/object-bin", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "ITSahac4",
    "block": "{\"symbols\":[\"obj\",\"&default\"],\"statements\":[[4,\"draggable-object-target\",null,[[\"action\"],[\"handleObjectDropped\"]],{\"statements\":[[0,\"  \"],[7,\"div\",true],[10,\"class\",\"object-bin-title\"],[8],[1,[22,\"name\"],false],[9],[0,\"\\n  \"],[7,\"br\",true],[8],[9],[0,\"\\n\"],[4,\"each\",[[24,[\"model\"]]],null,{\"statements\":[[4,\"draggable-object\",null,[[\"action\",\"content\"],[\"handleObjectDragged\",[23,1,[]]]],{\"statements\":[[0,\"      \"],[14,2,[[23,1,[]]]],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[1]},null]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/object-bin.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/power-select-vertical-collection-options", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "CxV9pzMb",
    "block": "{\"symbols\":[\"opt\",\"index\",\"@select\",\"@groupIndex\",\"&default\",\"@loadingMessage\",\"&attrs\"],\"statements\":[[0,\"\\n\"],[7,\"ul\",false],[12,\"role\",\"listbox\"],[12,\"aria-controls\",[29,[\"ember-power-select-trigger-\",[23,3,[\"uniqueId\"]]]]],[13,7],[3,\"did-insert\",[[23,0,[\"addHandlers\"]]]],[8],[0,\"\\n\"],[4,\"if\",[[23,3,[\"loading\"]]],null,{\"statements\":[[4,\"if\",[[23,6,[]]],null,{\"statements\":[[0,\"            \"],[7,\"li\",true],[10,\"class\",\"ember-power-select-option ember-power-select-option--loading-message\"],[10,\"role\",\"option\"],[8],[1,[23,6,[]],false],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"vertical-collection\",[[24,[\"options\"]]],[[\"minHeight\",\"estimateHeight\",\"bufferSize\"],[30,6,10]],{\"statements\":[[0,\"        \"],[7,\"li\",true],[10,\"class\",\"ember-power-select-option\"],[11,\"aria-selected\",[29,[[28,\"ember-power-select-is-selected\",[[23,1,[]],[24,[\"select\",\"selected\"]]],null]]]],[11,\"aria-disabled\",[28,\"if\",[[23,1,[\"disabled\"]],\"true\"],null]],[11,\"aria-current\",[29,[[28,\"eq\",[[23,1,[]],[23,3,[\"highlighted\"]]],null]]]],[11,\"data-option-index\",[29,[[23,4,[]],[23,2,[]]]]],[10,\"role\",\"option\"],[8],[0,\"\\n            \"],[14,5,[[23,1,[]],[23,3,[]]]],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[1,2]},null],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/power-select-vertical-collection-options.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/power-select/trigger", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "Vg7WSC9q",
    "block": "{\"symbols\":[\"@placeholder\",\"@placeholderComponent\",\"@select\",\"&default\",\"@option\",\"@extra\",\"@selectedItemComponent\",\"@allowClear\"],\"statements\":[[4,\"if\",[[23,3,[\"selected\"]]],null,{\"statements\":[[4,\"if\",[[23,7,[]]],null,{\"statements\":[[0,\"        \"],[1,[28,\"component\",[[23,7,[]]],[[\"extra\",\"option\",\"select\"],[[28,\"readonly\",[[23,6,[]]],null],[28,\"readonly\",[[23,5,[\"selected\"]]],null],[28,\"readonly\",[[23,3,[]]],null]]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"        \"],[7,\"span\",true],[10,\"class\",\"ember-power-select-selected-item\"],[8],[14,4,[[23,3,[\"selected\"]],[24,[\"select\"]]]],[9],[0,\"\\n\"]],\"parameters\":[]}],[4,\"if\",[[28,\"and\",[[23,8,[]],[28,\"not\",[[23,3,[\"disabled\"]]],null]],null]],null,{\"statements\":[[0,\"        \"],[7,\"span\",false],[12,\"class\",\"ember-power-select-clear-btn\"],[3,\"on\",[\"mousedown\",[23,0,[\"clear\"]]]],[3,\"on\",[\"touchstart\",[23,0,[\"clear\"]]]],[8],[0,\"×\"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},{\"statements\":[[0,\"    \"],[1,[28,\"component\",[[23,2,[]]],[[\"placeholder\"],[[23,1,[]]]]],false],[0,\"\\n\"]],\"parameters\":[]}],[1,[28,\"svg-jar\",[\"arrow-down-small\"],null],false],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/power-select/trigger.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/components/sortable-objects", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "/BWYip4/",
    "block": "{\"symbols\":[\"&default\"],\"statements\":[[14,1]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/components/sortable-objects.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/editor", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "g79WL0OE",
    "block": "{\"symbols\":[\"editor\"],\"statements\":[[4,\"if\",[[23,0,[\"post\"]]],null,{\"statements\":[[0,\"    \"],[5,\"gh-editor\",[],[[\"@tagName\",\"@class\"],[\"section\",\"gh-editor gh-view\"]],{\"statements\":[[0,\"\\n        \"],[7,\"header\",true],[11,\"class\",[29,[\"gh-editor-header br2 pe-none \",[23,1,[\"headerClass\"]],\" \",[28,\"if\",[[23,0,[\"infoMessage\"]],\"bg-white\"],null]]]],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"flex items-center pe-auto\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"ui\",\"isFullScreen\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"div\",true],[11,\"class\",[29,[[28,\"ui-text\",[\"ts\"],null],\" h9 br b--lightgrey pl3 pr4 flex items-center br2 br--left \",[28,\"unless\",[[23,0,[\"infoMessage\"]],\"bg-white\"],null]]]],[8],[0,\"\\n                        \"],[5,\"link-to\",[[12,\"data-test-link\",[28,\"pluralize\",[[23,0,[\"post\",\"displayName\"]]],null]]],[[\"@route\",\"@classNames\"],[[28,\"pluralize\",[[23,0,[\"post\",\"displayName\"]]],null],\"blue link fw4 flex items-center\"]],{\"statements\":[[0,\"\\n                            \"],[1,[28,\"svg-jar\",[\"arrow-left\"],[[\"class\"],[\"w3 fill-blue mr1 nudge-right--2\"]]],false],[0,\"\\n                            \"],[1,[28,\"capitalize\",[[28,\"pluralize\",[[23,0,[\"post\",\"displayName\"]]],null]],null],false],[0,\"\\n                        \"]],\"parameters\":[]}],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                \"],[7,\"div\",true],[11,\"class\",[29,[\"flex items-center pl4 pr4 f8 nudge-left--1 h9 br2 br--right \",[28,\"unless\",[[23,0,[\"infoMessage\"]],\"bg-white\"],null]]]],[8],[0,\"\\n                    \"],[7,\"span\",true],[10,\"class\",\"fw4 midgrey-l2\"],[8],[0,\"\\n                        \"],[5,\"gh-editor-post-status\",[],[[\"@post\",\"@isSaving\"],[[23,0,[\"post\"]],[28,\"or\",[[23,0,[\"autosave\",\"isRunning\"]],[23,0,[\"saveTasks\",\"isRunning\"]]],null]]]],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"infoMessage\"]]],null,{\"statements\":[[0,\"            \"],[7,\"div\",true],[10,\"class\",\"gh-koenig-info miw88 flex flex-auto justify-center\"],[10,\"style\",\"pointer-events: auto\"],[8],[0,\"\\n                \"],[7,\"div\",true],[11,\"class\",[29,[\"midgrey inline-flex tracked-1 center pa1 pl4 pr4 br3 justify-center items-start \",[28,\"if\",[[28,\"eq\",[[23,1,[\"headerClass\"]],\"gh-editor-header-small\"],null],\"bg-white\"],null]]]],[8],[0,\"\\n                    \"],[1,[28,\"svg-jar\",[\"idea\"],[[\"class\"],[\"w7 h7 fill-blue\"]]],false],[0,\"\\n                    \"],[7,\"p\",true],[10,\"class\",\"ma0 pa0 ml1 nudge-top--2\"],[8],[0,\"\\n                        \"],[1,[23,0,[\"infoMessage\"]],false],[0,\"\\n                        \"],[7,\"button\",false],[12,\"class\",\"blue fw5\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"infoMessage\"]],\"\"],null]]],[8],[0,\"Got it\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n            \"],[7,\"section\",true],[11,\"class\",[29,[\"view-actions br2 \",[28,\"unless\",[[23,0,[\"infoMessage\"]],\"bg-white\"],null]]]],[10,\"style\",\"pointer-events: auto\"],[8],[0,\"\\n\"],[4,\"unless\",[[23,0,[\"post\",\"isNew\"]]],null,{\"statements\":[[4,\"if\",[[23,0,[\"session\",\"user\",\"isContributor\"]]],null,{\"statements\":[[0,\"                        \"],[5,\"gh-task-button\",[[12,\"data-test-contributor-save\",\"true\"]],[[\"@buttonText\",\"@task\",\"@runningText\",\"@class\"],[\"Save\",[23,0,[\"save\"]],\"Saving\",\"gh-btn gh-btn-blue gh-btn-icon contributor-save-button\"]]],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        \"],[5,\"gh-publishmenu\",[],[[\"@post\",\"@postStatus\",\"@saveTask\",\"@setSaveType\",\"@onOpen\",\"@backgroundTask\",\"@memberCount\"],[[23,0,[\"post\"]],[23,0,[\"post\",\"status\"]],[23,0,[\"save\"]],[28,\"action\",[[23,0,[]],\"setSaveType\"],null],[28,\"action\",[[23,0,[]],\"cancelAutosave\"],null],[23,0,[\"backgroundLoader\"]],[23,0,[\"memberCount\"]]]]],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},null],[0,\"\\n                \"],[7,\"button\",false],[12,\"class\",\"post-settings\"],[12,\"title\",\"Settings\"],[12,\"data-test-psm-trigger\",\"\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],\"openSettingsMenu\"],[[\"target\"],[[23,0,[\"ui\"]]]]],[8],[0,\"\\n                    \"],[1,[28,\"svg-jar\",[\"settings\"],null],false],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n\"],[0,\"        \"],[5,\"gh-koenig-editor\",[],[[\"@title\",\"@titlePlaceholder\",\"@onTitleChange\",\"@onTitleBlur\",\"@body\",\"@bodyPlaceholder\",\"@bodyAutofocus\",\"@onBodyChange\",\"@headerOffset\",\"@scrollContainerSelector\",\"@scrollOffsetTopSelector\",\"@scrollOffsetBottomSelector\",\"@onEditorCreated\",\"@onWordCountChange\"],[[28,\"readonly\",[[23,0,[\"post\",\"titleScratch\"]]],null],[28,\"concat\",[[28,\"capitalize\",[[23,0,[\"post\",\"displayName\"]]],null],\" Title\"],null],[28,\"action\",[[23,0,[]],\"updateTitleScratch\"],null],[28,\"action\",[[23,0,[]],[28,\"perform\",[[23,0,[\"saveTitle\"]]],null]],null],[28,\"readonly\",[[23,0,[\"post\",\"scratch\"]]],null],[28,\"concat\",[\"Begin writing your \",[23,0,[\"post\",\"displayName\"]],\"...\"],null],[23,0,[\"shouldFocusEditor\"]],[28,\"action\",[[23,0,[]],\"updateScratch\"],null],[23,1,[\"headerHeight\"]],\".gh-koenig-editor\",\".gh-editor-header-small\",\".gh-mobile-nav-bar\",[28,\"action\",[[23,0,[]],\"setKoenigEditor\"],null],[28,\"action\",[[23,0,[]],\"updateWordCount\"],null]]]],[0,\"\\n\\n        \"],[7,\"div\",true],[11,\"class\",[29,[\"absolute flex items-center br3 bg-white \",[28,\"if\",[[23,1,[\"headerClass\"]],\"right-4 bottom-4\",\"right-6 bottom-6\"],null]]]],[8],[0,\"\\n            \"],[7,\"div\",true],[11,\"class\",[29,[\"midgrey-l2 \",[28,\"if\",[[23,1,[\"headerClass\"]],\"f-supersmall pl2 pr2\",\"f8 pl4 pr3\"],null],\" fw4\"]]],[8],[0,\"\\n                \"],[1,[28,\"pluralize\",[[23,0,[\"wordCount\",\"wordCount\"]],\"word\"],null],false],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"a\",true],[10,\"href\",\"https://ghost.org/faq/using-the-editor/\"],[11,\"class\",[29,[\"flex \",[28,\"if\",[[23,1,[\"headerClass\"]],\"pa2\",\"pa3\"],null]]]],[10,\"target\",\"_blank\"],[8],[1,[28,\"svg-jar\",[\"help\"],[[\"class\"],[\"w4 h4 stroke-midgrey-l2\"]]],false],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n    \"]],\"parameters\":[1]}],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"showDeletePostModal\"]]],null,{\"statements\":[[0,\"        \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@close\",\"@modifier\"],[\"delete-post\",[28,\"hash\",null,[[\"post\",\"onSuccess\"],[[23,0,[\"post\"]],[28,\"route-action\",[\"redirectToContentScreen\",[23,0,[\"post\",\"displayName\"]]],null]]]],[28,\"action\",[[23,0,[]],\"toggleDeletePostModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showLeaveEditorModal\"]]],null,{\"statements\":[[0,\"        \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-editor\",[28,\"action\",[[23,0,[]],\"leaveEditor\"],null],[28,\"action\",[[23,0,[]],\"toggleLeaveEditorModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showReAuthenticateModal\"]]],null,{\"statements\":[[0,\"        \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@close\",\"@modifier\"],[\"re-authenticate\",[28,\"action\",[[23,0,[]],\"toggleReAuthenticateModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showEmailPreviewModal\"]]],null,{\"statements\":[[0,\"        \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@close\",\"@modifier\"],[\"post-email-preview\",[23,0,[\"post\"]],[28,\"action\",[[23,0,[]],\"toggleEmailPreviewModal\"],null],\"full-overlay email-preview\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showUpgradeModal\"]]],null,{\"statements\":[[0,\"        \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@close\",\"@modifier\"],[\"upgrade-host-limit\",[28,\"hash\",null,[[\"message\",\"details\",\"upgradeLink\"],[[24,[\"hostLimitError\",\"context\"]],[24,[\"hostLimitError\",\"details\"]],[24,[\"hostLimitError\",\"help\"]]]]],[28,\"action\",[[23,0,[]],\"closeUpgradeModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    \"],[5,\"liquid-wormhole\",[],[[],[]],{\"statements\":[[0,\"\\n        \"],[5,\"gh-post-settings-menu\",[],[[\"@post\",\"@showSettingsMenu\",\"@toggleEmailPreviewModal\",\"@deletePost\",\"@updateSlug\",\"@savePost\"],[[23,0,[\"post\"]],[23,0,[\"ui\",\"showSettingsMenu\"]],[28,\"action\",[[23,0,[]],\"toggleEmailPreviewModal\"],null],[28,\"action\",[[23,0,[]],\"toggleDeletePostModal\"],null],[23,0,[\"updateSlug\"]],[23,0,[\"savePost\"]]]]],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[1,[22,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/editor.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/editor/edit-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "LtFqvcqW",
    "block": "{\"symbols\":[],\"statements\":[[7,\"div\",false],[12,\"class\",\"gh-view\"],[3,\"did-insert\",[[28,\"action\",[[23,0,[]],\"setMainClass\",\"gh-main-white\"],[[\"target\"],[[23,0,[\"ui\"]]]]]]],[8],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[5,\"gh-loading-spinner\",[],[[],[]]],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/editor/edit-loading.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/error", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "L8Adf7tq",
    "block": "{\"symbols\":[\"item\"],\"statements\":[[7,\"div\",true],[10,\"class\",\"gh-view\"],[8],[0,\"\\n\\n    \"],[7,\"section\",true],[10,\"class\",\"flex flex-column items-center flex-grow justify-center h-100 nt10\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"absolute error-background nudge-right--5\"],[8],[0,\"\\n            \"],[1,[28,\"svg-jar\",[\"desert\"],[[\"class\"],[\"error-background absolute\"]]],false],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"traveler-1\"],[8],[1,[28,\"svg-jar\",[\"tumbleweed\"],[[\"class\"],[\"w6 h6 absolute bouncer-1\"]]],false],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"traveler-2\"],[8],[1,[28,\"svg-jar\",[\"tumbleweed\"],[[\"class\"],[\"w11 h11 absolute bouncer-2\"]]],false],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"absolute mt50 tc\"],[8],[0,\"\\n            \"],[7,\"h1\",true],[10,\"class\",\"midlightgrey error-code-size fw6\"],[8],[1,[23,0,[\"code\"]],false],[9],[0,\"\\n            \"],[7,\"h2\",true],[10,\"class\",\"midlightgrey f4 fw3\"],[8],[1,[23,0,[\"message\"]],false],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"stack\"]]],null,{\"statements\":[[0,\"        \"],[7,\"section\",true],[10,\"class\",\"error-stack\"],[8],[0,\"\\n            \"],[7,\"h3\",true],[8],[0,\"Stack Trace\"],[9],[0,\"\\n            \"],[7,\"p\",true],[8],[7,\"strong\",true],[8],[1,[23,0,[\"message\"]],false],[9],[9],[0,\"\\n            \"],[7,\"ul\",true],[10,\"class\",\"error-stack-list\"],[8],[0,\"\\n\"],[4,\"each\",[[23,0,[\"stack\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"li\",true],[8],[0,\"\\n                        at\\n                        \"],[4,\"if\",[[23,1,[\"function\"]]],null,{\"statements\":[[7,\"em\",true],[10,\"class\",\"error-stack-function\"],[8],[1,[23,1,[\"function\"]],false],[9]],\"parameters\":[]},null],[0,\"\\n                        \"],[7,\"span\",true],[10,\"class\",\"error-stack-file\"],[8],[0,\"(\"],[1,[23,1,[\"at\"]],false],[0,\")\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/error.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/member", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "fo55ZGUb",
    "block": "{\"symbols\":[],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[5,\"gh-canvas-header\",[[12,\"class\",\"gh-canvas-header\"]],[[],[]],{\"statements\":[[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            \"],[5,\"link-to\",[[12,\"data-test-link\",\"members-back\"]],[[\"@route\"],[\"members\"]],{\"statements\":[[0,\"Members\"]],\"parameters\":[]}],[0,\"\\n            \"],[7,\"span\",true],[8],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[9],[0,\"\\n\"],[4,\"if\",[[23,0,[\"member\",\"isNew\"]]],null,{\"statements\":[[0,\"                New member\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                \"],[1,[28,\"or\",[[23,0,[\"member\",\"name\"]],[23,0,[\"member\",\"email\"]]],null],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"        \"],[9],[0,\"\\n\\n        \"],[7,\"section\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"session\",\"user\",\"isOwner\"]]],null,{\"statements\":[[4,\"unless\",[[23,0,[\"member\",\"isNew\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"button\",false],[12,\"class\",\"gh-btn gh-btn-white gh-btn-icon mr2\"],[3,\"on\",[\"click\",[28,\"action\",[[23,0,[]],\"toggleImpersonateMemberModal\"],null]]],[8],[0,\"\\n                        \"],[7,\"span\",true],[8],[0,\"Impersonate\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"\\n            \"],[5,\"gh-task-button\",[],[[\"@class\",\"@type\",\"@task\",\"@autoReset\",\"@data-test-button\"],[\"gh-btn gh-btn-blue gh-btn-icon\",\"button\",[23,0,[\"saveMember\"]],true,\"save\"]]],[0,\"\\n        \"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n    \"],[7,\"form\",true],[10,\"class\",\"mb10 member-basic-info-form\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex items-center mb10 bt b--lightgrey-d1 pt8\"],[8],[0,\"\\n\"],[4,\"if\",[[28,\"or\",[[23,0,[\"member\",\"name\"]],[23,0,[\"member\",\"email\"]]],null]],null,{\"statements\":[[0,\"                \"],[5,\"gh-member-avatar\",[],[[\"@member\",\"@sizeClass\",\"@containerClass\"],[[23,0,[\"member\"]],[28,\"if\",[[23,0,[\"member\",\"name\"]],\"f-subheadline fw4 lh-zero tracked-1\",\"f-headline fw4 lh-zero tracked-1\"],null],\"w20 h20 mr4 gh-member-detail-avatar\"]]],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                \"],[7,\"div\",true],[10,\"class\",\"flex items-center justify-center br-100 w18 h18 mr4 gh-new-member-avatar\"],[8],[0,\"\\n                    \"],[7,\"span\",true],[10,\"class\",\"gh-member-avatar-label f-subheadline fw4 lh-zero tracked-1\"],[8],[0,\"N\"],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"            \"],[7,\"div\",true],[8],[0,\"\\n                \"],[7,\"h3\",true],[10,\"class\",\"f2 fw6 ma0 pa0\"],[8],[0,\"\\n                    \"],[1,[28,\"or\",[[23,0,[\"member\",\"name\"]],[23,0,[\"member\",\"email\"]]],null],false],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"p\",true],[10,\"class\",\"f7 pa0 ma0 midlightgrey-d1\"],[8],[0,\"\\n\"],[4,\"if\",[[28,\"and\",[[23,0,[\"member\",\"name\"]],[23,0,[\"member\",\"email\"]]],null]],null,{\"statements\":[[0,\"                        \"],[7,\"span\",true],[10,\"class\",\"darkgrey fw5\"],[8],[1,[23,0,[\"member\",\"email\"]],false],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                \"],[9],[0,\"\\n\"],[4,\"unless\",[[23,0,[\"member\",\"isNew\"]]],null,{\"statements\":[[0,\"                \"],[7,\"p\",true],[11,\"class\",[29,[\"f7 pa0 ma0 midgrey-d1 \",[28,\"if\",[[23,0,[\"member\",\"name\"]],\"nudge-bottom--2\"],null]]]],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"member\",\"geolocation\"]]],null,{\"statements\":[[4,\"if\",[[28,\"eq\",[[23,0,[\"member\",\"geolocation\",\"country_code\"]],\"US\"],null]],null,{\"statements\":[[0,\"                            \"],[1,[23,0,[\"member\",\"geolocation\",\"region\"]],false],[0,\", US\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                            \"],[1,[23,0,[\"member\",\"geolocation\",\"country\"]],false],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]},{\"statements\":[[0,\"                        Unknown location\\n\"]],\"parameters\":[]}],[0,\"                    – Created on \"],[1,[23,0,[\"subscribedAt\"]],false],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[5,\"gh-member-settings-form\",[],[[\"@member\",\"@scratchMember\",\"@setProperty\",\"@isLoading\"],[[23,0,[\"member\"]],[23,0,[\"scratchMember\"]],[28,\"action\",[[23,0,[]],\"setProperty\"],null],[23,0,[\"isLoading\"]]]]],[0,\"\\n    \"],[9],[0,\"\\n\\n\"],[4,\"unless\",[[23,0,[\"member\",\"isNew\"]]],null,{\"statements\":[[0,\"        \"],[7,\"button\",false],[12,\"class\",\"gh-btn gh-btn-red gh-btn-icon mt3\"],[12,\"data-test-button\",\"delete-member\"],[12,\"type\",\"button\"],[3,\"on\",[\"click\",[28,\"action\",[[23,0,[]],\"toggleDeleteMemberModal\"],null]]],[8],[0,\"\\n            \"],[7,\"span\",true],[8],[0,\"Delete member\"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"showUnsavedChangesModal\"]]],null,{\"statements\":[[0,\"    \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[28,\"action\",[[23,0,[]],\"leaveScreen\"],null],[28,\"action\",[[23,0,[]],\"toggleUnsavedChangesModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showDeleteMemberModal\"]]],null,{\"statements\":[[0,\"    \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"delete-member\",[23,0,[\"member\"]],[28,\"action\",[[23,0,[]],\"deleteMember\"],null],[28,\"action\",[[23,0,[]],\"toggleDeleteMemberModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showImpersonateMemberModal\"]]],null,{\"statements\":[[0,\"    \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@close\",\"@modifier\"],[\"impersonate-member\",[23,0,[\"member\"]],[28,\"action\",[[23,0,[]],\"toggleImpersonateMemberModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/member.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/members", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "38bz7DY6",
    "block": "{\"symbols\":[\"member\"],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[5,\"gh-canvas-header\",[[12,\"class\",\"gh-canvas-header members-header\"]],[[],[]],{\"statements\":[[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"Members\"],[9],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[5,\"gh-members-contentfilter\",[],[[\"@selectedLabel\",\"@availableLabels\",\"@onLabelChange\",\"@onLabelAdd\",\"@onLabelEdit\"],[[23,0,[\"selectedLabel\"]],[23,0,[\"availableLabels\"]],[28,\"action\",[[23,0,[]],\"changeLabel\"],null],[28,\"action\",[[23,0,[]],\"addLabel\"],null],[28,\"action\",[[23,0,[]],\"editLabel\"],null]]]],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"relative gh-members-header-search\"],[8],[0,\"\\n                \"],[1,[28,\"svg-jar\",[\"search\"],[[\"class\"],[\"gh-input-search-icon\"]]],false],[0,\"\\n                \"],[5,\"gh-text-input\",[[12,\"placeholder\",\"Search members...\"],[12,\"class\",[29,[\"gh-members-list-searchfield \",[28,\"if\",[[23,0,[\"searchText\"]],\"active\"],null]]]]],[[\"@value\",\"@input\"],[[23,0,[\"searchText\"]],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"searchText\"]]],null]],[[\"value\"],[\"target.value\"]]]]]],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"span\",true],[10,\"class\",\"dropdown\"],[8],[0,\"\\n                \"],[5,\"gh-dropdown-button\",[],[[\"@dropdownName\",\"@classNames\",\"@title\",\"@data-test-user-actions\"],[\"members-actions-menu\",\"gh-btn gh-btn-white gh-btn-icon only-has-icon gh-actions-cog\",\"Members Actions\",\"true\"]],{\"statements\":[[0,\"\\n                    \"],[7,\"span\",true],[8],[0,\"\\n                        \"],[1,[28,\"svg-jar\",[\"settings\"],null],false],[0,\"\\n                        \"],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"Actions\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"]],\"parameters\":[]}],[0,\"\\n                \"],[5,\"gh-dropdown\",[],[[\"@name\",\"@tagName\",\"@classNames\"],[\"members-actions-menu\",\"ul\",\"gh-member-actions-menu dropdown-menu dropdown-triangle-top-right\"]],{\"statements\":[[0,\"\\n                    \"],[7,\"li\",true],[8],[0,\"\\n                        \"],[5,\"link-to\",[[12,\"class\",\"mr2\"],[12,\"data-test-link\",\"import-csv\"]],[[\"@route\"],[\"members.import\"]],{\"statements\":[[0,\"\\n                            \"],[7,\"span\",true],[8],[0,\"Import members\"],[9],[0,\"\\n                        \"]],\"parameters\":[]}],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"li\",true],[8],[0,\"\\n                        \"],[7,\"a\",false],[12,\"href\",\"#\"],[12,\"class\",\"mr2\"],[3,\"action\",[[23,0,[]],\"exportData\"]],[8],[0,\"\\n                            \"],[7,\"span\",true],[8],[0,\"Export all members\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"]],\"parameters\":[]}],[0,\"\\n            \"],[9],[0,\"\\n            \"],[5,\"link-to\",[[12,\"class\",\"gh-btn gh-btn-green\"],[12,\"data-test-new-member-button\",\"true\"]],[[\"@route\"],[\"member.new\"]],{\"statements\":[[7,\"span\",true],[8],[0,\"New member\"],[9]],\"parameters\":[]}],[0,\"\\n        \"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n    \"],[7,\"section\",true],[10,\"class\",\"view-container\"],[8],[0,\"\\n\"],[4,\"if\",[[24,[\"filteredMembers\"]]],null,{\"statements\":[[4,\"if\",[[23,0,[\"showingAll\"]]],null,{\"statements\":[[0,\"                \"],[7,\"section\",true],[8],[0,\"\\n                    \"],[5,\"gh-members-chart\",[],[[\"@members\"],[[22,\"members\"]]]],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"        \"],[7,\"section\",true],[10,\"class\",\"content-list\"],[8],[0,\"\\n            \"],[7,\"ol\",true],[11,\"class\",[29,[\"members-list gh-list \",[28,\"unless\",[[23,0,[\"filteredMembers\"]],\"no-posts\"],null]]]],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"filteredMembers\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"li\",true],[10,\"class\",\"gh-list-row header\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"gh-list-header\"],[8],[1,[22,\"listHeader\"],false],[9],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"gh-list-header gh-list-cellwidth-20 nowrap\"],[8],[0,\"Location\"],[9],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"gh-list-header gh-list-cellwidth-20 nowrap\"],[8],[0,\"Created\"],[9],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"gh-list-header gh-list-cellwidth-chevron\"],[8],[9],[0,\"\\n                    \"],[9],[0,\"\\n\"],[4,\"if\",[[23,0,[\"filteredMembers\"]]],null,{\"statements\":[[0,\"                        \"],[5,\"vertical-collection\",[],[[\"@items\",\"@key\",\"@containerSelector\",\"@estimateHeight\",\"@bufferSize\"],[[23,0,[\"filteredMembers\"]],\"id\",\".gh-main\",\"60\",\"20\"]],{\"statements\":[[0,\"\\n                            \"],[5,\"gh-members-list-item\",[],[[\"@member\",\"@data-test-member-id\"],[[23,1,[]],[23,1,[\"id\"]]]]],[0,\"\\n                        \"]],\"parameters\":[1]}],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,0,[\"fetchMembers\",\"isRunning\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"div\",true],[10,\"class\",\"gh-content\"],[8],[0,\"\\n                            \"],[5,\"gh-loading-spinner\",[],[[],[]]],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        \"],[7,\"li\",true],[10,\"class\",\"no-posts-box\"],[8],[0,\"\\n                            \"],[7,\"div\",true],[10,\"class\",\"no-posts\"],[8],[0,\"\\n                                \"],[1,[28,\"svg-jar\",[\"members-placeholder\"],[[\"class\"],[\"gh-members-placeholder\"]]],false],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showingAll\"]]],null,{\"statements\":[[0,\"                                    \"],[7,\"h3\",true],[8],[0,\"No members yet\"],[9],[0,\"\\n                                    \"],[5,\"gh-members-no-members\",[],[[],[]]],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                    \"],[7,\"h3\",true],[8],[0,\"No members match the current filter\"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]}]],\"parameters\":[]}],[0,\"            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[1,[22,\"outlet\"],false],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"showLabelModal\"]]],null,{\"statements\":[[0,\"    \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@close\",\"@modifier\"],[\"members-label-form\",[23,0,[\"labelModalData\"]],[28,\"action\",[[23,0,[]],\"toggleLabelModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/members.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/members/import", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "LBv6gEmr",
    "block": "{\"symbols\":[],\"statements\":[[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@close\",\"@confirm\",\"@modifier\"],[\"import-members\",[28,\"action\",[[23,0,[]],\"close\"],null],[28,\"action\",[[23,0,[]],\"fetchNewMembers\"],null],\"action wide\"]]],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/members/import.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/pages-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "2KGmdjrf",
    "block": "{\"symbols\":[],\"statements\":[[7,\"section\",false],[12,\"class\",\"gh-canvas\"],[3,\"did-insert\",[[28,\"action\",[[23,0,[]],\"setMainClass\",\"gh-main-primarybg\"],[[\"target\"],[[23,0,[\"ui\"]]]]]]],[8],[0,\"\\n    \"],[7,\"header\",true],[10,\"class\",\"gh-canvas-header post-header\"],[8],[0,\"\\n        \"],[5,\"gh-custom-view-title\",[],[[\"@title\",\"@query\"],[\"Pages\",[28,\"reset-query-params\",[\"posts\"],null]]]],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[5,\"gh-contentfilter\",[],[[\"@selectedType\",\"@availableTypes\",\"@onTypeChange\",\"@selectedAuthor\",\"@availableAuthors\",\"@onAuthorChange\",\"@selectedTag\",\"@availableTags\",\"@onTagChange\",\"@selectedOrder\",\"@availableOrders\",\"@onOrderChange\"],[[23,0,[\"selectedType\"]],[23,0,[\"availableTypes\"]],[28,\"action\",[[23,0,[]],[28,\"mut\",[[24,[\"k\"]]],null]],null],[23,0,[\"selectedAuthor\"]],[23,0,[\"availableAuthors\"]],[28,\"action\",[[23,0,[]],[28,\"mut\",[[24,[\"k\"]]],null]],null],[23,0,[\"selectedTag\"]],[23,0,[\"availableTags\"]],[28,\"action\",[[23,0,[]],[28,\"mut\",[[24,[\"k\"]]],null]],null],[23,0,[\"selectedOrder\"]],[23,0,[\"availableOrders\"]],[28,\"action\",[[23,0,[]],[28,\"mut\",[[24,[\"k\"]]],null]],null]]]],[0,\"\\n\\n            \"],[5,\"link-to\",[[12,\"class\",\"gh-btn gh-btn-green\"],[12,\"data-test-new-page-button\",true]],[[\"@route\",\"@model\"],[\"editor.new\",\"page\"]],{\"statements\":[[7,\"span\",true],[8],[0,\"New page\"],[9]],\"parameters\":[]}],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[5,\"gh-loading-list\",[],[[],[]]],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/pages-loading.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/pages", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "aEbYI1JU",
    "block": "{\"symbols\":[\"page\"],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[5,\"gh-canvas-header\",[[12,\"class\",\"gh-canvas-header post-header\"]],[[],[]],{\"statements\":[[0,\"\\n        \"],[5,\"gh-custom-view-title\",[],[[\"@title\",\"@query\"],[\"Pages\",[28,\"reset-query-params\",[\"posts\"],null]]]],[0,\"\\n\\n        \"],[7,\"section\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[5,\"gh-contentfilter\",[],[[\"@selectedType\",\"@availableTypes\",\"@onTypeChange\",\"@selectedAuthor\",\"@availableAuthors\",\"@onAuthorChange\",\"@selectedTag\",\"@availableTags\",\"@onTagChange\",\"@selectedOrder\",\"@availableOrders\",\"@onOrderChange\"],[[23,0,[\"selectedType\"]],[23,0,[\"availableTypes\"]],[28,\"action\",[[23,0,[]],\"changeType\"],null],[23,0,[\"selectedAuthor\"]],[23,0,[\"availableAuthors\"]],[28,\"action\",[[23,0,[]],\"changeAuthor\"],null],[23,0,[\"selectedTag\"]],[23,0,[\"availableTags\"]],[28,\"action\",[[23,0,[]],\"changeTag\"],null],[23,0,[\"selectedOrder\"]],[23,0,[\"availableOrders\"]],[28,\"action\",[[23,0,[]],\"changeOrder\"],null]]]],[0,\"\\n\\n            \"],[5,\"link-to\",[[12,\"class\",\"gh-btn gh-btn-green\"],[12,\"data-test-new-page-button\",true]],[[\"@route\",\"@model\"],[\"editor.new\",\"page\"]],{\"statements\":[[7,\"span\",true],[8],[0,\"New page\"],[9]],\"parameters\":[]}],[0,\"\\n        \"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n    \"],[7,\"section\",true],[10,\"class\",\"content-list\"],[8],[0,\"\\n        \"],[7,\"ol\",true],[11,\"class\",[29,[\"gh-list \",[28,\"unless\",[[23,0,[\"postsInfinityModel\"]],\"no-posts\"],null]]]],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"postsInfinityModel\"]]],null,{\"statements\":[[0,\"                \"],[7,\"li\",true],[10,\"class\",\"gh-list-row header\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-list-header no-padding\"],[8],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-list-header gh-posts-title-header\"],[8],[0,\"Title\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-list-header gh-posts-status-header\"],[8],[0,\"Status\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-list-header gh-posts-lastupdate-header\"],[8],[0,\"Last update\"],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"each\",[[23,0,[\"postsInfinityModel\"]]],null,{\"statements\":[[0,\"                \"],[5,\"gh-posts-list-item\",[[12,\"data-test-page-id\",[23,1,[\"id\"]]]],[[\"@post\"],[[23,1,[]]]]],[0,\"\\n\"]],\"parameters\":[1]},{\"statements\":[[0,\"                \"],[7,\"li\",true],[10,\"class\",\"no-posts-box\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"no-posts\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showingAll\"]]],null,{\"statements\":[[0,\"                            \"],[1,[28,\"svg-jar\",[\"pages-placeholder\"],[[\"class\"],[\"gh-pages-placeholder\"]]],false],[0,\"\\n                            \"],[7,\"h3\",true],[8],[0,\"You haven't created any pages yet!\"],[9],[0,\"\\n                            \"],[5,\"link-to\",[[12,\"class\",\"gh-btn gh-btn-green gh-btn-lg\"]],[[\"@route\",\"@model\"],[\"editor.new\",\"page\"]],{\"statements\":[[0,\"\\n                                \"],[7,\"span\",true],[8],[0,\"Create a new page\"],[9],[0,\"\\n                            \"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                            \"],[7,\"h3\",true],[8],[0,\"No pages match the current filter\"],[9],[0,\"\\n                            \"],[5,\"link-to\",[[12,\"class\",\"gh-btn gh-btn-lg\"]],[[\"@route\",\"@query\"],[\"pages\",[28,\"hash\",null,[[\"type\",\"author\",\"tag\"],[null,null,null]]]]],{\"statements\":[[0,\"\\n                                \"],[7,\"span\",true],[8],[0,\"Show all pages\"],[9],[0,\"\\n                            \"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"        \"],[9],[0,\"\\n\\n        \"],[5,\"gh-infinity-loader\",[],[[\"@infinityModel\",\"@scrollable\",\"@triggerOffset\"],[[23,0,[\"postsInfinityModel\"]],\".gh-main\",1000]]],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[1,[22,\"outlet\"],false],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/pages.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/posts-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "rA7B6+gL",
    "block": "{\"symbols\":[],\"statements\":[[7,\"section\",false],[12,\"class\",\"gh-canvas\"],[3,\"did-insert\",[[28,\"action\",[[23,0,[]],\"setMainClass\",\"gh-main-primarybg\"],[[\"target\"],[[23,0,[\"ui\"]]]]]]],[8],[0,\"\\n    \"],[7,\"header\",true],[10,\"class\",\"gh-canvas-header post-header\"],[8],[0,\"\\n        \"],[5,\"gh-custom-view-title\",[],[[\"@title\",\"@query\"],[\"Posts\",[28,\"reset-query-params\",[\"posts\"],null]]]],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[5,\"gh-contentfilter\",[],[[\"@selectedType\",\"@availableTypes\",\"@onTypeChange\",\"@selectedAuthor\",\"@availableAuthors\",\"@onAuthorChange\",\"@selectedTag\",\"@availableTags\",\"@onTagChange\",\"@selectedOrder\",\"@availableOrders\",\"@onOrderChange\"],[[23,0,[\"selectedType\"]],[23,0,[\"availableTypes\"]],[28,\"action\",[[23,0,[]],[28,\"mut\",[[24,[\"k\"]]],null]],null],[23,0,[\"selectedAuthor\"]],[23,0,[\"availableAuthors\"]],[28,\"action\",[[23,0,[]],[28,\"mut\",[[24,[\"k\"]]],null]],null],[23,0,[\"selectedTag\"]],[23,0,[\"availableTags\"]],[28,\"action\",[[23,0,[]],[28,\"mut\",[[24,[\"k\"]]],null]],null],[23,0,[\"selectedOrder\"]],[23,0,[\"availableOrders\"]],[28,\"action\",[[23,0,[]],[28,\"mut\",[[24,[\"k\"]]],null]],null]]]],[0,\"\\n\\n            \"],[5,\"link-to\",[[12,\"class\",\"gh-btn gh-btn-green\"],[12,\"data-test-new-post-button\",true]],[[\"@route\",\"@model\"],[\"editor.new\",\"post\"]],{\"statements\":[[7,\"span\",true],[8],[0,\"New post\"],[9]],\"parameters\":[]}],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[5,\"gh-loading-list\",[],[[],[]]],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/posts-loading.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/posts", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "3g/fEswl",
    "block": "{\"symbols\":[\"post\"],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[5,\"gh-canvas-header\",[[12,\"class\",\"gh-canvas-header post-header\"]],[[],[]],{\"statements\":[[0,\"\\n        \"],[5,\"gh-custom-view-title\",[],[[\"@title\",\"@query\"],[\"Posts\",[28,\"reset-query-params\",[\"posts\"],null]]]],[0,\"\\n\\n        \"],[7,\"section\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[5,\"gh-contentfilter\",[],[[\"@selectedType\",\"@availableTypes\",\"@onTypeChange\",\"@selectedAuthor\",\"@availableAuthors\",\"@onAuthorChange\",\"@selectedTag\",\"@availableTags\",\"@onTagChange\",\"@selectedOrder\",\"@availableOrders\",\"@onOrderChange\"],[[23,0,[\"selectedType\"]],[23,0,[\"availableTypes\"]],[28,\"action\",[[23,0,[]],\"changeType\"],null],[23,0,[\"selectedAuthor\"]],[23,0,[\"availableAuthors\"]],[28,\"action\",[[23,0,[]],\"changeAuthor\"],null],[23,0,[\"selectedTag\"]],[23,0,[\"availableTags\"]],[28,\"action\",[[23,0,[]],\"changeTag\"],null],[23,0,[\"selectedOrder\"]],[23,0,[\"availableOrders\"]],[28,\"action\",[[23,0,[]],\"changeOrder\"],null]]]],[0,\"\\n\\n            \"],[5,\"link-to\",[[12,\"class\",\"gh-btn gh-btn-green\"],[12,\"data-test-new-post-button\",true]],[[\"@route\",\"@model\"],[\"editor.new\",\"post\"]],{\"statements\":[[7,\"span\",true],[8],[0,\"New post\"],[9]],\"parameters\":[]}],[0,\"\\n        \"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n    \"],[7,\"section\",true],[10,\"class\",\"content-list\"],[8],[0,\"\\n        \"],[7,\"ol\",true],[11,\"class\",[29,[\"posts-list gh-list \",[28,\"unless\",[[23,0,[\"postsInfinityModel\"]],\"no-posts\"],null]]]],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"postsInfinityModel\"]]],null,{\"statements\":[[0,\"                \"],[7,\"li\",true],[10,\"class\",\"gh-list-row header\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-list-header no-padding\"],[8],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-list-header gh-posts-title-header\"],[8],[0,\"Title\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-list-header gh-posts-status-header\"],[8],[0,\"Status\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-list-header gh-posts-lastupdate-header\"],[8],[0,\"Last update\"],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"each\",[[23,0,[\"postsInfinityModel\"]]],null,{\"statements\":[[0,\"                \"],[5,\"gh-posts-list-item\",[[12,\"data-test-post-id\",[23,1,[\"id\"]]]],[[\"@post\"],[[23,1,[]]]]],[0,\"\\n\"]],\"parameters\":[1]},{\"statements\":[[0,\"            \"],[7,\"li\",true],[10,\"class\",\"no-posts-box\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"no-posts\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showingAll\"]]],null,{\"statements\":[[0,\"                        \"],[1,[28,\"svg-jar\",[\"posts-placeholder\"],[[\"class\"],[\"gh-posts-placeholder\"]]],false],[0,\"\\n                        \"],[7,\"h3\",true],[8],[0,\"You haven't written any posts yet!\"],[9],[0,\"\\n                        \"],[5,\"link-to\",[[12,\"class\",\"gh-btn gh-btn-green gh-btn-lg\"]],[[\"@route\",\"@model\"],[\"editor.new\",\"post\"]],{\"statements\":[[0,\"\\n                            \"],[7,\"span\",true],[8],[0,\"Write a new post\"],[9],[0,\"\\n                        \"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        \"],[7,\"h3\",true],[8],[0,\"No posts match the current filter\"],[9],[0,\"\\n                        \"],[5,\"link-to\",[[12,\"class\",\"gh-btn gh-btn-lg\"]],[[\"@route\",\"@query\"],[\"posts\",[28,\"hash\",null,[[\"type\",\"author\",\"tag\"],[null,null,null]]]]],{\"statements\":[[0,\"\\n                            \"],[7,\"span\",true],[8],[0,\"Show all posts\"],[9],[0,\"\\n                        \"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"        \"],[9],[0,\"\\n\\n        \"],[5,\"gh-infinity-loader\",[],[[\"@infinityModel\",\"@scrollable\",\"@triggerOffset\"],[[23,0,[\"postsInfinityModel\"]],\".gh-main\",1000]]],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[1,[22,\"outlet\"],false],[0,\"\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/posts.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/reset", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "CBQ6JVfV",
    "block": "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"class\",\"gh-flow\"],[8],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-flow-content-wrap\"],[8],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"gh-flow-content fade-in\"],[8],[0,\"\\n            \"],[7,\"form\",false],[12,\"id\",\"reset\"],[12,\"class\",\"gh-signin\"],[12,\"method\",\"post\"],[12,\"novalidate\",\"novalidate\"],[3,\"action\",[[23,0,[]],\"submit\"],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"errors\"]],[23,0,[\"hasValidated\"]],\"newPassword\"]],{\"statements\":[[0,\"\\n                    \"],[7,\"span\",true],[10,\"class\",\"gh-input-icon gh-icon-lock\"],[8],[0,\"\\n                        \"],[1,[28,\"svg-jar\",[\"lock\"],null],false],[0,\"\\n                        \"],[5,\"gh-text-input\",[],[[\"@type\",\"@name\",\"@placeholder\",\"@class\",\"@autocorrect\",\"@shouldFocus\",\"@value\",\"@input\"],[\"password\",\"newpassword\",\"Password\",\"password\",\"off\",true,[28,\"readonly\",[[23,0,[\"newPassword\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"newPassword\"]]],null]],[[\"value\"],[\"target.value\"]]]]]],[0,\"\\n                    \"],[9],[0,\"\\n                \"]],\"parameters\":[]}],[0,\"\\n                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"errors\"]],[23,0,[\"hasValidated\"]],\"ne2Password\"]],{\"statements\":[[0,\"\\n                    \"],[7,\"span\",true],[10,\"class\",\"gh-input-icon gh-icon-lock\"],[8],[0,\"\\n                        \"],[1,[28,\"svg-jar\",[\"lock\"],null],false],[0,\"\\n                        \"],[5,\"gh-text-input\",[],[[\"@type\",\"@name\",\"@placeholder\",\"@class\",\"@autocorrect\",\"@shouldFocus\",\"@value\",\"@input\"],[\"password\",\"ne2password\",\"Confirm Password\",\"password\",\"off\",true,[28,\"readonly\",[[23,0,[\"ne2Password\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"ne2Password\"]]],null]],[[\"value\"],[\"target.value\"]]]]]],[0,\"\\n                    \"],[9],[0,\"\\n                \"]],\"parameters\":[]}],[0,\"\\n\\n                \"],[5,\"gh-task-button\",[],[[\"@buttonText\",\"@task\",\"@class\",\"@type\",\"@autoWidth\"],[\"Reset Password\",[23,0,[\"resetPassword\"]],\"gh-btn gh-btn-blue gh-btn-block gh-btn-icon\",\"submit\",\"false\"]]],[0,\"\\n            \"],[9],[0,\"\\n\\n            \"],[7,\"p\",true],[10,\"class\",\"main-error\"],[8],[1,[23,0,[\"flowErrors\"]],false],[0,\" \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/reset.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/code-injection-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "Q1dfXdbQ",
    "block": "{\"symbols\":[],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[7,\"header\",true],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            Code injection\\n        \"],[9],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[5,\"gh-task-button\",[[12,\"data-test-save-button\",true]],[[\"@task\",\"@class\",\"@disabled\"],[[22,\"save\"],\"gh-btn gh-btn-blue gh-btn-icon\",true]]],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"section\",true],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[5,\"gh-loading-spinner\",[],[[],[]]],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/settings/code-injection-loading.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/code-injection", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "cMxXGWUY",
    "block": "{\"symbols\":[],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[5,\"gh-canvas-header\",[[12,\"class\",\"gh-canvas-header\"]],[[],[]],{\"statements\":[[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            Code injection\\n        \"],[9],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[5,\"gh-task-button\",[[12,\"data-test-save-button\",true]],[[\"@task\",\"@autoReset\",\"@class\"],[[23,0,[\"saveTask\"]],true,\"gh-btn gh-btn-blue gh-btn-icon\"]]],[0,\"\\n        \"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"showLeaveSettingsModal\"]]],null,{\"statements\":[[0,\"        \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[28,\"action\",[[23,0,[]],\"leaveSettings\"],null],[28,\"action\",[[23,0,[]],\"toggleLeaveSettingsModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    \"],[7,\"section\",true],[10,\"class\",\"view-container\"],[8],[0,\"\\n        \"],[7,\"form\",true],[10,\"id\",\"settings-code\"],[10,\"novalidate\",\"novalidate\"],[8],[0,\"\\n            \"],[7,\"fieldset\",true],[8],[0,\"\\n                \"],[7,\"p\",true],[10,\"class\",\"gh-box gh-box-info\"],[8],[0,\"\\n                    \"],[1,[28,\"svg-jar\",[\"idea\"],null],false],[0,\"\\n                    Ghost allows you to inject code into the top and bottom of your theme files without editing them. This allows for quick modifications to insert useful things like tracking codes and meta tags.\\n                \"],[9],[0,\"\\n\\n                \"],[7,\"div\",true],[10,\"class\",\"br3 shadow-1 bg-grouped-table pa5 pt3 pb1\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"form-group settings-code\"],[8],[0,\"\\n                        \"],[7,\"label\",true],[10,\"for\",\"ghost-head\"],[8],[0,\"Site Header\"],[9],[0,\"\\n                        \"],[7,\"p\",true],[8],[0,\"Code here will be injected into the \"],[7,\"code\",true],[8],[0,\"{{ghost_head}}\"],[9],[0,\" tag on every page of the site\"],[9],[0,\"\\n                        \"],[5,\"gh-cm-editor\",[],[[\"@value\",\"@id\",\"@class\",\"@name\",\"@type\",\"@update\"],[[23,0,[\"settings\",\"codeinjectionHead\"]],\"ghost-head\",\"gh-input settings-code-editor\",\"codeInjection[ghost_head]\",\"text\",[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"settings\",\"codeinjectionHead\"]]],null]],null]]]],[0,\"\\n                    \"],[9],[0,\"\\n\\n                    \"],[7,\"div\",true],[10,\"class\",\"form-group settings-code\"],[8],[0,\"\\n                        \"],[7,\"label\",true],[10,\"for\",\"ghost-foot\"],[8],[0,\"Site Footer\"],[9],[0,\"\\n                        \"],[7,\"p\",true],[8],[0,\"Code here will be injected into the \"],[7,\"code\",true],[8],[0,\"{{ghost_foot}}\"],[9],[0,\" tag on every page of the site\"],[9],[0,\"\\n                        \"],[5,\"gh-cm-editor\",[],[[\"@value\",\"@id\",\"@class\",\"@name\",\"@type\",\"@update\"],[[23,0,[\"settings\",\"codeinjectionFoot\"]],\"ghost-foot\",\"gh-input settings-code-editor\",\"codeInjection[ghost_foot]\",\"text\",[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"settings\",\"codeinjectionFoot\"]]],null]],null]]]],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/settings/code-injection.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/design-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "Zoqa2oLq",
    "block": "{\"symbols\":[],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[7,\"header\",true],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            Design\\n        \"],[9],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[5,\"gh-task-button\",[],[[\"@task\",\"@class\",\"@disabled\"],[[22,\"save\"],\"gh-btn gh-btn-blue gh-btn-icon\",true]]],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"section\",true],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[5,\"gh-loading-spinner\",[],[[],[]]],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/settings/design-loading.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/design", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "WXdnpHLS",
    "block": "{\"symbols\":[\"navItem\",\"index\",\"navItem\",\"index\"],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[5,\"gh-canvas-header\",[[12,\"class\",\"gh-canvas-header\"]],[[],[]],{\"statements\":[[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            Design\\n        \"],[9],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[5,\"gh-task-button\",[[12,\"data-test-save-button\",true]],[[\"@task\",\"@autoReset\",\"@class\"],[[23,0,[\"saveTask\"]],true,\"gh-btn gh-btn-blue gh-btn-icon\"]]],[0,\"\\n        \"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"showLeaveSettingsModal\"]]],null,{\"statements\":[[0,\"        \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[28,\"action\",[[23,0,[]],\"leaveSettings\"],null],[28,\"action\",[[23,0,[]],\"toggleLeaveSettingsModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    \"],[7,\"section\",true],[10,\"class\",\"view-container\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-header gh-first-header\"],[8],[0,\"Navigation\"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-blognav-container pa5 pt6 bg-grouped-table shadow-1 br3\"],[8],[0,\"\\n            \"],[7,\"form\",true],[10,\"id\",\"settings-navigation\"],[10,\"class\",\"gh-blognav\"],[10,\"novalidate\",\"novalidate\"],[8],[0,\"\\n                \"],[5,\"sortable-objects\",[],[[\"@sortableObjectList\",\"@useSwap\"],[[23,0,[\"settings\",\"navigation\"]],false]],{\"statements\":[[0,\"\\n\"],[4,\"each\",[[23,0,[\"settings\",\"navigation\"]]],null,{\"statements\":[[0,\"                        \"],[5,\"draggable-object\",[],[[\"@content\",\"@dragHandle\",\"@isSortable\"],[[23,3,[]],\".gh-blognav-grab\",true]],{\"statements\":[[0,\"\\n                            \"],[5,\"gh-navitem\",[[12,\"data-test-navitem\",[23,4,[]]]],[[\"@navItem\",\"@baseUrl\",\"@addItem\",\"@deleteItem\",\"@updateUrl\",\"@updateLabel\"],[[23,3,[]],[23,0,[\"blogUrl\"]],[28,\"action\",[[23,0,[]],\"addNavItem\"],null],[28,\"action\",[[23,0,[]],\"deleteNavItem\"],null],[28,\"action\",[[23,0,[]],\"updateUrl\"],null],[28,\"action\",[[23,0,[]],\"updateLabel\"],null]]]],[0,\"\\n                        \"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[3,4]},null],[0,\"                \"]],\"parameters\":[]}],[0,\"\\n                \"],[5,\"gh-navitem\",[[12,\"data-test-navitem\",\"new\"]],[[\"@navItem\",\"@baseUrl\",\"@addItem\",\"@updateUrl\"],[[23,0,[\"newNavItem\"]],[23,0,[\"blogUrl\"]],[28,\"action\",[[23,0,[]],\"addNavItem\"],null],[28,\"action\",[[23,0,[]],\"updateUrl\"],null]]]],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Secondary Navigation\"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-blognav-container pa5 pt6 bg-grouped-table shadow-1 br3\"],[8],[0,\"\\n            \"],[7,\"form\",true],[10,\"id\",\"secondary-navigation\"],[10,\"class\",\"gh-blognav\"],[10,\"novalidate\",\"novalidate\"],[8],[0,\"\\n                \"],[5,\"sortable-objects\",[],[[\"@sortableObjectList\",\"@useSwap\"],[[23,0,[\"settings\",\"secondaryNavigation\"]],false]],{\"statements\":[[0,\"\\n\"],[4,\"each\",[[23,0,[\"settings\",\"secondaryNavigation\"]]],null,{\"statements\":[[0,\"                        \"],[5,\"draggable-object\",[],[[\"@content\",\"@dragHandle\",\"@isSortable\"],[[23,1,[]],\".gh-blognav-grab\",true]],{\"statements\":[[0,\"\\n                            \"],[5,\"gh-navitem\",[[12,\"data-test-navitem\",[23,2,[]]]],[[\"@navItem\",\"@baseUrl\",\"@addItem\",\"@deleteItem\",\"@updateUrl\",\"@updateLabel\"],[[23,1,[]],[23,0,[\"blogUrl\"]],[28,\"action\",[[23,0,[]],\"addNavItem\"],null],[28,\"action\",[[23,0,[]],\"deleteNavItem\"],null],[28,\"action\",[[23,0,[]],\"updateUrl\"],null],[28,\"action\",[[23,0,[]],\"updateLabel\"],null]]]],[0,\"\\n                        \"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[1,2]},null],[0,\"                \"]],\"parameters\":[]}],[0,\"\\n                \"],[5,\"gh-navitem\",[[12,\"data-test-navitem\",\"new\"]],[[\"@navItem\",\"@baseUrl\",\"@addItem\",\"@updateUrl\"],[[23,0,[\"newSecondaryNavItem\"]],[23,0,[\"blogUrl\"]],[28,\"action\",[[23,0,[]],\"addNavItem\"],null],[28,\"action\",[[23,0,[]],\"updateUrl\"],null]]]],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Theme Directory\"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-theme-directory-container\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"theme-directory\"],[8],[0,\"\\n                \"],[7,\"a\",true],[10,\"class\",\"td-item\"],[10,\"href\",\"https://github.com/TryGhost/Massively\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener noreferrer\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"td-item-screenshot\"],[8],[0,\"\\n                        \"],[7,\"img\",true],[10,\"style\",\"object-fit:contain;\"],[10,\"src\",\"assets/img/themes/massively.jpg\"],[10,\"alt\",\"Massively Theme\"],[8],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"td-item-desc\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[8],[0,\"Massively \"],[7,\"span\",true],[8],[0,\"— Free\"],[9],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"a\",true],[10,\"class\",\"td-item\"],[10,\"href\",\"https://themeforest.net/item/nurui-multipurpose-ghost-blog-theme/22243886\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener noreferrer\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"td-item-screenshot\"],[8],[0,\"\\n                        \"],[7,\"img\",true],[10,\"style\",\"object-fit:contain;\"],[10,\"src\",\"assets/img/themes/nurui.jpg\"],[10,\"alt\",\"Nurui Theme\"],[8],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"td-item-desc\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[8],[0,\"Nurui \"],[7,\"span\",true],[8],[0,\"— Premium\"],[9],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"a\",true],[10,\"class\",\"td-item\"],[10,\"href\",\"https://themeforest.net/item/pacific-big-bold-photographydriven-theme/19774541\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener noreferrer\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"td-item-screenshot\"],[8],[0,\"\\n                        \"],[7,\"img\",true],[10,\"style\",\"object-fit:contain;\"],[10,\"src\",\"assets/img/themes/pacific.jpg\"],[10,\"alt\",\"Pacific Theme\"],[8],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"td-item-desc\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[8],[0,\"Pacific \"],[7,\"span\",true],[8],[0,\"— Premium\"],[9],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"a\",true],[10,\"class\",\"td-item\"],[10,\"href\",\"https://www.hauntedthemes.com/\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener noreferrer\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"td-item-screenshot\"],[8],[0,\"\\n                        \"],[7,\"img\",true],[10,\"style\",\"object-fit:contain;\"],[10,\"src\",\"assets/img/themes/farafra.jpg\"],[10,\"alt\",\"Farafra Theme\"],[8],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"td-item-desc\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[8],[0,\"Farafra \"],[7,\"span\",true],[8],[0,\"— Premium\"],[9],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"a\",true],[10,\"class\",\"td-item\"],[10,\"href\",\"https://themeforest.net/item/valkyrie-a-highly-visual-ghost-blog/22576630\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener noreferrer\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"td-item-screenshot\"],[8],[0,\"\\n                        \"],[7,\"img\",true],[10,\"style\",\"object-fit:contain;\"],[10,\"src\",\"assets/img/themes/valkyrie.jpg\"],[10,\"alt\",\"Valkyrie Theme\"],[8],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"td-item-desc\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[8],[0,\"Valkyrie \"],[7,\"span\",true],[8],[0,\"— Premium\"],[9],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"a\",true],[10,\"class\",\"td-item\"],[10,\"href\",\"https://themeforest.net/item/sente-magazine-ghost-blog-theme/21019644\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener noreferrer\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"td-item-screenshot\"],[8],[0,\"\\n                        \"],[7,\"img\",true],[10,\"style\",\"object-fit:contain;\"],[10,\"src\",\"assets/img/themes/sente.jpg\"],[10,\"alt\",\"Sente Theme\"],[8],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"td-item-desc\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[8],[0,\"Sente \"],[7,\"span\",true],[8],[0,\"— Premium\"],[9],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\\n            \"],[7,\"div\",true],[10,\"class\",\"td-cta\"],[8],[0,\"\\n                \"],[7,\"a\",true],[10,\"class\",\"td-cta-box td-cta-marketplace\"],[10,\"href\",\"https://ghost.org/marketplace/\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"td-cta-icon\"],[8],[1,[28,\"svg-jar\",[\"store\"],null],false],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"td-cta-content-wrapper\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"td-cta-content\"],[8],[0,\"\\n                            \"],[7,\"h4\",true],[10,\"class\",\"fw6 f6\"],[8],[0,\"Theme Marketplace\"],[9],[0,\"\\n                            \"],[7,\"p\",true],[8],[0,\"Explore a huge range of free and premium themes for Ghost with a range of design and layout options\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"td-cta-arrow\"],[8],[0,\"\\n                            \"],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"a\",true],[10,\"class\",\"td-cta-box td-cta-docs\"],[10,\"href\",\"https://ghost.org/docs/api/handlebars-themes/\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"td-cta-icon\"],[8],[1,[28,\"svg-jar\",[\"book-open\"],null],false],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"td-cta-content-wrapper\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"td-cta-content\"],[8],[0,\"\\n                            \"],[7,\"h4\",true],[10,\"class\",\"fw6 f6\"],[8],[0,\"Developer Docs\"],[9],[0,\"\\n                            \"],[7,\"p\",true],[8],[0,\"Build your own custom Ghost theme from scratch using our comprehensive Handlebars.js SDK\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"td-cta-arrow\"],[8],[0,\"\\n                            \"],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Installed Themes\"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-themes-container\"],[8],[0,\"\\n\\n            \"],[5,\"gh-theme-table\",[],[[\"@themes\",\"@activateTheme\",\"@downloadTheme\",\"@deleteTheme\"],[[23,0,[\"themes\"]],[28,\"action\",[[23,0,[]],\"activateTheme\"],null],[28,\"action\",[[23,0,[]],\"downloadTheme\"],null],[28,\"action\",[[23,0,[]],\"deleteTheme\"],null]]]],[0,\"\\n\\n            \"],[5,\"link-to\",[[12,\"class\",\"gh-btn gh-btn-green gh-themes-uploadbtn\"],[12,\"data-test-upload-theme-button\",true]],[[\"@route\"],[\"settings.design.uploadtheme\"]],{\"statements\":[[0,\"\\n                \"],[7,\"span\",true],[8],[0,\"Upload a theme\"],[9],[0,\"\\n            \"]],\"parameters\":[]}],[0,\"\\n\\n\\n\"],[4,\"if\",[[23,0,[\"showDeleteThemeModal\"]]],null,{\"statements\":[[0,\"                \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@close\",\"@confirm\",\"@modifier\"],[\"delete-theme\",[28,\"hash\",null,[[\"theme\",\"download\"],[[23,0,[\"themeToDelete\"]],[28,\"action\",[[23,0,[]],\"downloadTheme\",[23,0,[\"themeToDelete\"]]],null]]]],[28,\"action\",[[23,0,[]],\"hideDeleteThemeModal\"],null],[28,\"action\",[[23,0,[]],\"deleteTheme\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showThemeWarningsModal\"]]],null,{\"statements\":[[0,\"                \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@close\",\"@modifier\"],[\"theme-warnings\",[28,\"hash\",null,[[\"title\",\"warnings\",\"errors\",\"canActivate\"],[\"Activation successful\",[23,0,[\"themeWarnings\"]],[23,0,[\"themeErrors\"]],true]]],[28,\"action\",[[23,0,[]],\"hideThemeWarningsModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showThemeErrorsModal\"]]],null,{\"statements\":[[0,\"                \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@close\",\"@modifier\"],[\"theme-warnings\",[28,\"hash\",null,[[\"title\",\"errors\",\"fatalErrors\",\"canActivate\"],[\"Activation failed\",[23,0,[\"themeErrors\"]],[23,0,[\"themeFatalErrors\"]],false]]],[28,\"action\",[[23,0,[]],\"hideThemeWarningsModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[9],[0,\"\\n\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[1,[22,\"outlet\"],false],[0,\"\\n\\n\"],[5,\"gh-tour-item\",[],[[\"@throbberId\",\"@target\",\"@throbberAttachment\",\"@popoverTriangleClass\"],[\"upload-a-theme\",\".gh-themes-uploadbtn\",\"top middle\",\"bottom\"]]],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/settings/design.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/design/uploadtheme", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "K/A3VzJi",
    "block": "{\"symbols\":[],\"statements\":[[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@close\",\"@modifier\"],[\"upload-theme\",[28,\"hash\",null,[[\"themes\",\"activate\"],[[24,[\"themes\"]],[28,\"route-action\",[\"activateTheme\"],null]]]],[28,\"route-action\",[\"cancel\"],null],\"action wide\"]]],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/settings/design/uploadtheme.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/general-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "PFT2NJvm",
    "block": "{\"symbols\":[],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[7,\"header\",true],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            General settings\\n        \"],[9],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[5,\"gh-task-button\",[[12,\"data-test-save-button\",\"true\"]],[[\"@buttonText\",\"@task\",\"@class\",\"@disabled\"],[\"Save settings\",[23,0,[\"save\"]],\"gh-btn gh-btn-blue gh-btn-icon\",true]]],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"section\",true],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[5,\"gh-loading-spinner\",[],[[],[]]],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/settings/general-loading.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/general", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "FQTvwFpr",
    "block": "{\"symbols\":[\"uploader\",\"error\",\"uploader\",\"error\",\"uploader\",\"error\"],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[7,\"div\",true],[8],[0,\"\\n    \"],[5,\"gh-canvas-header\",[[12,\"class\",\"gh-canvas-header\"]],[[],[]],{\"statements\":[[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            General settings\\n        \"],[9],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[5,\"gh-task-button\",[[12,\"data-test-save-button\",\"true\"]],[[\"@buttonText\",\"@task\",\"@autoReset\",\"@class\"],[\"Save settings\",[23,0,[\"saveSettings\"]],true,\"gh-btn gh-btn-blue gh-btn-icon\"]]],[0,\"\\n        \"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"showLeaveSettingsModal\"]]],null,{\"statements\":[[0,\"        \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[28,\"action\",[[23,0,[]],\"leaveSettings\"],null],[28,\"action\",[[23,0,[]],\"toggleLeaveSettingsModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    \"],[7,\"section\",true],[10,\"class\",\"view-container\"],[8],[0,\"\\n\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-header gh-first-header\"],[8],[0,\"Publication info\"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex flex-column br3 shadow-1 bg-grouped-table pa5 mt2\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-setting-first\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Title & description\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"The details used to identify your publication around the web\"],[9],[0,\"\\n\"],[4,\"liquid-if\",[[23,0,[\"pubInfoOpen\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content-extended\"],[8],[0,\"\\n                        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],[23,0,[\"settings\",\"hasValidated\"]],\"title\"]],{\"statements\":[[0,\"\\n                            \"],[5,\"gh-text-input\",[[12,\"data-test-title-input\",true]],[[\"@value\",\"@input\",\"@focus-out\"],[[28,\"readonly\",[[23,0,[\"settings\",\"title\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"settings\",\"title\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"validate\",\"title\"],[[\"target\"],[[23,0,[\"settings\"]]]]]]]],[0,\"\\n                            \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],\"title\"]]],[0,\"\\n                            \"],[7,\"p\",true],[8],[0,\"The name of your site\"],[9],[0,\"\\n                        \"]],\"parameters\":[]}],[0,\"\\n\\n                        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\",\"@class\"],[[23,0,[\"settings\",\"errors\"]],[23,0,[\"settings\",\"hasValidated\"]],\"description\",\"description-container\"]],{\"statements\":[[0,\"\\n                            \"],[5,\"gh-text-input\",[[12,\"data-test-description-input\",true]],[[\"@value\",\"@input\",\"@focus-out\"],[[28,\"readonly\",[[23,0,[\"settings\",\"description\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"settings\",\"description\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"validate\",\"description\"],[[\"target\"],[[23,0,[\"settings\"]]]]]]]],[0,\"\\n                            \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],\"description\"]]],[0,\"\\n                            \"],[7,\"p\",true],[8],[0,\"Used in your theme, meta data and search results\"],[9],[0,\"\\n                        \"]],\"parameters\":[]}],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                    \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-toggle-pub-info\",\"\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],[28,\"toggle\",[\"pubInfoOpen\",[23,0,[]]],null]]],[8],[7,\"span\",true],[8],[1,[28,\"if\",[[23,0,[\"pubInfoOpen\"]],\"Close\",\"Expand\"],null],false],[9],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-setting\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Site timezone\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Set the time and date of your publication, used for all published posts\"],[9],[0,\"\\n\"],[4,\"liquid-if\",[[23,0,[\"timezoneOpen\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content-extended\"],[8],[0,\"\\n                        \"],[5,\"gh-timezone-select\",[],[[\"@activeTimezone\",\"@availableTimezones\",\"@update\"],[[23,0,[\"settings\",\"activeTimezone\"]],[23,0,[\"availableTimezones\"]],[28,\"action\",[[23,0,[]],\"setTimezone\"],null]]]],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                    \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-toggle-timezone\",\"\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],[28,\"toggle\",[\"timezoneOpen\",[23,0,[]]],null]]],[8],[7,\"span\",true],[8],[1,[28,\"if\",[[23,0,[\"timezoneOpen\"]],\"Close\",\"Expand\"],null],false],[9],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-setting-last\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Publication Language\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Set the language/locale which is used on your site\"],[9],[0,\"\\n\"],[4,\"liquid-if\",[[23,0,[\"defaultLocaleOpen\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content-extended\"],[8],[0,\"\\n                        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],[23,0,[\"settings\",\"hasValidated\"]],\"defaultLocale\"]],{\"statements\":[[0,\"\\n                            \"],[5,\"gh-text-input\",[[12,\"data-test-default-locale-input\",true]],[[\"@value\",\"@input\",\"@focus-out\"],[[28,\"readonly\",[[23,0,[\"settings\",\"defaultLocale\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"settings\",\"defaultLocale\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"validate\",\"defaultLocale\"],[[\"target\"],[[23,0,[\"settings\"]]]]]]]],[0,\"\\n                            \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],\"defaultLocale\"]]],[0,\"\\n                            \"],[7,\"p\",true],[8],[0,\"Default: English (\"],[7,\"strong\",true],[8],[0,\"en\"],[9],[0,\"); you can add translation files to your theme for \"],[7,\"a\",true],[10,\"href\",\"https://ghost.org/docs/api/handlebars-themes/helpers/translate/\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener\"],[8],[0,\"any language\"],[9],[9],[0,\"\\n                        \"]],\"parameters\":[]}],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                    \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-toggle-default-locale\",\"\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],[28,\"toggle\",[\"defaultLocaleOpen\",[23,0,[]]],null]]],[8],[7,\"span\",true],[8],[1,[28,\"if\",[[23,0,[\"defaultLocaleOpen\"]],\"Close\",\"Expand\"],null],false],[9],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Publication identity\"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex flex-column br3 shadow-1 bg-grouped-table pa5\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-setting-first\"],[10,\"data-test-setting\",\"icon\"],[8],[0,\"\\n                \"],[5,\"gh-uploader\",[],[[\"@extensions\",\"@paramsHash\",\"@onComplete\"],[[23,0,[\"iconExtensions\"]],[28,\"hash\",null,[[\"purpose\"],[\"icon\"]]],[28,\"action\",[[23,0,[]],\"imageUploaded\",\"icon\"],null]]],{\"statements\":[[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Publication icon\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"A square, social icon used in the UI of your publication, at least 60x60px\"],[9],[0,\"\\n\"],[4,\"each\",[[23,5,[\"errors\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-error\"],[10,\"data-test-error\",\"icon\"],[8],[1,[28,\"or\",[[23,6,[\"context\"]],[23,6,[\"message\"]]],null],false],[9],[0,\"\\n\"]],\"parameters\":[6]},null],[0,\"                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-action gh-setting-action-smallimg\"],[8],[0,\"\\n\"],[4,\"if\",[[23,5,[\"isUploading\"]]],null,{\"statements\":[[0,\"                        \"],[1,[23,5,[\"progressBar\"]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,0,[\"settings\",\"icon\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"img\",true],[10,\"class\",\"blog-icon\"],[11,\"src\",[29,[[23,0,[\"settings\",\"icon\"]]]]],[11,\"onclick\",[28,\"action\",[[23,0,[]],\"triggerFileDialog\"],null]],[10,\"alt\",\"icon\"],[10,\"data-test-icon-img\",\"\"],[8],[9],[0,\"\\n                        \"],[7,\"button\",false],[12,\"class\",\"gh-setting-action-smallimg-delete\"],[12,\"data-test-delete-image\",\"icon\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],\"removeImage\",\"icon\"]],[8],[0,\"\\n                            \"],[7,\"span\",true],[8],[0,\"delete\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        \"],[7,\"button\",true],[10,\"class\",\"gh-btn\"],[11,\"onclick\",[28,\"action\",[[23,0,[]],\"triggerFileDialog\"],null]],[10,\"data-test-image-upload-btn\",\"icon\"],[10,\"type\",\"button\"],[8],[0,\"\\n                            \"],[7,\"span\",true],[8],[0,\"Upload Image\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"]],\"parameters\":[]}]],\"parameters\":[]}],[0,\"                    \"],[7,\"div\",true],[10,\"style\",\"display:none\"],[8],[0,\"\\n                        \"],[5,\"gh-file-input\",[[12,\"data-test-file-input\",\"icon\"]],[[\"@multiple\",\"@action\",\"@accept\"],[false,[23,5,[\"setFiles\"]],[23,0,[\"iconMimeTypes\"]]]]],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"]],\"parameters\":[5]}],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-setting\"],[10,\"data-test-setting\",\"logo\"],[8],[0,\"\\n                \"],[5,\"gh-uploader\",[],[[\"@extensions\",\"@onComplete\"],[[23,0,[\"imageExtensions\"]],[28,\"action\",[[23,0,[]],\"imageUploaded\",\"logo\"],null]]],{\"statements\":[[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Publication logo\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"The primary logo for your brand displayed across your theme, should be transparent and at least 600px x 72px\"],[9],[0,\"\\n\"],[4,\"each\",[[23,3,[\"errors\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-error\"],[10,\"data-test-error\",\"logo\"],[8],[1,[28,\"or\",[[23,4,[\"context\"]],[23,4,[\"message\"]]],null],false],[9],[0,\"\\n\"]],\"parameters\":[4]},null],[0,\"                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-action gh-setting-action-smallimg\"],[8],[0,\"\\n\"],[4,\"if\",[[23,3,[\"isUploading\"]]],null,{\"statements\":[[0,\"                        \"],[1,[23,3,[\"progressBar\"]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,0,[\"settings\",\"logo\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"img\",true],[10,\"class\",\"blog-logo\"],[11,\"src\",[29,[[23,0,[\"settings\",\"logo\"]]]]],[11,\"onclick\",[28,\"action\",[[23,0,[]],\"triggerFileDialog\"],null]],[10,\"alt\",\"logo\"],[10,\"data-test-logo-img\",\"\"],[8],[9],[0,\"\\n                        \"],[7,\"button\",false],[12,\"class\",\"gh-setting-action-smallimg-delete\"],[12,\"data-test-delete-image\",\"logo\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],\"removeImage\",\"logo\"]],[8],[0,\"\\n                            \"],[7,\"span\",true],[8],[0,\"delete\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        \"],[7,\"button\",true],[10,\"class\",\"gh-btn\"],[11,\"onclick\",[28,\"action\",[[23,0,[]],\"triggerFileDialog\"],null]],[10,\"data-test-image-upload-btn\",\"logo\"],[10,\"type\",\"button\"],[8],[0,\"\\n                            \"],[7,\"span\",true],[8],[0,\"Upload Image\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"]],\"parameters\":[]}]],\"parameters\":[]}],[0,\"                    \"],[7,\"div\",true],[10,\"style\",\"display:none\"],[8],[0,\"\\n                        \"],[5,\"gh-file-input\",[[12,\"data-test-file-input\",\"logo\"]],[[\"@multiple\",\"@action\",\"@accept\"],[false,[23,3,[\"setFiles\"]],[23,0,[\"imageMimeTypes\"]]]]],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"]],\"parameters\":[3]}],[0,\"\\n            \"],[9],[0,\"\\n\"],[4,\"if\",[[23,0,[\"config\",\"enableDeveloperExperiments\"]]],null,{\"statements\":[[0,\"                \"],[7,\"div\",true],[10,\"class\",\"gh-setting\"],[10,\"data-test-setting\",\"brand-color\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Accent Color\"],[9],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Primary color used in your publication theme\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\",\"@class\"],[[24,[\"settings\",\"errors\"]],[24,[\"settings\",\"hasValidated\"]],\"brandColor\",\"input-color-form-group\"]],{\"statements\":[[0,\"\\n                            \"],[7,\"div\",true],[10,\"class\",\"input-color\"],[8],[0,\"\\n                                \"],[5,\"gh-text-input\",[[12,\"data-test-brand-color-input\",true]],[[\"@name\",\"@placeholder\",\"@autocorrect\",\"@maxlength\",\"@focus-out\",\"@value\"],[\"brand-color\",\"abcdef\",\"off\",\"6\",[28,\"action\",[[23,0,[]],\"validateBrandColor\"],null],[22,\"brandColor\"]]]],[0,\"\\n                                \"],[7,\"div\",true],[10,\"class\",\"color-box\"],[11,\"style\",[23,0,[\"backgroundStyle\"]]],[8],[9],[0,\"\\n                            \"],[9],[0,\"\\n                            \"],[5,\"gh-error-message\",[[12,\"data-test-brandColor-error\",true]],[[\"@errors\",\"@property\"],[[24,[\"settings\",\"errors\"]],\"brandColor\"]]],[0,\"\\n                        \"]],\"parameters\":[]}],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[7,\"div\",true],[10,\"class\",\"gh-setting-last\"],[10,\"data-test-setting\",\"coverImage\"],[8],[0,\"\\n                \"],[5,\"gh-uploader\",[],[[\"@extensions\",\"@onComplete\"],[[23,0,[\"imageExtensions\"]],[28,\"action\",[[23,0,[]],\"imageUploaded\",\"coverImage\"],null]]],{\"statements\":[[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Publication cover\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"An optional large background image for your site\"],[9],[0,\"\\n\"],[4,\"each\",[[23,1,[\"errors\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-error\"],[10,\"data-test-error\",\"coverImage\"],[8],[1,[28,\"or\",[[23,2,[\"context\"]],[23,2,[\"message\"]]],null],false],[9],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-action gh-setting-action-largeimg\"],[8],[0,\"\\n\"],[4,\"if\",[[23,1,[\"isUploading\"]]],null,{\"statements\":[[0,\"                        \"],[1,[23,1,[\"progressBar\"]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,0,[\"settings\",\"coverImage\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"img\",true],[10,\"class\",\"blog-cover\"],[11,\"src\",[29,[[23,0,[\"settings\",\"coverImage\"]]]]],[11,\"onclick\",[28,\"action\",[[23,0,[]],\"triggerFileDialog\"],null]],[10,\"alt\",\"cover photo\"],[10,\"data-test-cover-img\",\"\"],[8],[9],[0,\"\\n                        \"],[7,\"button\",false],[12,\"class\",\"gh-setting-action-largeimg-delete\"],[12,\"data-test-delete-image\",\"coverImage\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],\"removeImage\",\"coverImage\"]],[8],[0,\"\\n                            \"],[7,\"span\",true],[8],[0,\"delete\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        \"],[7,\"button\",true],[10,\"class\",\"gh-btn\"],[11,\"onclick\",[28,\"action\",[[23,0,[]],\"triggerFileDialog\"],null]],[10,\"data-test-image-upload-btn\",\"coverImage\"],[10,\"type\",\"button\"],[8],[0,\"\\n                            \"],[7,\"span\",true],[8],[0,\"Upload Image\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"]],\"parameters\":[]}]],\"parameters\":[]}],[0,\"                    \"],[7,\"div\",true],[10,\"style\",\"display:none\"],[8],[0,\"\\n                        \"],[5,\"gh-file-input\",[[12,\"data-test-file-input\",\"coverImage\"]],[[\"@multiple\",\"@action\",\"@accept\"],[false,[23,1,[\"setFiles\"]],[23,0,[\"imageMimeTypes\"]]]]],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"]],\"parameters\":[1]}],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Site meta settings\"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex flex-column br3 shadow-1 bg-grouped-table pa5\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-setting-first flex-column\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"flex flex-row justify-between w-100\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Meta data\"],[9],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Extra content for search engines\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                        \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-toggle-meta\",\"\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],[28,\"toggle\",[\"metaDataOpen\",[23,0,[]]],null]]],[8],[7,\"span\",true],[8],[1,[28,\"if\",[[23,0,[\"metaDataOpen\"]],\"Close\",\"Expand\"],null],false],[9],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n\"],[4,\"liquid-if\",[[23,0,[\"metaDataOpen\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content-extended\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"flex flex-column flex-row-ns\"],[8],[0,\"\\n                            \"],[7,\"div\",true],[10,\"class\",\"flex-basis-1-2-m flex-basis-2-3-l mr5\"],[8],[0,\"\\n                                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],[23,0,[\"settings\",\"hasValidated\"]],\"metaTitle\"]],{\"statements\":[[0,\"\\n                                    \"],[7,\"label\",true],[10,\"for\",\"metaTitle\"],[8],[0,\"Meta title\"],[9],[0,\"\\n                                    \"],[5,\"gh-text-input\",[[12,\"data-test-input\",\"metaTitle\"]],[[\"@id\",\"@type\",\"@placeholder\",\"@value\",\"@input\"],[\"metaTitle\",\"text\",[28,\"truncate\",[[23,0,[\"settings\",\"title\"]],70],null],[28,\"readonly\",[[23,0,[\"settings\",\"metaTitle\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"settings\",\"metaTitle\"]]],null]],[[\"value\"],[\"target.value\"]]]]]],[0,\"\\n                                    \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"metaTitle\"]],[[\"@errors\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],\"metaTitle\"]]],[0,\"\\n                                    \"],[7,\"p\",true],[8],[0,\"Recommended: \"],[7,\"b\",true],[8],[0,\"70\"],[9],[0,\" characters. You’ve used \"],[7,\"b\",true],[8],[1,[28,\"gh-count-down-characters\",[[23,0,[\"settings\",\"metaTitle\"]],70],null],false],[9],[9],[0,\"\\n                                \"]],\"parameters\":[]}],[0,\"\\n                                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],[23,0,[\"settings\",\"hasValidated\"]],\"metaDescription\"]],{\"statements\":[[0,\"\\n                                    \"],[7,\"label\",true],[10,\"for\",\"metaDescription\"],[8],[0,\"Meta description\"],[9],[0,\"\\n                                    \"],[5,\"gh-textarea\",[[12,\"data-test-input\",\"metaDescription\"]],[[\"@id\",\"@type\",\"@placeholder\",\"@value\",\"@input\"],[\"metaDescription\",\"text\",[28,\"truncate\",[[23,0,[\"settings\",\"description\"]],300],null],[28,\"readonly\",[[23,0,[\"settings\",\"metaDescription\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"settings\",\"metaDescription\"]]],null]],[[\"value\"],[\"target.value\"]]]]]],[0,\"\\n                                    \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"metaDescription\"]],[[\"@errors\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],\"metaDescription\"]]],[0,\"\\n                                    \"],[7,\"p\",true],[8],[0,\"Recommended: \"],[7,\"b\",true],[8],[0,\"156\"],[9],[0,\" characters. You’ve used \"],[7,\"b\",true],[8],[1,[28,\"gh-count-down-characters\",[[23,0,[\"settings\",\"metaDescription\"]],156],null],false],[9],[9],[0,\"\\n                                \"]],\"parameters\":[]}],[0,\"\\n                            \"],[9],[0,\"\\n                            \"],[7,\"div\",true],[10,\"class\",\"flex-basis-1-2-m flex-basis-1-3-l\"],[8],[0,\"\\n                                \"],[7,\"label\",true],[8],[0,\"Search engine result preview\"],[9],[0,\"\\n                                \"],[7,\"div\",true],[10,\"class\",\"seo-preview\"],[8],[0,\"\\n                                    \"],[7,\"div\",true],[10,\"class\",\"seo-preview-title\"],[8],[1,[28,\"truncate\",[[28,\"or\",[[23,0,[\"settings\",\"metaTitle\"]],[23,0,[\"settings\",\"title\"]]],null],70],null],false],[9],[0,\"\\n                                    \"],[7,\"div\",true],[10,\"class\",\"seo-preview-link\"],[8],[1,[28,\"truncate\",[[23,0,[\"config\",\"blogUrl\"]],70],null],false],[9],[0,\"\\n                                    \"],[7,\"div\",true],[10,\"class\",\"seo-preview-description\"],[8],[1,[28,\"truncate\",[[28,\"or\",[[23,0,[\"settings\",\"metaDescription\"]],[23,0,[\"settings\",\"description\"]]],null],300],null],false],[9],[0,\"\\n                                \"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-setting flex-column\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"flex flex-row justify-between w-100\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Twitter card\"],[9],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Customise structured data of your site for Twitter\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                        \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-toggle-twitter\",\"\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],[28,\"toggle\",[\"twitterCardOpen\",[23,0,[]]],null]]],[8],[7,\"span\",true],[8],[1,[28,\"if\",[[23,0,[\"twitterCardOpen\"]],\"Close\",\"Expand\"],null],false],[9],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n\"],[4,\"liquid-if\",[[23,0,[\"twitterCardOpen\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content-extended\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"flex flex-column flex-row-ns\"],[8],[0,\"\\n                            \"],[7,\"div\",true],[10,\"class\",\"flex-basis-1-2-m flex-basis-2-3-l mr5 nudge-top--7\"],[8],[0,\"\\n                                \"],[5,\"gh-form-group\",[],[[],[]],{\"statements\":[[0,\"\\n                                    \"],[5,\"gh-image-uploader-with-preview\",[],[[\"@image\",\"@text\",\"@allowUnsplash\",\"@update\",\"@remove\"],[[23,0,[\"settings\",\"twitterImage\"]],\"Add Twitter image\",true,[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"settings\",\"twitterImage\"]]],null]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"settings\",\"twitterImage\"]],\"\"],null]],null]]]],[0,\"\\n                                \"]],\"parameters\":[]}],[0,\"\\n                                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],[23,0,[\"settings\",\"hasValidated\"]],\"twitterTitle\"]],{\"statements\":[[0,\"\\n                                    \"],[7,\"label\",true],[10,\"for\",\"twitterTitle\"],[8],[0,\"Twitter title\"],[9],[0,\"\\n                                    \"],[5,\"gh-text-input\",[[12,\"data-test-input\",\"twitterTitle\"]],[[\"@id\",\"@type\",\"@placeholder\",\"@value\",\"@input\"],[\"twitterTitle\",\"text\",[28,\"truncate\",[[23,0,[\"settings\",\"title\"]],70],null],[28,\"readonly\",[[23,0,[\"settings\",\"twitterTitle\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"settings\",\"twitterTitle\"]]],null]],[[\"value\"],[\"target.value\"]]]]]],[0,\"\\n                                    \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"twitterTitle\"]],[[\"@errors\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],\"twitterTitle\"]]],[0,\"\\n                                \"]],\"parameters\":[]}],[0,\"\\n                                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],[23,0,[\"settings\",\"hasValidated\"]],\"twitterDescription\"]],{\"statements\":[[0,\"\\n                                    \"],[7,\"label\",true],[10,\"for\",\"twitterDescription\"],[8],[0,\"Twitter description\"],[9],[0,\"\\n                                    \"],[5,\"gh-textarea\",[[12,\"data-test-input\",\"twitterDescription\"]],[[\"@id\",\"@placeholder\",\"@value\",\"@input\"],[\"twitterDescription\",[28,\"truncate\",[[23,0,[\"settings\",\"description\"]],300],null],[28,\"readonly\",[[23,0,[\"settings\",\"twitterDescription\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"settings\",\"twitterDescription\"]]],null]],[[\"value\"],[\"target.value\"]]]]]],[0,\"\\n                                    \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"twitterDescription\"]],[[\"@errors\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],\"twitterDescription\"]]],[0,\"\\n                                \"]],\"parameters\":[]}],[0,\"\\n                            \"],[9],[0,\"\\n                            \"],[7,\"div\",true],[10,\"class\",\"flex-basis-1-2-m flex-basis-1-3-l nt4-ns\"],[8],[0,\"\\n                                \"],[7,\"label\",true],[8],[0,\"Preview\"],[9],[0,\"\\n                                \"],[7,\"div\",true],[10,\"class\",\"gh-twitter-preview\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"settings\",\"twitterImage\"]]],null,{\"statements\":[[0,\"                                    \"],[7,\"div\",true],[10,\"class\",\"gh-twitter-preview-image\"],[11,\"style\",[28,\"background-image-style\",[[23,0,[\"settings\",\"twitterImage\"]]],null]],[8],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                                    \"],[7,\"div\",true],[10,\"class\",\"gh-twitter-preview-content\"],[8],[0,\"\\n                                        \"],[7,\"div\",true],[10,\"class\",\"gh-twitter-preview-title\"],[8],[1,[28,\"or\",[[23,0,[\"settings\",\"twitterTitle\"]],[23,0,[\"settings\",\"title\"]]],null],false],[9],[0,\"\\n                                        \"],[7,\"div\",true],[10,\"class\",\"gh-twitter-preview-description\"],[8],[1,[28,\"truncate\",[[28,\"or\",[[23,0,[\"settings\",\"twitterDescription\"]],[23,0,[\"settings\",\"description\"]]],null],155],null],false],[9],[0,\"\\n                                        \"],[7,\"div\",true],[10,\"class\",\"gh-twitter-preview-footer\"],[8],[0,\"\\n                                            \"],[7,\"div\",true],[10,\"class\",\"gh-twitter-preview-footer-left\"],[8],[0,\"\\n                                                \"],[1,[23,0,[\"config\",\"blogDomain\"]],false],[0,\"\\n                                            \"],[9],[0,\"\\n                                            \"],[7,\"div\",true],[10,\"class\",\"gh-twitter-preview-footer-right\"],[8],[0,\"\\n                                            \"],[9],[0,\"\\n                                        \"],[9],[0,\"\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-setting-last flex-column\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"flex flex-row justify-between w-100\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Facebook card\"],[9],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Customise structured data of your site\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                        \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-toggle-facebook\",\"\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],[28,\"toggle\",[\"facebookCardOpen\",[23,0,[]]],null]]],[8],[7,\"span\",true],[8],[1,[28,\"if\",[[23,0,[\"facebookCardOpen\"]],\"Close\",\"Expand\"],null],false],[9],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n\"],[4,\"liquid-if\",[[23,0,[\"facebookCardOpen\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content-extended\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"flex flex-column flex-row-ns\"],[8],[0,\"\\n                            \"],[7,\"div\",true],[10,\"class\",\"flex-basis-1-2-m flex-basis-2-3-l mr5 nudge-top--7\"],[8],[0,\"\\n                                \"],[5,\"gh-form-group\",[],[[],[]],{\"statements\":[[0,\"\\n                                    \"],[5,\"gh-image-uploader-with-preview\",[],[[\"@image\",\"@text\",\"@allowUnsplash\",\"@update\",\"@remove\"],[[23,0,[\"settings\",\"ogImage\"]],\"Add Facebook image\",true,[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"settings\",\"ogImage\"]]],null]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"settings\",\"ogImage\"]],\"\"],null]],null]]]],[0,\"\\n                                \"]],\"parameters\":[]}],[0,\"\\n                                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],[23,0,[\"settings\",\"hasValidated\"]],\"ogTitle\"]],{\"statements\":[[0,\"\\n                                    \"],[7,\"label\",true],[10,\"for\",\"ogTitle\"],[8],[0,\"Facebook title\"],[9],[0,\"\\n                                    \"],[5,\"gh-text-input\",[[12,\"data-test-input\",\"ogTitle\"]],[[\"@id\",\"@type\",\"@placeholder\",\"@value\",\"@input\"],[\"ogTitle\",\"text\",[28,\"truncate\",[[23,0,[\"settings\",\"title\"]],70],null],[28,\"readonly\",[[23,0,[\"settings\",\"ogTitle\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"settings\",\"ogTitle\"]]],null]],[[\"value\"],[\"target.value\"]]]]]],[0,\"\\n                                    \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"ogTitle\"]],[[\"@errors\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],\"ogTitle\"]]],[0,\"\\n                                \"]],\"parameters\":[]}],[0,\"\\n                                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],[23,0,[\"settings\",\"hasValidated\"]],\"ogDescription\"]],{\"statements\":[[0,\"\\n                                    \"],[7,\"label\",true],[10,\"for\",\"ogDescription\"],[8],[0,\"Facebook description\"],[9],[0,\"\\n                                    \"],[5,\"gh-textarea\",[[12,\"data-test-input\",\"ogDescription\"]],[[\"@id\",\"@placeholder\",\"@value\",\"@input\"],[\"ogDescription\",[28,\"truncate\",[[23,0,[\"settings\",\"description\"]],300],null],[28,\"readonly\",[[23,0,[\"settings\",\"ogDescription\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"settings\",\"ogDescription\"]]],null]],[[\"value\"],[\"target.value\"]]]]]],[0,\"\\n                                    \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"ogDescription\"]],[[\"@errors\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],\"ogDescription\"]]],[0,\"\\n                                \"]],\"parameters\":[]}],[0,\"\\n                            \"],[9],[0,\"\\n                            \"],[7,\"div\",true],[10,\"class\",\"flex-basis-1-2-m flex-basis-1-3-l nt4-ns\"],[8],[0,\"\\n                                \"],[7,\"label\",true],[8],[0,\"Preview\"],[9],[0,\"\\n                                \"],[7,\"div\",true],[10,\"class\",\"gh-og-preview\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"settings\",\"ogImage\"]]],null,{\"statements\":[[0,\"                                    \"],[7,\"div\",true],[10,\"class\",\"gh-og-preview-image\"],[11,\"style\",[28,\"background-image-style\",[[23,0,[\"settings\",\"ogImage\"]]],null]],[8],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                                    \"],[7,\"div\",true],[10,\"class\",\"gh-og-preview-content\"],[8],[0,\"\\n                                        \"],[7,\"div\",true],[10,\"class\",\"gh-og-preview-title\"],[8],[1,[28,\"truncate\",[[28,\"or\",[[23,0,[\"settings\",\"ogTitle\"]],[23,0,[\"settings\",\"title\"]]],null],88],null],false],[9],[0,\"\\n                                        \"],[7,\"div\",true],[10,\"class\",\"gh-og-preview-description\"],[8],[1,[28,\"truncate\",[[28,\"or\",[[23,0,[\"settings\",\"ogDescription\"]],[23,0,[\"settings\",\"description\"]]],null],300],null],false],[9],[0,\"\\n                                        \"],[7,\"div\",true],[10,\"class\",\"gh-og-preview-footer\"],[8],[0,\"\\n                                            \"],[7,\"div\",true],[10,\"class\",\"gh-og-preview-footer-left\"],[8],[0,\"\\n                                                \"],[1,[23,0,[\"config\",\"blogDomain\"]],false],[0,\"\\n                                            \"],[9],[0,\"\\n                                            \"],[7,\"div\",true],[10,\"class\",\"gh-og-preview-footer-right\"],[8],[9],[0,\"\\n                                        \"],[9],[0,\"\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Social accounts\"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex flex-column br3 shadow-1 bg-grouped-table pa5\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-setting-first gh-setting-last\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Social accounts\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Link your social accounts for full structured data and rich card support\"],[9],[0,\"\\n\"],[4,\"liquid-if\",[[23,0,[\"socialOpen\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content-extended\"],[8],[0,\"\\n                        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],[23,0,[\"settings\",\"hasValidated\"]],\"facebook\"]],{\"statements\":[[0,\"\\n                            \"],[5,\"gh-text-input\",[[12,\"data-test-facebook-input\",true]],[[\"@type\",\"@placeholder\",\"@autocorrect\",\"@value\",\"@input\",\"@focus-out\"],[\"url\",\"https://www.facebook.com/ghost\",\"off\",[28,\"readonly\",[[23,0,[\"settings\",\"facebook\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"_scratchFacebook\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"validateFacebookUrl\"],null]]]],[0,\"\\n                            \"],[5,\"gh-error-message\",[[12,\"data-test-facebook-error\",\"true\"]],[[\"@errors\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],\"facebook\"]]],[0,\"\\n                            \"],[7,\"p\",true],[8],[0,\"URL of your publication's Facebook Page\"],[9],[0,\"\\n                        \"]],\"parameters\":[]}],[0,\"\\n                        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],[23,0,[\"settings\",\"hasValidated\"]],\"twitter\"]],{\"statements\":[[0,\"\\n                            \"],[5,\"gh-text-input\",[[12,\"data-test-twitter-input\",true]],[[\"@type\",\"@placeholder\",\"@autocorrect\",\"@value\",\"@input\",\"@focus-out\"],[\"url\",\"https://twitter.com/ghost\",\"off\",[28,\"readonly\",[[23,0,[\"settings\",\"twitter\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"_scratchTwitter\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"validateTwitterUrl\"],null]]]],[0,\"\\n                            \"],[5,\"gh-error-message\",[[12,\"data-test-twitter-error\",\"true\"]],[[\"@errors\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],\"twitter\"]]],[0,\"\\n                            \"],[7,\"p\",true],[8],[0,\"URL of your publication's Twitter profile\"],[9],[0,\"\\n                        \"]],\"parameters\":[]}],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                    \"],[7,\"button\",false],[12,\"class\",\"gh-btn\"],[12,\"data-test-toggle-social\",\"\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],[28,\"toggle\",[\"socialOpen\",[23,0,[]]],null]]],[8],[7,\"span\",true],[8],[1,[28,\"if\",[[23,0,[\"socialOpen\"]],\"Close\",\"Expand\"],null],false],[9],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Advanced settings\"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex flex-column br3 shadow-1 bg-grouped-table pa5\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-setting-first gh-setting-last\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Make this site private\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"\\n                        Enable protection with simple shared password. All search engine optimization and social features will be disabled.\\n\\n\"],[4,\"if\",[[23,0,[\"settings\",\"isPrivate\"]]],null,{\"statements\":[[0,\"                            \"],[7,\"span\",true],[10,\"class\",\"avoid-break-out\"],[8],[0,\"\\n                                \"],[7,\"br\",true],[8],[9],[7,\"br\",true],[8],[9],[0,\"\\n                                A private RSS feed is available at\\n                                \"],[7,\"a\",true],[11,\"href\",[29,[[23,0,[\"privateRSSUrl\"]]]]],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener\"],[8],[1,[23,0,[\"privateRSSUrl\"]],false],[9],[0,\"\\n                            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                    \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"settings\",\"isPrivate\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content-extended\"],[8],[0,\"\\n                            \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],[23,0,[\"settings\",\"hasValidated\"]],\"password\"]],{\"statements\":[[0,\"\\n                                \"],[5,\"gh-text-input\",[[12,\"data-test-password-input\",true]],[[\"@value\",\"@name\",\"@focus-out\",\"@input\"],[[28,\"readonly\",[[23,0,[\"settings\",\"password\"]]],null],\"general[password]\",[28,\"action\",[[23,0,[]],\"validate\",\"password\"],[[\"target\"],[[23,0,[\"settings\"]]]]],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"settings\",\"password\"]]],null]],[[\"value\"],[\"target.value\"]]]]]],[0,\"\\n                                \"],[5,\"gh-error-message\",[[12,\"data-test-password-error\",\"true\"]],[[\"@errors\",\"@property\"],[[23,0,[\"settings\",\"errors\"]],\"password\"]]],[0,\"\\n                                \"],[7,\"p\",true],[8],[0,\"Set the password for this site\"],[9],[0,\"\\n                            \"]],\"parameters\":[]}],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"for-switch\"],[8],[0,\"\\n                        \"],[7,\"label\",true],[10,\"class\",\"switch\"],[10,\"for\",\"settings-private\"],[8],[0,\"\\n                            \"],[7,\"input\",true],[11,\"checked\",[23,0,[\"settings\",\"isPrivate\"]]],[10,\"id\",\"settings-private\"],[11,\"onclick\",[28,\"action\",[[23,0,[]],\"toggleIsPrivate\"],[[\"value\"],[\"target.checked\"]]]],[10,\"data-test-private-checkbox\",\"\"],[10,\"type\",\"checkbox\"],[8],[9],[0,\"\\n                            \"],[7,\"span\",true],[10,\"class\",\"input-toggle-component\"],[8],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n    \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"],[1,[22,\"outlet\"],false]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/settings/general.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integration-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "+b1f5kYM",
    "block": "{\"symbols\":[],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[7,\"header\",true],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            Integrations\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[5,\"gh-loading-spinner\",[],[[],[]]],[0,\"\\n    \"],[9],[0,\"\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/settings/integration-loading.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integration", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "byeBGzlE",
    "block": "{\"symbols\":[\"webhook\",\"uploader\"],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[7,\"form\",false],[12,\"class\",\"mb15\"],[3,\"action\",[[23,0,[]],[28,\"perform\",[\"save\"],null]],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n        \"],[5,\"gh-canvas-header\",[[12,\"class\",\"gh-canvas-header\"]],[[],[]],{\"statements\":[[0,\"\\n            \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n                \"],[5,\"link-to\",[[12,\"data-test-link\",\"integrations-back\"]],[[\"@route\"],[\"settings.integrations\"]],{\"statements\":[[0,\"Integrations\"]],\"parameters\":[]}],[0,\"\\n                \"],[7,\"span\",true],[8],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[9],[0,\"\\n                \"],[1,[23,0,[\"integration\",\"name\"]],false],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"section\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n                \"],[5,\"gh-task-button\",[[12,\"data-test-button\",\"save\"]],[[\"@task\",\"@class\",\"@autoReset\"],[[23,0,[\"saveIntegration\"]],\"gh-btn gh-btn-blue gh-btn-icon\",true]]],[0,\"\\n            \"],[9],[0,\"\\n        \"]],\"parameters\":[]}],[0,\"\\n\\n        \"],[7,\"h4\",true],[10,\"class\",\"midlightgrey f-small fw5 ttu\"],[8],[0,\"Configuration\"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"pa5 pt3 pb3 br4 shadow-1 bg-grouped-table mt2\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"flex\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"flex flex-column items-start\"],[8],[0,\"\\n                    \"],[7,\"label\",true],[10,\"class\",\"mb1\"],[8],[0,\"Icon\"],[9],[0,\"\\n                    \"],[7,\"figure\",true],[10,\"class\",\"relative flex items-center h-100 ma0 br4 hide-child ba b--whitegrey-d2 pa8 bg-white\"],[11,\"style\",[23,0,[\"iconImageStyle\"]]],[8],[0,\"\\n                        \"],[5,\"aspect-ratio-box\",[],[[\"@class\",\"@ratio\",\"@base\"],[\"flex items-center h-100 justify-center\",\"1/1\",\"height\"]],{\"statements\":[[0,\"\\n\"],[4,\"unless\",[[23,0,[\"integration\",\"iconImage\"]]],null,{\"statements\":[[0,\"                                \"],[1,[28,\"svg-jar\",[\"integration\"],[[\"class\"],[\"w11 h11\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                        \"]],\"parameters\":[]}],[0,\"\\n\\n                        \"],[5,\"gh-uploader\",[],[[\"@extensions\",\"@onComplete\"],[[23,0,[\"imageExtensions\"]],[28,\"action\",[[23,0,[]],\"setIconImage\"],null]]],{\"statements\":[[0,\"\\n\"],[4,\"if\",[[23,2,[\"isUploading\"]]],null,{\"statements\":[[0,\"                                \"],[7,\"div\",true],[10,\"class\",\"absolute top-0 left-0 w-100 h-100 br4 bg-black-70 flex items-center\"],[8],[0,\"\\n                                    \"],[1,[23,2,[\"progressBar\"]],false],[0,\"\\n                                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                \"],[7,\"button\",false],[12,\"class\",\"child absolute top-0 left-0 w-100 h-100 br4 b white text-center bg-black-70 f8\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],\"triggerIconFileDialog\"]],[8],[0,\"\\n                                    Upload\\n                                \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                            \"],[7,\"div\",true],[10,\"style\",\"display:none\"],[8],[0,\"\\n                                \"],[5,\"gh-file-input\",[[12,\"data-test-file-input\",\"icon\"]],[[\"@name\",\"@multiple\",\"@action\",\"@accept\"],[\"iconImage\",false,[23,2,[\"setFiles\"]],[23,0,[\"imageMimeTypes\"]]]]],[0,\"\\n                            \"],[9],[0,\"\\n                        \"]],\"parameters\":[2]}],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"flex-auto ml6\"],[8],[0,\"\\n                    \"],[5,\"gh-validation-status-container\",[],[[\"@class\",\"@errors\",\"@hasValidated\",\"@property\"],[\"flex flex-column w-100 mr3\",[23,0,[\"integration\",\"errors\"]],[23,0,[\"integration\",\"hasValidated\"]],\"name\"]],{\"statements\":[[0,\"\\n                        \"],[7,\"label\",true],[10,\"for\",\"integration_name\"],[8],[0,\"Name\"],[9],[0,\"\\n                        \"],[5,\"gh-text-input\",[[12,\"data-test-input\",\"name\"]],[[\"@id\",\"@class\",\"@type\",\"@value\",\"@input\",\"@focus-out\"],[\"integration_name\",\"gh-input mt1 mb1\",\"text\",[28,\"readonly\",[[23,0,[\"integration\",\"name\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"integration\",\"name\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"validate\",\"name\"],[[\"target\"],[[23,0,[\"integration\"]]]]]]]],[0,\"\\n                        \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"name\"],[12,\"class\",\"ma0\"]],[[\"@errors\",\"@property\"],[[23,0,[\"integration\",\"errors\"]],\"name\"]]],[0,\"\\n                    \"]],\"parameters\":[]}],[0,\"\\n\\n                    \"],[5,\"gh-validation-status-container\",[],[[\"@class\",\"@errors\",\"@hasValidated\",\"@property\"],[\"flex flex-column w-100 mr3\",[23,0,[\"integration\",\"errors\"]],[23,0,[\"integration\",\"hasValidated\"]],\"decription\"]],{\"statements\":[[0,\"\\n                        \"],[7,\"label\",true],[10,\"for\",\"integration_description\"],[10,\"class\",\"mt3\"],[8],[0,\"Description\"],[9],[0,\"\\n                        \"],[5,\"gh-text-input\",[[12,\"data-test-input\",\"description\"]],[[\"@id\",\"@class\",\"@type\",\"@value\",\"@input\",\"@focus-out\"],[\"integration_description\",\"gh-input mt1\",\"text\",[28,\"readonly\",[[23,0,[\"integration\",\"description\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"integration\",\"description\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"validate\",\"description\"],[[\"target\"],[[23,0,[\"integration\"]]]]]]]],[0,\"\\n                        \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"description\"],[12,\"class\",\"ma0\"]],[[\"@errors\",\"@property\"],[[23,0,[\"integration\",\"errors\"]],\"description\"]]],[0,\"\\n                    \"]],\"parameters\":[]}],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"table\",true],[10,\"class\",\"ma0 mt5\"],[10,\"style\",\"table-layout: fixed\"],[8],[0,\"\\n                \"],[7,\"tbody\",true],[8],[0,\"\\n                    \"],[7,\"tr\",true],[8],[0,\"\\n                        \"],[7,\"td\",true],[10,\"class\",\"pa3 pl0 fw7 f8 w35\"],[8],[0,\"Content API Key\"],[9],[0,\"\\n                        \"],[7,\"td\",true],[10,\"class\",\"pa0 truncate bb b--lightgrey\"],[8],[0,\"\\n                            \"],[7,\"div\",true],[11,\"class\",[29,[\"pt3 pb3 relative truncate \",[28,\"unless\",[[23,0,[\"copyContentKey\",\"isRunning\"]],\"hide-child-instant\"],null]]]],[8],[0,\"\\n                                \"],[7,\"span\",true],[10,\"class\",\"midlightgrey\"],[10,\"data-test-text\",\"content-key\"],[8],[0,\"\\n                                    \"],[1,[23,0,[\"integration\",\"contentKey\",\"secret\"]],false],[0,\"\\n                                \"],[9],[0,\"\\n                                \"],[7,\"div\",true],[10,\"class\",\"absolute top-1 right-0\"],[8],[0,\"\\n                                    \"],[7,\"div\",true],[10,\"class\",\"pt1 pr3 pb1 pl3 bg-black-70 child br3 f8 nudge-top--4 nudge-right--1\"],[8],[0,\"\\n                                        \"],[7,\"button\",false],[12,\"class\",\"white fw4 flex items-center\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],[28,\"perform\",[[23,0,[\"copyContentKey\"]]],null]]],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"copyContentKey\",\"isRunning\"]]],null,{\"statements\":[[0,\"                                            \"],[1,[28,\"svg-jar\",[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2 stroke-white\"]]],false],[0,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                            Copy\\n\"]],\"parameters\":[]}],[0,\"                                        \"],[9],[0,\"\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"tr\",true],[8],[0,\"\\n                        \"],[7,\"td\",true],[10,\"class\",\"pa3 pl0 w50 fw7 f8 w35\"],[8],[0,\"Admin API Key\"],[9],[0,\"\\n                        \"],[7,\"td\",true],[10,\"class\",\"pa0 truncate bb b--lightgrey\"],[8],[0,\"\\n                            \"],[7,\"div\",true],[11,\"class\",[29,[\"pt3 pb3 relative truncate \",[28,\"unless\",[[23,0,[\"copyAdminKey\",\"isRunning\"]],\"hide-child-instant\"],null]]]],[8],[0,\"\\n                                \"],[7,\"span\",true],[10,\"class\",\"midlightgrey\"],[10,\"data-test-text\",\"admin-key\"],[8],[0,\"\\n                                    \"],[1,[23,0,[\"integration\",\"adminKey\",\"secret\"]],false],[0,\"\\n                                \"],[9],[0,\"\\n                                \"],[7,\"div\",true],[10,\"class\",\"absolute top-1 right-0\"],[8],[0,\"\\n                                    \"],[7,\"div\",true],[10,\"class\",\"pt1 pr3 pb1 pl3 bg-black-70 child br3 f8 nudge-top--4 nudge-right--1\"],[8],[0,\"\\n                                        \"],[7,\"button\",false],[12,\"class\",\"white fw4 flex items-center\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],[28,\"perform\",[[23,0,[\"copyAdminKey\"]]],null]]],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"copyAdminKey\",\"isRunning\"]]],null,{\"statements\":[[0,\"                                            \"],[1,[28,\"svg-jar\",[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2 stroke-white\"]]],false],[0,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                            Copy\\n\"]],\"parameters\":[]}],[0,\"                                        \"],[9],[0,\"\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"tr\",true],[8],[0,\"\\n                        \"],[7,\"td\",true],[10,\"class\",\"pa3 pl0 w50 fw7 f8 w35\"],[8],[0,\"API URL\"],[9],[0,\"\\n                        \"],[7,\"td\",true],[10,\"class\",\"pa0 truncate\"],[8],[0,\"\\n                            \"],[7,\"div\",true],[11,\"class\",[29,[\"pt3 pb3 relative truncate \",[28,\"unless\",[[23,0,[\"copyApiUrl\",\"isRunning\"]],\"hide-child-instant\"],null]]]],[8],[0,\"\\n                                \"],[7,\"span\",true],[10,\"class\",\"midlightgrey\"],[10,\"data-test-text\",\"api-url\"],[8],[0,\"\\n                                    \"],[1,[23,0,[\"apiUrl\"]],false],[0,\"\\n                                \"],[9],[0,\"\\n                                \"],[7,\"div\",true],[10,\"class\",\"absolute top-1 right-0\"],[8],[0,\"\\n                                    \"],[7,\"div\",true],[10,\"class\",\"pt1 pr3 pb1 pl3 bg-black-70 child br3 f8 nudge-top--4 nudge-right--1\"],[8],[0,\"\\n                                        \"],[7,\"button\",false],[12,\"class\",\"white fw4 flex items-center\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],[28,\"perform\",[[23,0,[\"copyApiUrl\"]]],null]]],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"copyApiUrl\",\"isRunning\"]]],null,{\"statements\":[[0,\"                                            \"],[1,[28,\"svg-jar\",[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2 stroke-white\"]]],false],[0,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                            Copy\\n\"]],\"parameters\":[]}],[0,\"                                        \"],[9],[0,\"\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"h4\",true],[10,\"class\",\"mt15 midlightgrey f-small fw5 ttu\"],[8],[0,\"Webhooks\"],[9],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"mt2\"],[8],[0,\"\\n        \"],[7,\"table\",true],[10,\"class\",\"ma0 w-100 bg-grouped-table shadow-1 br3\"],[8],[0,\"\\n            \"],[7,\"thead\",true],[8],[0,\"\\n                \"],[7,\"tr\",true],[8],[0,\"\\n                    \"],[7,\"th\",true],[10,\"class\",\"pa2 pl3 midlightgrey ttu fw4 f-small br3 br--top br--left fw5\"],[8],[0,\"Name\"],[9],[0,\"\\n                    \"],[7,\"th\",true],[10,\"class\",\"pa2 pl3 midlightgrey ttu fw4 f-small br3 fw5\"],[8],[0,\"Event\"],[9],[0,\"\\n                    \"],[7,\"th\",true],[10,\"class\",\"pa2 pl3 midlightgrey ttu fw4 f-small br3 fw5\"],[8],[0,\"URL\"],[9],[0,\"\\n                    \"],[7,\"th\",true],[10,\"class\",\"pa2 pl3 midlightgrey ttu fw4 f-small br3 fw5\"],[8],[0,\"Last triggered\"],[9],[0,\"\\n                    \"],[7,\"th\",true],[10,\"class\",\"pa2 pl3 ttu br3 br--top br--right\"],[8],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"tbody\",true],[8],[0,\"\\n\"],[4,\"each\",[[23,0,[\"filteredWebhooks\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"tr\",true],[10,\"class\",\"hide-child bt b--whitegrey f7\"],[11,\"data-test-webhook-row\",[29,[[23,1,[\"id\"]]]]],[8],[0,\"\\n                        \"],[7,\"td\",true],[10,\"class\",\"pa2 pl3\"],[10,\"data-test-text\",\"name\"],[8],[1,[23,1,[\"name\"]],false],[9],[0,\"\\n                        \"],[7,\"td\",true],[10,\"class\",\"pa2 pl3\"],[10,\"data-test-text\",\"event\"],[8],[1,[28,\"event-name\",[[23,1,[\"event\"]]],null],false],[9],[0,\"\\n                        \"],[7,\"td\",true],[10,\"class\",\"pa2 pl3\"],[10,\"data-test-text\",\"targetUrl\"],[8],[1,[23,1,[\"targetUrl\"]],false],[9],[0,\"\\n                        \"],[7,\"td\",true],[10,\"class\",\"pa2 pl3\"],[10,\"data-test-text\",\"last-triggered\"],[8],[1,[28,\"or\",[[23,1,[\"lastTriggeredAtUTC\"]],\"Not triggered\"],null],false],[9],[0,\"\\n                        \"],[7,\"td\",true],[10,\"class\",\"w1 pa2 pl3 nowrap\"],[8],[0,\"\\n                            \"],[7,\"div\",true],[10,\"class\",\"child flex items-center\"],[8],[0,\"\\n                                \"],[5,\"link-to\",[[12,\"data-test-link\",\"edit-webhook\"]],[[\"@route\",\"@models\"],[\"settings.integration.webhooks.edit\",[28,\"array\",[[23,0,[\"integration\"]],[23,1,[]]],null]]],{\"statements\":[[0,\"\\n                                    \"],[1,[28,\"svg-jar\",[\"pen\"],[[\"class\"],[\"w6 h6 fill-midgrey pa1 mr1\"]]],false],[0,\"\\n                                \"]],\"parameters\":[]}],[0,\"\\n                                \"],[7,\"button\",false],[12,\"data-test-button\",\"delete-webhook\"],[3,\"action\",[[23,0,[]],\"confirmWebhookDeletion\",[23,1,[]]]],[8],[0,\"\\n                                    \"],[1,[28,\"svg-jar\",[\"trash\"],[[\"class\"],[\"w6 fill-red pa1\"]]],false],[0,\"\\n                                \"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[1]},{\"statements\":[[0,\"                \"],[7,\"tr\",true],[10,\"class\",\"bt b--whitegrey\"],[10,\"data-test-webhooks-blank-slate\",\"\"],[8],[0,\"\\n                    \"],[7,\"td\",true],[10,\"colspan\",\"5\"],[10,\"class\",\"pa5 pt15 pb15 tc midgrey f7\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"flex flex-column items-center\"],[8],[0,\"\\n                            \"],[7,\"p\",true],[10,\"class\",\"ma0 pa0 tc midgrey lh-title mt2\"],[8],[0,\"\\n                                No webhooks configured\\n                            \"],[9],[0,\"\\n                            \"],[5,\"link-to\",[[12,\"data-test-link\",\"add-webhook\"]],[[\"@route\",\"@model\",\"@classNames\"],[\"settings.integration.webhooks.new\",[23,0,[\"integration\"]],\"flex items-center\"]],{\"statements\":[[0,\"\\n                            \"],[7,\"div\",true],[10,\"class\",\"flex items-center pa2 pt1\"],[8],[0,\"\\n                                \"],[1,[28,\"svg-jar\",[\"add\"],[[\"class\"],[\"w3 h3 fill-blue-d1\"]]],false],[0,\"\\n                                \"],[7,\"span\",true],[10,\"class\",\"ml1 blue\"],[8],[0,\"Add webhook\"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                            \"]],\"parameters\":[]}],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"            \"],[9],[0,\"\\n\"],[4,\"if\",[[23,0,[\"filteredWebhooks\"]]],null,{\"statements\":[[0,\"            \"],[7,\"tfoot\",true],[10,\"class\",\"bt b--lightgrey\"],[8],[0,\"\\n                \"],[7,\"tr\",true],[10,\"class\",\"new-webhook-cell\"],[8],[0,\"\\n                    \"],[7,\"td\",true],[10,\"colspan\",\"5\"],[8],[0,\"\\n                        \"],[5,\"link-to\",[[12,\"data-test-link\",\"add-webhook\"]],[[\"@route\",\"@model\",\"@classNames\"],[\"settings.integration.webhooks.new\",[23,0,[\"integration\"]],\"flex items-center\"]],{\"statements\":[[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"pa3 f7\"],[8],[0,\"\\n                            \"],[1,[28,\"svg-jar\",[\"add\"],[[\"class\"],[\"w3 h3 fill-blue-d1\"]]],false],[0,\"\\n                            \"],[7,\"span\",true],[10,\"class\",\"ml1 blue\"],[8],[0,\"Add webhook\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                        \"]],\"parameters\":[]}],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n    \"],[7,\"button\",false],[12,\"class\",\"gh-btn gh-btn-red gh-btn-icon mb15 mt15\"],[3,\"action\",[[23,0,[]],\"confirmIntegrationDeletion\"]],[8],[0,\"\\n        \"],[7,\"span\",true],[8],[0,\" Delete Integration \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"showUnsavedChangesModal\"]]],null,{\"statements\":[[0,\"    \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[28,\"action\",[[23,0,[]],\"leaveScreen\"],null],[28,\"action\",[[23,0,[]],\"toggleUnsavedChangesModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showDeleteIntegrationModal\"]]],null,{\"statements\":[[0,\"    \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"delete-integration\",[28,\"action\",[[23,0,[]],\"deleteIntegration\"],null],[28,\"action\",[[23,0,[]],\"cancelIntegrationDeletion\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"webhookToDelete\"]]],null,{\"statements\":[[0,\"    \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"delete-webhook\",[28,\"action\",[[23,0,[]],\"deleteWebhook\"],null],[28,\"action\",[[23,0,[]],\"cancelWebhookDeletion\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[1,[22,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/settings/integration.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integration/webhooks/edit", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "vvmxmqn5",
    "block": "{\"symbols\":[],\"statements\":[[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"webhook-form\",[23,0,[\"webhook\"]],[28,\"action\",[[23,0,[]],\"save\"],null],[28,\"action\",[[23,0,[]],\"cancel\"],null],\"action wide\"]]]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/settings/integration/webhooks/edit.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integration/webhooks/new", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "950uSiWi",
    "block": "{\"symbols\":[],\"statements\":[[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"webhook-form\",[23,0,[\"webhook\"]],[28,\"action\",[[23,0,[]],\"save\"],null],[28,\"action\",[[23,0,[]],\"cancel\"],null],\"action wide\"]]]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/settings/integration/webhooks/new.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integrations", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "MmR2j6b2",
    "block": "{\"symbols\":[\"integration\"],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[5,\"gh-canvas-header\",[[12,\"class\",\"gh-canvas-header\"]],[[],[]],{\"statements\":[[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            Integrations\\n        \"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n    \"],[7,\"div\",true],[10,\"class\",\"integrations-directory\"],[8],[0,\"\\n        \"],[7,\"a\",true],[10,\"class\",\"id-item\"],[10,\"href\",\"https://ghost.org/integrations/disqus/\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener noreferrer\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"id-item-logo id-disqus\"],[8],[0,\"\\n                \"],[7,\"img\",true],[10,\"class\",\"w-100 h-100\"],[10,\"style\",\"object-fit:contain;\"],[10,\"src\",\"assets/img/disqus.svg\"],[10,\"alt\",\"Disqus Icon\"],[8],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"f8 mt1\"],[8],[0,\"Disqus\"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[7,\"a\",true],[10,\"class\",\"id-item\"],[10,\"href\",\"https://ghost.org/integrations/google/\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener noreferrer\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"id-item-logo id-analytics\"],[8],[0,\"\\n                \"],[7,\"img\",true],[10,\"class\",\"w-100 h-100\"],[10,\"style\",\"object-fit:contain;padding:1px 0;\"],[10,\"src\",\"assets/img/google-analytics.png\"],[10,\"alt\",\"Google Analytics Icon\"],[8],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"f8 mt1\"],[8],[0,\"Analytics\"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[7,\"a\",true],[10,\"class\",\"id-item\"],[10,\"href\",\"https://ghost.org/integrations/mailchimp/\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener noreferrer\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"id-item-logo id-mailchimp\"],[8],[0,\"\\n                \"],[7,\"img\",true],[10,\"class\",\"w-100 h-100\"],[10,\"style\",\"object-fit:contain;\"],[10,\"src\",\"assets/img/mailchimp.svg\"],[10,\"alt\",\"Mailchimp Icon\"],[8],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"f8 mt1\"],[8],[0,\"Mailchimp\"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[7,\"a\",true],[10,\"class\",\"id-item\"],[10,\"href\",\"https://ghost.org/integrations/typeform/\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener noreferrer\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"id-item-logo id-typeform\"],[8],[0,\"\\n                \"],[7,\"img\",true],[10,\"class\",\"w-100 h-100\"],[10,\"style\",\"object-fit:contain;\"],[10,\"src\",\"assets/img/typeform.svg\"],[10,\"alt\",\"Typeform Icon\"],[8],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"f8 mt1\"],[8],[0,\"Typeform\"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[7,\"a\",true],[10,\"class\",\"id-item\"],[10,\"href\",\"https://ghost.org/integrations/youtube/\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener noreferrer\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"id-item-logo id-youtube\"],[8],[0,\"\\n                \"],[7,\"img\",true],[10,\"class\",\"w-100 h-100\"],[10,\"style\",\"object-fit:contain;\"],[10,\"src\",\"assets/img/youtube.png\"],[10,\"alt\",\"YouTube Icon\"],[8],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"f8 mt1\"],[8],[0,\"YouTube\"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[7,\"a\",true],[10,\"class\",\"id-item\"],[10,\"href\",\"https://ghost.org/integrations/buffer/\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener noreferrer\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"id-item-logo id-buffer\"],[8],[0,\"\\n                \"],[7,\"img\",true],[10,\"class\",\"w-100 h-100\"],[10,\"style\",\"object-fit:contain;padding:1px 0;\"],[10,\"src\",\"assets/img/buffer.png\"],[10,\"alt\",\"Buffer Icon\"],[8],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"f8 mt1\"],[8],[0,\"Buffer\"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[7,\"a\",true],[10,\"class\",\"id-item\"],[10,\"href\",\"https://ghost.org/integrations/revue/\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener noreferrer\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"id-item-logo id-revue\"],[8],[0,\"\\n                \"],[7,\"img\",true],[10,\"class\",\"w-100 h-100\"],[10,\"style\",\"object-fit:contain;padding:1px 0;\"],[10,\"src\",\"assets/img/revue.svg\"],[10,\"alt\",\"Revue Icon\"],[8],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"f8 mt1\"],[8],[0,\"Revue\"],[9],[0,\"\\n        \"],[9],[0,\"\\n        \"],[7,\"a\",true],[10,\"class\",\"id-item\"],[10,\"href\",\"https://ghost.org/integrations/\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener noreferrer\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"id-item-logo id-more\"],[8],[0,\"\\n                \"],[7,\"img\",true],[10,\"class\",\"w-100 h-100\"],[10,\"style\",\"object-fit:contain;padding:0 8px;\"],[10,\"src\",\"assets/img/more.png\"],[10,\"alt\",\"Three dots\"],[8],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"f8 mt1\"],[8],[0,\"More\"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"section\",true],[10,\"class\",\"apps-grid-container\"],[8],[0,\"\\n\\n\"],[0,\"        \"],[7,\"span\",true],[10,\"class\",\"apps-grid-title pb1\"],[8],[0,\"Built-in integrations\"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"apps-grid\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"apps-grid-cell\"],[10,\"data-test-app\",\"zapier\"],[8],[0,\"\\n                \"],[5,\"link-to\",[[12,\"data-test-link\",\"zapier\"]],[[\"@route\"],[\"settings.integrations.zapier\"]],{\"statements\":[[0,\"\\n                \"],[7,\"article\",true],[10,\"class\",\"apps-card-app\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"apps-card-left\"],[8],[0,\"\\n                        \"],[7,\"figure\",true],[10,\"class\",\"apps-card-app-icon\"],[10,\"style\",\"background-image:url(assets/img/zapiericon.png);background-size:36px;\"],[8],[9],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"apps-card-meta\"],[8],[0,\"\\n                            \"],[7,\"h3\",true],[10,\"class\",\"apps-card-app-title\"],[8],[0,\"Zapier\"],[9],[0,\"\\n                            \"],[7,\"p\",true],[10,\"class\",\"apps-card-app-desc\"],[8],[0,\"Automation for your favourite apps\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-card-right\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"apps-configured\"],[8],[0,\"\\n                            \"],[7,\"span\",true],[10,\"data-test-app-status\",\"\"],[8],[0,\"Configure\"],[9],[0,\"\\n                            \"],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"]],\"parameters\":[]}],[0,\"\\n            \"],[9],[0,\"\\n\\n            \"],[7,\"div\",true],[10,\"class\",\"apps-grid-cell\"],[10,\"data-test-app\",\"slack\"],[8],[0,\"\\n                \"],[5,\"link-to\",[[12,\"data-test-link\",\"slack\"]],[[\"@route\"],[\"settings.integrations.slack\"]],{\"statements\":[[0,\"\\n                \"],[7,\"article\",true],[10,\"class\",\"apps-card-app\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"apps-card-left\"],[8],[0,\"\\n                        \"],[7,\"figure\",true],[10,\"class\",\"apps-card-app-icon\"],[10,\"style\",\"background-image:url(assets/img/slackicon.png); background-size: 36px;\"],[8],[9],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"apps-card-meta\"],[8],[0,\"\\n                            \"],[7,\"h3\",true],[10,\"class\",\"apps-card-app-title\"],[8],[0,\"Slack\"],[9],[0,\"\\n                            \"],[7,\"p\",true],[10,\"class\",\"apps-card-app-desc\"],[8],[0,\"A messaging app for teams\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-card-right\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"apps-configured\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"settings\",\"slack\",\"isActive\"]]],null,{\"statements\":[[0,\"                                \"],[7,\"span\",true],[10,\"class\",\"gh-badge\"],[10,\"data-test-app-status\",\"\"],[8],[0,\"Active\"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                \"],[7,\"span\",true],[10,\"data-test-app-status\",\"\"],[8],[0,\"Configure\"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                            \"],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"]],\"parameters\":[]}],[0,\"\\n            \"],[9],[0,\"\\n\\n            \"],[7,\"div\",true],[10,\"class\",\"apps-grid-cell\"],[10,\"data-test-app\",\"amp\"],[8],[0,\"\\n                \"],[5,\"link-to\",[[12,\"data-test-link\",\"amp\"]],[[\"@route\"],[\"settings.integrations.amp\"]],{\"statements\":[[0,\"\\n                \"],[7,\"article\",true],[10,\"class\",\"apps-card-app\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"apps-card-left\"],[8],[0,\"\\n                        \"],[7,\"figure\",true],[10,\"class\",\"apps-card-app-icon\"],[10,\"style\",\"background-image:url(assets/img/ampicon.png); background-size: 36px;\"],[8],[9],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"apps-card-meta\"],[8],[0,\"\\n                            \"],[7,\"h3\",true],[10,\"class\",\"apps-card-app-title\"],[8],[0,\"AMP\"],[9],[0,\"\\n                            \"],[7,\"p\",true],[10,\"class\",\"apps-card-app-desc\"],[8],[0,\"Google Accelerated Mobile Pages\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-card-right\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"apps-configured\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"settings\",\"amp\"]]],null,{\"statements\":[[0,\"                                \"],[7,\"span\",true],[10,\"class\",\"gh-badge\"],[10,\"data-test-app-status\",\"\"],[8],[0,\"Active\"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                \"],[7,\"span\",true],[10,\"data-test-app-status\",\"\"],[8],[0,\"Configure\"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                            \"],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"]],\"parameters\":[]}],[0,\"\\n            \"],[9],[0,\"\\n\\n            \"],[7,\"div\",true],[10,\"class\",\"apps-grid-cell\"],[10,\"data-test-app\",\"unsplash\"],[8],[0,\"\\n                \"],[5,\"link-to\",[[12,\"data-test-link\",\"unsplash\"]],[[\"@route\"],[\"settings.integrations.unsplash\"]],{\"statements\":[[0,\"\\n                \"],[7,\"article\",true],[10,\"class\",\"apps-card-app\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"apps-card-left\"],[8],[0,\"\\n                        \"],[7,\"figure\",true],[10,\"class\",\"apps-card-app-icon\"],[10,\"style\",\"background-image:url(assets/icons/unsplash.svg); background-size:30px;\"],[8],[9],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"apps-card-meta\"],[8],[0,\"\\n                            \"],[7,\"h3\",true],[10,\"class\",\"apps-card-app-title\"],[8],[0,\"Unsplash\"],[9],[0,\"\\n                            \"],[7,\"p\",true],[10,\"class\",\"apps-card-app-desc\"],[8],[0,\"Beautiful, free photos\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-card-right\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"apps-configured\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"settings\",\"unsplash\",\"isActive\"]]],null,{\"statements\":[[0,\"                                \"],[7,\"span\",true],[10,\"class\",\"gh-badge\"],[10,\"data-test-app-status\",\"\"],[8],[0,\"Active\"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                \"],[7,\"span\",true],[10,\"data-test-app-status\",\"\"],[8],[0,\"Configure\"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                            \"],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"]],\"parameters\":[]}],[0,\"\\n            \"],[9],[0,\"\\n\\n\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"section\",true],[10,\"class\",\"apps-grid-container\"],[8],[0,\"\\n\\n        \"],[7,\"span\",true],[10,\"class\",\"apps-grid-title pb1\"],[8],[0,\"Custom integrations\"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"apps-grid\"],[8],[0,\"\\n\"],[4,\"each\",[[23,0,[\"integrations\"]]],null,{\"statements\":[[0,\"                \"],[7,\"div\",true],[10,\"class\",\"apps-grid-cell\"],[10,\"data-test-custom-integration\",\"\"],[8],[0,\"\\n                    \"],[5,\"link-to\",[[12,\"data-test-integration\",[23,1,[\"id\"]]]],[[\"@route\",\"@model\"],[\"settings.integration\",[23,1,[]]]],{\"statements\":[[0,\"\\n                        \"],[7,\"article\",true],[10,\"class\",\"apps-card-app\"],[8],[0,\"\\n                            \"],[7,\"div\",true],[10,\"class\",\"apps-card-left\"],[8],[0,\"\\n                                \"],[7,\"figure\",true],[10,\"class\",\"apps-card-app-icon flex items-center\"],[11,\"style\",[28,\"integration-icon-style\",[[23,1,[]]],null]],[8],[0,\"\\n\"],[4,\"unless\",[[23,1,[\"iconImage\"]]],null,{\"statements\":[[0,\"                                        \"],[1,[28,\"svg-jar\",[\"integration\"],[[\"class\"],[\"nudge-left--6 w9 stroke-darkgrey\"]]],false],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                                \"],[9],[0,\"\\n                                \"],[7,\"div\",true],[10,\"class\",\"apps-card-meta\"],[8],[0,\"\\n                                    \"],[7,\"h3\",true],[10,\"class\",\"apps-card-app-title\"],[10,\"data-test-text\",\"name\"],[8],[0,\"\\n                                        \"],[1,[23,1,[\"name\"]],false],[0,\"\\n                                    \"],[9],[0,\"\\n                                    \"],[7,\"p\",true],[10,\"class\",\"apps-card-app-desc\"],[10,\"data-test-text\",\"description\"],[8],[0,\"\\n                                        \"],[1,[23,1,[\"description\"]],false],[0,\"\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                            \"],[7,\"div\",true],[10,\"class\",\"gh-card-right\"],[8],[0,\"\\n                                \"],[7,\"div\",true],[10,\"class\",\"apps-configured\"],[8],[0,\"\\n                                    \"],[7,\"span\",true],[8],[0,\"Configure\"],[9],[0,\"\\n                                    \"],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[0,\"\\n                                \"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"]],\"parameters\":[]}],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[1]},{\"statements\":[[0,\"                \"],[7,\"div\",true],[10,\"class\",\"flex flex-column justify-center items-center mih30 miw-100\"],[10,\"data-test-blank\",\"custom-integrations\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"fetchIntegrations\",\"isRunning\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"div\",true],[10,\"class\",\"gh-loading-spinner\"],[8],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        \"],[7,\"div\",true],[10,\"class\",\"flex flex-column items-center pa5 pt15 pb15\"],[8],[0,\"\\n                            \"],[7,\"p\",true],[10,\"class\",\"ma0 pa0 tc midgrey lh-title mt2\"],[8],[0,\"\\n                                Create your own custom Ghost integrations with dedicated API keys & webhooks\\n                            \"],[9],[0,\"\\n                            \"],[5,\"link-to\",[[12,\"class\",\"\"],[12,\"data-test-button\",\"new-integration\"]],[[\"@route\"],[\"settings.integrations.new\"]],{\"statements\":[[0,\"\\n                                \"],[7,\"div\",true],[10,\"class\",\"flex items-center pa2 pt1\"],[8],[0,\"\\n                                    \"],[1,[28,\"svg-jar\",[\"add\"],[[\"class\"],[\"w3 h3 fill-blue-d1\"]]],false],[0,\"\\n                                    \"],[7,\"span\",true],[10,\"class\",\"db ml1 blue nudge-bottom--1\"],[8],[0,\"Add custom integration\"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                            \"]],\"parameters\":[]}],[0,\"\\n                        \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n\"],[4,\"if\",[[23,0,[\"integrations\"]]],null,{\"statements\":[[0,\"            \"],[7,\"div\",true],[10,\"class\",\"apps-grid-cell new-integration-cell\"],[8],[0,\"\\n                \"],[5,\"link-to\",[[12,\"class\",\"\"],[12,\"data-test-button\",\"new-integration\"]],[[\"@route\"],[\"settings.integrations.new\"]],{\"statements\":[[0,\"\\n                \"],[7,\"article\",true],[10,\"class\",\"apps-card-app\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"flex items-center\"],[8],[0,\"\\n                        \"],[1,[28,\"svg-jar\",[\"add\"],[[\"class\"],[\"w3 h3 fill-blue-d1\"]]],false],[0,\"\\n                        \"],[7,\"span\",true],[10,\"class\",\"db ml1 blue nudge-bottom--1 fw4\"],[8],[0,\"Add custom integration\"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"]],\"parameters\":[]}],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[1,[22,\"outlet\"],false],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/settings/integrations.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integrations/amp-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "ZvdT0pWU",
    "block": "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[7,\"header\",true],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            \"],[5,\"link-to\",[],[[\"@route\"],[\"settings.integrations\"]],{\"statements\":[[0,\"Integrations\"]],\"parameters\":[]}],[0,\"\\n            \"],[7,\"span\",true],[8],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[9],[0,\"\\n            AMP\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[5,\"gh-loading-spinner\",[],[[],[]]],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/settings/integrations/amp-loading.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integrations/amp", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "qjoZ49bj",
    "block": "{\"symbols\":[],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[5,\"gh-canvas-header\",[[12,\"class\",\"gh-canvas-header\"]],[[],[]],{\"statements\":[[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            \"],[5,\"link-to\",[[12,\"data-test-link\",\"integrations-back\"]],[[\"@route\"],[\"settings.integrations\"]],{\"statements\":[[0,\"Integrations\"]],\"parameters\":[]}],[0,\"\\n            \"],[7,\"span\",true],[8],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[9],[0,\"\\n            AMP\\n        \"],[9],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[5,\"gh-task-button\",[[12,\"data-test-save-button\",true]],[[\"@task\",\"@class\",\"@autoReset\"],[[23,0,[\"saveTask\"]],\"gh-btn gh-btn-blue gh-btn-icon\",true]]],[0,\"\\n        \"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"showLeaveSettingsModal\"]]],null,{\"statements\":[[0,\"        \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[28,\"action\",[[23,0,[]],\"leaveSettings\"],null],[28,\"action\",[[23,0,[]],\"toggleLeaveSettingsModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    \"],[7,\"section\",true],[10,\"class\",\"view-container bt b--lightgrey-d1 pt5\"],[8],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"app-grid\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"app-cell\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"bg-white mr3 display flex items-center justify-center br-pill shadow-1 pa3\"],[8],[0,\"\\n                    \"],[7,\"img\",true],[10,\"class\",\"app-icon\"],[10,\"src\",\"assets/img/ampicon.png\"],[8],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"app-cell\"],[8],[0,\"\\n                \"],[7,\"h3\",true],[8],[0,\"AMP\"],[9],[0,\"\\n                \"],[7,\"p\",true],[8],[0,\"Accelerated Mobile Pages\"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-header gh-first-header\"],[8],[0,\"AMP configuration\"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex flex-column br4 shadow-1 bg-grouped-table pa8 mt2\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-setting-first gh-setting-last\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Enable AMP\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Enable \"],[7,\"a\",true],[10,\"href\",\"https://ampproject.org\"],[10,\"target\",\"_blank\"],[8],[0,\"Google Accelerated Mobile Pages\"],[9],[0,\" for your posts\"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"for-checkbox\"],[8],[0,\"\\n                        \"],[7,\"label\",true],[10,\"for\",\"amp\"],[10,\"class\",\"checkbox\"],[8],[0,\"\\n                            \"],[7,\"input\",true],[11,\"checked\",[23,0,[\"ampSettings\"]]],[10,\"id\",\"amp\"],[10,\"name\",\"amp\"],[11,\"onclick\",[28,\"action\",[[23,0,[]],\"update\"],[[\"value\"],[\"target.checked\"]]]],[10,\"data-test-amp-checkbox\",\"\"],[10,\"type\",\"checkbox\"],[8],[9],[0,\"\\n                            \"],[7,\"span\",true],[10,\"class\",\"input-toggle-component\"],[8],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/settings/integrations/amp.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integrations/new", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "2plSlNbv",
    "block": "{\"symbols\":[],\"statements\":[[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"new-integration\",[23,0,[\"integration\"]],[28,\"action\",[[23,0,[]],\"save\"],null],[28,\"action\",[[23,0,[]],\"cancel\"],null],\"action wide\"]]]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/settings/integrations/new.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integrations/slack-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "F6j2pddx",
    "block": "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[7,\"header\",true],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            \"],[5,\"link-to\",[],[[\"@route\"],[\"settings.integrations\"]],{\"statements\":[[0,\"Integrations\"]],\"parameters\":[]}],[0,\"\\n            \"],[7,\"span\",true],[8],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[9],[0,\"\\n            Slack\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[5,\"gh-loading-spinner\",[],[[],[]]],[0,\"\\n    \"],[9],[0,\"\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/settings/integrations/slack-loading.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integrations/slack", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "zA/2MaGY",
    "block": "{\"symbols\":[],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[5,\"gh-canvas-header\",[[12,\"class\",\"gh-canvas-header\"]],[[],[]],{\"statements\":[[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            \"],[5,\"link-to\",[[12,\"data-test-link\",\"integrations-back\"]],[[\"@route\"],[\"settings.integrations\"]],{\"statements\":[[0,\"Integrations\"]],\"parameters\":[]}],[0,\"\\n            \"],[7,\"span\",true],[8],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[9],[0,\"\\n            Slack\\n        \"],[9],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[5,\"gh-task-button\",[[12,\"data-test-save-button\",true]],[[\"@task\",\"@autoReset\",\"@class\"],[[23,0,[\"saveTask\"]],true,\"gh-btn gh-btn-blue gh-btn-icon\"]]],[0,\"\\n        \"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"showLeaveSettingsModal\"]]],null,{\"statements\":[[0,\"        \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[28,\"action\",[[23,0,[]],\"leaveSettings\"],null],[28,\"action\",[[23,0,[]],\"toggleLeaveSettingsModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    \"],[7,\"section\",true],[10,\"class\",\"view-container bt b--lightgrey-d1 pt5\"],[8],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"app-grid\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"app-cell\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"bg-white mr3 display flex items-center justify-center br-pill shadow-1 pa3\"],[8],[0,\"\\n                    \"],[7,\"img\",true],[10,\"class\",\"app-icon\"],[10,\"src\",\"assets/img/slackicon.png\"],[8],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"app-cell\"],[8],[0,\"\\n                \"],[7,\"h3\",true],[8],[0,\"Slack\"],[9],[0,\"\\n                \"],[7,\"p\",true],[8],[0,\"A messaging app for teams\"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[7,\"form\",false],[12,\"class\",\"app-config-form\"],[12,\"id\",\"slack-settings\"],[12,\"novalidate\",\"novalidate\"],[3,\"action\",[[23,0,[]],\"save\"],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-setting-header gh-first-header\"],[8],[0,\"Slack configuration\"],[9],[0,\"\\n\\n                \"],[7,\"div\",true],[10,\"class\",\"flex flex-column br4 shadow-1 bg-grouped-table pa8 mt2\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-first\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content gh-setting-content--no-action\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Webhook URL\"],[9],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Automatically send newly published posts to a channel in Slack or any Slack-compatible service like Discord or Mattermost.\"],[9],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content-extended\"],[8],[0,\"\\n                            \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"slackSettings\",\"errors\"]],[23,0,[\"slackSettings\",\"hasValidated\"]],\"url\"]],{\"statements\":[[0,\"\\n                                \"],[5,\"gh-text-input\",[[12,\"data-test-slack-url-input\",true]],[[\"@placeholder\",\"@name\",\"@value\",\"@input\",\"@keyEvents\",\"@focus-out\"],[\"https://hooks.slack.com/services/...\",\"slack[url]\",[28,\"readonly\",[[23,0,[\"slackSettings\",\"url\"]]],null],[28,\"action\",[[23,0,[]],\"updateURL\"],[[\"value\"],[\"target.value\"]]],[28,\"hash\",null,[[\"Enter\"],[[28,\"action\",[[23,0,[]],\"save\"],null]]]],[28,\"action\",[[23,0,[]],\"triggerDirtyState\"],null]]]],[0,\"\\n\"],[4,\"unless\",[[23,0,[\"slackSettings\",\"errors\",\"url\"]]],null,{\"statements\":[[0,\"                                    \"],[7,\"p\",true],[8],[0,\"Set up a new incoming webhook \"],[7,\"a\",true],[10,\"href\",\"https://my.slack.com/apps/new/A0F7XDUAZ-incoming-webhooks\"],[10,\"target\",\"_blank\"],[8],[0,\"here\"],[9],[0,\", and grab the URL.\"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                    \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"slack-url\"]],[[\"@errors\",\"@property\"],[[23,0,[\"slackSettings\",\"errors\"]],\"url\"]]],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                            \"]],\"parameters\":[]}],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content gh-setting-content--no-action\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Username\"],[9],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"The username to display messages from\"],[9],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content-extended\"],[8],[0,\"\\n                            \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"slackSettings\",\"errors\"]],[23,0,[\"slackSettings\",\"hasValidated\"]],\"username\"]],{\"statements\":[[0,\"\\n                                \"],[5,\"gh-text-input\",[[12,\"data-test-slack-username-input\",true]],[[\"@placeholder\",\"@name\",\"@value\",\"@input\",\"@keyEvents\",\"@focus-out\"],[\"Ghost\",\"slack[username]\",[28,\"readonly\",[[23,0,[\"slackSettings\",\"username\"]]],null],[28,\"action\",[[23,0,[]],\"updateUsername\"],[[\"value\"],[\"target.value\"]]],[28,\"hash\",null,[[\"Enter\"],[[28,\"action\",[[23,0,[]],\"save\"],null]]]],[28,\"action\",[[23,0,[]],\"triggerDirtyState\"],null]]]],[0,\"\\n\"],[4,\"if\",[[23,0,[\"slackSettings\",\"errors\",\"username\"]]],null,{\"statements\":[[0,\"                                    \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"slackSettings\",\"errors\"]],\"username\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                            \"]],\"parameters\":[]}],[0,\"\\n                        \"],[9],[0,\"\\n                        \"],[5,\"gh-task-button\",[[12,\"data-test-send-notification-button\",\"true\"]],[[\"@buttonText\",\"@task\",\"@successText\",\"@class\",\"@disabled\"],[\"Send test notification\",[23,0,[\"sendTestNotification\"]],\"Sent\",\"gh-btn gh-btn-green gh-btn-icon\",[23,0,[\"testNotificationDisabled\"]]]]],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/settings/integrations/slack.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integrations/unsplash-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "gwLLkleX",
    "block": "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[7,\"header\",true],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            \"],[5,\"link-to\",[],[[\"@route\"],[\"settings.integrations\"]],{\"statements\":[[0,\"Integrations\"]],\"parameters\":[]}],[0,\"\\n            \"],[7,\"span\",true],[8],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[9],[0,\"\\n            Unsplash\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[5,\"gh-loading-spinner\",[],[[],[]]],[0,\"\\n    \"],[9],[0,\"\\n\"],[9]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/settings/integrations/unsplash-loading.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integrations/unsplash", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "zD/UHRx/",
    "block": "{\"symbols\":[],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[5,\"gh-canvas-header\",[[12,\"class\",\"gh-canvas-header\"]],[[],[]],{\"statements\":[[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            \"],[5,\"link-to\",[[12,\"data-test-link\",\"integrations-back\"]],[[\"@route\"],[\"settings.integrations\"]],{\"statements\":[[0,\"Integrations\"]],\"parameters\":[]}],[0,\"\\n            \"],[7,\"span\",true],[8],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[9],[0,\"\\n            Unsplash\\n        \"],[9],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[5,\"gh-task-button\",[[12,\"data-test-save-button\",true]],[[\"@task\",\"@autoReset\",\"@class\"],[[23,0,[\"saveTask\"]],true,\"gh-btn gh-btn-blue gh-btn-icon\"]]],[0,\"\\n        \"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"showLeaveSettingsModal\"]]],null,{\"statements\":[[0,\"        \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[28,\"action\",[[23,0,[]],\"leaveSettings\"],null],[28,\"action\",[[23,0,[]],\"toggleLeaveSettingsModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    \"],[7,\"section\",true],[10,\"class\",\"view-container bt b--lightgrey-d1 pt5\"],[8],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"app-grid\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"app-cell\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"bg-white mr3 display flex items-center justify-center br-pill shadow-1 pa3\"],[8],[0,\"\\n                    \"],[7,\"img\",true],[10,\"class\",\"app-icon pa2\"],[10,\"src\",\"assets/icons/unsplash.svg\"],[8],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"app-cell\"],[8],[0,\"\\n                \"],[7,\"h3\",true],[8],[0,\"Unsplash\"],[9],[0,\"\\n                \"],[7,\"p\",true],[8],[0,\"Beautiful, free photos\"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-header gh-first-header\"],[8],[0,\"Unsplash configuration\"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex flex-column br4 shadow-1 bg-grouped-table pa8 pb4 mt2\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-setting-first gh-setting-last\"],[10,\"id\",\"unsplash-toggle\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Enable Unsplash\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Enable \"],[7,\"a\",true],[10,\"href\",\"https://unsplash.com\"],[10,\"target\",\"_blank\"],[8],[0,\"Unsplash\"],[9],[0,\" image integration for your posts\"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"form-group right\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"for-checkbox\"],[8],[0,\"\\n                            \"],[7,\"label\",true],[10,\"for\",\"isActive\"],[10,\"class\",\"checkbox\"],[8],[0,\"\\n                                    \"],[7,\"input\",true],[11,\"checked\",[23,0,[\"unsplashSettings\",\"isActive\"]]],[10,\"id\",\"isActive\"],[10,\"name\",\"isActive\"],[11,\"onclick\",[28,\"action\",[[23,0,[]],\"update\"],[[\"value\"],[\"target.checked\"]]]],[10,\"data-test-checkbox\",\"unsplash\"],[10,\"type\",\"checkbox\"],[8],[9],[0,\"\\n                                    \"],[7,\"span\",true],[10,\"class\",\"input-toggle-component\"],[8],[9],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/settings/integrations/unsplash.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/integrations/zapier", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "3h31F9gD",
    "block": "{\"symbols\":[],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[5,\"gh-canvas-header\",[[12,\"class\",\"gh-canvas-header\"]],[[],[]],{\"statements\":[[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            \"],[5,\"link-to\",[[12,\"data-test-link\",\"integrations-back\"]],[[\"@route\"],[\"settings.integrations\"]],{\"statements\":[[0,\"Integrations\"]],\"parameters\":[]}],[0,\"\\n            \"],[7,\"span\",true],[8],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[9],[0,\"\\n            Zapier\\n        \"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n    \"],[7,\"section\",true],[10,\"class\",\"view-container bt b--lightgrey-d1 pt5\"],[8],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"app-grid\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"app-cell\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"bg-white mr3 display flex items-center justify-center br-pill shadow-1 pa3\"],[8],[0,\"\\n                    \"],[7,\"img\",true],[10,\"class\",\"app-icon\"],[10,\"src\",\"assets/img/zapiericon.png\"],[8],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"app-cell\"],[8],[0,\"\\n                \"],[7,\"h3\",true],[8],[0,\"Zapier\"],[9],[0,\"\\n                \"],[7,\"p\",true],[8],[0,\"Automation for your favourite apps\"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[7,\"div\",true],[10,\"class\",\"m15 mt4\"],[8],[0,\"\\n            \"],[7,\"table\",true],[10,\"class\",\"ma0 shadow-1 bg-grouped-table br3\"],[10,\"style\",\"table-layout: fixed\"],[8],[0,\"\\n                \"],[7,\"tbody\",true],[8],[0,\"\\n                    \"],[7,\"tr\",true],[10,\"class\",\"bb b--lightgrey\"],[8],[0,\"\\n                        \"],[7,\"td\",true],[10,\"class\",\"pa3 w50 fw7\"],[8],[0,\"Admin API Key\"],[9],[0,\"\\n                        \"],[7,\"td\",true],[10,\"class\",\"pa0\"],[8],[0,\"\\n                            \"],[7,\"div\",true],[11,\"class\",[29,[\"pa3 relative truncate \",[28,\"unless\",[[23,0,[\"copyAdminKey\",\"isRunning\"]],\"hide-child-instant\"],null]]]],[8],[0,\"\\n                                \"],[7,\"span\",true],[10,\"class\",\"midgrey\"],[10,\"data-test-text\",\"admin-key\"],[8],[0,\"\\n                                    \"],[1,[23,0,[\"integration\",\"adminKey\",\"secret\"]],false],[0,\"\\n                                \"],[9],[0,\"\\n                                \"],[7,\"div\",true],[10,\"class\",\"absolute top-1 right-2\"],[8],[0,\"\\n                                    \"],[7,\"div\",true],[10,\"class\",\"pt1 pr3 pb1 pl3 bg-black-70 child br3 f8 nudge-top--4 nudge-right--1\"],[8],[0,\"\\n                                        \"],[7,\"button\",false],[12,\"class\",\"white fw4 flex items-center\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],[28,\"perform\",[[23,0,[\"copyAdminKey\"]]],null]]],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"copyAdminKey\",\"isRunning\"]]],null,{\"statements\":[[0,\"                                                \"],[1,[28,\"svg-jar\",[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2\"]]],false],[0,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                                Copy\\n\"]],\"parameters\":[]}],[0,\"                                        \"],[9],[0,\"\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[7,\"tr\",true],[8],[0,\"\\n                        \"],[7,\"td\",true],[10,\"class\",\"pa3 w50 fw7\"],[8],[0,\"API URL\"],[9],[0,\"\\n                        \"],[7,\"td\",true],[10,\"class\",\"pa0 truncate\"],[8],[0,\"\\n                            \"],[7,\"div\",true],[11,\"class\",[29,[\"pa3 relative truncate \",[28,\"unless\",[[23,0,[\"copyApiUrl\",\"isRunning\"]],\"hide-child-instant\"],null]]]],[8],[0,\"\\n                                \"],[7,\"span\",true],[10,\"class\",\"midgrey\"],[10,\"data-test-text\",\"api-url\"],[8],[0,\"\\n                                    \"],[1,[23,0,[\"apiUrl\"]],false],[0,\"\\n                                \"],[9],[0,\"\\n                                \"],[7,\"div\",true],[10,\"class\",\"absolute top-1 right-2\"],[8],[0,\"\\n                                    \"],[7,\"div\",true],[10,\"class\",\"pt1 pr3 pb1 pl3 bg-black-70 child br3 f8 nudge-top--4 nudge-right--1\"],[8],[0,\"\\n                                        \"],[7,\"button\",false],[12,\"class\",\"white fw4 flex items-center\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],[28,\"perform\",[[23,0,[\"copyApiUrl\"]]],null]]],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"copyApiUrl\",\"isRunning\"]]],null,{\"statements\":[[0,\"                                                \"],[1,[28,\"svg-jar\",[\"check-circle\"],[[\"class\"],[\"w3 v-mid mr2\"]]],false],[0,\" Copied\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                                Copy\\n\"]],\"parameters\":[]}],[0,\"                                        \"],[9],[0,\"\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[7,\"div\",true],[10,\"class\",\"mt12\"],[10,\"id\",\"zapier-toggle\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content gh-setting-content--no-action\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Zapier Templates\"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc mt1\"],[8],[0,\"Explore pre-built templates for common automation tasks\"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content-extended\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"id\",\"zapier-templates\"],[8],[0,\"\\n\"],[4,\"unless\",[[23,0,[\"isTesting\"]]],null,{\"statements\":[[0,\"                            \"],[7,\"script\",true],[10,\"src\",\"https://zapier.com/apps/embed/widget.js?services=ghost&container=true&limit=10&html_id=zapier-templates\"],[8],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/settings/integrations/zapier.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/labs-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "H5EfDRZK",
    "block": "{\"symbols\":[],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[7,\"header\",true],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            Labs\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[5,\"gh-loading-spinner\",[],[[],[]]],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/settings/labs-loading.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/settings/labs", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "nUxY+6oy",
    "block": "{\"symbols\":[\"uploader\",\"error\",\"uploader\",\"error\",\"error\"],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[5,\"gh-canvas-header\",[[12,\"class\",\"gh-canvas-header\"]],[[],[]],{\"statements\":[[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            Labs\\n        \"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n    \"],[7,\"section\",true],[10,\"class\",\"view-container settings-debug\"],[8],[0,\"\\n        \"],[7,\"p\",true],[10,\"class\",\"gh-box gh-box-info\"],[8],[1,[28,\"svg-jar\",[\"idea\"],null],false],[0,\"This is a testing ground for new or experimental features. They may change, break or inexplicably disappear at any time.\"],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"session\",\"user\",\"isOwner\"]]],null,{\"statements\":[[0,\"        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Members (BETA) \"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex flex-column br3 shadow-1 bg-grouped-table mt2\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-setting-first gh-setting-last\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-members-setting-content\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"flex\"],[8],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"flex flex-column flex-grow-1\"],[8],[0,\"\\n                            \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title pl5 pt5\"],[8],[0,\"Enable members\"],[9],[0,\"\\n                            \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc pl5 pb5\"],[8],[0,\"Create registered members and take subscription payments — \"],[7,\"a\",true],[10,\"href\",\"https://ghost.org/docs/members/\"],[10,\"target\",\"_blank\"],[10,\"rel\",\"noopener\"],[8],[0,\"Find out more\"],[9],[9],[0,\"\\n                        \"],[9],[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                            \"],[7,\"div\",true],[10,\"class\",\"for-switch pa5\"],[8],[5,\"gh-feature-flag\",[],[[\"@flag\"],[\"members\"]]],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n\"],[4,\"liquid-if\",[[23,0,[\"feature\",\"labs\",\"members\"]]],null,{\"statements\":[[0,\"                    \"],[5,\"gh-members-lab-setting\",[],[[\"@settings\",\"@setDefaultContentVisibility\",\"@setMembersSubscriptionSettings\",\"@setBulkEmailSettings\"],[[23,0,[\"settings\"]],[28,\"action\",[[23,0,[]],\"setDefaultContentVisibility\"],null],[28,\"action\",[[23,0,[]],\"setMembersSubscriptionSettings\"],null],[28,\"action\",[[23,0,[]],\"setBulkEmailSettings\"],null]]]],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"mt5 pl5 pr5 pb5\"],[8],[0,\"\\n                        \"],[5,\"gh-task-button\",[],[[\"@buttonText\",\"@task\",\"@successText\",\"@runningText\",\"@autoReset\",\"@class\"],[\"Save members settings\",[23,0,[\"saveSettings\"]],\"Saved\",\"Saving\",true,\"gh-btn gh-btn-blue gh-btn-icon\"]]],[0,\"\\n                    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Migration options\"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex flex-column br3 shadow-1 bg-grouped-table pa5 mt2\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-setting-first\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Import content\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Import posts from another Ghost installation\"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                    \"],[7,\"form\",true],[10,\"id\",\"settings-import\"],[10,\"enctype\",\"multipart/form-data\"],[8],[0,\"\\n                        \"],[5,\"gh-file-upload\",[[12,\"data-test-file-input\",\"import\"]],[[\"@id\",\"@classNames\",\"@uploadButtonText\",\"@onUpload\",\"@acceptEncoding\"],[\"importfile\",\"flex\",[23,0,[\"uploadButtonText\"]],[28,\"action\",[[23,0,[]],\"onUpload\"],null],[23,0,[\"importMimeType\"]]]]],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"importErrors\"]]],null,{\"statements\":[[0,\"                \"],[7,\"div\",true],[11,\"class\",[29,[\"gh-import-errors \",[28,\"if\",[[23,0,[\"importSuccessful\"]],\"gh-import-errors-warning\"],null]]]],[10,\"data-test-import-errors\",\"\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-import-errors-title\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"importSuccessful\"]]],null,{\"statements\":[[0,\"                            Import successful with warnings\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                            Import failed\\n\"]],\"parameters\":[]}],[0,\"                    \"],[9],[0,\"\\n\\n\"],[4,\"each\",[[23,0,[\"importErrors\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"div\",true],[10,\"class\",\"gh-import-error\"],[10,\"data-test-import-error\",\"\"],[8],[0,\"\\n                            \"],[7,\"p\",true],[10,\"class\",\"gh-import-error-message\"],[10,\"data-test-import-error-message\",\"\"],[8],[0,\"\\n                                \"],[4,\"if\",[[23,5,[\"help\"]]],null,{\"statements\":[[1,[23,5,[\"help\"]],false],[0,\": \"]],\"parameters\":[]},null],[1,[23,5,[\"message\"]],false],[0,\"\\n                            \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,5,[\"context\"]]],null,{\"statements\":[[0,\"                                \"],[7,\"div\",true],[10,\"class\",\"gh-import-error-entry\"],[10,\"data-test-import-error-context\",\"\"],[8],[0,\"\\n                                    \"],[7,\"pre\",true],[8],[1,[23,5,[\"context\"]],false],[9],[0,\"\\n                                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                        \"],[9],[0,\"\\n\"]],\"parameters\":[5]},null],[0,\"                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-setting\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Export your content\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Download all of your posts and settings in a single, glorious JSON file\"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                    \"],[7,\"button\",false],[12,\"class\",\"gh-btn gh-btn-hover-blue\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],\"downloadFile\",\"db\"]],[8],[7,\"span\",true],[8],[0,\"Export\"],[9],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-setting-last\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Delete all content\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Permanently delete all posts and tags from the database, a hard reset\"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                    \"],[7,\"button\",false],[12,\"class\",\"gh-btn gh-btn-hover-red js-delete\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],\"toggleDeleteAllModal\"]],[8],[7,\"span\",true],[8],[0,\"Delete\"],[9],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Beta features\"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex flex-column br3 shadow-1 bg-grouped-table pa5 mt2\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-setting-first\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Night shift\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Swap Ghost admin's colours to a dark background which is easy on the eyes\"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"for-switch\"],[8],[5,\"gh-feature-flag\",[],[[\"@flag\"],[\"nightShift\"]]],[9],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-setting\"],[8],[0,\"\\n                \"],[5,\"gh-uploader\",[],[[\"@extensions\",\"@uploadUrl\",\"@paramName\",\"@onUploadSuccess\",\"@onUploadFailure\"],[[23,0,[\"jsonExtension\"]],\"/redirects/json/\",\"redirects\",[28,\"perform\",[[23,0,[\"redirectUploadResult\"]],true],null],[28,\"perform\",[[23,0,[\"redirectUploadResult\"]],false],null]]],{\"statements\":[[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Redirects\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Configure redirects for old or moved content, more info in \"],[7,\"a\",true],[10,\"href\",\"https://ghost.org/tutorials/implementing-redirects/\"],[8],[0,\"the docs\"],[9],[9],[0,\"\\n\"],[4,\"each\",[[23,3,[\"errors\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-error\"],[10,\"data-test-error\",\"redirects\"],[8],[1,[28,\"or\",[[23,4,[\"context\"]],[23,4,[\"message\"]]],null],false],[9],[0,\"\\n\"]],\"parameters\":[4]},null],[0,\"                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-action\"],[10,\"style\",\"display: flex; flex-direction: column\"],[8],[0,\"\\n\"],[4,\"if\",[[23,3,[\"isUploading\"]]],null,{\"statements\":[[0,\"                        \"],[1,[23,3,[\"progressBar\"]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        \"],[7,\"button\",true],[11,\"class\",[29,[\"gh-btn gh-btn-icon \",[28,\"if\",[[23,0,[\"redirectSuccess\"]],\"gh-btn-green\"],null],\" \",[28,\"if\",[[23,0,[\"redirectFailure\"]],\"gh-btn-red\"],null]]]],[11,\"onclick\",[28,\"action\",[[23,0,[]],\"triggerFileDialog\"],null]],[10,\"data-test-button\",\"upload-redirects\"],[10,\"type\",\"button\"],[8],[0,\"\\n                            \"],[7,\"span\",true],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"redirectSuccess\"]]],null,{\"statements\":[[0,\"                                    \"],[1,[28,\"svg-jar\",[\"check-circle\"],null],false],[0,\" Uploaded\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,0,[\"redirectFailure\"]]],null,{\"statements\":[[0,\"                                    \"],[1,[28,\"svg-jar\",[\"retry\"],null],false],[0,\" Upload Failed\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                    Upload redirects JSON\\n                                \"]],\"parameters\":[]}]],\"parameters\":[]}],[0,\"                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                        \"],[7,\"span\",true],[8],[7,\"a\",false],[12,\"href\",\"#\"],[12,\"data-test-link\",\"download-redirects\"],[3,\"action\",[[23,0,[]],\"downloadFile\",\"redirects/json\"]],[8],[0,\"Download current redirects\"],[9],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n                    \"],[7,\"div\",true],[10,\"style\",\"display:none\"],[8],[0,\"\\n                        \"],[5,\"gh-file-input\",[[12,\"data-test-file-input\",\"redirects\"]],[[\"@multiple\",\"@action\",\"@accept\"],[false,[23,3,[\"setFiles\"]],[23,0,[\"jsonMimeType\"]]]]],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"]],\"parameters\":[3]}],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-setting-last\"],[8],[0,\"\\n                \"],[5,\"gh-uploader\",[],[[\"@extensions\",\"@uploadUrl\",\"@paramName\",\"@onUploadSuccess\",\"@onUploadFailure\"],[[23,0,[\"yamlExtension\"]],\"/settings/routes/yaml/\",\"routes\",[28,\"perform\",[[23,0,[\"routesUploadResult\"]],true],null],[28,\"perform\",[[23,0,[\"routesUploadResult\"]],false],null]]],{\"statements\":[[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Routes\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Configure dynamic routing by modifying the routes.yaml file\"],[9],[0,\"\\n\"],[4,\"each\",[[23,1,[\"errors\"]]],null,{\"statements\":[[0,\"                        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-error\"],[10,\"data-test-error\",\"routes\"],[8],[1,[28,\"or\",[[23,2,[\"context\"]],[23,2,[\"message\"]]],null],false],[9],[0,\"\\n\"]],\"parameters\":[2]},null],[0,\"                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-action\"],[10,\"style\",\"display: flex; flex-direction: column\"],[8],[0,\"\\n\"],[4,\"if\",[[23,1,[\"isUploading\"]]],null,{\"statements\":[[0,\"                        \"],[1,[23,1,[\"progressBar\"]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                        \"],[7,\"button\",true],[11,\"class\",[29,[\"gh-btn gh-btn-icon \",[28,\"if\",[[23,0,[\"routesSuccess\"]],\"gh-btn-green\"],null],\" \",[28,\"if\",[[23,0,[\"routesFailure\"]],\"gh-btn-red\"],null]]]],[11,\"onclick\",[28,\"action\",[[23,0,[]],\"triggerFileDialog\"],null]],[10,\"data-test-button\",\"upload-routes\"],[10,\"type\",\"button\"],[8],[0,\"\\n                            \"],[7,\"span\",true],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"routesSuccess\"]]],null,{\"statements\":[[0,\"                                    \"],[1,[28,\"svg-jar\",[\"check-circle\"],null],false],[0,\" Uploaded\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"if\",[[23,0,[\"routesFailure\"]]],null,{\"statements\":[[0,\"                                    \"],[1,[28,\"svg-jar\",[\"retry\"],null],false],[0,\" Upload Failed\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                    Upload routes YAML\\n                                \"]],\"parameters\":[]}]],\"parameters\":[]}],[0,\"                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                        \"],[7,\"span\",true],[8],[7,\"a\",false],[12,\"href\",\"#\"],[12,\"data-test-link\",\"download-routes\"],[3,\"action\",[[23,0,[]],\"downloadFile\",\"settings/routes/yaml\"]],[8],[0,\"Download current routes.yaml\"],[9],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n                    \"],[7,\"div\",true],[10,\"style\",\"display:none\"],[8],[0,\"\\n                        \"],[5,\"gh-file-input\",[[12,\"data-test-file-input\",\"routes\"]],[[\"@multiple\",\"@action\",\"@accept\"],[false,[23,1,[\"setFiles\"]],[23,0,[\"yamlMimeType\"]]]]],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"]],\"parameters\":[1]}],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[7,\"div\",true],[10,\"class\",\"gh-setting-header\"],[8],[0,\"Testing tools\"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"flex flex-column br3 shadow-1 bg-grouped-table pa5 mt2\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-setting-first gh-setting-last\"],[8],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-content\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-title\"],[8],[0,\"Test email configuration\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-setting-desc\"],[8],[0,\"Send yourself a test email to make sure everything is working\"],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[7,\"div\",true],[10,\"class\",\"gh-setting-action\"],[8],[0,\"\\n                    \"],[5,\"gh-task-button\",[],[[\"@buttonText\",\"@successText\",\"@task\",\"@class\"],[\"Send\",\"Sent\",[23,0,[\"sendTestEmail\"]],\"gh-btn gh-btn-hover-blue gh-btn-icon\"]]],[0,\"\\n                \"],[9],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"showDeleteAllModal\"]]],null,{\"statements\":[[0,\"    \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@close\",\"@modifier\"],[\"delete-all\",[28,\"action\",[[23,0,[]],\"toggleDeleteAllModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/settings/labs.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/setup", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "Mslhiy8i",
    "block": "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"class\",\"gh-flow\"],[8],[0,\"\\n    \"],[7,\"header\",true],[10,\"class\",\"gh-flow-head\"],[8],[0,\"\\n        \"],[7,\"nav\",true],[10,\"class\",\"gh-flow-nav\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showBackLink\"]]],null,{\"statements\":[[0,\"                \"],[5,\"link-to\",[],[[\"@route\",\"@classNames\"],[[23,0,[\"backRoute\"]],\"gh-flow-back\"]],{\"statements\":[[1,[28,\"svg-jar\",[\"arrow-left-small\"],null],false],[0,\" Back\"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"            \"],[7,\"ol\",true],[8],[0,\"\\n                \"],[5,\"gh-activating-list-item\",[],[[\"@route\",\"@linkClasses\"],[\"setup.one\",\"step\"]],{\"statements\":[[0,\"\\n                    \"],[1,[28,\"svg-jar\",[\"check-circle\"],null],false],[7,\"span\",true],[10,\"class\",\"num\"],[8],[0,\"1\"],[9],[0,\"\\n                \"]],\"parameters\":[]}],[0,\"\\n                \"],[7,\"li\",true],[10,\"class\",\"divider\"],[8],[9],[0,\"\\n                \"],[5,\"gh-activating-list-item\",[],[[\"@route\",\"@linkClasses\"],[\"setup.two\",\"step\"]],{\"statements\":[[0,\"\\n                    \"],[1,[28,\"svg-jar\",[\"check-circle\"],null],false],[7,\"span\",true],[10,\"class\",\"num\"],[8],[0,\"2\"],[9],[0,\"\\n                \"]],\"parameters\":[]}],[0,\"\\n                \"],[7,\"li\",true],[10,\"class\",\"divider\"],[8],[9],[0,\"\\n                \"],[5,\"gh-activating-list-item\",[],[[\"@route\",\"@linkClasses\"],[\"setup.three\",\"step\"]],{\"statements\":[[0,\"\\n                    \"],[1,[28,\"svg-jar\",[\"check-circle\"],null],false],[7,\"span\",true],[10,\"class\",\"num\"],[8],[0,\"3\"],[9],[0,\"\\n                \"]],\"parameters\":[]}],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-flow-content-wrap\"],[8],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"gh-flow-content\"],[8],[0,\"\\n            \"],[1,[22,\"outlet\"],false],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/setup.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/setup/one", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "Jw2XEiAI",
    "block": "{\"symbols\":[],\"statements\":[[7,\"header\",true],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[0,\"Welcome to \"],[7,\"strong\",true],[8],[0,\"Ghost\"],[9],[0,\"!\"],[9],[0,\"\\n    \"],[7,\"p\",true],[8],[0,\"All over the world, people have started \"],[7,\"em\",true],[8],[0,\"2,000,000+\"],[9],[0,\" incredible sites with Ghost. Today, we’re starting yours.\"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"figure\",true],[10,\"class\",\"gh-flow-screenshot\"],[8],[0,\"\\n    \"],[7,\"img\",true],[10,\"src\",\"assets/img/install-welcome.png\"],[10,\"alt\",\"Ghost screenshot\"],[8],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[5,\"link-to\",[],[[\"@route\",\"@classNames\"],[\"setup.two\",\"gh-btn gh-btn-green gh-btn-lg gh-btn-icon gh-btn-icon-right\"]],{\"statements\":[[0,\"\\n    \"],[7,\"span\",true],[8],[0,\"Create your account \"],[1,[28,\"svg-jar\",[\"arrow-right-small\"],null],false],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/setup/one.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/setup/three", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "Smyr4RVc",
    "block": "{\"symbols\":[\"task\"],\"statements\":[[7,\"header\",true],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[0,\"Invite staff users\"],[9],[0,\"\\n    \"],[7,\"p\",true],[8],[0,\"Ghost works best when shared with others. Collaborate, get feedback on your posts & work together on ideas.\"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"div\",true],[8],[7,\"img\",true],[10,\"class\",\"gh-flow-faces\"],[10,\"src\",\"assets/img/users.png\"],[10,\"alt\",\"\"],[8],[9],[9],[0,\"\\n\\n\"],[7,\"form\",false],[12,\"class\",\"gh-flow-invite\"],[3,\"action\",[[23,0,[]],\"invite\"],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n    \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"errors\"]],[23,0,[\"hasValidated\"]],\"users\"]],{\"statements\":[[0,\"\\n        \"],[7,\"label\",true],[10,\"for\",\"users\"],[8],[0,\"Enter one email address per line, we’ll handle the rest! \"],[1,[28,\"svg-jar\",[\"email\"],null],false],[9],[0,\"\\n        \"],[5,\"gh-textarea\",[],[[\"@name\",\"@required\",\"@value\",\"@input\",\"@focus-out\"],[\"users\",\"required\",[28,\"readonly\",[[23,0,[\"users\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"users\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"validate\"],null]]]],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n    \"],[5,\"gh-task-button\",[],[[\"@task\",\"@type\",\"@class\",\"@successClass\",\"@failureClass\"],[[23,0,[\"invite\"]],\"submit\",[29,[\"gh-btn gh-btn-default gh-btn-lg gh-btn-block \",[23,0,[\"buttonClass\"]]]],\"\",\"\"]],{\"statements\":[[0,\"\\n        \"],[7,\"span\",true],[8],[0,\"\\n\"],[4,\"if\",[[23,1,[\"isRunning\"]]],null,{\"statements\":[[0,\"                \"],[1,[28,\"svg-jar\",[\"spinner\"],[[\"class\"],[\"no-margin\"]]],false],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                \"],[1,[23,0,[\"buttonText\"]],false],[0,\"\\n\"]],\"parameters\":[]}],[0,\"        \"],[9],[0,\"\\n    \"]],\"parameters\":[1]}],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"button\",false],[12,\"class\",\"gh-flow-skip\"],[3,\"action\",[[23,0,[]],\"skipInvite\"]],[8],[0,\"\\n    I'll do this later, take me to my site!\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/setup/three.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/setup/two", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "YWqmvP6e",
    "block": "{\"symbols\":[\"task\"],\"statements\":[[7,\"header\",true],[8],[0,\"\\n    \"],[7,\"h1\",true],[8],[0,\"Create your account\"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"form\",true],[10,\"id\",\"setup\"],[10,\"class\",\"gh-flow-create\"],[8],[0,\"\\n    \"],[5,\"gh-profile-image\",[],[[\"@email\",\"@setImage\"],[[23,0,[\"email\"]],[28,\"action\",[[23,0,[]],\"setImage\"],null]]]],[0,\"\\n\\n    \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"errors\"]],[23,0,[\"hasValidated\"]],\"blogTitle\"]],{\"statements\":[[0,\"\\n        \"],[7,\"label\",true],[10,\"for\",\"blog-title\"],[8],[0,\"Site title\"],[9],[0,\"\\n        \"],[7,\"span\",true],[10,\"class\",\"gh-input-icon gh-icon-content\"],[8],[0,\"\\n            \"],[1,[28,\"svg-jar\",[\"content\"],null],false],[0,\"\\n            \"],[5,\"gh-trim-focus-input\",[[12,\"data-test-blog-title-input\",true]],[[\"@tabindex\",\"@type\",\"@id\",\"@name\",\"@placeholder\",\"@autocorrect\",\"@value\",\"@input\",\"@focus-out\"],[\"1\",\"text\",\"blog-title\",\"blog-title\",\"Eg. The Daily Awesome\",\"off\",[28,\"readonly\",[[23,0,[\"blogTitle\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"blogTitle\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"preValidate\",\"blogTitle\"],null]]]],[0,\"\\n        \"],[9],[0,\"\\n        \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"errors\"]],\"blogTitle\"]]],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n    \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"errors\"]],[23,0,[\"hasValidated\"]],\"name\"]],{\"statements\":[[0,\"\\n        \"],[7,\"label\",true],[10,\"for\",\"name\"],[8],[0,\"Full name\"],[9],[0,\"\\n        \"],[7,\"span\",true],[10,\"class\",\"gh-input-icon gh-icon-user\"],[8],[0,\"\\n            \"],[1,[28,\"svg-jar\",[\"user-circle\"],null],false],[0,\"\\n            \"],[5,\"gh-text-input\",[[12,\"data-test-name-input\",true]],[[\"@tabindex\",\"@id\",\"@name\",\"@placeholder\",\"@autocorrect\",\"@autocomplete\",\"@value\",\"@input\",\"@focus-out\"],[\"2\",\"name\",\"name\",\"Eg. John H. Watson\",\"off\",\"name\",[28,\"readonly\",[[23,0,[\"name\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"name\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"preValidate\",\"name\"],null]]]],[0,\"\\n        \"],[9],[0,\"\\n        \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"errors\"]],\"name\"]]],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n    \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"errors\"]],[23,0,[\"hasValidated\"]],\"email\"]],{\"statements\":[[0,\"\\n        \"],[7,\"label\",true],[10,\"for\",\"email\"],[8],[0,\"Email address\"],[9],[0,\"\\n        \"],[7,\"span\",true],[10,\"class\",\"gh-input-icon gh-icon-mail\"],[8],[0,\"\\n            \"],[1,[28,\"svg-jar\",[\"email\"],null],false],[0,\"\\n            \"],[5,\"gh-text-input\",[[12,\"data-test-email-input\",true]],[[\"@tabindex\",\"@type\",\"@id\",\"@name\",\"@placeholder\",\"@autocorrect\",\"@autocomplete\",\"@value\",\"@input\",\"@focus-out\"],[\"3\",\"email\",\"email\",\"email\",\"Eg. john@example.com\",\"off\",\"username email\",[28,\"readonly\",[[23,0,[\"email\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"email\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"preValidate\",\"email\"],null]]]],[0,\"\\n        \"],[9],[0,\"\\n        \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"errors\"]],\"email\"]]],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n    \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"errors\"]],[23,0,[\"hasValidated\"]],\"password\"]],{\"statements\":[[0,\"\\n        \"],[7,\"label\",true],[10,\"for\",\"password\"],[8],[0,\"Password\"],[9],[0,\"\\n        \"],[7,\"span\",true],[10,\"class\",\"gh-input-icon gh-icon-lock\"],[8],[0,\"\\n            \"],[1,[28,\"svg-jar\",[\"lock\"],null],false],[0,\"\\n            \"],[5,\"gh-text-input\",[[12,\"data-test-password-input\",true]],[[\"@tabindex\",\"@type\",\"@id\",\"@name\",\"@placeholder\",\"@autocorrect\",\"@autocomplete\",\"@value\",\"@input\",\"@focus-out\"],[\"4\",\"password\",\"password\",\"password\",\"At least 10 characters\",\"off\",\"new-password\",[28,\"readonly\",[[23,0,[\"password\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"password\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"preValidate\",\"password\"],null]]]],[0,\"\\n        \"],[9],[0,\"\\n        \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"errors\"]],\"password\"]]],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n    \"],[5,\"gh-task-button\",[],[[\"@task\",\"@type\",\"@tabindex\",\"@class\"],[[23,0,[\"setup\"]],\"submit\",\"5\",\"gh-btn gh-btn-green gh-btn-lg gh-btn-block gh-btn-icon\"]],{\"statements\":[[0,\"\\n\"],[4,\"if\",[[23,1,[\"isRunning\"]]],null,{\"statements\":[[0,\"            \"],[7,\"span\",true],[8],[1,[28,\"svg-jar\",[\"spinner\"],[[\"class\"],[\"gh-icon-spinner gh-btn-icon-no-margin\"]]],false],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"            \"],[7,\"span\",true],[8],[0,\"Last step: Invite staff users \"],[1,[28,\"svg-jar\",[\"arrow-right-small\"],[[\"class\"],[\"gh-btn-icon-right\"]]],false],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"    \"]],\"parameters\":[1]}],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[7,\"p\",true],[10,\"class\",\"main-error\"],[8],[1,[23,0,[\"flowErrors\"]],false],[0,\" \"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/setup/two.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/signin", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "rbM2Inj2",
    "block": "{\"symbols\":[\"task\"],\"statements\":[[7,\"div\",true],[10,\"class\",\"gh-flow\"],[8],[0,\"\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-flow-content-wrap\"],[8],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"gh-flow-content\"],[8],[0,\"\\n            \"],[7,\"form\",false],[12,\"id\",\"login\"],[12,\"method\",\"post\"],[12,\"class\",\"gh-signin\"],[12,\"novalidate\",\"novalidate\"],[3,\"action\",[[23,0,[]],\"authenticate\"],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"signin\",\"errors\"]],[23,0,[\"hasValidated\"]],\"identification\"]],{\"statements\":[[0,\"\\n                    \"],[7,\"span\",true],[10,\"class\",\"gh-input-icon gh-icon-mail\"],[8],[0,\"\\n                        \"],[1,[28,\"svg-jar\",[\"email\"],null],false],[0,\"\\n                        \"],[5,\"gh-trim-focus-input\",[],[[\"@class\",\"@type\",\"@placeholder\",\"@name\",\"@autocapitalize\",\"@autocorrect\",\"@autocomplete\",\"@tabindex\",\"@value\",\"@input\",\"@focus-out\"],[\"email\",\"email\",\"Email Address\",\"identification\",\"off\",\"off\",\"username\",\"1\",[28,\"readonly\",[[23,0,[\"signin\",\"identification\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"signin\",\"identification\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"validate\",\"identification\"],null]]]],[0,\"\\n                    \"],[9],[0,\"\\n                \"]],\"parameters\":[]}],[0,\"\\n                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"signin\",\"errors\"]],[23,0,[\"hasValidated\"]],\"password\"]],{\"statements\":[[0,\"\\n                    \"],[7,\"span\",true],[10,\"class\",\"gh-input-icon gh-icon-lock forgotten-wrap\"],[8],[0,\"\\n                        \"],[1,[28,\"svg-jar\",[\"lock\"],null],false],[0,\"\\n                        \"],[5,\"gh-text-input\",[],[[\"@class\",\"@type\",\"@placeholder\",\"@name\",\"@tabindex\",\"@autocomplete\",\"@autocorrect\",\"@value\",\"@input\"],[\"password\",\"password\",\"Password\",\"password\",\"2\",\"current-password\",\"off\",[28,\"readonly\",[[23,0,[\"signin\",\"password\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"signin\",\"password\"]]],null]],[[\"value\"],[\"target.value\"]]]]]],[0,\"\\n\\n                        \"],[5,\"gh-task-button\",[],[[\"@task\",\"@class\",\"@tabindex\",\"@type\",\"@successClass\",\"@failureClass\"],[[23,0,[\"forgotten\"]],\"forgotten-link gh-btn gh-btn-link gh-btn-icon\",\"4\",\"button\",\"\",\"\"]],{\"statements\":[[0,\"\\n                            \"],[7,\"span\",true],[8],[4,\"if\",[[23,1,[\"isRunning\"]]],null,{\"statements\":[[1,[28,\"svg-jar\",[\"spinner\"],[[\"class\"],[\"gh-spinner\"]]],false]],\"parameters\":[]},{\"statements\":[[0,\"Forgot?\"]],\"parameters\":[]}],[9],[0,\"\\n                        \"]],\"parameters\":[1]}],[0,\"\\n                    \"],[9],[0,\"\\n                \"]],\"parameters\":[]}],[0,\"\\n\\n                \"],[5,\"gh-task-button\",[],[[\"@buttonText\",\"@task\",\"@showSuccess\",\"@class\",\"@type\",\"@tabindex\"],[\"Sign in\",[23,0,[\"validateAndAuthenticate\"]],false,\"login gh-btn gh-btn-blue gh-btn-block gh-btn-icon\",\"submit\",\"3\"]]],[0,\"\\n            \"],[9],[0,\"\\n\\n            \"],[7,\"p\",true],[10,\"class\",\"main-error\"],[8],[1,[28,\"if\",[[23,0,[\"flowErrors\"]],[23,0,[\"flowErrors\"]]],null],false],[0,\" \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/signin.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/signup", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "GMAOolyD",
    "block": "{\"symbols\":[],\"statements\":[[7,\"div\",true],[10,\"class\",\"gh-flow\"],[8],[0,\"\\n\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-flow-content-wrap\"],[8],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"gh-flow-content\"],[8],[0,\"\\n            \"],[7,\"header\",true],[8],[0,\"\\n                \"],[7,\"h1\",true],[8],[0,\"Create your account\"],[9],[0,\"\\n            \"],[9],[0,\"\\n\\n            \"],[7,\"form\",true],[10,\"id\",\"signup\"],[10,\"class\",\"gh-flow-create\"],[10,\"method\",\"post\"],[10,\"novalidate\",\"novalidate\"],[11,\"onsubmit\",[28,\"action\",[[23,0,[]],\"submit\"],null]],[8],[0,\"\\n                \"],[5,\"gh-profile-image\",[],[[\"@email\",\"@setImage\"],[[23,0,[\"signupDetails\",\"email\"]],[28,\"action\",[[23,0,[]],\"setImage\"],null]]]],[0,\"\\n\\n                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"signupDetails\",\"errors\"]],[23,0,[\"signupDetails\",\"hasValidated\"]],\"name\"]],{\"statements\":[[0,\"\\n                    \"],[7,\"label\",true],[10,\"for\",\"name\"],[8],[0,\"Full name\"],[9],[0,\"\\n                    \"],[7,\"span\",true],[10,\"class\",\"gh-input-icon gh-icon-user\"],[8],[0,\"\\n                        \"],[1,[28,\"svg-jar\",[\"user-circle\"],null],false],[0,\"\\n                        \"],[5,\"gh-trim-focus-input\",[[12,\"data-test-input\",\"name\"]],[[\"@tabindex\",\"@type\",\"@id\",\"@name\",\"@placeholder\",\"@autocorrect\",\"@autocomplete\",\"@value\",\"@input\",\"@focus-out\"],[\"1\",\"text\",\"display-name\",\"display-name\",\"Eg. John H. Watson\",\"off\",\"name\",[28,\"readonly\",[[23,0,[\"signupDetails\",\"name\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"signupDetails\",\"name\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"validate\",\"name\"],null]]]],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"signupDetails\",\"errors\"]],\"name\"]]],[0,\"\\n                \"]],\"parameters\":[]}],[0,\"\\n\\n                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"signupDetails\",\"errors\"]],[23,0,[\"signupDetails\",\"hasValidated\"]],\"email\"]],{\"statements\":[[0,\"\\n                    \"],[7,\"label\",true],[10,\"for\",\"email\"],[8],[0,\"Email address\"],[9],[0,\"\\n                    \"],[7,\"span\",true],[10,\"class\",\"gh-input-icon gh-icon-mail\"],[8],[0,\"\\n                        \"],[1,[28,\"svg-jar\",[\"email\"],null],false],[0,\"\\n                        \"],[5,\"gh-text-input\",[[12,\"data-test-input\",\"email\"]],[[\"@tabindex\",\"@type\",\"@id\",\"@name\",\"@placeholder\",\"@autocorrect\",\"@autocomplete\",\"@value\",\"@input\",\"@focus-out\"],[\"2\",\"text\",\"username\",\"username\",\"Eg. john@example.com\",\"off\",\"username email\",[28,\"readonly\",[[23,0,[\"signupDetails\",\"email\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"signupDetails\",\"email\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"validate\",\"email\"],null]]]],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"signupDetails\",\"errors\"]],\"email\"]]],[0,\"\\n                \"]],\"parameters\":[]}],[0,\"\\n\\n                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"signupDetails\",\"errors\"]],[23,0,[\"signupDetails\",\"hasValidated\"]],\"password\"]],{\"statements\":[[0,\"\\n                    \"],[7,\"label\",true],[10,\"for\",\"password\"],[8],[0,\"Password\"],[9],[0,\"\\n                    \"],[7,\"span\",true],[10,\"class\",\"gh-input-icon gh-icon-lock\"],[8],[0,\"\\n                        \"],[1,[28,\"svg-jar\",[\"lock\"],null],false],[0,\"\\n                        \"],[5,\"gh-text-input\",[[12,\"data-test-input\",\"password\"]],[[\"@tabindex\",\"@type\",\"@id\",\"@name\",\"@placeholder\",\"@autocorrect\",\"@autocomplete\",\"@value\",\"@input\",\"@focus-out\"],[\"3\",\"password\",\"password\",\"password\",\"At least 10 characters\",\"off\",\"new-password\",[28,\"readonly\",[[23,0,[\"signupDetails\",\"password\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"signupDetails\",\"password\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"validate\",\"password\"],null]]]],[0,\"\\n                    \"],[9],[0,\"\\n                    \"],[5,\"gh-error-message\",[],[[\"@errors\",\"@property\"],[[23,0,[\"signupDetails\",\"errors\"]],\"password\"]]],[0,\"\\n                \"]],\"parameters\":[]}],[0,\"\\n\\n                \"],[5,\"gh-task-button\",[],[[\"@buttonText\",\"@type\",\"@form\",\"@defaultClick\",\"@runningText\",\"@task\",\"@class\",\"@tabindex\"],[\"Create Account\",\"submit\",\"signup\",true,\"Creating\",[23,0,[\"signup\"]],\"gh-btn-create-account gh-btn gh-btn-green gh-btn-lg gh-btn-block gh-btn-icon\",\"3\"]]],[0,\"\\n            \"],[9],[0,\"\\n\\n            \"],[7,\"p\",true],[10,\"class\",\"main-error\"],[8],[1,[28,\"if\",[[23,0,[\"flowErrors\"]],[23,0,[\"flowErrors\"]]],null],false],[0,\" \"],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/signup.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/site", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "vf8ZWCdc",
    "block": "{\"symbols\":[],\"statements\":[[5,\"gh-site-iframe\",[],[[\"@guid\"],[[23,0,[\"guid\"]]]],{\"statements\":[],\"parameters\":[]}]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/site.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/staff/index", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "+7zMsV+f",
    "block": "{\"symbols\":[\"user\",\"component\",\"user\",\"component\",\"component\",\"invite\",\"component\"],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[5,\"gh-canvas-header\",[[12,\"class\",\"gh-canvas-header\"]],[[],[]],{\"statements\":[[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"Staff users\"],[9],[0,\"\\n\"],[4,\"unless\",[[23,0,[\"currentUser\",\"isAuthorOrContributor\"]]],null,{\"statements\":[[0,\"            \"],[7,\"section\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n                \"],[7,\"button\",false],[12,\"class\",\"gh-btn gh-btn-green\"],[3,\"action\",[[23,0,[]],\"toggleInviteUserModal\"]],[8],[7,\"span\",true],[8],[0,\"Invite people\"],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"    \"]],\"parameters\":[]}],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"showInviteUserModal\"]]],null,{\"statements\":[[0,\"        \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@close\",\"@modifier\"],[\"invite-new-user\",[28,\"action\",[[23,0,[]],\"toggleInviteUserModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n    \"],[7,\"section\",true],[10,\"class\",\"view-container gh-team\"],[8],[0,\"\\n\"],[4,\"unless\",[[23,0,[\"currentUser\",\"isAuthorOrContributor\"]]],null,{\"statements\":[[4,\"if\",[[23,0,[\"invites\"]]],null,{\"statements\":[[0,\"        \"],[7,\"section\",true],[10,\"class\",\"apps-grid-container gh-invited-users apps-first-header\"],[10,\"data-test-invited-users\",\"\"],[8],[0,\"\\n            \"],[7,\"span\",true],[10,\"class\",\"apps-grid-title\"],[8],[0,\"Invited users\"],[9],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"apps-grid\"],[8],[0,\"\\n\\n\"],[4,\"each\",[[23,0,[\"sortedInvites\"]]],null,{\"statements\":[[0,\"                    \"],[5,\"gh-user-invited\",[],[[\"@invite\",\"@reload\"],[[23,6,[]],[28,\"route-action\",[\"reload\"],null]]],{\"statements\":[[0,\"\\n                        \"],[7,\"div\",true],[10,\"class\",\"apps-grid-cell\"],[11,\"data-test-invite-id\",[29,[[23,6,[\"id\"]]]]],[8],[0,\"\\n                            \"],[7,\"article\",true],[10,\"class\",\"apps-card-app\"],[8],[0,\"\\n                                \"],[7,\"div\",true],[10,\"class\",\"apps-card-left\"],[8],[0,\"\\n                                    \"],[7,\"span\",true],[10,\"class\",\"user-list-item-icon\"],[8],[1,[28,\"svg-jar\",[\"email\"],null],false],[0,\"ic\"],[9],[0,\"\\n                                    \"],[7,\"div\",true],[10,\"class\",\"apps-card-meta\"],[8],[0,\"\\n                                        \"],[7,\"h3\",true],[10,\"class\",\"apps-card-app-title\"],[10,\"data-test-email\",\"\"],[8],[1,[23,6,[\"email\"]],false],[9],[0,\"\\n                                        \"],[7,\"p\",true],[10,\"class\",\"apps-card-app-desc\"],[8],[0,\"\\n\"],[4,\"if\",[[23,6,[\"pending\"]]],null,{\"statements\":[[0,\"                                                \"],[7,\"span\",true],[10,\"class\",\"description-error\"],[8],[0,\"\\n                                                    Invitation not sent - please try again\\n                                                \"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                                \"],[7,\"span\",true],[10,\"class\",\"description\"],[10,\"data-test-invite-description\",\"\"],[8],[0,\"\\n                                                    Invitation sent: \"],[1,[23,7,[\"createdAt\"]],false],[0,\",\\n                                                    \"],[1,[28,\"if\",[[23,7,[\"isExpired\"]],\"expired\",\"expires\"],null],false],[0,\" \"],[1,[23,7,[\"expiresAt\"]],false],[0,\"\\n                                                \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                                        \"],[9],[0,\"\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                                \"],[7,\"div\",true],[10,\"class\",\"apps-card-right\"],[8],[0,\"\\n                                    \"],[7,\"div\",true],[10,\"class\",\"apps-configured\"],[8],[0,\"\\n\"],[4,\"if\",[[23,7,[\"isSending\"]]],null,{\"statements\":[[0,\"                                            \"],[7,\"span\",true],[8],[0,\"Sending Invite...\"],[9],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                            \"],[7,\"a\",false],[12,\"class\",\"apps-configured-action red-hover\"],[12,\"href\",\"#revoke\"],[12,\"data-test-revoke-button\",\"\"],[3,\"action\",[[23,0,[]],\"revoke\"],[[\"target\"],[[23,7,[]]]]],[8],[0,\"\\n                                                Revoke\\n                                            \"],[9],[0,\"\\n                                            \"],[7,\"a\",false],[12,\"class\",\"apps-configured-action green-hover\"],[12,\"href\",\"#resend\"],[12,\"data-test-resend-button\",\"\"],[3,\"action\",[[23,0,[]],\"resend\"],[[\"target\"],[[23,7,[]]]]],[8],[0,\"\\n                                                Resend\\n                                            \"],[9],[0,\"\\n\\n                                            \"],[7,\"span\",true],[11,\"class\",[29,[\"apps-configured-action gh-badge \",[23,6,[\"role\",\"lowerCaseName\"]]]]],[10,\"data-test-role-name\",\"\"],[8],[1,[23,6,[\"role\",\"name\"]],false],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"]],\"parameters\":[7]}],[0,\"\\n\"]],\"parameters\":[6]},null],[0,\"\\n            \"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"\\n    \"],[7,\"section\",true],[11,\"class\",[29,[\"apps-grid-container gh-active-users \",[28,\"unless\",[[23,0,[\"invites\"]],\"apps-first-header\"],null]]]],[10,\"data-test-active-users\",\"\"],[8],[0,\"\\n        \"],[7,\"span\",true],[10,\"class\",\"apps-grid-title\"],[8],[0,\"Active users\"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"apps-grid\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"currentUser\",\"isAuthorOrContributor\"]]],null,{\"statements\":[[0,\"                \"],[5,\"gh-user-active\",[],[[\"@user\"],[[23,0,[\"currentUser\"]]]],{\"statements\":[[0,\"\\n                    \"],[5,\"gh-user-list-item\",[],[[\"@user\",\"@component\"],[[23,0,[\"currentUser\"]],[23,5,[]]]]],[0,\"\\n                \"]],\"parameters\":[5]}],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[4,\"vertical-collection\",[[23,0,[\"sortedActiveUsers\"]]],[[\"key\",\"containerSelector\",\"estimateHeight\"],[\"id\",\".gh-main\",75]],{\"statements\":[[0,\"                    \"],[5,\"gh-user-active\",[],[[\"@user\"],[[23,3,[]]]],{\"statements\":[[0,\"\\n                        \"],[5,\"gh-user-list-item\",[],[[\"@user\",\"@component\"],[[23,3,[]],[23,4,[]]]]],[0,\"\\n                    \"]],\"parameters\":[4]}],[0,\"\\n\"]],\"parameters\":[3]},null]],\"parameters\":[]}],[0,\"        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[28,\"and\",[[23,0,[\"suspendedUsers\"]],[28,\"not\",[[23,0,[\"currentUser\",\"isAuthorOrContributor\"]]],null]],null]],null,{\"statements\":[[0,\"    \"],[7,\"section\",true],[10,\"class\",\"apps-grid-container gh-active-users\"],[10,\"data-test-suspended-users\",\"\"],[8],[0,\"\\n        \"],[7,\"span\",true],[10,\"class\",\"apps-grid-title\"],[8],[0,\"Suspended users\"],[9],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"apps-grid\"],[8],[0,\"\\n\"],[4,\"each\",[[23,0,[\"sortedSuspendedUsers\"]]],[[\"key\"],[\"id\"]],{\"statements\":[[0,\"                \"],[5,\"gh-user-active\",[],[[\"@user\"],[[23,1,[]]]],{\"statements\":[[0,\"\\n                    \"],[5,\"gh-user-list-item\",[],[[\"@user\",\"@component\"],[[23,1,[]],[23,2,[]]]]],[0,\"\\n                \"]],\"parameters\":[2]}],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/staff/index.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/staff/user-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "GxE4oAu7",
    "block": "{\"symbols\":[],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[7,\"header\",true],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            \"],[5,\"link-to\",[[12,\"data-test-staff-link\",true]],[[\"@route\"],[\"staff\"]],{\"statements\":[[0,\"Staff\"]],\"parameters\":[]}],[0,\"\\n            \"],[7,\"span\",true],[8],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[9],[0,\"\\n            \"],[1,[24,[\"user\",\"name\"]],false],[0,\"\\n        \"],[9],[0,\"\\n\\n        \"],[7,\"section\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-btn gh-btn-blue\"],[8],[7,\"span\",true],[8],[0,\"Save\"],[9],[9],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[5,\"gh-loading-spinner\",[],[[],[]]],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/staff/user-loading.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/staff/user", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "ufGAkxig",
    "block": "{\"symbols\":[],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[5,\"gh-canvas-header\",[[12,\"class\",\"gh-canvas-header\"]],[[],[]],{\"statements\":[[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n            \"],[5,\"link-to\",[[12,\"data-test-staff-link\",true]],[[\"@route\"],[\"staff\"]],{\"statements\":[[0,\"Staff\"]],\"parameters\":[]}],[0,\"\\n            \"],[7,\"span\",true],[8],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[9],[0,\"\\n            \"],[1,[23,0,[\"user\",\"name\"]],false],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"user\",\"isSuspended\"]]],null,{\"statements\":[[0,\"            \"],[7,\"span\",true],[10,\"class\",\"gh-badge suspended\"],[10,\"data-test-suspended-badge\",\"\"],[8],[0,\"Suspended\"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"showLeaveSettingsModal\"]]],null,{\"statements\":[[0,\"            \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[28,\"action\",[[23,0,[]],\"leaveSettings\"],null],[28,\"action\",[[23,0,[]],\"toggleLeaveSettingsModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"userActionsAreVisible\"]]],null,{\"statements\":[[0,\"                \"],[7,\"span\",true],[10,\"class\",\"dropdown\"],[8],[0,\"\\n                    \"],[5,\"gh-dropdown-button\",[[12,\"data-test-user-actions\",true]],[[\"@dropdownName\",\"@classNames\",\"@title\"],[\"user-actions-menu\",\"gh-btn gh-btn-white gh-btn-icon only-has-icon user-actions-cog\",\"User Actions\"]],{\"statements\":[[0,\"\\n                        \"],[7,\"span\",true],[8],[0,\"\\n                            \"],[1,[28,\"svg-jar\",[\"settings\"],null],false],[0,\"\\n                            \"],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[0,\"User Settings\"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"]],\"parameters\":[]}],[0,\"\\n                    \"],[5,\"gh-dropdown\",[],[[\"@name\",\"@tagName\",\"@classNames\"],[\"user-actions-menu\",\"ul\",\"user-actions-menu dropdown-menu dropdown-align-right\"]],{\"statements\":[[0,\"\\n\"],[4,\"if\",[[23,0,[\"canMakeOwner\"]]],null,{\"statements\":[[0,\"                            \"],[7,\"li\",true],[8],[0,\"\\n                                \"],[7,\"button\",false],[3,\"action\",[[23,0,[]],\"toggleTransferOwnerModal\"]],[8],[0,\"\\n                                    Make Owner\\n                                \"],[9],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showTransferOwnerModal\"]]],null,{\"statements\":[[0,\"                                    \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"transfer-owner\",[28,\"action\",[[23,0,[]],\"transferOwnership\"],null],[28,\"action\",[[23,0,[]],\"toggleTransferOwnerModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"if\",[[23,0,[\"deleteUserActionIsVisible\"]]],null,{\"statements\":[[0,\"                            \"],[7,\"li\",true],[8],[0,\"\\n                                \"],[7,\"button\",false],[12,\"class\",\"delete\"],[12,\"data-test-delete-button\",\"\"],[3,\"action\",[[23,0,[]],\"toggleDeleteUserModal\"]],[8],[0,\"\\n                                    Delete User\\n                                \"],[9],[0,\"\\n                            \"],[9],[0,\"\\n\"],[4,\"if\",[[23,0,[\"user\",\"isActive\"]]],null,{\"statements\":[[0,\"                                \"],[7,\"li\",true],[8],[0,\"\\n                                    \"],[7,\"button\",false],[12,\"class\",\"suspend\"],[12,\"data-test-suspend-button\",\"\"],[3,\"action\",[[23,0,[]],\"toggleSuspendUserModal\"]],[8],[0,\"\\n                                        Suspend User\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[4,\"if\",[[23,0,[\"user\",\"isSuspended\"]]],null,{\"statements\":[[0,\"                                \"],[7,\"li\",true],[8],[0,\"\\n                                    \"],[7,\"button\",false],[12,\"class\",\"unsuspend\"],[12,\"data-test-unsuspend-button\",\"\"],[3,\"action\",[[23,0,[]],\"toggleUnsuspendUserModal\"]],[8],[0,\"\\n                                        Un-suspend User\\n                                    \"],[9],[0,\"\\n                                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null]],\"parameters\":[]},null],[0,\"                    \"]],\"parameters\":[]}],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n            \"],[5,\"gh-task-button\",[[12,\"data-test-save-button\",true]],[[\"@class\",\"@task\"],[\"gh-btn gh-btn-blue gh-btn-icon\",[23,0,[\"save\"]]]]],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"showDeleteUserModal\"]]],null,{\"statements\":[[0,\"                \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"delete-user\",[23,0,[\"user\"]],[28,\"action\",[[23,0,[]],[28,\"perform\",[[23,0,[\"deleteUser\"]]],null]],null],[28,\"action\",[[23,0,[]],\"toggleDeleteUserModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showSuspendUserModal\"]]],null,{\"statements\":[[0,\"                \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"suspend-user\",[23,0,[\"user\"]],[28,\"action\",[[23,0,[]],\"suspendUser\"],null],[28,\"action\",[[23,0,[]],\"toggleSuspendUserModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showUnsuspendUserModal\"]]],null,{\"statements\":[[0,\"                \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"unsuspend-user\",[23,0,[\"user\"]],[28,\"action\",[[23,0,[]],\"unsuspendUser\"],null],[28,\"action\",[[23,0,[]],\"toggleUnsuspendUserModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n\"],[0,\"    \"],[7,\"section\",true],[10,\"class\",\"br3 shadow-1 bg-grouped-table\"],[8],[0,\"\\n        \"],[7,\"div\",true],[10,\"class\",\"gm-main view-container settings-user\"],[8],[0,\"\\n            \"],[7,\"form\",false],[12,\"class\",\"user-profile\"],[12,\"novalidate\",\"novalidate\"],[12,\"autocomplete\",\"off\"],[3,\"action\",[[23,0,[]],[28,\"perform\",[[23,0,[\"save\"]]],null]],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n\\n                \"],[7,\"figure\",true],[10,\"class\",\"user-cover\"],[11,\"style\",[28,\"background-image-style\",[[23,0,[\"user\",\"coverImageUrl\"]]],null]],[8],[0,\"\\n                    \"],[7,\"button\",false],[12,\"class\",\"gh-btn gh-btn-default user-cover-edit\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],\"toggleUploadCoverModal\"]],[8],[7,\"span\",true],[8],[0,\"Change Cover\"],[9],[9],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showUploadCoverModal\"]]],null,{\"statements\":[[0,\"                        \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@close\",\"@modifier\"],[\"upload-image\",[28,\"hash\",null,[[\"model\",\"imageProperty\"],[[23,0,[\"user\"]],\"coverImage\"]]],[28,\"action\",[[23,0,[]],\"toggleUploadCoverModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                \"],[9],[0,\"\\n\\n                \"],[7,\"figure\",true],[10,\"class\",\"user-image bg-whitegrey\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"id\",\"user-image\"],[10,\"class\",\"img\"],[11,\"style\",[28,\"background-image-style\",[[23,0,[\"user\",\"profileImageUrl\"]]],null]],[8],[7,\"span\",true],[10,\"class\",\"hidden\"],[8],[1,[23,0,[\"user\",\"name\"]],false],[0,\"\\\"s Picture\"],[9],[9],[0,\"\\n                    \"],[7,\"button\",false],[12,\"class\",\"edit-user-image\"],[12,\"type\",\"button\"],[3,\"action\",[[23,0,[]],\"toggleUploadImageModal\"]],[8],[0,\"Edit Picture\"],[9],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showUploadImageModal\"]]],null,{\"statements\":[[0,\"                        \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@close\",\"@modifier\"],[\"upload-image\",[28,\"hash\",null,[[\"model\",\"imageProperty\",\"paramsHash\"],[[23,0,[\"user\"]],\"profileImage\",[28,\"hash\",null,[[\"purpose\"],[\"profile_image\"]]]]]],[28,\"action\",[[23,0,[]],\"toggleUploadImageModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"                \"],[9],[0,\"\\n\\n                \"],[7,\"div\",true],[10,\"class\",\"pa5\"],[8],[0,\"\\n                    \"],[7,\"fieldset\",true],[10,\"class\",\"user-details-bottom\"],[8],[0,\"\\n\\n                        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\",\"@class\"],[[23,0,[\"user\",\"errors\"]],[23,0,[\"user\",\"hasValidated\"]],\"name\",\"first-form-group\"]],{\"statements\":[[0,\"\\n                            \"],[7,\"label\",true],[10,\"for\",\"user-name\"],[8],[0,\"Full Name\"],[9],[0,\"\\n                            \"],[5,\"gh-text-input\",[[12,\"data-test-name-input\",true]],[[\"@id\",\"@class\",\"@placeholder\",\"@autocorrect\",\"@value\",\"@input\",\"@focus-out\"],[\"user-name\",\"user-name\",\"Full Name\",\"off\",[28,\"readonly\",[[23,0,[\"user\",\"name\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"user\",\"name\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"validate\",\"name\"],[[\"target\"],[[23,0,[\"user\"]]]]]]]],[0,\"\\n\"],[4,\"if\",[[23,0,[\"user\",\"errors\",\"name\"]]],null,{\"statements\":[[0,\"                                \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"user-name\"]],[[\"@errors\",\"@property\"],[[23,0,[\"user\",\"errors\"]],\"name\"]]],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                \"],[7,\"p\",true],[8],[0,\"Use your real name so people can recognise you\"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                        \"]],\"parameters\":[]}],[0,\"\\n\\n                        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"user\",\"errors\"]],[23,0,[\"user\",\"hasValidated\"]],\"slug\"]],{\"statements\":[[0,\"\\n                            \"],[7,\"label\",true],[10,\"for\",\"user-slug\"],[8],[0,\"Slug\"],[9],[0,\"\\n                            \"],[5,\"gh-text-input\",[[12,\"data-test-slug-input\",true]],[[\"@class\",\"@id\",\"@name\",\"@placeholder\",\"@selectOnClick\",\"@autocorrect\",\"@value\",\"@input\",\"@focus-out\"],[\"user-name\",\"user-slug\",\"user\",\"Slug\",\"true\",\"off\",[28,\"readonly\",[[23,0,[\"slugValue\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"slugValue\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],[28,\"perform\",[[23,0,[\"updateSlug\"]],[23,0,[\"slugValue\"]]],null]],null]]]],[0,\"\\n                            \"],[7,\"p\",true],[8],[5,\"gh-blog-url\",[],[[],[]]],[0,\"/author/\"],[1,[23,0,[\"slugValue\"]],false],[9],[0,\"\\n                            \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"user-slug\"]],[[\"@errors\",\"@property\"],[[23,0,[\"user\",\"errors\"]],\"slug\"]]],[0,\"\\n                        \"]],\"parameters\":[]}],[0,\"\\n\\n                        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"user\",\"errors\"]],[23,0,[\"user\",\"hasValidated\"]],\"email\"]],{\"statements\":[[0,\"\\n                            \"],[7,\"label\",true],[10,\"for\",\"user-email\"],[8],[0,\"Email\"],[9],[0,\"\\n\"],[4,\"if\",[[23,0,[\"canChangeEmail\"]]],null,{\"statements\":[[0,\"                                \"],[5,\"gh-text-input\",[[12,\"data-test-email-input\",true]],[[\"@type\",\"@id\",\"@name\",\"@placeholder\",\"@autocapitalize\",\"@autocorrect\",\"@autocomplete\",\"@value\",\"@input\",\"@focus-out\"],[\"email\",\"user-email\",\"email\",\"Email Address\",\"off\",\"off\",\"off\",[28,\"readonly\",[[23,0,[\"user\",\"email\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"user\",\"email\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"validate\",\"email\"],[[\"target\"],[[23,0,[\"user\"]]]]]]]],[0,\"\\n                                \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"user-email\"]],[[\"@errors\",\"@property\"],[[23,0,[\"user\",\"errors\"]],\"email\"]]],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                                \"],[7,\"span\",true],[8],[1,[23,0,[\"user\",\"email\"]],false],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"                            \"],[7,\"p\",true],[8],[0,\"Used for notifications\"],[9],[0,\"\\n                        \"]],\"parameters\":[]}],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"rolesDropdownIsVisible\"]]],null,{\"statements\":[[0,\"                            \"],[7,\"div\",true],[10,\"class\",\"form-group\"],[8],[0,\"\\n                                \"],[7,\"label\",true],[10,\"for\",\"user-role\"],[8],[0,\"Role\"],[9],[0,\"\\n                                \"],[7,\"span\",true],[10,\"class\",\"gh-select\"],[10,\"tabindex\",\"0\"],[8],[0,\"\\n                                    \"],[5,\"one-way-select\",[],[[\"@id\",\"@options\",\"@optionValuePath\",\"@optionLabelPath\",\"@value\",\"@update\"],[\"new-user-role\",[23,0,[\"roles\"]],\"id\",\"name\",[23,0,[\"user\",\"role\"]],[28,\"action\",[[23,0,[]],\"changeRole\"],null]]]],[0,\"\\n                                \"],[9],[0,\"\\n                                \"],[7,\"p\",true],[8],[0,\"What permissions should this user have?\"],[9],[0,\"\\n                            \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n                        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"user\",\"errors\"]],[23,0,[\"user\",\"hasValidated\"]],\"location\"]],{\"statements\":[[0,\"\\n                            \"],[7,\"label\",true],[10,\"for\",\"user-location\"],[8],[0,\"Location\"],[9],[0,\"\\n                            \"],[5,\"gh-text-input\",[[12,\"data-test-location-input\",true]],[[\"@id\",\"@value\",\"@input\",\"@focus-out\"],[\"user-location\",[28,\"readonly\",[[23,0,[\"user\",\"location\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"user\",\"location\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"validate\",\"location\"],[[\"target\"],[[23,0,[\"user\"]]]]]]]],[0,\"\\n                            \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"user-location\"]],[[\"@errors\",\"@property\"],[[23,0,[\"user\",\"errors\"]],\"location\"]]],[0,\"\\n                            \"],[7,\"p\",true],[8],[0,\"Where in the world do you live?\"],[9],[0,\"\\n                        \"]],\"parameters\":[]}],[0,\"\\n\\n                        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"user\",\"errors\"]],[23,0,[\"user\",\"hasValidated\"]],\"website\"]],{\"statements\":[[0,\"\\n                            \"],[7,\"label\",true],[10,\"for\",\"user-website\"],[8],[0,\"Website\"],[9],[0,\"\\n                            \"],[5,\"gh-text-input\",[[12,\"data-test-website-input\",true]],[[\"@type\",\"@id\",\"@autocapitalize\",\"@autocorrect\",\"@autocomplete\",\"@value\",\"@input\",\"@focus-out\"],[\"url\",\"user-website\",\"off\",\"off\",\"off\",[28,\"readonly\",[[23,0,[\"user\",\"website\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"user\",\"website\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"validate\",\"website\"],[[\"target\"],[[23,0,[\"user\"]]]]]]]],[0,\"\\n                            \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"user-website\"]],[[\"@errors\",\"@property\"],[[23,0,[\"user\",\"errors\"]],\"website\"]]],[0,\"\\n                            \"],[7,\"p\",true],[8],[0,\"Have a website or blog other than this one? Link it!\"],[9],[0,\"\\n                        \"]],\"parameters\":[]}],[0,\"\\n\\n                        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"user\",\"errors\"]],[23,0,[\"user\",\"hasValidated\"]],\"facebook\"]],{\"statements\":[[0,\"\\n                            \"],[7,\"label\",true],[10,\"for\",\"user-facebook\"],[8],[0,\"Facebook Profile\"],[9],[0,\"\\n                            \"],[5,\"gh-text-input\",[[12,\"data-test-facebook-input\",true]],[[\"@type\",\"@placeholder\",\"@autocorrect\",\"@id\",\"@name\",\"@value\",\"@input\",\"@focus-out\"],[\"url\",\"https://www.facebook.com/username\",\"off\",\"user-facebook\",\"user[facebook]\",[28,\"readonly\",[[23,0,[\"user\",\"facebook\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"_scratchFacebook\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"validateFacebookUrl\"],null]]]],[0,\"\\n                            \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"user-facebook\"]],[[\"@errors\",\"@property\"],[[23,0,[\"user\",\"errors\"]],\"facebook\"]]],[0,\"\\n                            \"],[7,\"p\",true],[8],[0,\"URL of your personal Facebook Profile\"],[9],[0,\"\\n                        \"]],\"parameters\":[]}],[0,\"\\n\\n                        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"user\",\"errors\"]],[23,0,[\"user\",\"hasValidated\"]],\"twitter\"]],{\"statements\":[[0,\"\\n                            \"],[7,\"label\",true],[10,\"for\",\"user-twitter\"],[8],[0,\"Twitter Profile\"],[9],[0,\"\\n                            \"],[5,\"gh-text-input\",[[12,\"data-test-twitter-input\",true]],[[\"@type\",\"@placeholder\",\"@autocorrect\",\"@id\",\"@name\",\"@value\",\"@input\",\"@focus-out\"],[\"url\",\"https://twitter.com/username\",\"off\",\"user-twitter\",\"user[twitter]\",[28,\"readonly\",[[23,0,[\"user\",\"twitter\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"_scratchTwitter\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"validateTwitterUrl\"],null]]]],[0,\"\\n                            \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"user-twitter\"]],[[\"@errors\",\"@property\"],[[23,0,[\"user\",\"errors\"]],\"twitter\"]]],[0,\"\\n                            \"],[7,\"p\",true],[8],[0,\"URL of your personal Twitter profile\"],[9],[0,\"\\n                        \"]],\"parameters\":[]}],[0,\"\\n\\n                        \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\",\"@class\"],[[23,0,[\"user\",\"errors\"]],[23,0,[\"user\",\"hasValidated\"]],\"bio\",\"bio-container\"]],{\"statements\":[[0,\"\\n                            \"],[7,\"label\",true],[10,\"for\",\"user-bio\"],[8],[0,\"Bio\"],[9],[0,\"\\n                            \"],[5,\"gh-textarea\",[[12,\"data-test-bio-input\",true]],[[\"@id\",\"@value\",\"@input\",\"@focus-out\"],[\"user-bio\",[28,\"readonly\",[[23,0,[\"user\",\"bio\"]]],null],[28,\"action\",[[23,0,[]],[28,\"mut\",[[23,0,[\"user\",\"bio\"]]],null]],[[\"value\"],[\"target.value\"]]],[28,\"action\",[[23,0,[]],\"validate\",\"bio\"],[[\"target\"],[[23,0,[\"user\"]]]]]]]],[0,\"\\n                            \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"user-bio\"]],[[\"@errors\",\"@property\"],[[23,0,[\"user\",\"errors\"]],\"bio\"]]],[0,\"\\n                            \"],[7,\"p\",true],[8],[0,\"\\n                                Write about you, in 200 characters or less.\\n                                \"],[1,[28,\"gh-count-characters\",[[23,0,[\"user\",\"bio\"]]],null],false],[0,\"\\n                            \"],[9],[0,\"\\n                        \"]],\"parameters\":[]}],[0,\"\\n\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n\\n            \"],[9],[0,\" \"],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"canChangePassword\"]]],null,{\"statements\":[[0,\"                \"],[7,\"form\",false],[12,\"id\",\"password-reset\"],[12,\"class\",\"user-profile\"],[12,\"novalidate\",\"novalidate\"],[12,\"autocomplete\",\"off\"],[3,\"action\",[[23,0,[]],[28,\"perform\",[[23,0,[\"user\",\"saveNewPassword\"]]],null]],[[\"on\"],[\"submit\"]]],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"pa5\"],[8],[0,\"\\n                        \"],[7,\"fieldset\",true],[10,\"class\",\"user-details-password\"],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"isOwnProfile\"]]],null,{\"statements\":[[0,\"                                \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"user\",\"errors\"]],[23,0,[\"user\",\"hasValidated\"]],\"password\"]],{\"statements\":[[0,\"\\n                                    \"],[7,\"label\",true],[10,\"for\",\"user-password-old\"],[8],[0,\"Old Password\"],[9],[0,\"\\n                                    \"],[5,\"gh-text-input\",[[12,\"data-test-old-pass-input\",true]],[[\"@type\",\"@id\",\"@autocomplete\",\"@value\",\"@input\",\"@keyEvents\"],[\"password\",\"user-password-old\",\"current-password\",[28,\"readonly\",[[23,0,[\"user\",\"password\"]]],null],[28,\"action\",[[23,0,[]],\"updatePassword\"],[[\"value\"],[\"target.value\"]]],[28,\"hash\",null,[[\"Enter\"],[[28,\"action\",[[23,0,[]],[28,\"perform\",[[23,0,[\"user\",\"saveNewPassword\"]]],null]],null]]]]]]],[0,\"\\n                                    \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"user-old-pass\"]],[[\"@errors\",\"@property\"],[[23,0,[\"user\",\"errors\"]],\"password\"]]],[0,\"\\n                                \"]],\"parameters\":[]}],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n                            \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"user\",\"errors\"]],[23,0,[\"user\",\"hasValidated\"]],\"newPassword\"]],{\"statements\":[[0,\"\\n                                \"],[7,\"label\",true],[10,\"for\",\"user-password-new\"],[8],[0,\"New Password\"],[9],[0,\"\\n                                \"],[5,\"gh-text-input\",[[12,\"data-test-new-pass-input\",true]],[[\"@value\",\"@type\",\"@autocomplete\",\"@id\",\"@input\",\"@keyEvents\"],[[28,\"readonly\",[[23,0,[\"user\",\"newPassword\"]]],null],\"password\",\"new-password\",\"user-password-new\",[28,\"action\",[[23,0,[]],\"updateNewPassword\"],[[\"value\"],[\"target.value\"]]],[28,\"hash\",null,[[\"Enter\"],[[28,\"action\",[[23,0,[]],[28,\"perform\",[[23,0,[\"user\",\"saveNewPassword\"]]],null]],null]]]]]]],[0,\"\\n                                \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"user-new-pass\"]],[[\"@errors\",\"@property\"],[[23,0,[\"user\",\"errors\"]],\"newPassword\"]]],[0,\"\\n                            \"]],\"parameters\":[]}],[0,\"\\n\\n                            \"],[5,\"gh-form-group\",[],[[\"@errors\",\"@hasValidated\",\"@property\"],[[23,0,[\"user\",\"errors\"]],[23,0,[\"user\",\"hasValidated\"]],\"ne2Password\"]],{\"statements\":[[0,\"\\n                                \"],[7,\"label\",true],[10,\"for\",\"user-new-password-verification\"],[8],[0,\"Verify Password\"],[9],[0,\"\\n                                \"],[5,\"gh-text-input\",[[12,\"data-test-ne2-pass-input\",true]],[[\"@value\",\"@type\",\"@id\",\"@input\",\"@keyEvents\"],[[28,\"readonly\",[[23,0,[\"user\",\"ne2Password\"]]],null],\"password\",\"user-new-password-verification\",[28,\"action\",[[23,0,[]],\"updateNe2Password\"],[[\"value\"],[\"target.value\"]]],[28,\"hash\",null,[[\"Enter\"],[[28,\"action\",[[23,0,[]],[28,\"perform\",[[23,0,[\"user\",\"saveNewPassword\"]]],null]],null]]]]]]],[0,\"\\n                                \"],[5,\"gh-error-message\",[[12,\"data-test-error\",\"user-ne2-pass\"]],[[\"@errors\",\"@property\"],[[23,0,[\"user\",\"errors\"]],\"ne2Password\"]]],[0,\"\\n                            \"]],\"parameters\":[]}],[0,\"\\n\\n                            \"],[7,\"div\",true],[10,\"class\",\"form-group\"],[8],[0,\"\\n                                \"],[5,\"gh-task-button\",[[12,\"data-test-save-pw-button\",\"true\"]],[[\"@buttonText\",\"@class\",\"@task\"],[\"Change Password\",\"gh-btn gh-btn-red gh-btn-icon button-change-password\",[23,0,[\"user\",\"saveNewPassword\"]]]]],[0,\"\\n                            \"],[9],[0,\"\\n                        \"],[9],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\" \"],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/staff/user.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/tag", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "cncu4JTe",
    "block": "{\"symbols\":[],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[7,\"form\",true],[10,\"class\",\"mb15\"],[8],[0,\"\\n        \"],[5,\"gh-canvas-header\",[[12,\"class\",\"gh-canvas-header\"]],[[],[]],{\"statements\":[[0,\"\\n            \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"\\n                \"],[5,\"link-to\",[[12,\"data-test-link\",\"tags-back\"]],[[\"@route\"],[\"tags\"]],{\"statements\":[[0,\"Tags\"]],\"parameters\":[]}],[0,\"\\n                \"],[7,\"span\",true],[8],[1,[28,\"svg-jar\",[\"arrow-right\"],null],false],[9],[0,\"\\n                \"],[1,[28,\"if\",[[23,0,[\"tag\",\"isNew\"]],\"New tag\",[23,0,[\"tag\",\"name\"]]],null],false],[0,\"\\n            \"],[9],[0,\"\\n            \"],[7,\"section\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n                \"],[5,\"gh-task-button\",[],[[\"@task\",\"@type\",\"@class\",\"@autoReset\",\"@data-test-button\"],[[23,0,[\"saveTask\"]],\"button\",\"gh-btn gh-btn-blue gh-btn-icon\",true,\"save\"]]],[0,\"\\n            \"],[9],[0,\"\\n        \"]],\"parameters\":[]}],[0,\"\\n\\n        \"],[5,\"gh-tag-settings-form\",[],[[\"@tag\",\"@scratchTag\",\"@setProperty\"],[[23,0,[\"tag\"]],[23,0,[\"scratchTag\"]],[28,\"action\",[[23,0,[]],\"setProperty\"],null]]]],[0,\"\\n    \"],[9],[0,\"\\n\\n\"],[4,\"unless\",[[23,0,[\"tag\",\"isNew\"]]],null,{\"statements\":[[0,\"        \"],[7,\"button\",false],[12,\"class\",\"gh-btn gh-btn-red gh-btn-icon mb15\"],[12,\"type\",\"button\"],[3,\"on\",[\"click\",[28,\"action\",[[23,0,[]],\"toggleDeleteTagModal\"],null]]],[8],[0,\"\\n            \"],[7,\"span\",true],[8],[0,\"Delete tag\"],[9],[0,\"\\n        \"],[9],[0,\"\\n\"]],\"parameters\":[]},null],[9],[0,\"\\n\\n\"],[4,\"if\",[[23,0,[\"showUnsavedChangesModal\"]]],null,{\"statements\":[[0,\"    \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@confirm\",\"@close\",\"@modifier\"],[\"leave-settings\",[28,\"action\",[[23,0,[]],\"leaveScreen\"],null],[28,\"action\",[[23,0,[]],\"toggleUnsavedChangesModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null],[0,\"\\n\"],[4,\"if\",[[23,0,[\"showDeleteTagModal\"]]],null,{\"statements\":[[0,\"    \"],[5,\"gh-fullscreen-modal\",[],[[\"@modal\",\"@model\",\"@confirm\",\"@close\",\"@modifier\"],[\"delete-tag\",[23,0,[\"tag\"]],[28,\"action\",[[23,0,[]],\"deleteTag\"],null],[28,\"action\",[[23,0,[]],\"toggleDeleteTagModal\"],null],\"action wide\"]]],[0,\"\\n\"]],\"parameters\":[]},null]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/tag.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/tags-loading", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "+0jV6QAH",
    "block": "{\"symbols\":[],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas\"],[8],[0,\"\\n    \"],[7,\"header\",true],[10,\"class\",\"gh-canvas-header\"],[8],[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"Tags\"],[9],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[5,\"link-to\",[[12,\"class\",\"gh-btn gh-btn-green\"]],[[\"@route\"],[\"tag.new\"]],{\"statements\":[[7,\"span\",true],[8],[0,\"New tag\"],[9]],\"parameters\":[]}],[0,\"\\n        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\\n    \"],[7,\"div\",true],[10,\"class\",\"gh-content\"],[8],[0,\"\\n        \"],[5,\"gh-loading-spinner\",[],[[],[]]],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\"]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/tags-loading.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/templates/tags", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.HTMLBars.template({
    "id": "V6KtsK/B",
    "block": "{\"symbols\":[\"tag\"],\"statements\":[[7,\"section\",true],[10,\"class\",\"gh-canvas tags-view\"],[8],[0,\"\\n    \"],[5,\"gh-canvas-header\",[[12,\"class\",\"gh-canvas-header tags-header\"]],[[],[]],{\"statements\":[[0,\"\\n        \"],[7,\"h2\",true],[10,\"class\",\"gh-canvas-title\"],[10,\"data-test-screen-title\",\"\"],[8],[0,\"Tags\"],[9],[0,\"\\n        \"],[7,\"section\",true],[10,\"class\",\"view-actions\"],[8],[0,\"\\n            \"],[7,\"div\",true],[10,\"class\",\"gh-contentfilter gh-btn-group\"],[8],[0,\"\\n                \"],[7,\"button\",false],[12,\"class\",[29,[\"gh-btn \",[28,\"if\",[[28,\"eq\",[[23,0,[\"type\"]],\"public\"],null],\"gh-btn-group-selected\"],null]]]],[3,\"action\",[[23,0,[]],\"changeType\",\"public\"]],[8],[7,\"span\",true],[8],[0,\"Public tags\"],[9],[9],[0,\"\\n                \"],[7,\"button\",false],[12,\"class\",[29,[\"gh-btn \",[28,\"if\",[[28,\"eq\",[[23,0,[\"type\"]],\"internal\"],null],\"gh-btn-group-selected\"],null]]]],[3,\"action\",[[23,0,[]],\"changeType\",\"internal\"]],[8],[7,\"span\",true],[8],[0,\"Internal tags\"],[9],[9],[0,\"\\n            \"],[9],[0,\"\\n            \"],[5,\"link-to\",[[12,\"class\",\"gh-btn gh-btn-green\"]],[[\"@route\"],[\"tag.new\"]],{\"statements\":[[7,\"span\",true],[8],[0,\"New tag\"],[9]],\"parameters\":[]}],[0,\"\\n        \"],[9],[0,\"\\n    \"]],\"parameters\":[]}],[0,\"\\n\\n    \"],[7,\"section\",true],[10,\"class\",\"content-list\"],[8],[0,\"\\n        \"],[7,\"ol\",true],[11,\"class\",[29,[\"tags-list gh-list \",[28,\"unless\",[[23,0,[\"sortedTags\"]],\"no-posts\"],null]]]],[8],[0,\"\\n\"],[4,\"if\",[[23,0,[\"sortedTags\"]]],null,{\"statements\":[[0,\"                \"],[7,\"li\",true],[10,\"class\",\"gh-list-row header\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-list-header gh-list-cellwidth-70\"],[8],[0,\"Tag\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-list-header gh-list-cellwidth-10\"],[8],[0,\"Slug\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-list-header gh-list-cellwidth-10\"],[8],[0,\"No. of posts\"],[9],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"gh-list-header gh-list-cellwidth-10\"],[8],[9],[0,\"\\n                \"],[9],[0,\"\\n                \"],[5,\"vertical-collection\",[],[[\"@items\",\"@key\",\"@containerSelector\",\"@estimateHeight\",\"@bufferSize\"],[[23,0,[\"sortedTags\"]],\"id\",\".gh-main\",60,20]],{\"statements\":[[0,\"\\n                    \"],[5,\"gh-tags-list-item\",[],[[\"@tag\",\"@data-test-tag-id\"],[[23,1,[]],[23,1,[\"id\"]]]]],[0,\"\\n                \"]],\"parameters\":[1]}],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[0,\"                \"],[7,\"li\",true],[10,\"class\",\"no-posts-box\"],[8],[0,\"\\n                    \"],[7,\"div\",true],[10,\"class\",\"no-posts\"],[8],[0,\"\\n                            \"],[1,[28,\"svg-jar\",[\"tags-placeholder\"],[[\"class\"],[\"gh-tags-placeholder\"]]],false],[0,\"\\n                            \"],[7,\"h3\",true],[8],[0,\"You haven't created any \"],[1,[23,0,[\"type\"]],false],[0,\" tags yet!\"],[9],[0,\"\\n                            \"],[5,\"link-to\",[[12,\"class\",\"gh-btn gh-btn-green gh-btn-lg\"]],[[\"@route\"],[\"tag.new\"]],{\"statements\":[[0,\"\\n                                \"],[7,\"span\",true],[8],[0,\"Create a new tag\"],[9],[0,\"\\n                            \"]],\"parameters\":[]}],[0,\"\\n                    \"],[9],[0,\"\\n                \"],[9],[0,\"\\n\"]],\"parameters\":[]}],[0,\"        \"],[9],[0,\"\\n    \"],[9],[0,\"\\n\"],[9],[0,\"\\n\\n\"],[1,[22,\"outlet\"],false]],\"hasEval\":false}",
    "meta": {
      "moduleName": "ghost-admin/templates/tags.hbs"
    }
  });

  _exports.default = _default;
});
;define("ghost-admin/tests/mirage/mirage.lint-test", [], function () {
  "use strict";

  describe('ESLint | mirage', function () {
    it('mirage/config.js', function () {// test passed
    });
    it('mirage/config/api-keys.js', function () {// test passed
    });
    it('mirage/config/authentication.js', function () {// test passed
    });
    it('mirage/config/config.js', function () {// test passed
    });
    it('mirage/config/emails.js', function () {// test passed
    });
    it('mirage/config/integrations.js', function () {// test passed
    });
    it('mirage/config/invites.js', function () {// test passed
    });
    it('mirage/config/labels.js', function () {// test passed
    });
    it('mirage/config/members.js', function () {// test passed
    });
    it('mirage/config/pages.js', function () {// test passed
    });
    it('mirage/config/posts.js', function () {// test passed
    });
    it('mirage/config/roles.js', function () {// test passed
    });
    it('mirage/config/settings.js', function () {// test passed
    });
    it('mirage/config/site.js', function () {// test passed
    });
    it('mirage/config/slugs.js', function () {// test passed
    });
    it('mirage/config/tags.js', function () {// test passed
    });
    it('mirage/config/themes.js', function () {// test passed
    });
    it('mirage/config/uploads.js', function () {// test passed
    });
    it('mirage/config/users.js', function () {// test passed
    });
    it('mirage/config/webhooks.js', function () {// test passed
    });
    it('mirage/factories/api-key.js', function () {// test passed
    });
    it('mirage/factories/email.js', function () {// test passed
    });
    it('mirage/factories/integration.js', function () {// test passed
    });
    it('mirage/factories/invite.js', function () {// test passed
    });
    it('mirage/factories/member.js', function () {// test passed
    });
    it('mirage/factories/notification.js', function () {// test passed
    });
    it('mirage/factories/post.js', function () {// test passed
    });
    it('mirage/factories/role.js', function () {// test passed
    });
    it('mirage/factories/tag.js', function () {// test passed
    });
    it('mirage/factories/user.js', function () {// test passed
    });
    it('mirage/factories/webhook.js', function () {// test passed
    });
    it('mirage/fixtures/configs.js', function () {// test passed
    });
    it('mirage/fixtures/roles.js', function () {// test passed
    });
    it('mirage/fixtures/settings.js', function () {// test passed
    });
    it('mirage/fixtures/sites.js', function () {// test passed
    });
    it('mirage/fixtures/themes.js', function () {// test passed
    });
    it('mirage/fixtures/timezones.js', function () {// test passed
    });
    it('mirage/models/api-key.js', function () {// test passed
    });
    it('mirage/models/config.js', function () {// test passed
    });
    it('mirage/models/email.js', function () {// test passed
    });
    it('mirage/models/integration.js', function () {// test passed
    });
    it('mirage/models/invite.js', function () {// test passed
    });
    it('mirage/models/member.js', function () {// test passed
    });
    it('mirage/models/notification.js', function () {// test passed
    });
    it('mirage/models/page.js', function () {// test passed
    });
    it('mirage/models/post.js', function () {// test passed
    });
    it('mirage/models/role.js', function () {// test passed
    });
    it('mirage/models/site.js', function () {// test passed
    });
    it('mirage/models/subscriber.js', function () {// test passed
    });
    it('mirage/models/tag.js', function () {// test passed
    });
    it('mirage/models/theme.js', function () {// test passed
    });
    it('mirage/models/user.js', function () {// test passed
    });
    it('mirage/models/webhook.js', function () {// test passed
    });
    it('mirage/scenarios/default.js', function () {// test passed
    });
    it('mirage/serializers/application.js', function () {// test passed
    });
    it('mirage/serializers/integration.js', function () {// test passed
    });
    it('mirage/serializers/page.js', function () {// test passed
    });
    it('mirage/serializers/post.js', function () {// test passed
    });
    it('mirage/serializers/tag.js', function () {// test passed
    });
    it('mirage/serializers/user.js', function () {// test passed
    });
    it('mirage/utils.js', function () {// test passed
    });
  });
});
;define("ghost-admin/transforms/boolean", ["exports", "@ember-data/serializer/-private"], function (_exports, _private) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _private.BooleanTransform;
    }
  });
});
;define("ghost-admin/transforms/date", ["exports", "@ember-data/serializer/-private"], function (_exports, _private) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _private.DateTransform;
    }
  });
});
;define("ghost-admin/transforms/facebook-url-user", ["exports", "@ember-data/serializer/transform"], function (_exports, _transform) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _transform.default.extend({
    deserialize(serialized) {
      if (serialized) {
        let [, user] = serialized.match(/(\S+)/);
        return "https://www.facebook.com/".concat(user);
      }

      return serialized;
    },

    serialize(deserialized) {
      if (deserialized) {
        let [, user] = deserialized.match(/(?:https:\/\/)(?:www\.)(?:facebook\.com)\/(?:#!\/)?(\w+\/?\S+)/mi);
        return user;
      }

      return deserialized;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/transforms/json-string", ["exports", "@ember-data/serializer/transform"], function (_exports, _transform) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _transform.default.extend({
    deserialize(serialized) {
      let _serialized = serialized === '' ? null : serialized;

      return JSON.parse(_serialized);
    },

    serialize(deserialized) {
      return deserialized ? JSON.stringify(deserialized) : null;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/transforms/member-subscription", ["exports", "ghost-admin/models/member-subscription", "@ember-data/serializer/transform"], function (_exports, _memberSubscription, _transform) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _transform.default.extend({
    deserialize(serialized) {
      let subscriptions, subscriptionArray;
      subscriptionArray = serialized.subscriptions || [];
      subscriptions = subscriptionArray.map(itemDetails => _memberSubscription.default.create(itemDetails));
      return Ember.A(subscriptions);
    },

    serialize(deserialized) {
      let subscriptionArray;

      if (Ember.isArray(deserialized)) {
        subscriptionArray = deserialized.map(item => {
          return item;
        }).compact();
      } else {
        subscriptionArray = [];
      }

      return {
        subscriptions: subscriptionArray
      };
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/transforms/moment-date", ["exports", "@ember-data/serializer/transform", "moment"], function (_exports, _transform, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _transform.default.extend({
    deserialize(serialized) {
      if (serialized) {
        return (0, _moment.default)(serialized);
      }

      return serialized;
    },

    serialize(deserialized) {
      if (deserialized) {
        return (0, _moment.default)(deserialized).toDate();
      }

      return deserialized;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/transforms/moment-utc", ["exports", "@ember-data/serializer/transform", "moment"], function (_exports, _transform, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _transform.default.extend({
    deserialize(serialized) {
      if (serialized) {
        return _moment.default.utc(serialized);
      }

      return serialized;
    },

    serialize(deserialized) {
      if (deserialized) {
        try {
          return deserialized.toJSON();
        } catch (e) {
          return deserialized;
        }
      }

      return deserialized;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/transforms/navigation-settings", ["exports", "ghost-admin/models/navigation-item", "@ember-data/serializer/transform"], function (_exports, _navigationItem, _transform) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _transform.default.extend({
    deserialize(serialized, options) {
      let navItems, settingsArray;

      try {
        settingsArray = JSON.parse(serialized) || [];
      } catch (e) {
        settingsArray = [];
      }

      navItems = settingsArray.map(itemDetails => {
        itemDetails.isSecondary = options && options.isSecondary || false;
        return _navigationItem.default.create(itemDetails);
      });
      return Ember.A(navItems);
    },

    serialize(deserialized) {
      let settingsArray;

      if (Ember.isArray(deserialized)) {
        settingsArray = deserialized.map(item => {
          let label = item.get('label').trim();
          let url = item.get('url').trim();
          return {
            label,
            url
          };
        }).compact();
      } else {
        settingsArray = [];
      }

      return JSON.stringify(settingsArray);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/transforms/number", ["exports", "@ember-data/serializer/-private"], function (_exports, _private) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _private.NumberTransform;
    }
  });
});
;define("ghost-admin/transforms/raw", ["exports", "@ember-data/serializer/transform"], function (_exports, _transform) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _transform.default.extend({
    deserialize(serialized) {
      return serialized;
    },

    serialize(deserialized) {
      return deserialized;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/transforms/slack-settings", ["exports", "ghost-admin/models/slack-integration", "@ember-data/serializer/transform"], function (_exports, _slackIntegration, _transform) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  var _default = _transform.default.extend({
    deserialize(serialized) {
      let settingsArray;

      try {
        settingsArray = JSON.parse(serialized) || [];
      } catch (e) {
        settingsArray = [];
      }

      if (Ember.isEmpty(settingsArray)) {
        settingsArray.push({
          url: '',
          username: ''
        });
      }

      let slackObjs = settingsArray.map(itemDetails => _slackIntegration.default.create(itemDetails));
      return slackObjs;
    },

    serialize(deserialized) {
      let settingsArray;

      if (Ember.isArray(deserialized)) {
        settingsArray = deserialized.map(item => {
          let url = (item.get('url') || '').trim();
          let username = (item.get('username') || '').trim();

          if (url) {
            return {
              url,
              username
            };
          }
        }).compact();
      } else {
        settingsArray = [];
      }

      return JSON.stringify(settingsArray);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/transforms/string", ["exports", "@ember-data/serializer/-private"], function (_exports, _private) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _private.StringTransform;
    }
  });
});
;define("ghost-admin/transforms/twitter-url-user", ["exports", "@ember-data/serializer/transform"], function (_exports, _transform) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _transform.default.extend({
    deserialize(serialized) {
      if (serialized) {
        let [, user] = serialized.match(/@?([^/]*)/);
        return "https://twitter.com/".concat(user);
      }

      return serialized;
    },

    serialize(deserialized) {
      if (deserialized) {
        let [, user] = deserialized.match(/(?:https:\/\/)(?:twitter\.com)\/(?:#!\/)?@?([^/]*)/);
        return "@".concat(user);
      }

      return deserialized;
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/transforms/unsplash-settings", ["exports", "@ember-data/serializer/transform", "ghost-admin/models/unsplash-integration"], function (_exports, _transform, _unsplashIntegration) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /* eslint-disable camelcase */
  const DEFAULT_SETTINGS = {
    isActive: true
  };

  var _default = _transform.default.extend({
    deserialize(serialized) {
      if (serialized) {
        let settingsObject;

        try {
          settingsObject = JSON.parse(serialized) || DEFAULT_SETTINGS;
        } catch (e) {
          settingsObject = DEFAULT_SETTINGS;
        }

        return _unsplashIntegration.default.create(settingsObject);
      }

      return DEFAULT_SETTINGS;
    },

    serialize(deserialized) {
      return deserialized ? JSON.stringify(deserialized) : JSON.stringify(DEFAULT_SETTINGS);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/transitions", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;

  function _default() {
    this.transition(this.hasClass('fullscreen-modal-container'), this.toValue(true), this.use('fade', {
      duration: 150
    }), this.reverse('fade', {
      duration: 150
    }));
    this.transition(this.hasClass('fade-transition'), this.use('crossFade', {
      duration: 100
    }));
    this.transition(this.hasClass('tour-container'), this.toValue(true), this.use('fade', {
      duration: 150
    }), this.reverse('fade', {
      duration: 150
    }));
    this.transition(this.hasClass('tour'), this.toValue(true), this.use('fade', {
      duration: 300
    }), this.reverse('fade', {
      duration: 300
    })); // TODO: Maybe animate with explode. gh-unsplash-window should ideally slide in from bottom to top of screen
    // this.transition(
    //     this.hasClass('gh-unsplash-window'),
    //     this.toValue(true),
    //     this.use('toUp', {duration: 500}),
    //     this.reverse('toDown', {duration: 500})
    // );
  }
});
;define("ghost-admin/transitions/cross-fade", ["exports", "liquid-fire/transitions/cross-fade"], function (_exports, _crossFade) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _crossFade.default;
    }
  });
});
;define("ghost-admin/transitions/default", ["exports", "liquid-fire/transitions/default"], function (_exports, _default) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _default.default;
    }
  });
});
;define("ghost-admin/transitions/explode", ["exports", "liquid-fire/transitions/explode"], function (_exports, _explode) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _explode.default;
    }
  });
});
;define("ghost-admin/transitions/fade", ["exports", "liquid-fire/transitions/fade"], function (_exports, _fade) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _fade.default;
    }
  });
});
;define("ghost-admin/transitions/flex-grow", ["exports", "liquid-fire/transitions/flex-grow"], function (_exports, _flexGrow) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _flexGrow.default;
    }
  });
});
;define("ghost-admin/transitions/fly-to", ["exports", "liquid-fire/transitions/fly-to"], function (_exports, _flyTo) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _flyTo.default;
    }
  });
});
;define("ghost-admin/transitions/move-over", ["exports", "liquid-fire/transitions/move-over"], function (_exports, _moveOver) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _moveOver.default;
    }
  });
});
;define("ghost-admin/transitions/scale", ["exports", "liquid-fire/transitions/scale"], function (_exports, _scale) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _scale.default;
    }
  });
});
;define("ghost-admin/transitions/scroll-then", ["exports", "liquid-fire/transitions/scroll-then"], function (_exports, _scrollThen) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _scrollThen.default;
    }
  });
});
;define("ghost-admin/transitions/to-down", ["exports", "liquid-fire/transitions/to-down"], function (_exports, _toDown) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _toDown.default;
    }
  });
});
;define("ghost-admin/transitions/to-left", ["exports", "liquid-fire/transitions/to-left"], function (_exports, _toLeft) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _toLeft.default;
    }
  });
});
;define("ghost-admin/transitions/to-right", ["exports", "liquid-fire/transitions/to-right"], function (_exports, _toRight) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _toRight.default;
    }
  });
});
;define("ghost-admin/transitions/to-up", ["exports", "liquid-fire/transitions/to-up"], function (_exports, _toUp) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _toUp.default;
    }
  });
});
;define("ghost-admin/transitions/wait", ["exports", "liquid-fire/transitions/wait"], function (_exports, _wait) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _wait.default;
    }
  });
});
;define("ghost-admin/transitions/wormhole", ["exports", "liquid-wormhole/transitions/wormhole"], function (_exports, _wormhole) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;

  // override liquid-wormhole's default `wormhole` transition to focus the first
  // autofocus element after the transition and element swap happens
  function _default() {
    let newWormholeElement;

    if (this.newElement) {
      newWormholeElement = this.newElement.find('.liquid-wormhole-element:last-child');
    }

    return _wormhole.default.apply(this, arguments).finally(() => {
      if (this.newElement && newWormholeElement) {
        let autofocusElem = newWormholeElement[0].querySelector('[autofocus]');

        if (autofocusElem) {
          autofocusElem.focus();
        }
      }
    });
  }
});
;define("ghost-admin/utils/bound-one-way", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;

  /**
   * Defines a property similarly to `Ember.computed.oneway`,
   * save that while a `oneway` loses its binding upon being set,
   * the `BoundOneWay` will continue to listen for upstream changes.
   *
   * This is an ideal tool for working with values inside of {{input}}
   * elements.
   * @param {*} upstream
   * @param {function} transform a function to transform the **upstream** value.
   */
  function _default(upstream, transform) {
    if (typeof transform !== 'function') {
      // default to the identity function
      transform = function (value) {
        return value;
      };
    }

    return Ember.computed(upstream, {
      get() {
        return transform(this.get(upstream));
      },

      set(key, value) {
        return value;
      }

    });
  }
});
;define("ghost-admin/utils/caja-sanitizers", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /**
   * google-caja uses url() and id() to verify if the values are allowed.
   */

  /**
   * Check if URL is allowed
   * URLs are allowed if they start with http://, https://, or /.
   * NOTE: # urls are not allowed as clicking them will break the editor when clicked
   */
  let url = function (url) {
    url = url.toString().replace(/['"]+/g, '');

    if (/^https?:\/\//.test(url) || /^\//.test(url)) {
      return url;
    }
  };
  /**
   * Check if ID is allowed
   * All ids are allowed at the moment.
   */


  let id = function (id) {
    return id;
  };

  var _default = {
    url,
    id
  };
  _exports.default = _default;
});
;define("ghost-admin/utils/calculate-position", ["exports", "ember-basic-dropdown/utils/calculate-position"], function (_exports, _calculatePosition) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _calculatePosition.default;
    }
  });
});
;define("ghost-admin/utils/computed-fallback-if-undefined", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = computedFallbackIfUndefined;

  function computedFallbackIfUndefined(fallback) {
    return Ember.computed({
      get() {
        return fallback;
      },

      set(_, v) {
        return v === undefined ? fallback : v;
      }

    });
  }
});
;define("ghost-admin/utils/copy-text-to-clipboard", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = copyTextToClipboard;

  function copyTextToClipboard(text) {
    let textarea = document.createElement('textarea');
    textarea.value = text;
    textarea.setAttribute('readonly', '');
    textarea.style.position = 'absolute';
    textarea.style.left = '-9999px';
    document.body.appendChild(textarea);
    textarea.select();
    document.execCommand('copy');
    document.body.removeChild(textarea);
  }
});
;define("ghost-admin/utils/ctrl-or-cmd", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = navigator.userAgent.indexOf('Mac') !== -1 ? 'command' : 'ctrl';

  _exports.default = _default;
});
;define("ghost-admin/utils/format-markdown", ["exports", "markdown-it", "markdown-it-footnote", "markdown-it-lazy-headers", "markdown-it-mark", "koenig-editor/helpers/sanitize-html"], function (_exports, _markdownIt, _markdownItFootnote, _markdownItLazyHeaders, _markdownItMark, _sanitizeHtml) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = formatMarkdown;

  let slugify = function slugify(inputString, usedHeaders) {
    let slug = inputString.replace(/[^\w]/g, '').toLowerCase();

    if (usedHeaders[slug]) {
      usedHeaders[slug] += 1;
      slug += usedHeaders[slug];
    }

    return slug;
  }; // originally from https://github.com/leff/markdown-it-named-headers
  // moved here to avoid pulling in http://stringjs.com dependency


  let markdownitNamedHeaders = function markdownitNamedHeaders(md) {
    let originalHeadingOpen = md.renderer.rules.heading_open; // eslint-disable-next-line camelcase

    md.renderer.rules.heading_open = function (tokens, idx, options, env, self) {
      let usedHeaders = {};
      tokens[idx].attrs = tokens[idx].attrs || [];
      let title = tokens[idx + 1].children.reduce(function (acc, t) {
        return acc + t.content;
      }, '');
      let slug = slugify(title, usedHeaders);
      tokens[idx].attrs.push(['id', slug]);

      if (originalHeadingOpen) {
        return originalHeadingOpen.apply(this, arguments);
      } else {
        return self.renderToken(...arguments);
      }
    };
  };

  let md = (0, _markdownIt.default)({
    html: true,
    breaks: true,
    linkify: true
  }).use(_markdownItFootnote.default).use(_markdownItLazyHeaders.default).use(_markdownItMark.default).use(markdownitNamedHeaders); // configure linkify-it

  md.linkify.set({
    fuzzyLink: false
  });

  function formatMarkdown(_markdown, replaceJS = true) {
    let markdown = _markdown || '';
    let escapedhtml = ''; // convert markdown to HTML

    escapedhtml = md.render(markdown);
    return (0, _sanitizeHtml.sanitizeHtml)(escapedhtml, {
      replaceJS
    });
  }
});
;define("ghost-admin/utils/ghost-paths", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;

  let makeRoute = function (root, args) {
    let slashAtStart = /^\//;
    let slashAtEnd = /\/$/;
    let parts = Array.prototype.slice.call(args, 0);
    let route = root.replace(slashAtEnd, '');
    parts.forEach(part => {
      if (part) {
        route = [route, part.replace(slashAtStart, '').replace(slashAtEnd, '')].join('/');
      }
    });
    return route += '/';
  };

  function _default() {
    let path = window.location.pathname;
    let subdir = path.substr(0, path.search('/ghost/'));
    let adminRoot = "".concat(subdir, "/ghost/");
    let assetRoot = "".concat(subdir, "/ghost/assets/");
    let apiRoot = "".concat(subdir, "/ghost/api/v3/admin");

    function assetUrl(src) {
      return subdir + src;
    }

    return {
      adminRoot,
      assetRoot,
      apiRoot,
      subdir,
      blogRoot: "".concat(subdir, "/"),
      url: {
        admin() {
          return makeRoute(adminRoot, arguments);
        },

        api() {
          return makeRoute(apiRoot, arguments);
        },

        join() {
          if (arguments.length > 1) {
            return makeRoute(arguments[0], Array.prototype.slice.call(arguments, 1));
          } else if (arguments.length === 1) {
            let [arg] = arguments;
            return arg.slice(-1) === '/' ? arg : "".concat(arg, "/");
          }

          return '/';
        },

        asset: assetUrl
      }
    };
  }
});
;define("ghost-admin/utils/isNumber", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;
  // isNumber function from lodash
  const {
    toString
  } = Object.prototype;

  function _default(value) {
    return typeof value === 'number' || value && typeof value === 'object' && toString.call(value) === '[object Number]' || false;
  }
});
;define("ghost-admin/utils/link-component", [], function () {
  "use strict";

  Ember.LinkComponent.reopen({
    active: Ember.computed('attrs.params', '_routing.currentState', function () {
      let isActive = this._super(...arguments);

      if (typeof this.alternateActive === 'function') {
        this.alternateActive(isActive);
      }

      return isActive;
    }),
    activeClass: Ember.computed('tagName', function () {
      return this.tagName === 'button' ? '' : 'active';
    })
  });
});
;define("ghost-admin/utils/password-generator", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = generatePassword;

  /*
   * copied from https://github.com/bermi/password-generator
   * Copyright(c) 2011-2015 Bermi Ferrer <bermi@bermilabs.com>
   * MIT Licensed
   */
  // copied from the NPM module because the switch away from polyfilling `global`
  // via webpack in ember-auto-import resulted in an error finding 'crypto'
  // Module not found: Error: Can't resolve 'crypto'
  const vowel = /[aeiou]$/i;
  const consonant = /[bcdfghjklmnpqrstvwxyz]$/i;

  function rand(min, max) {
    var key,
        value,
        arr = new Uint8Array(max);
    getRandomValues(arr);

    for (key in arr) {
      if (Object.prototype.hasOwnProperty.call(arr, key)) {
        value = arr[key];

        if (value > min && value < max) {
          return value;
        }
      }
    }

    return rand(min, max);
  }

  function getRandomValues(buf) {
    window.crypto.getRandomValues(buf);
  }

  function generatePassword(length, memorable, pattern, prefix) {
    var char = '',
        n,
        i,
        validChars = [];

    if (length === null || typeof length === 'undefined') {
      length = 10;
    }

    if (memorable === null || typeof memorable === 'undefined') {
      memorable = true;
    }

    if (pattern === null || typeof pattern === 'undefined') {
      pattern = /\w/;
    }

    if (prefix === null || typeof prefix === 'undefined') {
      prefix = '';
    } // Non memorable passwords will pick characters from a pre-generated
    // list of characters


    if (!memorable) {
      for (i = 33; 126 > i; i += 1) {
        char = String.fromCharCode(i);

        if (char.match(pattern)) {
          validChars.push(char);
        }
      }

      if (!validChars.length) {
        throw new Error('Could not find characters that match the ' + 'password pattern ' + pattern + '. Patterns must match individual ' + 'characters, not the password as a whole.');
      }
    }

    while (prefix.length < length) {
      if (memorable) {
        if (prefix.match(consonant)) {
          pattern = vowel;
        } else {
          pattern = consonant;
        }

        n = rand(33, 126);
        char = String.fromCharCode(n);
      } else {
        char = validChars[rand(0, validChars.length)];
      }

      if (memorable) {
        char = char.toLowerCase();
      }

      if (char.match(pattern)) {
        prefix = '' + prefix + char;
      }
    }

    return prefix;
  }
});
;define("ghost-admin/utils/route", [], function () {
  "use strict";

  Ember.Route.reopen({
    actions: {
      willTransition(transition) {
        if (this.get('upgradeStatus.isRequired')) {
          transition.abort();
          this.upgradeStatus.requireUpgrade();
          return false;
        } else {
          return true;
        }
      }

    }
  });
});
;define("ghost-admin/utils/titleize", ["exports", "ember-cli-string-helpers/utils/titleize"], function (_exports, _titleize) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "default", {
    enumerable: true,
    get: function () {
      return _titleize.default;
    }
  });
});
;define("ghost-admin/utils/window-proxy", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = {
    changeLocation(url) {
      window.location = url;
    },

    replaceLocation(url) {
      window.location.replace(url);
    },

    replaceState(params, title, url) {
      window.history.replaceState(params, title, url);
    }

  };
  _exports.default = _default;
});
;define("ghost-admin/validators/base", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /**
   * Base validator that all validators should extend
   * Handles checking of individual properties or the entire model
   */
  var _default = Ember.Object.extend({
    passed: false,

    init() {
      this._super(...arguments);

      this.properties = this.properties || [];
    },

    /**
     * When passed a model and (optionally) a property name,
     * checks it against a list of validation functions
     * @param  {Ember.Object} model Model to validate
     * @param  {string} prop  Property name to check
     * @return {boolean}      True if the model passed all (or one) validation(s),
     *                        false if not
     */
    check(model, prop) {
      this.set('passed', true);

      if (prop && this[prop]) {
        this[prop](model);
      } else {
        this.properties.forEach(property => {
          if (this[property]) {
            this[property](model);
          }
        });
      }

      return this.passed;
    },

    invalidate() {
      this.set('passed', false);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/custom-view", ["exports", "ghost-admin/validators/base"], function (_exports, _base) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['name'],

    name(model) {
      if (Ember.isBlank(model.name)) {
        model.errors.add('name', 'Please enter a name');
        model.hasValidated.pushObject('name');
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/integration", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['name'],

    name(model) {
      if (Ember.isBlank(model.name)) {
        model.errors.add('name', 'Please enter a name');
        model.hasValidated.pushObject('name');
        this.invalidate();
      } else if (!_validator.default.isLength(model.name, 0, 191)) {
        model.errors.add('name', 'Name is too long, max 191 chars');
        model.hasValidated.pushObject('name');
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/invite-user", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['email', 'role'],

    email(model) {
      let email = model.get('email');

      if (Ember.isBlank(email)) {
        model.get('errors').add('email', 'Please enter an email.');
        this.invalidate();
      } else if (!_validator.default.isEmail(email)) {
        model.get('errors').add('email', 'Invalid Email.');
        this.invalidate();
      }
    },

    role(model) {
      let role = model.get('role');

      if (Ember.isBlank(role)) {
        model.get('errors').add('role', 'Please select a role.');
        model.get('hasValidated').pushObject('role');
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/label", ["exports", "ghost-admin/validators/base"], function (_exports, _base) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['name'],

    name(model) {
      if (Ember.isBlank(model.name)) {
        model.errors.add('name', 'Please enter a name');
        model.hasValidated.pushObject('name');
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/member", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['name', 'email', 'note'],

    name(model) {
      if (!_validator.default.isLength(model.name || '', 0, 191)) {
        model.errors.add('name', 'Name cannot be longer than 191 characters.');
        this.invalidate();
      }
    },

    email(model) {
      let email = model.get('email');

      if (Ember.isBlank(email)) {
        model.get('errors').add('email', 'Please enter an email.');
        this.invalidate();
      } else if (!_validator.default.isEmail(email)) {
        model.get('errors').add('email', 'Invalid Email.');
        this.invalidate();
      }

      if (!_validator.default.isLength(model.name || '', 0, 191)) {
        model.errors.add('email', 'Email cannot be longer than 191 characters.');
        this.invalidate();
      }

      model.get('hasValidated').addObject('email');
    },

    note(model) {
      let note = model.get('note');

      if (!_validator.default.isLength(note || '', 0, 500)) {
        model.get('errors').add('note', 'Note is too long.');
        this.invalidate();
      }

      model.get('hasValidated').addObject('note');
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/mixins/password", ["exports", "validator"], function (_exports, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  const BAD_PASSWORDS = ['1234567890', 'qwertyuiop', 'qwertzuiop', 'asdfghjkl;', 'abcdefghij', '0987654321', '1q2w3e4r5t', '12345asdfg'];
  const DISALLOWED_PASSWORDS = ['ghost', 'password', 'passw0rd'];

  var _default = Ember.Mixin.create({
    /**
    * Counts repeated characters if a string. When 50% or more characters are the same,
    * we return false and therefore invalidate the string.
    * @param {String} stringToTest The password string to check.
    * @return {Boolean}
    */
    _characterOccurance(stringToTest) {
      let chars = {};
      let allowedOccurancy;
      let valid = true;
      allowedOccurancy = stringToTest.length / 2; // Loop through string and accumulate character counts

      for (let i = 0; i < stringToTest.length; i += 1) {
        if (!chars[stringToTest[i]]) {
          chars[stringToTest[i]] = 1;
        } else {
          chars[stringToTest[i]] += 1;
        }
      } // check if any of the accumulated chars exceed the allowed occurancy
      // of 50% of the words' length.


      for (let charCount in chars) {
        if (chars[charCount] >= allowedOccurancy) {
          valid = false;
          return valid;
        }
      }

      return valid;
    },

    passwordValidation(model, password, errorTarget) {
      let blogUrl = model.get('config.blogUrl') || window.location.host;
      let blogTitle = model.get('blogTitle') || model.get('config.blogTitle');
      let blogUrlWithSlash; // the password that needs to be validated can differ from the password in the
      // passed model, e. g. for password changes or reset.

      password = password || model.get('password');
      errorTarget = errorTarget || 'password';
      blogUrl = blogUrl.replace(/^http(s?):\/\//, '');
      blogUrlWithSlash = blogUrl.match(/\/$/) ? blogUrl : "".concat(blogUrl, "/");
      blogTitle = blogTitle ? blogTitle.trim().toLowerCase() : blogTitle; // password must be longer than 10 characters

      if (!_validator.default.isLength(password || '', 10)) {
        model.get('errors').add(errorTarget, 'Password must be at least 10 characters long');
        return this.invalidate();
      }

      password = password.toString(); // dissallow password from badPasswords list (e. g. '1234567890')

      BAD_PASSWORDS.map(badPassword => {
        if (badPassword === password) {
          model.get('errors').add(errorTarget, 'Sorry, you cannot use an insecure password');
          this.invalidate();
        }
      }); // password must not match with users' email

      if (password.toLowerCase() === model.get('email').toLowerCase()) {
        model.get('errors').add(errorTarget, 'Sorry, you cannot use an insecure password');
        this.invalidate();
      } // password must not contain the words 'ghost', 'password', or 'passw0rd'


      DISALLOWED_PASSWORDS.map(disallowedPassword => {
        if (password.toLowerCase().indexOf(disallowedPassword) >= 0) {
          model.get('errors').add(errorTarget, 'Sorry, you cannot use an insecure password');
          this.invalidate();
        }
      }); // password must not match with blog title

      if (password.toLowerCase() === blogTitle) {
        model.get('errors').add(errorTarget, 'Sorry, you cannot use an insecure password');
        this.invalidate();
      } // password must not match with blog URL (without protocol, with or without trailing slash)


      if (password.toLowerCase() === blogUrl || password.toLowerCase() === blogUrlWithSlash) {
        model.get('errors').add(errorTarget, 'Sorry, you cannot use an insecure password');
        this.invalidate();
      } // dissallow passwords where 50% or more of characters are the same


      if (!this._characterOccurance(password)) {
        model.get('errors').add(errorTarget, 'Sorry, you cannot use an insecure password');
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/nav-item", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['label', 'url'],

    label(model) {
      let label = model.get('label');
      let hasValidated = model.get('hasValidated');

      if (Ember.isBlank(label)) {
        model.get('errors').add('label', 'You must specify a label');
        this.invalidate();
      }

      hasValidated.addObject('label');
    },

    url(model) {
      let url = model.get('url');
      let hasValidated = model.get('hasValidated');
      /* eslint-disable camelcase */

      let validatorOptions = {
        require_protocol: true
      };
      /* eslint-enable camelcase */

      let urlRegex = new RegExp(/^(\/|#|[a-zA-Z0-9-]+:)/);

      if (Ember.isBlank(url)) {
        model.get('errors').add('url', 'You must specify a URL or relative path');
        this.invalidate();
      } else if (url.match(/\s/) || !_validator.default.isURL(url, validatorOptions) && !url.match(urlRegex)) {
        model.get('errors').add('url', 'You must specify a valid URL or relative path');
        this.invalidate();
      }

      hasValidated.addObject('url');
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/new-user", ["exports", "ghost-admin/validators/base", "ghost-admin/validators/mixins/password", "validator"], function (_exports, _base, _password, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.extend(_password.default, {
    init() {
      this.properties = this.properties || ['name', 'email', 'password'];

      this._super(...arguments);
    },

    name(model) {
      let name = model.get('name');

      if (!_validator.default.isLength(name || '', 1)) {
        model.get('errors').add('name', 'Please enter a name.');
        model.get('hasValidated').addObject('email');
        this.invalidate();
      }
    },

    email(model) {
      let email = model.get('email');

      if (Ember.isBlank(email)) {
        model.get('errors').add('email', 'Please enter an email.');
        this.invalidate();
      } else if (!_validator.default.isEmail(email)) {
        model.get('errors').add('email', 'Invalid Email.');
        this.invalidate();
      }

      model.get('hasValidated').addObject('email');
    },

    password(model) {
      this.passwordValidation(model);
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/post", ["exports", "ghost-admin/validators/base", "moment", "validator"], function (_exports, _base, _moment, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['title', 'authors', 'customExcerpt', 'canonicalUrl', 'codeinjectionHead', 'codeinjectionFoot', 'metaTitle', 'metaDescription', 'ogtitle', 'ogDescription', 'twitterTitle', 'twitterDescription', 'publishedAtBlogTime', 'publishedAtBlogDate', 'emailSubject'],

    title(model) {
      if (Ember.isBlank(model.title)) {
        model.errors.add('title', 'You must specify a title for the post.');
        this.invalidate();
      }

      if (!_validator.default.isLength(model.title || '', 0, 255)) {
        model.errors.add('title', 'Title cannot be longer than 255 characters.');
        this.invalidate();
      }
    },

    authors(model) {
      if (Ember.isEmpty(model.authors)) {
        model.errors.add('authors', 'At least one author is required.');
        this.invalidate();
      }
    },

    canonicalUrl(model) {
      let validatorOptions = {
        require_protocol: true
      };
      let urlRegex = new RegExp(/^(\/|[a-zA-Z0-9-]+:)/);
      let url = model.canonicalUrl;

      if (Ember.isBlank(url)) {
        return;
      }

      if (url.match(/\s/) || !_validator.default.isURL(url, validatorOptions) && !url.match(urlRegex)) {
        model.errors.add('canonicalUrl', 'Please enter a valid URL');
        this.invalidate();
      } else if (!_validator.default.isLength(model.canonicalUrl, 0, 2000)) {
        model.errors.add('canonicalUrl', 'Canonical URL is too long, max 2000 chars');
        this.invalidate();
      }
    },

    customExcerpt(model) {
      if (!_validator.default.isLength(model.customExcerpt || '', 0, 300)) {
        model.errors.add('customExcerpt', 'Excerpt cannot be longer than 300 characters.');
        this.invalidate();
      }
    },

    codeinjectionFoot(model) {
      if (!_validator.default.isLength(model.codeinjectionFoot || '', 0, 65535)) {
        model.errors.add('codeinjectionFoot', 'Footer code cannot be longer than 65535 characters.');
        this.invalidate();
      }
    },

    codeinjectionHead(model) {
      if (!_validator.default.isLength(model.codeinjectionHead || '', 0, 65535)) {
        model.errors.add('codeinjectionHead', 'Header code cannot be longer than 65535 characters.');
        this.invalidate();
      }
    },

    metaTitle(model) {
      if (!_validator.default.isLength(model.metaTitle || '', 0, 300)) {
        model.errors.add('metaTitle', 'Meta Title cannot be longer than 300 characters.');
        this.invalidate();
      }
    },

    metaDescription(model) {
      if (!_validator.default.isLength(model.metaDescription || '', 0, 500)) {
        model.errors.add('metaDescription', 'Meta Description cannot be longer than 500 characters.');
        this.invalidate();
      }
    },

    ogTitle(model) {
      if (!_validator.default.isLength(model.ogTitle || '', 0, 300)) {
        model.errors.add('ogTitle', 'Facebook Title cannot be longer than 300 characters.');
        this.invalidate();
      }
    },

    ogDescription(model) {
      if (!_validator.default.isLength(model.ogDescription || '', 0, 500)) {
        model.errors.add('ogDescription', 'Facebook Description cannot be longer than 500 characters.');
        this.invalidate();
      }
    },

    twitterTitle(model) {
      if (!_validator.default.isLength(model.twitterTitle || '', 0, 300)) {
        model.errors.add('twitterTitle', 'Twitter Title cannot be longer than 300 characters.');
        this.invalidate();
      }
    },

    twitterDescription(model) {
      if (!_validator.default.isLength(model.twitterDescription || '', 0, 500)) {
        model.errors.add('twitterDescription', 'Twitter Description cannot be longer than 500 characters.');
        this.invalidate();
      }
    },

    emailSubject(model) {
      if (!_validator.default.isLength(model.emailSubject || '', 0, 300)) {
        model.errors.add('emailSubject', 'Email Subject cannot be longer than 300 characters.');
        this.invalidate();
      }
    },

    // for posts which haven't been published before and where the blog date/time
    // is blank we should ignore the validation
    _shouldValidatePublishedAtBlog(model) {
      return Ember.isPresent(model.publishedAtUTC) || Ember.isPresent(model.publishedAtBlogDate) || Ember.isPresent(model.publishedAtBlogTime);
    },

    // convenience method as .validate({property: 'x'}) doesn't accept multiple properties
    publishedAtBlog(model) {
      this.publishedAtBlogTime(model);
      this.publishedAtBlogDate(model);
    },

    publishedAtBlogTime(model) {
      let timeRegex = /^(([0-1]?[0-9])|([2][0-3])):([0-5][0-9])$/;

      if (!timeRegex.test(model.publishedAtBlogTime) && this._shouldValidatePublishedAtBlog(model)) {
        model.errors.add('publishedAtBlogTime', 'Must be in format: "15:00"');
        this.invalidate();
      }
    },

    publishedAtBlogDate(model) {
      let publishedAtBlogDate = model.publishedAtBlogDate;
      let publishedAtBlogTime = model.publishedAtBlogTime;

      if (!this._shouldValidatePublishedAtBlog(model)) {
        return;
      } // we have a time string but no date string


      if (Ember.isBlank(publishedAtBlogDate) && !Ember.isBlank(publishedAtBlogTime)) {
        model.errors.add('publishedAtBlogDate', 'Can\'t be blank');
        return this.invalidate();
      } // don't validate the date if the time format is incorrect


      if (Ember.isEmpty(model.errors.errorsFor('publishedAtBlogTime'))) {
        let status = model.statusScratch || model.status;
        let now = (0, _moment.default)();
        let publishedAtUTC = model.publishedAtUTC;
        let publishedAtBlogTZ = model.publishedAtBlogTZ;
        let matchesExisting = publishedAtUTC && publishedAtBlogTZ.isSame(publishedAtUTC);
        let isInFuture = publishedAtBlogTZ.isSameOrAfter(now.add(2, 'minutes')); // draft/published must be in past

        if ((status === 'draft' || status === 'published') && publishedAtBlogTZ.isSameOrAfter(now)) {
          model.errors.add('publishedAtBlogDate', 'Must be in the past');
          this.invalidate(); // scheduled must be at least 2 mins in the future
          // ignore if it matches publishedAtUTC as that is likely an update of a scheduled post
        } else if (status === 'scheduled' && !matchesExisting && !isInFuture) {
          model.errors.add('publishedAtBlogDate', 'Must be at least 2 mins in the future');
          this.invalidate();
        }
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/reset", ["exports", "ghost-admin/validators/base", "ghost-admin/validators/mixins/password", "validator"], function (_exports, _base, _password, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const resetValidator = _base.default.extend(_password.default, {
    init() {
      this.properties = this.properties || ['newPassword'];

      this._super(...arguments);
    },

    newPassword(model) {
      let p1 = model.get('newPassword');
      let p2 = model.get('ne2Password');

      if (Ember.isBlank(p1)) {
        model.get('errors').add('newPassword', 'Please enter a password.');
        this.invalidate();
      } else if (!_validator.default.equals(p1, p2 || '')) {
        model.get('errors').add('ne2Password', 'The two new passwords don\'t match.');
        this.invalidate();
      }

      this.passwordValidation(model, p1, 'newPassword');
    }

  });

  var _default = resetValidator.create();

  _exports.default = _default;
});
;define("ghost-admin/validators/setting", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['title', 'description', 'password'],

    title(model) {
      let title = model.get('title');

      if (!_validator.default.isLength(title || '', 0, 150)) {
        model.get('errors').add('title', 'Title is too long');
        this.invalidate();
      }
    },

    description(model) {
      let desc = model.get('description');

      if (!_validator.default.isLength(desc || '', 0, 200)) {
        model.get('errors').add('description', 'Description is too long');
        this.invalidate();
      }
    },

    password(model) {
      let isPrivate = model.get('isPrivate');
      let password = model.get('password');

      if (isPrivate && password === '') {
        model.get('errors').add('password', 'Password must be supplied');
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/setup", ["exports", "ghost-admin/validators/new-user", "validator"], function (_exports, _newUser, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _newUser.default.create({
    properties: ['name', 'email', 'password', 'blogTitle'],

    blogTitle(model) {
      let blogTitle = model.get('blogTitle');

      if (!_validator.default.isLength(blogTitle || '', 1)) {
        model.get('errors').add('blogTitle', 'Please enter a blog title.');
        this.invalidate();
      }

      if (!_validator.default.isLength(blogTitle || '', 0, 150)) {
        model.get('errors').add('blogTitle', 'Title is too long');
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/signin", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['identification', 'signin', 'forgotPassword'],
    invalidMessage: 'Email address is not valid',

    identification(model) {
      let id = model.get('identification');

      if (!Ember.isBlank(id) && !_validator.default.isEmail(id)) {
        model.get('errors').add('identification', this.invalidMessage);
        this.invalidate();
      }
    },

    signin(model) {
      let id = model.get('identification');
      let password = model.get('password');
      model.get('errors').clear();

      if (Ember.isBlank(id)) {
        model.get('errors').add('identification', 'Please enter an email');
        this.invalidate();
      }

      if (!Ember.isBlank(id) && !_validator.default.isEmail(id)) {
        model.get('errors').add('identification', this.invalidMessage);
        this.invalidate();
      }

      if (Ember.isBlank(password)) {
        model.get('errors').add('password', 'Please enter a password');
        this.invalidate();
      }
    },

    forgotPassword(model) {
      let id = model.get('identification');
      model.get('errors').clear();

      if (Ember.isBlank(id) || !_validator.default.isEmail(id)) {
        model.get('errors').add('identification', this.invalidMessage);
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/signup", ["exports", "ghost-admin/validators/new-user"], function (_exports, _newUser) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _newUser.default.create();

  _exports.default = _default;
});
;define("ghost-admin/validators/slack-integration", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['url'],

    url(model) {
      let url = model.get('url');
      let hasValidated = model.get('hasValidated'); // eslint-disable-next-line camelcase

      if (!Ember.isBlank(url) && !_validator.default.isURL(url, {
        require_protocol: true
      })) {
        model.get('errors').add('url', 'The URL must be in a format like https://hooks.slack.com/services/<your personal key>');
        this.invalidate();
      }

      hasValidated.addObject('url');
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/subscriber", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['email'],

    email(model) {
      let email = model.get('email');

      if (Ember.isBlank(email)) {
        model.get('errors').add('email', 'Please enter an email.');
        model.get('hasValidated').pushObject('email');
        this.invalidate();
      } else if (!_validator.default.isEmail(email)) {
        model.get('errors').add('email', 'Invalid email.');
        model.get('hasValidated').pushObject('email');
        this.invalidate();
      } else if (!_validator.default.isLength(email, 0, 191)) {
        model.get('errors').add('email', 'Email is too long');
        model.get('hasValidated').pushObject('email');
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/tag-settings", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['name', 'slug', 'description', 'metaTitle', 'metaDescription'],

    name(model) {
      let name = model.get('name');

      if (Ember.isBlank(name)) {
        model.get('errors').add('name', 'You must specify a name for the tag.');
        this.invalidate();
      } else if (name.match(/^,/)) {
        model.get('errors').add('name', 'Tag names can\'t start with commas.');
        this.invalidate();
      } else if (!_validator.default.isLength(name, 0, 191)) {
        model.get('errors').add('name', 'Tag names cannot be longer than 191 characters.');
        this.invalidate();
      }
    },

    slug(model) {
      let slug = model.get('slug');

      if (!_validator.default.isLength(slug || '', 0, 191)) {
        model.get('errors').add('slug', 'URL cannot be longer than 191 characters.');
        this.invalidate();
      }
    },

    description(model) {
      let description = model.get('description');

      if (!_validator.default.isLength(description || '', 0, 500)) {
        model.get('errors').add('description', 'Description cannot be longer than 500 characters.');
        this.invalidate();
      }
    },

    metaTitle(model) {
      let metaTitle = model.get('metaTitle');

      if (!_validator.default.isLength(metaTitle || '', 0, 300)) {
        model.get('errors').add('metaTitle', 'Meta Title cannot be longer than 300 characters.');
        this.invalidate();
      }
    },

    metaDescription(model) {
      let metaDescription = model.get('metaDescription');

      if (!_validator.default.isLength(metaDescription || '', 0, 500)) {
        model.get('errors').add('metaDescription', 'Meta Description cannot be longer than 500 characters.');
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/validators/user", ["exports", "ghost-admin/validators/base", "ghost-admin/validators/mixins/password", "validator"], function (_exports, _base, _password, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const userValidator = _base.default.extend(_password.default, {
    init() {
      this.properties = this.properties || ['name', 'bio', 'email', 'location', 'website', 'roles'];

      this._super(...arguments);
    },

    isActive(model) {
      return model.get('status') === 'active';
    },

    name(model) {
      let name = model.get('name');

      if (this.isActive(model)) {
        if (Ember.isBlank(name)) {
          model.get('errors').add('name', 'Please enter a name.');
          this.invalidate();
        } else if (!_validator.default.isLength(name, 0, 191)) {
          model.get('errors').add('name', 'Name is too long');
          this.invalidate();
        }
      }
    },

    bio(model) {
      let bio = model.get('bio');

      if (this.isActive(model)) {
        if (!_validator.default.isLength(bio || '', 0, 200)) {
          model.get('errors').add('bio', 'Bio is too long');
          this.invalidate();
        }
      }
    },

    email(model) {
      let email = model.get('email');

      if (!_validator.default.isEmail(email || '')) {
        model.get('errors').add('email', 'Please supply a valid email address');
        this.invalidate();
      }

      if (!_validator.default.isLength(email || '', 0, 191)) {
        model.get('errors').add('email', 'Email is too long');
        this.invalidate();
      }
    },

    location(model) {
      let location = model.get('location');

      if (this.isActive(model)) {
        if (!_validator.default.isLength(location || '', 0, 150)) {
          model.get('errors').add('location', 'Location is too long');
          this.invalidate();
        }
      }
    },

    website(model) {
      let website = model.get('website'); // eslint-disable-next-line camelcase

      let isInvalidWebsite = !_validator.default.isURL(website || '', {
        require_protocol: false
      }) || !_validator.default.isLength(website || '', 0, 2000);

      if (this.isActive(model)) {
        if (!Ember.isBlank(website) && isInvalidWebsite) {
          model.get('errors').add('website', 'Website is not a valid url');
          this.invalidate();
        }
      }
    },

    roles(model) {
      if (!this.isActive(model)) {
        let roles = model.get('roles');

        if (roles.length < 1) {
          model.get('errors').add('role', 'Please select a role');
          this.invalidate();
        }
      }
    },

    passwordChange(model) {
      let newPassword = model.get('newPassword');
      let ne2Password = model.get('ne2Password'); // validation only marks the requested property as validated so we
      // have to add properties manually

      model.get('hasValidated').addObject('newPassword');
      model.get('hasValidated').addObject('ne2Password');

      if (Ember.isBlank(newPassword) && Ember.isBlank(ne2Password)) {
        model.get('errors').add('newPassword', 'Sorry, passwords can\'t be blank');
        this.invalidate();
      } else {
        if (!_validator.default.equals(newPassword, ne2Password || '')) {
          model.get('errors').add('ne2Password', 'Your new passwords do not match');
          this.invalidate();
        }

        this.passwordValidation(model, newPassword, 'newPassword');
      }
    },

    ownPasswordChange(model) {
      let oldPassword = model.get('password');
      this.passwordChange(model); // validation only marks the requested property as validated so we
      // have to add properties manually

      model.get('hasValidated').addObject('password');

      if (Ember.isBlank(oldPassword)) {
        model.get('errors').add('password', 'Your current password is required to set a new one');
        this.invalidate();
      }
    }

  });

  var _default = userValidator.create();

  _exports.default = _default;
});
;define("ghost-admin/validators/webhook", ["exports", "ghost-admin/validators/base", "validator"], function (_exports, _base, _validator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = _base.default.create({
    properties: ['name', 'event', 'targetUrl'],

    name(model) {
      if (Ember.isBlank(model.name)) {
        model.errors.add('name', 'Please enter a name');
        model.hasValidated.pushObject('name');
        this.invalidate();
      } else if (!_validator.default.isLength(model.name, 0, 191)) {
        model.errors.add('name', 'Name is too long, max 191 chars');
        model.hasValidated.pushObject('name');
        this.invalidate();
      }
    },

    event(model) {
      if (Ember.isBlank(model.event)) {
        model.errors.add('event', 'Please select an event');
        model.hasValidated.pushObject('event');
        this.invalidate();
      }
    },

    targetUrl(model) {
      if (Ember.isBlank(model.targetUrl)) {
        model.errors.add('targetUrl', 'Please enter a target URL');
      } else if (!_validator.default.isURL(model.targetUrl || '', {
        require_protocol: false
      })) {
        model.errors.add('targetUrl', 'Please enter a valid URL');
      } else if (!_validator.default.isLength(model.targetUrl, 0, 2000)) {
        model.errors.add('targetUrl', 'Target URL is too long, max 2000 chars');
      }

      model.hasValidated.pushObject('targetUrl');

      if (model.errors.has('targetUrl')) {
        this.invalidate();
      }
    }

  });

  _exports.default = _default;
});
;define("ghost-admin/views/application", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var _default = Ember.Component.extend({});

  _exports.default = _default;
});
;

;define('ghost-admin/config/environment', [], function() {
  var prefix = 'ghost-admin';
try {
  var metaName = prefix + '/config/environment';
  var rawConfig = document.querySelector('meta[name="' + metaName + '"]').getAttribute('content');
  var config = JSON.parse(decodeURIComponent(rawConfig));

  var exports = { 'default': config };

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

});

;
          if (!runningTests) {
            require("ghost-admin/app")["default"].create({"version":"3.13","LOG_ACTIVE_GENERATION":true,"LOG_TRANSITIONS":true,"LOG_TRANSITIONS_INTERNAL":true,"LOG_VIEW_LOOKUPS":true,"name":"ghost-admin"});
          }
        
//# sourceMappingURL=ghost.map
